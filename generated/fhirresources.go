package generated

import (
	"fmt"
	uuid "github.com/google/uuid"
	go1 "github.com/json-iterator/go"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	"net/url"
	"time"
)

func (out *Resource) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Resource\"" {
		return fmt.Errorf("resourceType is not %s", "Resource")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	return nil
}

type Resource struct {
	Id            *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`         // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta          Meta                `bson:",omitempty" json:"meta,omitempty"`          // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules string              `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language      string              `bson:",omitempty" json:"language,omitempty"`      // The base language in which the resource is written.
	ResourceType  string              `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *Account) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Account\"" {
		return fmt.Errorf("resourceType is not %s", "Account")
	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["billingStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["billingStatus"], &out.BillingStatus); err != nil {
			return err
		}

	}
	if len(asMap["currency"]) > 0 {
		if err := go1.Unmarshal(asMap["currency"], &out.Currency); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["servicePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["servicePeriod"], &out.ServicePeriod); err != nil {
			return err
		}

	}
	if len(asMap["guarantor"]) > 0 {
		if err := go1.Unmarshal(asMap["guarantor"], &out.Guarantor); err != nil {
			return err
		}

	}
	if len(asMap["balance"]) > 0 {
		if err := go1.Unmarshal(asMap["balance"], &out.Balance); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["coverage"]) > 0 {
		if err := go1.Unmarshal(asMap["coverage"], &out.Coverage); err != nil {
			return err
		}

	}
	if len(asMap["owner"]) > 0 {
		if err := go1.Unmarshal(asMap["owner"], &out.Owner); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["relatedAccount"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedAccount"], &out.RelatedAccount); err != nil {
			return err
		}

	}
	if len(asMap["calculatedAt"]) > 0 {
		if err := go1.Unmarshal(asMap["calculatedAt"], &out.CalculatedAt); err != nil {
			return err
		}

	}
	if len(asMap["diagnosis"]) > 0 {
		if err := go1.Unmarshal(asMap["diagnosis"], &out.Diagnosis); err != nil {
			return err
		}

	}
	if len(asMap["procedure"]) > 0 {
		if err := go1.Unmarshal(asMap["procedure"], &out.Procedure); err != nil {
			return err
		}

	}
	return nil
}

type Account struct {
	Type              *CodeableConcept    `bson:",omitempty" json:"type,omitempty"`                      // Categorizes the account for reporting and searching purposes.
	Description       string              `bson:",omitempty" json:"description,omitempty"`               // Provides additional information about what the account tracks and how it is used.
	Meta              *Meta               `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Status            *string             `binding:"required" bson:",omitempty" json:"status,omitempty"` // Indicates whether the account is presently used/usable or not.
	BillingStatus     CodeableConcept     `bson:",omitempty" json:"billingStatus,omitempty"`             // The BillingStatus tracks the lifecycle of the account through the billing process. It indicates how transactions are treated when they are allocated to the account.
	Currency          *CodeableConcept    `bson:",omitempty" json:"currency,omitempty"`                  // The default currency for the account.
	ImplicitRules     *string             `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained         []*Resource         `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ServicePeriod     Period              `bson:",omitempty" json:"servicePeriod,omitempty"`             // The date range of services associated with this account.
	Guarantor         *AccountGuarantor   `binding:"omitempty" bson:",omitempty"`
	Balance           *AccountBalance     `binding:"omitempty" bson:",omitempty"`
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Name              string              `bson:",omitempty" json:"name,omitempty"`              // Name used for the account when displaying it to humans in reports, etc.
	Extension         []Extension         `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier     []Identifier           `bson:",omitempty" json:"identifier,omitempty"` // Unique identifier used to reference the account.  Might or might not be intended for human use (e.g. credit card number).
	Subject        []Reference            `bson:",omitempty" json:"subject,omitempty"`    // Identifies the entity which incurs the expenses. While the immediate recipients of services or goods might be entities related to the subject, the expenses were ultimately incurred by the subject of the Account.
	Coverage       *AccountCoverage       `binding:"omitempty" bson:",omitempty"`
	Owner          *Reference             `bson:",omitempty" json:"owner,omitempty"`    // Indicates the service area, hospital, department, etc. with responsibility for managing the Account.
	Language       *string                `bson:",omitempty" json:"language,omitempty"` // The base language in which the resource is written.
	Text           Narrative              `bson:",omitempty" json:"text,omitempty"`     // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	RelatedAccount *AccountRelatedAccount `binding:"omitempty" bson:",omitempty"`
	CalculatedAt   time.Time              `bson:",omitempty" json:"calculatedAt,omitempty"` // Time the balance amount was calculated.
	Diagnosis      *AccountDiagnosis      `binding:"omitempty" bson:",omitempty"`
	Procedure      *AccountProcedure      `binding:"omitempty" bson:",omitempty"`
	ResourceType   string                 `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *AccountGuarantor) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["party"], &out.Party); err != nil {
		return err
	}

	if len(asMap["onHold"]) > 0 {
		if err := go1.Unmarshal(asMap["onHold"], &out.OnHold); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type AccountGuarantor struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Party     *Reference   `binding:"required" bson:",omitempty" json:"party,omitempty"` // The entity who is responsible.
	OnHold    bool         `bson:",omitempty" json:"onHold,omitempty"`                   // A guarantor may be placed on credit hold or otherwise have their role temporarily suspended.
	Period    *Period      `bson:",omitempty" json:"period,omitempty"`                   // The timeframe during which the guarantor accepts responsibility for the account.
	Id        *string      `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"`                // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *AccountBalance) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["term"]) > 0 {
		if err := go1.Unmarshal(asMap["term"], &out.Term); err != nil {
			return err
		}

	}
	if len(asMap["estimate"]) > 0 {
		if err := go1.Unmarshal(asMap["estimate"], &out.Estimate); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["aggregate"]) > 0 {
		if err := go1.Unmarshal(asMap["aggregate"], &out.Aggregate); err != nil {
			return err
		}

	}
	return nil
}

type AccountBalance struct {
	Term              *CodeableConcept `bson:",omitempty" json:"term,omitempty"`                      // The term of the account balances - The balance value is the amount that was outstanding for this age.
	Estimate          *bool            `bson:",omitempty" json:"estimate,omitempty"`                  // The amount is only an estimated value - this is likely common for `current` term balances, but not with known terms (that were generated by a backend process).
	Amount            Money            `binding:"required" bson:",omitempty" json:"amount,omitempty"` // The actual balance value calculated for the age defined in the term property.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`                     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Aggregate *CodeableConcept `bson:",omitempty" json:"aggregate,omitempty"` // Who is expected to pay this part of the balance.
}

func (out *AccountCoverage) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["coverage"], &out.Coverage); err != nil {
		return err
	}

	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	return nil
}

type AccountCoverage struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Coverage *Reference `binding:"required" bson:",omitempty" json:"coverage,omitempty"` /*
	The party(s) that contribute to payment (or part of) of the charges applied to this account (including self-pay).

	A coverage may only be responsible for specific types of charges, and the sequence of the coverages in the account could be important when processing billing.
	*/
	Priority int `bson:",omitempty" json:"priority,omitempty"` // The priority of the coverage in the context of this account.
}

func (out *AccountRelatedAccount) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["relationship"]) > 0 {
		if err := go1.Unmarshal(asMap["relationship"], &out.Relationship); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["account"], &out.Account); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type AccountRelatedAccount struct {
	Relationship      *CodeableConcept `bson:",omitempty" json:"relationship,omitempty"`               // Relationship of the associated Account.
	Account           *Reference       `binding:"required" bson:",omitempty" json:"account,omitempty"` // Reference to an associated Account.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`                      // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`                  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`          /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *AccountDiagnosis) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["sequence"]) > 0 {
		if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["condition"], &out.Condition); err != nil {
		return err
	}

	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["dateOfDiagnosis"]) > 0 {
		if err := go1.Unmarshal(asMap["dateOfDiagnosis"], &out.DateOfDiagnosis); err != nil {
			return err
		}

	}
	if len(asMap["onAdmission"]) > 0 {
		if err := go1.Unmarshal(asMap["onAdmission"], &out.OnAdmission); err != nil {
			return err
		}

	}
	if len(asMap["packageCode"]) > 0 {
		if err := go1.Unmarshal(asMap["packageCode"], &out.PackageCode); err != nil {
			return err
		}

	}
	return nil
}

type AccountDiagnosis struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Sequence        *int               `bson:",omitempty" json:"sequence,omitempty"`                     // Ranking of the diagnosis (for each type).
	Condition       CodeableReference  `binding:"required" bson:",omitempty" json:"condition,omitempty"` // The diagnosis relevant to the account.
	Type            []*CodeableConcept `bson:",omitempty" json:"type,omitempty"`                         // Type that this diagnosis has relevant to the account (e.g. admission, billing, discharge …).
	Extension       []*Extension       `bson:",omitempty" json:"extension,omitempty"`                    // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	DateOfDiagnosis DateTime           `bson:",omitempty" json:"dateOfDiagnosis,omitempty"`              // Ranking of the diagnosis (for each type).
	OnAdmission     *bool              `bson:",omitempty" json:"onAdmission,omitempty"`                  // Was the Diagnosis present on Admission in the related Encounter.
	PackageCode     []*CodeableConcept `bson:",omitempty" json:"packageCode,omitempty"`                  // The package code can be used to group diagnoses that may be priced or delivered as a single product. Such as DRGs.
}

func (out *AccountProcedure) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["packageCode"]) > 0 {
		if err := go1.Unmarshal(asMap["packageCode"], &out.PackageCode); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["sequence"]) > 0 {
		if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["dateOfService"]) > 0 {
		if err := go1.Unmarshal(asMap["dateOfService"], &out.DateOfService); err != nil {
			return err
		}

	}
	if len(asMap["device"]) > 0 {
		if err := go1.Unmarshal(asMap["device"], &out.Device); err != nil {
			return err
		}

	}
	return nil
}

type AccountProcedure struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type          []*CodeableConcept `bson:",omitempty" json:"type,omitempty"`                    // How this procedure value should be used in charging the account.
	PackageCode   []*CodeableConcept `bson:",omitempty" json:"packageCode,omitempty"`             // The package code can be used to group procedures that may be priced or delivered as a single product. Such as DRGs.
	Id            *string            `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Sequence      *int               `bson:",omitempty" json:"sequence,omitempty"`                // Ranking of the procedure (for each type).
	Code          *CodeableReference `binding:"required" bson:",omitempty" json:"code,omitempty"` // The procedure relevant to the account.
	DateOfService *DateTime          `bson:",omitempty" json:"dateOfService,omitempty"`           // Date of the procedure when using a coded procedure. If using a reference to a procedure, then the date on the procedure should be used.
	Device        []*Reference       `bson:",omitempty" json:"device,omitempty"`                  // Any devices that were associated with the procedure relevant to the account.
}

func (out *ActivityDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ActivityDefinition\"" {
		return fmt.Errorf("resourceType is not %s", "ActivityDefinition")
	}
	if len(asMap["subtitle"]) > 0 {
		if err := go1.Unmarshal(asMap["subtitle"], &out.Subtitle); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subjectCodeableConcept"], &out.SubjectCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["subjectReference"], &out.SubjectReference); err == nil {
	} else if err := go1.Unmarshal(asMap["subjectCanonical"], &out.SubjectCanonical); err == nil {
	} else {

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["reviewer"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewer"], &out.Reviewer); err != nil {
			return err
		}

	}
	if len(asMap["kind"]) > 0 {
		if err := go1.Unmarshal(asMap["kind"], &out.Kind); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["usage"]) > 0 {
		if err := go1.Unmarshal(asMap["usage"], &out.Usage); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["effectivePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err != nil {
			return err
		}

	}
	if len(asMap["bodySite"]) > 0 {
		if err := go1.Unmarshal(asMap["bodySite"], &out.BodySite); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["asNeededBoolean"], &out.AsNeededBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["asNeededCodeableConcept"], &out.AsNeededCodeableConcept); err == nil {
	} else {

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["productReference"], &out.ProductReference); err == nil {
	} else if err := go1.Unmarshal(asMap["productCodeableConcept"], &out.ProductCodeableConcept); err == nil {
	} else {

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["lastReviewDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastReviewDate"], &out.LastReviewDate); err != nil {
			return err
		}

	}
	if len(asMap["participant"]) > 0 {
		if err := go1.Unmarshal(asMap["participant"], &out.Participant); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["approvalDate"]) > 0 {
		if err := go1.Unmarshal(asMap["approvalDate"], &out.ApprovalDate); err != nil {
			return err
		}

	}
	if len(asMap["relatedArtifact"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedArtifact"], &out.RelatedArtifact); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["dosage"]) > 0 {
		if err := go1.Unmarshal(asMap["dosage"], &out.Dosage); err != nil {
			return err
		}

	}
	if len(asMap["specimenRequirement"]) > 0 {
		if err := go1.Unmarshal(asMap["specimenRequirement"], &out.SpecimenRequirement); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["profile"]) > 0 {
		if err := go1.Unmarshal(asMap["profile"], &out.Profile); err != nil {
			return err
		}

	}
	if len(asMap["observationResultRequirement"]) > 0 {
		if err := go1.Unmarshal(asMap["observationResultRequirement"], &out.ObservationResultRequirement); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["topic"]) > 0 {
		if err := go1.Unmarshal(asMap["topic"], &out.Topic); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["timingTiming"], &out.TimingTiming); err == nil {
	} else if err := go1.Unmarshal(asMap["timingAge"], &out.TimingAge); err == nil {
	} else if err := go1.Unmarshal(asMap["timingRange"], &out.TimingRange); err == nil {
	} else if err := go1.Unmarshal(asMap["timingDuration"], &out.TimingDuration); err == nil {
	} else {

	}
	if len(asMap["transform"]) > 0 {
		if err := go1.Unmarshal(asMap["transform"], &out.Transform); err != nil {
			return err
		}

	}
	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	if len(asMap["doNotPerform"]) > 0 {
		if err := go1.Unmarshal(asMap["doNotPerform"], &out.DoNotPerform); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["intent"]) > 0 {
		if err := go1.Unmarshal(asMap["intent"], &out.Intent); err != nil {
			return err
		}

	}
	if len(asMap["observationRequirement"]) > 0 {
		if err := go1.Unmarshal(asMap["observationRequirement"], &out.ObservationRequirement); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["endorser"]) > 0 {
		if err := go1.Unmarshal(asMap["endorser"], &out.Endorser); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["editor"]) > 0 {
		if err := go1.Unmarshal(asMap["editor"], &out.Editor); err != nil {
			return err
		}

	}
	if len(asMap["library"]) > 0 {
		if err := go1.Unmarshal(asMap["library"], &out.Library); err != nil {
			return err
		}

	}
	if len(asMap["dynamicValue"]) > 0 {
		if err := go1.Unmarshal(asMap["dynamicValue"], &out.DynamicValue); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	return nil
}

type ActivityDefinition struct {
	Subtitle *string `bson:",omitempty" json:"subtitle,omitempty"` // An explanatory or alternate title for the activity definition giving additional information about its content.
	ActivityDefinitionSubjectx
	Contact         []ContactDetail    `bson:",omitempty" json:"contact,omitempty"`                   // Contact details to assist a user in finding and communicating with the publisher.
	UseContext      []UsageContext     `bson:",omitempty" json:"useContext,omitempty"`                // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate activity definition instances.
	Reviewer        []*ContactDetail   `bson:",omitempty" json:"reviewer,omitempty"`                  // An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.
	Kind            *string            `bson:",omitempty" json:"kind,omitempty"`                      // A description of the kind of resource the activity definition is representing. For example, a MedicationRequest, a ServiceRequest, or a CommunicationRequest.
	Language        *string            `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Usage           *string            `bson:",omitempty" json:"usage,omitempty"`                     // A detailed description of how the activity definition is used from a clinical perspective.
	Jurisdiction    []*CodeableConcept `bson:",omitempty" json:"jurisdiction,omitempty"`              // A legal or geographic region in which the activity definition is intended to be used.
	Copyright       *string            `bson:",omitempty" json:"copyright,omitempty"`                 // A copyright statement relating to the activity definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the activity definition.
	EffectivePeriod *Period            `bson:",omitempty" json:"effectivePeriod,omitempty"`           // The period during which the activity definition content was or is planned to be in active use.
	BodySite        []*CodeableConcept `bson:",omitempty" json:"bodySite,omitempty"`                  // Indicates the sites on the subject's body where the procedure should be performed (I.e. the target sites).
	Status          *string            `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this activity definition. Enables tracking the life-cycle of the content.
	Author          []*ContactDetail   `bson:",omitempty" json:"author,omitempty"`                    // An individiual or organization primarily involved in the creation and maintenance of the content.
	Code            *CodeableConcept   `bson:",omitempty" json:"code,omitempty"`                      // Detailed description of the type of activity; e.g. What lab test, what procedure, what kind of encounter.
	ActivityDefinitionAsNeededx
	Version   *string     `bson:",omitempty" json:"version,omitempty"`   // The identifier that is used to identify this version of the activity definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the activity definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active assets.
	Publisher *string     `bson:",omitempty" json:"publisher,omitempty"` // The name of the organization or individual responsible for the release and ongoing maintenance of the activity definition.
	Contained []*Resource `bson:",omitempty" json:"contained,omitempty"` // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Text      *Narrative  `bson:",omitempty" json:"text,omitempty"`      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ActivityDefinitionProductx
	Meta                         *Meta                          `bson:",omitempty" json:"meta,omitempty"`           // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	LastReviewDate               *Date                          `bson:",omitempty" json:"lastReviewDate,omitempty"` // The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
	Participant                  *ActivityDefinitionParticipant `binding:"omitempty" bson:",omitempty"`
	Title                        *string                        `bson:",omitempty" json:"title,omitempty"`                        // A short, descriptive, user-friendly title for the activity definition.
	ApprovalDate                 Date                           `bson:",omitempty" json:"approvalDate,omitempty"`                 // The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
	RelatedArtifact              []RelatedArtifact              `bson:",omitempty" json:"relatedArtifact,omitempty"`              // Related artifacts such as additional documentation, justification, or bibliographic references.
	Quantity                     Quantity                       `bson:",omitempty" json:"quantity,omitempty"`                     // Identifies the quantity expected to be consumed at once (per dose, per meal, etc.).
	Description                  *string                        `bson:",omitempty" json:"description,omitempty"`                  // A free text natural language description of the activity definition from a consumer's perspective.
	Dosage                       []Dosage                       `bson:",omitempty" json:"dosage,omitempty"`                       // Provides detailed dosage instructions in the same way that they are described for MedicationRequest resources.
	SpecimenRequirement          []*string                      `bson:",omitempty" json:"specimenRequirement,omitempty"`          // Defines specimen requirements for the action to be performed, such as required specimens for a lab test.
	Name                         *string                        `bson:",omitempty" json:"name,omitempty"`                         // A natural language name identifying the activity definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Url                          *string                        `bson:",omitempty" json:"url,omitempty"`                          // An absolute URI that is used to identify this activity definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this activity definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the activity definition is stored on different servers.
	Date                         *DateTime                      `bson:",omitempty" json:"date,omitempty"`                         // The date  (and optionally time) when the activity definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the activity definition changes.
	Profile                      *string                        `bson:",omitempty" json:"profile,omitempty"`                      // A profile to which the target of the activity definition is expected to conform.
	ObservationResultRequirement []*string                      `bson:",omitempty" json:"observationResultRequirement,omitempty"` // Defines the observations that are expected to be produced by the action.
	Extension                    []*Extension                   `bson:",omitempty" json:"extension,omitempty"`                    // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Experimental                 *bool                          `bson:",omitempty" json:"experimental,omitempty"`                 // A Boolean value to indicate that this activity definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	CopyrightLabel               *string                        `bson:",omitempty" json:"copyrightLabel,omitempty"`               // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Topic                        []*CodeableConcept             `bson:",omitempty" json:"topic,omitempty"`                        // Descriptive topics related to the content of the activity. Topics provide a high-level categorization of the activity that can be useful for filtering and searching.
	Id                           *primitive.ObjectID            `bson:"_id,omitempty" json:"id,omitempty"`                        // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ActivityDefinitionTimingx
	Transform         *string      `bson:",omitempty" json:"transform,omitempty"`         // A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
	Priority          *string      `bson:",omitempty" json:"priority,omitempty"`          // Indicates how quickly the activity  should be addressed with respect to other requests.
	DoNotPerform      *bool        `bson:",omitempty" json:"doNotPerform,omitempty"`      // Set this to true if the definition is to indicate that a particular activity should NOT be performed. If true, this element should be interpreted to reinforce a negative coding. For example NPO as a code with a doNotPerform of true would still indicate to NOT perform the action.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Intent                 *string            `bson:",omitempty" json:"intent,omitempty"`                 // Indicates the level of authority/intentionality associated with the activity and where the request should fit into the workflow chain.
	ObservationRequirement []*string          `bson:",omitempty" json:"observationRequirement,omitempty"` // Defines observation requirements for the action to be performed, such as body weight or surface area.
	Purpose                *string            `bson:",omitempty" json:"purpose,omitempty"`                // Explanation of why this activity definition is needed and why it has been designed as it has.
	Location               *CodeableReference `bson:",omitempty" json:"location,omitempty"`               // Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.
	Endorser               []*ContactDetail   `bson:",omitempty" json:"endorser,omitempty"`               // An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.
	Identifier             []*Identifier      `bson:",omitempty" json:"identifier,omitempty"`             // A formal identifier that is used to identify this activity definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
	ActivityDefinitionVersionAlgorithmx
	Editor        []*ContactDetail                `bson:",omitempty" json:"editor,omitempty"`  // An individual or organization primarily responsible for internal coherence of the content.
	Library       []*string                       `bson:",omitempty" json:"library,omitempty"` // A reference to a Library resource containing any formal logic used by the activity definition.
	DynamicValue  *ActivityDefinitionDynamicValue `binding:"omitempty" bson:",omitempty"`
	ImplicitRules *string                         `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ResourceType  string                          `binding:"omitempty" bson:"-" json:"resourceType"`
}
type ActivityDefinitionSubjectx struct {
	SubjectCodeableConcept CodeableConcept `bson:",omitempty" json:"subjectCodeableConcept,omitempty"`
	SubjectReference       Reference       `bson:",omitempty" json:"subjectReference,omitempty"`
	SubjectCanonical       string          `bson:",omitempty" json:"subjectCanonical,omitempty"`
}
type ActivityDefinitionAsNeededx struct {
	AsNeededBoolean         bool            `bson:",omitempty" json:"asNeededBoolean,omitempty"`
	AsNeededCodeableConcept CodeableConcept `bson:",omitempty" json:"asNeededCodeableConcept,omitempty"`
}
type ActivityDefinitionProductx struct {
	ProductReference       Reference       `bson:",omitempty" json:"productReference,omitempty"`
	ProductCodeableConcept CodeableConcept `bson:",omitempty" json:"productCodeableConcept,omitempty"`
}

func (out *ActivityDefinitionParticipant) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["typeCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["typeCanonical"], &out.TypeCanonical); err != nil {
			return err
		}

	}
	if len(asMap["typeReference"]) > 0 {
		if err := go1.Unmarshal(asMap["typeReference"], &out.TypeReference); err != nil {
			return err
		}

	}
	if len(asMap["role"]) > 0 {
		if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
			return err
		}

	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type ActivityDefinitionParticipant struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type          *string          `bson:",omitempty" json:"type,omitempty"`          // The type of participant in the action.
	TypeCanonical *string          `bson:",omitempty" json:"typeCanonical,omitempty"` // The type of participant in the action.
	TypeReference *Reference       `bson:",omitempty" json:"typeReference,omitempty"` // The type of participant in the action.
	Role          *CodeableConcept `bson:",omitempty" json:"role,omitempty"`          // The role the participant should play in performing the described action.
	Function      *CodeableConcept `bson:",omitempty" json:"function,omitempty"`      // Indicates how the actor will be involved in the action - author, reviewer, witness, etc.
	Id            *string          `bson:"_id,omitempty" json:"id,omitempty"`         // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension     []*Extension     `bson:",omitempty" json:"extension,omitempty"`     // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}
type ActivityDefinitionTimingx struct {
	TimingTiming   Timing   `bson:",omitempty" json:"timingTiming,omitempty"`
	TimingAge      Age      `bson:",omitempty" json:"timingAge,omitempty"`
	TimingRange    Range    `bson:",omitempty" json:"timingRange,omitempty"`
	TimingDuration Duration `bson:",omitempty" json:"timingDuration,omitempty"`
}
type ActivityDefinitionVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *ActivityDefinitionDynamicValue) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["path"], &out.Path); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["expression"], &out.Expression); err != nil {
		return err
	}

	return nil
}

type ActivityDefinitionDynamicValue struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Path       *string    `binding:"required" bson:",omitempty" json:"path,omitempty"`       // The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolvable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
	Expression Expression `binding:"required" bson:",omitempty" json:"expression,omitempty"` // An expression specifying the value of the customized element.
}

func (out *ActorDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ActorDefinition\"" {
		return fmt.Errorf("resourceType is not %s", "ActorDefinition")
	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["documentation"]) > 0 {
		if err := go1.Unmarshal(asMap["documentation"], &out.Documentation); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["derivedFrom"]) > 0 {
		if err := go1.Unmarshal(asMap["derivedFrom"], &out.DerivedFrom); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["reference"]) > 0 {
		if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["capabilities"]) > 0 {
		if err := go1.Unmarshal(asMap["capabilities"], &out.Capabilities); err != nil {
			return err
		}

	}
	return nil
}

type ActorDefinition struct {
	Type          *string             `binding:"required" bson:",omitempty" json:"type,omitempty"` // Whether the actor represents a human or an appliction.
	Documentation *string             `bson:",omitempty" json:"documentation,omitempty"`           // Documentation about the functionality of the actor.
	Id            *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                   // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language      *string             `bson:",omitempty" json:"language,omitempty"`                // The base language in which the resource is written.
	Extension     []*Extension        `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Url           *string             `bson:",omitempty" json:"url,omitempty"`                     // An absolute URI that is used to identify this actor definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this actor definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the actor definition is stored on different servers.
	Version       *string             `bson:",omitempty" json:"version,omitempty"`                 // The identifier that is used to identify this version of the actor definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the actor definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Copyright     *string             `bson:",omitempty" json:"copyright,omitempty"`               // A copyright statement relating to the actor definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the actor definition.
	Title         *string             `bson:",omitempty" json:"title,omitempty"`                   // A short, descriptive, user-friendly title for the actor definition.
	Description   *string             `bson:",omitempty" json:"description,omitempty"`             // A free text natural language description of the actor.
	Jurisdiction  []*CodeableConcept  `bson:",omitempty" json:"jurisdiction,omitempty"`            // A legal or geographic region in which the actor definition is intended to be used.
	Meta          *Meta               `bson:",omitempty" json:"meta,omitempty"`                    // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	DerivedFrom   []*string           `bson:",omitempty" json:"derivedFrom,omitempty"`             // A url that identifies the definition of this actor in another IG (which IG must be listed in the dependencies). This actor inherits all the obligations etc. as defined in the other IG.
	ImplicitRules *string             `bson:",omitempty" json:"implicitRules,omitempty"`           // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contact       []*ContactDetail    `bson:",omitempty" json:"contact,omitempty"`                 // Contact details to assist a user in finding and communicating with the publisher.
	Purpose       *string             `bson:",omitempty" json:"purpose,omitempty"`                 // Explanation of why this actor definition is needed and why it has been designed as it has.
	Contained     []*Resource         `bson:",omitempty" json:"contained,omitempty"`               // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ActorDefinitionVersionAlgorithmx
	Name              *string         `bson:",omitempty" json:"name,omitempty"`                      // A natural language name identifying the actor definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Status            *string         `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this actor definition. Enables tracking the life-cycle of the content.
	CopyrightLabel    *string         `bson:",omitempty" json:"copyrightLabel,omitempty"`            // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Text              *Narrative      `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	UseContext        []*UsageContext `bson:",omitempty" json:"useContext,omitempty"`                // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate actor definition instances.
	ModifierExtension []*Extension    `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Date         *DateTime     `bson:",omitempty" json:"date,omitempty"`         // The date  (and optionally time) when the actor definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the actor definition changes.
	Publisher    *string       `bson:",omitempty" json:"publisher,omitempty"`    // The name of the organization or individual responsible for the release and ongoing maintenance of the actor definition.
	Reference    []url.URL     `bson:",omitempty" json:"reference,omitempty"`    // A reference to additional documentation about the actor, but description and documentation.
	Identifier   []*Identifier `bson:",omitempty" json:"identifier,omitempty"`   // A formal identifier that is used to identify this actor definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Experimental *bool         `bson:",omitempty" json:"experimental,omitempty"` // A Boolean value to indicate that this actor definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Capabilities *string       `bson:",omitempty" json:"capabilities,omitempty"` // The capability statement for the actor (if the concept is applicable).
	ResourceType string        `binding:"omitempty" bson:"-" json:"resourceType"`
}
type ActorDefinitionVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *AdministrableProductDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"AdministrableProductDefinition\"" {
		return fmt.Errorf("resourceType is not %s", "AdministrableProductDefinition")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["unitOfPresentation"]) > 0 {
		if err := go1.Unmarshal(asMap["unitOfPresentation"], &out.UnitOfPresentation); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["formOf"]) > 0 {
		if err := go1.Unmarshal(asMap["formOf"], &out.FormOf); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["ingredient"]) > 0 {
		if err := go1.Unmarshal(asMap["ingredient"], &out.Ingredient); err != nil {
			return err
		}

	}
	if len(asMap["device"]) > 0 {
		if err := go1.Unmarshal(asMap["device"], &out.Device); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["administrableDoseForm"]) > 0 {
		if err := go1.Unmarshal(asMap["administrableDoseForm"], &out.AdministrableDoseForm); err != nil {
			return err
		}

	}
	if len(asMap["producedFrom"]) > 0 {
		if err := go1.Unmarshal(asMap["producedFrom"], &out.ProducedFrom); err != nil {
			return err
		}

	}
	if len(asMap["property"]) > 0 {
		if err := go1.Unmarshal(asMap["property"], &out.Property); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["routeOfAdministration"], &out.RouteOfAdministration); err != nil {
		return err
	}

	return nil
}

type AdministrableProductDefinition struct {
	Id                 *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Text               *Narrative          `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained          []*Resource         `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	UnitOfPresentation *CodeableConcept    `bson:",omitempty" json:"unitOfPresentation,omitempty"`        // The presentation type in which this item is given to a patient. e.g. for a spray - 'puff' (as in 'contains 100 mcg per puff'), or for a liquid - 'vial' (as in 'contains 5 ml per vial').
	Description        *string             `bson:",omitempty" json:"description,omitempty"`               // A general description of the product, when in its final form, suitable for administration e.g. effervescent blue liquid, to be swallowed. Intended to be used when the other structured properties of this resource are insufficient or cannot be supported. It is not intended to duplicate information already carried elswehere.
	Status             *string             `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this administrable product. Enables tracking the life-cycle of the content.
	FormOf             []*Reference        `bson:",omitempty" json:"formOf,omitempty"`                    // References a product from which one or more of the constituent parts of that product can be prepared and used as described by this administrable product.  If this administrable product describes the administration of a crushed tablet, the 'formOf' would be the product representing a distribution containing tablets and possibly also a cream.  This is distinct from the 'producedFrom' which refers to the specific components of the product that are used in this preparation, rather than the product as a whole.
	ImplicitRules      *string             `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Extension          []*Extension        `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Ingredient         []*CodeableConcept  `bson:",omitempty" json:"ingredient,omitempty"`                // The ingredients of this administrable medicinal product. This is only needed if the ingredients are not specified either using ManufacturedItemDefiniton (via AdministrableProductDefinition.producedFrom) to state which component items are used to make this, or using by incoming references from the Ingredient resource, to state in detail which substances exist within this. This element allows a basic coded ingredient to be used.
	Device             *Reference          `bson:",omitempty" json:"device,omitempty"`                    // A device that is integral to the medicinal product, in effect being considered as an "ingredient" of the medicinal product. This is not intended for devices that are just co-packaged.
	Meta               *Meta               `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language           *string             `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	ModifierExtension  []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier            []*Identifier                                        `bson:",omitempty" json:"identifier,omitempty"`            // An identifier for the administrable product.
	AdministrableDoseForm *CodeableConcept                                     `bson:",omitempty" json:"administrableDoseForm,omitempty"` // The dose form of the final product after necessary reconstitution or processing. Contrasts to the manufactured dose form (see ManufacturedItemDefinition). If the manufactured form was 'powder for solution for injection', the administrable dose form could be 'solution for injection' (once mixed with another item having manufactured form 'solvent for solution for injection').
	ProducedFrom          []*Reference                                         `bson:",omitempty" json:"producedFrom,omitempty"`          // Indicates the specific manufactured items that are part of the 'formOf' product that are used in the preparation of this specific administrable form.  In some cases, an administrable form might use all of the items from the overall product (or there might only be one item), while in other cases, an administrable form might use only a subset of the items available in the overall product.  For example, an administrable form might involve combining a liquid and a powder available as part of an overall product, but not involve applying the also supplied cream.
	Property              *AdministrableProductDefinitionProperty              `binding:"omitempty" bson:",omitempty"`
	RouteOfAdministration *AdministrableProductDefinitionRouteOfAdministration `binding:"omitempty" bson:",omitempty"`
	ResourceType          string                                               `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *AdministrableProductDefinitionProperty) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDate"], &out.ValueDate); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueMarkdown"], &out.ValueMarkdown); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["valueReference"], &out.ValueReference); err == nil {
	} else {

	}
	return nil
}

type AdministrableProductDefinitionProperty struct {
	Status            *CodeableConcept `bson:",omitempty" json:"status,omitempty"`            // The status of characteristic e.g. assigned or pending.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // A code expressing the type of characteristic.
	AdministrableProductDefinitionPropertyValuex
}
type AdministrableProductDefinitionPropertyValuex struct {
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueDate            Date            `bson:",omitempty" json:"valueDate,omitempty"`
	ValueBoolean         bool            `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueMarkdown        string          `bson:",omitempty" json:"valueMarkdown,omitempty"`
	ValueAttachment      Attachment      `bson:",omitempty" json:"valueAttachment,omitempty"`
	ValueReference       Reference       `bson:",omitempty" json:"valueReference,omitempty"`
}

func (out *AdministrableProductDefinitionRouteOfAdministration) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["maxDosePerTreatmentPeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["maxDosePerTreatmentPeriod"], &out.MaxDosePerTreatmentPeriod); err != nil {
			return err
		}

	}
	if len(asMap["maxTreatmentPeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["maxTreatmentPeriod"], &out.MaxTreatmentPeriod); err != nil {
			return err
		}

	}
	if len(asMap["targetSpecies"]) > 0 {
		if err := go1.Unmarshal(asMap["targetSpecies"], &out.TargetSpecies); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["firstDose"]) > 0 {
		if err := go1.Unmarshal(asMap["firstDose"], &out.FirstDose); err != nil {
			return err
		}

	}
	if len(asMap["maxSingleDose"]) > 0 {
		if err := go1.Unmarshal(asMap["maxSingleDose"], &out.MaxSingleDose); err != nil {
			return err
		}

	}
	if len(asMap["maxDosePerDay"]) > 0 {
		if err := go1.Unmarshal(asMap["maxDosePerDay"], &out.MaxDosePerDay); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type AdministrableProductDefinitionRouteOfAdministration struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code                      *CodeableConcept                                                  `binding:"required" bson:",omitempty" json:"code,omitempty"`   // Coded expression for the route.
	MaxDosePerTreatmentPeriod Ratio                                                             `bson:",omitempty" json:"maxDosePerTreatmentPeriod,omitempty"` // The maximum dose per treatment period that can be administered.
	MaxTreatmentPeriod        *Duration                                                         `bson:",omitempty" json:"maxTreatmentPeriod,omitempty"`        // The maximum treatment period during which the product can be administered.
	TargetSpecies             *AdministrableProductDefinitionRouteOfAdministrationTargetSpecies `binding:"omitempty" bson:",omitempty"`
	Extension                 []*Extension                                                      `bson:",omitempty" json:"extension,omitempty"`     // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	FirstDose                 *Quantity                                                         `bson:",omitempty" json:"firstDose,omitempty"`     // The first dose (dose quantity) administered can be specified for the product, using a numerical value and its unit of measurement.
	MaxSingleDose             *Quantity                                                         `bson:",omitempty" json:"maxSingleDose,omitempty"` // The maximum single dose that can be administered, specified using a numerical value and its unit of measurement.
	MaxDosePerDay             *Quantity                                                         `bson:",omitempty" json:"maxDosePerDay,omitempty"` // The maximum dose per day (maximum dose quantity to be administered in any one 24-h period) that can be administered.
	Id                        *string                                                           `bson:"_id,omitempty" json:"id,omitempty"`         // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *AdministrableProductDefinitionRouteOfAdministrationTargetSpecies) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["withdrawalPeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["withdrawalPeriod"], &out.WithdrawalPeriod); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type AdministrableProductDefinitionRouteOfAdministrationTargetSpecies struct {
	Code              *CodeableConcept                                                                  `binding:"required" bson:",omitempty" json:"code,omitempty"` // Coded expression for the species.
	WithdrawalPeriod  *AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod `binding:"omitempty" bson:",omitempty"`
	Id                *string                                                                           `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                                                                      `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                                                                      `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["tissue"], &out.Tissue); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
		return err
	}

	if len(asMap["supportingInformation"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInformation"], &out.SupportingInformation); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Tissue                *CodeableConcept `binding:"required" bson:",omitempty" json:"tissue,omitempty"` // Coded expression for the type of tissue for which the withdrawal period applies, e.g. meat, milk.
	Value                 *Quantity        `binding:"required" bson:",omitempty" json:"value,omitempty"`  // A value for the time.
	SupportingInformation *string          `bson:",omitempty" json:"supportingInformation,omitempty"`     // Extra information about the withdrawal period.
	Id                    *string          `bson:"_id,omitempty" json:"id,omitempty"`                     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *AdverseEvent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"AdverseEvent\"" {
		return fmt.Errorf("resourceType is not %s", "AdverseEvent")
	}
	if len(asMap["study"]) > 0 {
		if err := go1.Unmarshal(asMap["study"], &out.Study); err != nil {
			return err
		}

	}
	if len(asMap["expectedInResearchStudy"]) > 0 {
		if err := go1.Unmarshal(asMap["expectedInResearchStudy"], &out.ExpectedInResearchStudy); err != nil {
			return err
		}

	}
	if len(asMap["supportingInfo"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInfo"], &out.SupportingInfo); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["participant"]) > 0 {
		if err := go1.Unmarshal(asMap["participant"], &out.Participant); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["occurrenceDateTime"], &out.OccurrenceDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrencePeriod"], &out.OccurrencePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrenceTiming"], &out.OccurrenceTiming); err == nil {
	} else {

	}
	if len(asMap["recordedDate"]) > 0 {
		if err := go1.Unmarshal(asMap["recordedDate"], &out.RecordedDate); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["seriousness"]) > 0 {
		if err := go1.Unmarshal(asMap["seriousness"], &out.Seriousness); err != nil {
			return err
		}

	}
	if len(asMap["outcome"]) > 0 {
		if err := go1.Unmarshal(asMap["outcome"], &out.Outcome); err != nil {
			return err
		}

	}
	if len(asMap["contributingFactor"]) > 0 {
		if err := go1.Unmarshal(asMap["contributingFactor"], &out.ContributingFactor); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if len(asMap["resultingEffect"]) > 0 {
		if err := go1.Unmarshal(asMap["resultingEffect"], &out.ResultingEffect); err != nil {
			return err
		}

	}
	if len(asMap["preventiveAction"]) > 0 {
		if err := go1.Unmarshal(asMap["preventiveAction"], &out.PreventiveAction); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["recorder"]) > 0 {
		if err := go1.Unmarshal(asMap["recorder"], &out.Recorder); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["actuality"], &out.Actuality); err != nil {
		return err
	}

	if len(asMap["detected"]) > 0 {
		if err := go1.Unmarshal(asMap["detected"], &out.Detected); err != nil {
			return err
		}

	}
	if len(asMap["mitigatingAction"]) > 0 {
		if err := go1.Unmarshal(asMap["mitigatingAction"], &out.MitigatingAction); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["suspectEntity"]) > 0 {
		if err := go1.Unmarshal(asMap["suspectEntity"], &out.SuspectEntity); err != nil {
			return err
		}

	}
	return nil
}

type AdverseEvent struct {
	Study                   []*Reference                `bson:",omitempty" json:"study,omitempty"`                   // The research study that the subject is enrolled in.
	ExpectedInResearchStudy *bool                       `bson:",omitempty" json:"expectedInResearchStudy,omitempty"` // Considered likely or probable or anticipated in the research study.  Whether the reported event matches any of the outcomes for the patient that are considered by the study as known or likely.
	SupportingInfo          *AdverseEventSupportingInfo `binding:"omitempty" bson:",omitempty"`
	Meta                    *Meta                       `bson:",omitempty" json:"meta,omitempty"`          // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules           *string                     `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained               []*Resource                 `bson:",omitempty" json:"contained,omitempty"`     // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Participant             *AdverseEventParticipant    `binding:"omitempty" bson:",omitempty"`
	Encounter               *Reference                  `bson:",omitempty" json:"encounter,omitempty"` // The Encounter associated with the start of the AdverseEvent.
	AdverseEventOccurrencex
	RecordedDate       *DateTime                       `bson:",omitempty" json:"recordedDate,omitempty"` // The date on which the existence of the AdverseEvent was first recorded.
	Language           *string                         `bson:",omitempty" json:"language,omitempty"`     // The base language in which the resource is written.
	Category           []*CodeableConcept              `bson:",omitempty" json:"category,omitempty"`     // The overall type of event, intended for search and filtering purposes.
	Seriousness        *CodeableConcept                `bson:",omitempty" json:"seriousness,omitempty"`  // Assessment whether this event, or averted event, was of clinical importance.
	Outcome            []*CodeableConcept              `bson:",omitempty" json:"outcome,omitempty"`      // Describes the type of outcome from the adverse event, such as resolved, recovering, ongoing, resolved-with-sequelae, or fatal.
	ContributingFactor *AdverseEventContributingFactor `binding:"omitempty" bson:",omitempty"`
	Note               []Annotation                    `bson:",omitempty" json:"note,omitempty"`                       // Comments made about the adverse event by the performer, subject or other participants.
	Extension          []*Extension                    `bson:",omitempty" json:"extension,omitempty"`                  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Identifier         []*Identifier                   `bson:",omitempty" json:"identifier,omitempty"`                 // Business identifiers assigned to this adverse event by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
	Subject            *Reference                      `binding:"required" bson:",omitempty" json:"subject,omitempty"` // This subject or group impacted by the event.
	ResultingEffect    []*Reference                    `bson:",omitempty" json:"resultingEffect,omitempty"`            // Information about the condition that occurred as a result of the adverse event, such as hives due to the exposure to a substance (for example, a drug or a chemical) or a broken leg as a result of the fall.
	PreventiveAction   *AdverseEventPreventiveAction   `binding:"omitempty" bson:",omitempty"`
	Text               *Narrative                      `bson:",omitempty" json:"text,omitempty"`                         // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Location           *Reference                      `bson:",omitempty" json:"location,omitempty"`                     // The information about where the adverse event occurred.
	Recorder           *Reference                      `bson:",omitempty" json:"recorder,omitempty"`                     // Information on who recorded the adverse event.  May be the patient or a practitioner.
	Actuality          *string                         `binding:"required" bson:",omitempty" json:"actuality,omitempty"` // Whether the event actually happened or was a near miss. Note that this is independent of whether anyone was affected or harmed or how severely.
	Detected           *DateTime                       `bson:",omitempty" json:"detected,omitempty"`                     // Estimated or actual date the AdverseEvent began, in the opinion of the reporter.
	MitigatingAction   *AdverseEventMitigatingAction   `binding:"omitempty" bson:",omitempty"`
	Id                 *primitive.ObjectID             `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ModifierExtension  []*Extension                    `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Status        *string                    `binding:"required" bson:",omitempty" json:"status,omitempty"` // The current state of the adverse event or potential adverse event.
	Code          *CodeableConcept           `bson:",omitempty" json:"code,omitempty"`                      // Specific event that occurred or that was averted, such as patient fall, wrong organ removed, or wrong blood transfused.
	SuspectEntity *AdverseEventSuspectEntity `binding:"omitempty" bson:",omitempty"`
	ResourceType  string                     `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *AdverseEventSupportingInfo) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["itemReference"], &out.ItemReference); err == nil {
	} else if err := go1.Unmarshal(asMap["itemCodeableConcept"], &out.ItemCodeableConcept); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "item[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type AdverseEventSupportingInfo struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	AdverseEventSupportingInfoItemx
	Id *string `bson:"_id,omitempty" json:"id,omitempty"` // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}
type AdverseEventSupportingInfoItemx struct {
	ItemReference       Reference       `bson:",omitempty" json:"itemReference,omitempty"`
	ItemCodeableConcept CodeableConcept `bson:",omitempty" json:"itemCodeableConcept,omitempty"`
}

func (out *AdverseEventParticipant) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
		return err
	}

	return nil
}

type AdverseEventParticipant struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Function *CodeableConcept `bson:",omitempty" json:"function,omitempty"`                 // Distinguishes the type of involvement of the actor in the adverse event, such as contributor or informant.
	Actor    *Reference       `binding:"required" bson:",omitempty" json:"actor,omitempty"` // Indicates who or what participated in the event.
}
type AdverseEventOccurrencex struct {
	OccurrenceDateTime DateTime `bson:",omitempty" json:"occurrenceDateTime,omitempty"`
	OccurrencePeriod   Period   `bson:",omitempty" json:"occurrencePeriod,omitempty"`
	OccurrenceTiming   Timing   `bson:",omitempty" json:"occurrenceTiming,omitempty"`
}

func (out *AdverseEventContributingFactor) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["itemReference"], &out.ItemReference); err == nil {
	} else if err := go1.Unmarshal(asMap["itemCodeableConcept"], &out.ItemCodeableConcept); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "item[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type AdverseEventContributingFactor struct {
	AdverseEventContributingFactorItemx
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type AdverseEventContributingFactorItemx struct {
	ItemReference       Reference       `bson:",omitempty" json:"itemReference,omitempty"`
	ItemCodeableConcept CodeableConcept `bson:",omitempty" json:"itemCodeableConcept,omitempty"`
}

func (out *AdverseEventPreventiveAction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["itemReference"], &out.ItemReference); err == nil {
	} else if err := go1.Unmarshal(asMap["itemCodeableConcept"], &out.ItemCodeableConcept); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "item[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type AdverseEventPreventiveAction struct {
	AdverseEventPreventiveActionItemx
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type AdverseEventPreventiveActionItemx struct {
	ItemReference       Reference       `bson:",omitempty" json:"itemReference,omitempty"`
	ItemCodeableConcept CodeableConcept `bson:",omitempty" json:"itemCodeableConcept,omitempty"`
}

func (out *AdverseEventMitigatingAction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["itemReference"], &out.ItemReference); err == nil {
	} else if err := go1.Unmarshal(asMap["itemCodeableConcept"], &out.ItemCodeableConcept); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "item[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type AdverseEventMitigatingAction struct {
	AdverseEventMitigatingActionItemx
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type AdverseEventMitigatingActionItemx struct {
	ItemReference       Reference       `bson:",omitempty" json:"itemReference,omitempty"`
	ItemCodeableConcept CodeableConcept `bson:",omitempty" json:"itemCodeableConcept,omitempty"`
}

func (out *AdverseEventSuspectEntity) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["instanceCodeableConcept"], &out.InstanceCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["instanceReference"], &out.InstanceReference); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "instance[x]")
	}
	if len(asMap["causality"]) > 0 {
		if err := go1.Unmarshal(asMap["causality"], &out.Causality); err != nil {
			return err
		}

	}
	return nil
}

type AdverseEventSuspectEntity struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	AdverseEventSuspectEntityInstancex
	Causality *AdverseEventSuspectEntityCausality `binding:"omitempty" bson:",omitempty"`
}
type AdverseEventSuspectEntityInstancex struct {
	InstanceCodeableConcept CodeableConcept `bson:",omitempty" json:"instanceCodeableConcept,omitempty"`
	InstanceReference       Reference       `bson:",omitempty" json:"instanceReference,omitempty"`
}

func (out *AdverseEventSuspectEntityCausality) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["assessmentMethod"]) > 0 {
		if err := go1.Unmarshal(asMap["assessmentMethod"], &out.AssessmentMethod); err != nil {
			return err
		}

	}
	if len(asMap["entityRelatedness"]) > 0 {
		if err := go1.Unmarshal(asMap["entityRelatedness"], &out.EntityRelatedness); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type AdverseEventSuspectEntityCausality struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	AssessmentMethod  *CodeableConcept `bson:",omitempty" json:"assessmentMethod,omitempty"`  // The method of evaluating the relatedness of the suspected entity to the event.
	EntityRelatedness *CodeableConcept `bson:",omitempty" json:"entityRelatedness,omitempty"` // The result of the assessment regarding the relatedness of the suspected entity to the event.
	Author            *Reference       `bson:",omitempty" json:"author,omitempty"`            // The author of the information on the possible cause of the event.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *AllergyIntolerance) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"AllergyIntolerance\"" {
		return fmt.Errorf("resourceType is not %s", "AllergyIntolerance")
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["criticality"]) > 0 {
		if err := go1.Unmarshal(asMap["criticality"], &out.Criticality); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["onsetDateTime"], &out.OnsetDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["onsetAge"], &out.OnsetAge); err == nil {
	} else if err := go1.Unmarshal(asMap["onsetPeriod"], &out.OnsetPeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["onsetRange"], &out.OnsetRange); err == nil {
	} else if err := go1.Unmarshal(asMap["onsetString"], &out.OnsetString); err == nil {
	} else {

	}
	if len(asMap["lastOccurrence"]) > 0 {
		if err := go1.Unmarshal(asMap["lastOccurrence"], &out.LastOccurrence); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["participant"]) > 0 {
		if err := go1.Unmarshal(asMap["participant"], &out.Participant); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["clinicalStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["clinicalStatus"], &out.ClinicalStatus); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["reaction"]) > 0 {
		if err := go1.Unmarshal(asMap["reaction"], &out.Reaction); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["verificationStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["verificationStatus"], &out.VerificationStatus); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["patient"], &out.Patient); err != nil {
		return err
	}

	if len(asMap["recordedDate"]) > 0 {
		if err := go1.Unmarshal(asMap["recordedDate"], &out.RecordedDate); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	return nil
}

type AllergyIntolerance struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Criticality *string `bson:",omitempty" json:"criticality,omitempty"` // Estimate of the potential clinical harm, or seriousness, of the reaction to the identified substance.
	AllergyIntoleranceOnsetx
	LastOccurrence     *DateTime                      `bson:",omitempty" json:"lastOccurrence,omitempty"` // Represents the date and/or time of the last known occurrence of a reaction event.
	Contained          []*Resource                    `bson:",omitempty" json:"contained,omitempty"`      // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Meta               *Meta                          `bson:",omitempty" json:"meta,omitempty"`           // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Extension          []*Extension                   `bson:",omitempty" json:"extension,omitempty"`      // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Identifier         []*Identifier                  `bson:",omitempty" json:"identifier,omitempty"`     // Business identifiers assigned to this AllergyIntolerance by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
	Participant        *AllergyIntoleranceParticipant `binding:"omitempty" bson:",omitempty"`
	Id                 *primitive.ObjectID            `bson:"_id,omitempty" json:"id,omitempty"`          // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ClinicalStatus     *CodeableConcept               `bson:",omitempty" json:"clinicalStatus,omitempty"` // The clinical status of the allergy or intolerance.
	Category           []*string                      `bson:",omitempty" json:"category,omitempty"`       // Category of the identified substance.
	Code               *CodeableConcept               `bson:",omitempty" json:"code,omitempty"`           // Code for an allergy or intolerance statement (either a positive or a negated/excluded statement).  This may be a code for a substance or pharmaceutical product that is considered to be responsible for the adverse reaction risk (e.g., "Latex"), an allergy or intolerance condition (e.g., "Latex allergy"), or a negated/excluded code for a specific substance or class (e.g., "No latex allergy") or a general or categorical negated statement (e.g.,  "No known allergy", "No known drug allergies").  Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
	Encounter          *Reference                     `bson:",omitempty" json:"encounter,omitempty"`      // The encounter when the allergy or intolerance was asserted.
	Note               []*Annotation                  `bson:",omitempty" json:"note,omitempty"`           // Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.
	Reaction           *AllergyIntoleranceReaction    `binding:"omitempty" bson:",omitempty"`
	Language           *string                        `bson:",omitempty" json:"language,omitempty"`                   // The base language in which the resource is written.
	Text               *Narrative                     `bson:",omitempty" json:"text,omitempty"`                       // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	VerificationStatus *CodeableConcept               `bson:",omitempty" json:"verificationStatus,omitempty"`         // Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified substance (including pharmaceutical product).  The verification status pertains to the allergy or intolerance, itself, not to any specific AllergyIntolerance attribute.
	Type               *CodeableConcept               `bson:",omitempty" json:"type,omitempty"`                       // Identification of the underlying physiological mechanism for the reaction risk.
	Patient            *Reference                     `binding:"required" bson:",omitempty" json:"patient,omitempty"` // The patient who has the allergy or intolerance.
	RecordedDate       *DateTime                      `bson:",omitempty" json:"recordedDate,omitempty"`               // The recordedDate represents when this particular AllergyIntolerance record was created in the system, which is often a system-generated date.
	ImplicitRules      *string                        `bson:",omitempty" json:"implicitRules,omitempty"`              // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ResourceType       string                         `binding:"omitempty" bson:"-" json:"resourceType"`
}
type AllergyIntoleranceOnsetx struct {
	OnsetDateTime DateTime `bson:",omitempty" json:"onsetDateTime,omitempty"`
	OnsetAge      Age      `bson:",omitempty" json:"onsetAge,omitempty"`
	OnsetPeriod   Period   `bson:",omitempty" json:"onsetPeriod,omitempty"`
	OnsetRange    Range    `bson:",omitempty" json:"onsetRange,omitempty"`
	OnsetString   string   `bson:",omitempty" json:"onsetString,omitempty"`
}

func (out *AllergyIntoleranceParticipant) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
		return err
	}

	return nil
}

type AllergyIntoleranceParticipant struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Function *CodeableConcept `bson:",omitempty" json:"function,omitempty"`                 // Distinguishes the type of involvement of the actor in the activities related to the allergy or intolerance.
	Actor    *Reference       `binding:"required" bson:",omitempty" json:"actor,omitempty"` // Indicates who or what participated in the activities related to the allergy or intolerance.
}

func (out *AllergyIntoleranceReaction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["exposureRoute"]) > 0 {
		if err := go1.Unmarshal(asMap["exposureRoute"], &out.ExposureRoute); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["substance"]) > 0 {
		if err := go1.Unmarshal(asMap["substance"], &out.Substance); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["severity"]) > 0 {
		if err := go1.Unmarshal(asMap["severity"], &out.Severity); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["manifestation"], &out.Manifestation); err != nil {
		return err
	}

	if len(asMap["onset"]) > 0 {
		if err := go1.Unmarshal(asMap["onset"], &out.Onset); err != nil {
			return err
		}

	}
	return nil
}

type AllergyIntoleranceReaction struct {
	ExposureRoute     *CodeableConcept `bson:",omitempty" json:"exposureRoute,omitempty"`     // Identification of the route by which the subject was exposed to the substance.
	Note              []*Annotation    `bson:",omitempty" json:"note,omitempty"`              // Additional text about the adverse reaction event not captured in other fields.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Substance         *CodeableConcept `bson:",omitempty" json:"substance,omitempty"`         // Identification of the specific substance (or pharmaceutical product) considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
	Description       *string          `bson:",omitempty" json:"description,omitempty"`       // Text description about the reaction as a whole, including details of the manifestation if required.
	Severity          *string          `bson:",omitempty" json:"severity,omitempty"`          // Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Manifestation []*CodeableReference `binding:"required" bson:",omitempty" json:"manifestation,omitempty"` // Clinical symptoms and/or signs that are observed or associated with the adverse reaction event.
	Onset         *DateTime            `bson:",omitempty" json:"onset,omitempty"`                            // Record of the date and/or time of the onset of the Reaction.
}

func (out *Appointment) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Appointment\"" {
		return fmt.Errorf("resourceType is not %s", "Appointment")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["cancellationDate"]) > 0 {
		if err := go1.Unmarshal(asMap["cancellationDate"], &out.CancellationDate); err != nil {
			return err
		}

	}
	if len(asMap["start"]) > 0 {
		if err := go1.Unmarshal(asMap["start"], &out.Start); err != nil {
			return err
		}

	}
	if len(asMap["slot"]) > 0 {
		if err := go1.Unmarshal(asMap["slot"], &out.Slot); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["appointmentType"]) > 0 {
		if err := go1.Unmarshal(asMap["appointmentType"], &out.AppointmentType); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["patientInstruction"]) > 0 {
		if err := go1.Unmarshal(asMap["patientInstruction"], &out.PatientInstruction); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["previousAppointment"]) > 0 {
		if err := go1.Unmarshal(asMap["previousAppointment"], &out.PreviousAppointment); err != nil {
			return err
		}

	}
	if len(asMap["originatingAppointment"]) > 0 {
		if err := go1.Unmarshal(asMap["originatingAppointment"], &out.OriginatingAppointment); err != nil {
			return err
		}

	}
	if len(asMap["minutesDuration"]) > 0 {
		if err := go1.Unmarshal(asMap["minutesDuration"], &out.MinutesDuration); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["account"]) > 0 {
		if err := go1.Unmarshal(asMap["account"], &out.Account); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["participant"], &out.Participant); err != nil {
		return err
	}

	if len(asMap["recurrenceTemplate"]) > 0 {
		if err := go1.Unmarshal(asMap["recurrenceTemplate"], &out.RecurrenceTemplate); err != nil {
			return err
		}

	}
	if len(asMap["specialty"]) > 0 {
		if err := go1.Unmarshal(asMap["specialty"], &out.Specialty); err != nil {
			return err
		}

	}
	if len(asMap["replaces"]) > 0 {
		if err := go1.Unmarshal(asMap["replaces"], &out.Replaces); err != nil {
			return err
		}

	}
	if len(asMap["virtualService"]) > 0 {
		if err := go1.Unmarshal(asMap["virtualService"], &out.VirtualService); err != nil {
			return err
		}

	}
	if len(asMap["requestedPeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["requestedPeriod"], &out.RequestedPeriod); err != nil {
			return err
		}

	}
	if len(asMap["end"]) > 0 {
		if err := go1.Unmarshal(asMap["end"], &out.End); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["recurrenceId"]) > 0 {
		if err := go1.Unmarshal(asMap["recurrenceId"], &out.RecurrenceId); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["cancellationReason"]) > 0 {
		if err := go1.Unmarshal(asMap["cancellationReason"], &out.CancellationReason); err != nil {
			return err
		}

	}
	if len(asMap["serviceType"]) > 0 {
		if err := go1.Unmarshal(asMap["serviceType"], &out.ServiceType); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["occurrenceChanged"]) > 0 {
		if err := go1.Unmarshal(asMap["occurrenceChanged"], &out.OccurrenceChanged); err != nil {
			return err
		}

	}
	if len(asMap["supportingInformation"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInformation"], &out.SupportingInformation); err != nil {
			return err
		}

	}
	if len(asMap["created"]) > 0 {
		if err := go1.Unmarshal(asMap["created"], &out.Created); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["serviceCategory"]) > 0 {
		if err := go1.Unmarshal(asMap["serviceCategory"], &out.ServiceCategory); err != nil {
			return err
		}

	}
	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["class"]) > 0 {
		if err := go1.Unmarshal(asMap["class"], &out.Class); err != nil {
			return err
		}

	}
	return nil
}

type Appointment struct {
	Id                     *primitive.ObjectID            `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Status                 *string                        `binding:"required" bson:",omitempty" json:"status,omitempty"` // The overall status of the Appointment. Each of the participants has their own participation status which indicates their involvement in the process, however this status indicates the shared status.
	CancellationDate       *DateTime                      `bson:",omitempty" json:"cancellationDate,omitempty"`          // The date/time describing when the appointment was cancelled.
	Start                  *time.Time                     `bson:",omitempty" json:"start,omitempty"`                     // Date/Time that the appointment is to take place.
	Slot                   []*Reference                   `bson:",omitempty" json:"slot,omitempty"`                      // The slots from the participants' schedules that will be filled by the appointment.
	Contained              []*Resource                    `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension              []*Extension                   `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	AppointmentType        *CodeableConcept               `bson:",omitempty" json:"appointmentType,omitempty"`           // The style of appointment or patient that has been booked in the slot (not service type).
	Description            *string                        `bson:",omitempty" json:"description,omitempty"`               // The brief description of the appointment as would be shown on a subject line in a meeting request, or appointment list. Detailed or expanded information should be put in the note field.
	PatientInstruction     []*CodeableReference           `bson:",omitempty" json:"patientInstruction,omitempty"`        // While Appointment.note contains information for internal use, Appointment.patientInstructions is used to capture patient facing information about the Appointment (e.g. please bring your referral or fast from 8pm night before).
	Meta                   *Meta                          `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	PreviousAppointment    *Reference                     `bson:",omitempty" json:"previousAppointment,omitempty"`       // The previous appointment in a series of related appointments.
	OriginatingAppointment *Reference                     `bson:",omitempty" json:"originatingAppointment,omitempty"`    // The originating appointment in a recurring set of related appointments.
	MinutesDuration        *int                           `bson:",omitempty" json:"minutesDuration,omitempty"`           // Number of minutes that the appointment is to take. This can be less than the duration between the start and end times.  For example, where the actual time of appointment is only an estimate or if a 30 minute appointment is being requested, but any time would work.  Also, if there is, for example, a planned 15 minute break in the middle of a long appointment, the duration may be 15 minutes less than the difference between the start and end.
	Language               *string                        `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Account                []*Reference                   `bson:",omitempty" json:"account,omitempty"`                   // The set of accounts that is expected to be used for billing the activities that result from this Appointment.
	Participant            *AppointmentParticipant        `binding:"omitempty" bson:",omitempty"`
	RecurrenceTemplate     *AppointmentRecurrenceTemplate `binding:"omitempty" bson:",omitempty"`
	Specialty              []*CodeableConcept             `bson:",omitempty" json:"specialty,omitempty"`       // The specialty of a practitioner that would be required to perform the service requested in this appointment.
	Replaces               []*Reference                   `bson:",omitempty" json:"replaces,omitempty"`        // Appointment replaced by this Appointment in cases where there is a cancellation, the details of the cancellation can be found in the cancellationReason property (on the referenced resource).
	VirtualService         []VirtualServiceDetail         `bson:",omitempty" json:"virtualService,omitempty"`  // Connection details of a virtual service (e.g. conference call).
	RequestedPeriod        []*Period                      `bson:",omitempty" json:"requestedPeriod,omitempty"` /*
	A set of date ranges (potentially including times) that the appointment is preferred to be scheduled within.

	The duration (usually in minutes) could also be provided to indicate the length of the appointment to fill and populate the start/end times for the actual allocated time. However, in other situations the duration may be calculated by the scheduling system.
	*/
	End                   *time.Time           `bson:",omitempty" json:"end,omitempty"`                   // Date/Time that the appointment is to conclude.
	Note                  []*Annotation        `bson:",omitempty" json:"note,omitempty"`                  // Additional notes/comments about the appointment.
	Subject               *Reference           `bson:",omitempty" json:"subject,omitempty"`               // The patient or group associated with the appointment, if they are to be present (usually) then they should also be included in the participant backbone element.
	RecurrenceId          *int                 `bson:",omitempty" json:"recurrenceId,omitempty"`          // The sequence number that identifies a specific appointment in a recurring pattern.
	Identifier            []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`            // This records identifiers associated with this appointment concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
	CancellationReason    *CodeableConcept     `bson:",omitempty" json:"cancellationReason,omitempty"`    // The coded reason for the appointment being cancelled. This is often used in reporting/billing/futher processing to determine if further actions are required, or specific fees apply.
	ServiceType           []*CodeableReference `bson:",omitempty" json:"serviceType,omitempty"`           // The specific service that is to be performed during this appointment.
	Reason                []*CodeableReference `bson:",omitempty" json:"reason,omitempty"`                // The reason that this appointment is being scheduled. This is more clinical than administrative. This can be coded, or as specified using information from another resource. When the patient arrives and the encounter begins it may be used as the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
	OccurrenceChanged     *bool                `bson:",omitempty" json:"occurrenceChanged,omitempty"`     // This appointment varies from the recurring pattern.
	SupportingInformation []*Reference         `bson:",omitempty" json:"supportingInformation,omitempty"` // Additional information to support the appointment provided when making the appointment.
	Created               *DateTime            `bson:",omitempty" json:"created,omitempty"`               // The date that this appointment was initially created. This could be different to the meta.lastModified value on the initial entry, as this could have been before the resource was created on the FHIR server, and should remain unchanged over the lifespan of the appointment.
	BasedOn               []*Reference         `bson:",omitempty" json:"basedOn,omitempty"`               // The request this appointment is allocated to assess (e.g. incoming referral or procedure request).
	ImplicitRules         *string              `bson:",omitempty" json:"implicitRules,omitempty"`         // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ModifierExtension     []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"`     /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ServiceCategory []*CodeableConcept `bson:",omitempty" json:"serviceCategory,omitempty"` // A broad categorization of the service that is to be performed during this appointment.
	Priority        *CodeableConcept   `bson:",omitempty" json:"priority,omitempty"`        // The priority of the appointment. Can be used to make informed decisions if needing to re-prioritize appointments. (The iCal Standard specifies 0 as undefined, 1 as highest, 9 as lowest priority).
	Text            *Narrative         `bson:",omitempty" json:"text,omitempty"`            // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Class           []*CodeableConcept `bson:",omitempty" json:"class,omitempty"`           // Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.
	ResourceType    string             `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *AppointmentParticipant) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["actor"]) > 0 {
		if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
			return err
		}

	}
	if len(asMap["required"]) > 0 {
		if err := go1.Unmarshal(asMap["required"], &out.Required); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	return nil
}

type AppointmentParticipant struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type     []*CodeableConcept `bson:",omitempty" json:"type,omitempty"`                      // Role of participant in the appointment.
	Period   *Period            `bson:",omitempty" json:"period,omitempty"`                    // Participation period of the actor.
	Actor    *Reference         `bson:",omitempty" json:"actor,omitempty"`                     // The individual, device, location, or service participating in the appointment.
	Required *bool              `bson:",omitempty" json:"required,omitempty"`                  // Whether this participant is required to be present at the meeting. If false, the participant is optional.
	Status   *string            `binding:"required" bson:",omitempty" json:"status,omitempty"` // Participation status of the actor.
}

func (out *AppointmentRecurrenceTemplate) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["occurrenceDate"]) > 0 {
		if err := go1.Unmarshal(asMap["occurrenceDate"], &out.OccurrenceDate); err != nil {
			return err
		}

	}
	if len(asMap["weeklyTemplate"]) > 0 {
		if err := go1.Unmarshal(asMap["weeklyTemplate"], &out.WeeklyTemplate); err != nil {
			return err
		}

	}
	if len(asMap["monthlyTemplate"]) > 0 {
		if err := go1.Unmarshal(asMap["monthlyTemplate"], &out.MonthlyTemplate); err != nil {
			return err
		}

	}
	if len(asMap["excludingRecurrenceId"]) > 0 {
		if err := go1.Unmarshal(asMap["excludingRecurrenceId"], &out.ExcludingRecurrenceId); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["lastOccurrenceDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastOccurrenceDate"], &out.LastOccurrenceDate); err != nil {
			return err
		}

	}
	if len(asMap["excludingDate"]) > 0 {
		if err := go1.Unmarshal(asMap["excludingDate"], &out.ExcludingDate); err != nil {
			return err
		}

	}
	if len(asMap["timezone"]) > 0 {
		if err := go1.Unmarshal(asMap["timezone"], &out.Timezone); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["recurrenceType"], &out.RecurrenceType); err != nil {
		return err
	}

	if len(asMap["occurrenceCount"]) > 0 {
		if err := go1.Unmarshal(asMap["occurrenceCount"], &out.OccurrenceCount); err != nil {
			return err
		}

	}
	if len(asMap["yearlyTemplate"]) > 0 {
		if err := go1.Unmarshal(asMap["yearlyTemplate"], &out.YearlyTemplate); err != nil {
			return err
		}

	}
	return nil
}

type AppointmentRecurrenceTemplate struct {
	OccurrenceDate        []*Date                                       `bson:",omitempty" json:"occurrenceDate,omitempty"` // The list of specific dates that will have appointments generated.
	WeeklyTemplate        *AppointmentRecurrenceTemplateWeeklyTemplate  `binding:"omitempty" bson:",omitempty"`
	MonthlyTemplate       *AppointmentRecurrenceTemplateMonthlyTemplate `binding:"omitempty" bson:",omitempty"`
	ExcludingRecurrenceId []*int                                        `bson:",omitempty" json:"excludingRecurrenceId,omitempty"` // Any dates, such as holidays, that should be excluded from the recurrence.
	Id                    *string                                       `bson:"_id,omitempty" json:"id,omitempty"`                 // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension             []*Extension                                  `bson:",omitempty" json:"extension,omitempty"`             // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension     []*Extension                                  `bson:",omitempty" json:"modifierExtension,omitempty"`     /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	LastOccurrenceDate *Date                                        `bson:",omitempty" json:"lastOccurrenceDate,omitempty"`                // Recurring appointments will not occur after this date.
	ExcludingDate      []*Date                                      `bson:",omitempty" json:"excludingDate,omitempty"`                     // Any dates, such as holidays, that should be excluded from the recurrence.
	Timezone           *CodeableConcept                             `bson:",omitempty" json:"timezone,omitempty"`                          // The timezone of the recurring appointment occurrences.
	RecurrenceType     *CodeableConcept                             `binding:"required" bson:",omitempty" json:"recurrenceType,omitempty"` // How often the appointment series should recur.
	OccurrenceCount    *int                                         `bson:",omitempty" json:"occurrenceCount,omitempty"`                   // How many appointments are planned in the recurrence.
	YearlyTemplate     *AppointmentRecurrenceTemplateYearlyTemplate `binding:"omitempty" bson:",omitempty"`
}

func (out *AppointmentRecurrenceTemplateWeeklyTemplate) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["friday"]) > 0 {
		if err := go1.Unmarshal(asMap["friday"], &out.Friday); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["monday"]) > 0 {
		if err := go1.Unmarshal(asMap["monday"], &out.Monday); err != nil {
			return err
		}

	}
	if len(asMap["tuesday"]) > 0 {
		if err := go1.Unmarshal(asMap["tuesday"], &out.Tuesday); err != nil {
			return err
		}

	}
	if len(asMap["wednesday"]) > 0 {
		if err := go1.Unmarshal(asMap["wednesday"], &out.Wednesday); err != nil {
			return err
		}

	}
	if len(asMap["thursday"]) > 0 {
		if err := go1.Unmarshal(asMap["thursday"], &out.Thursday); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["saturday"]) > 0 {
		if err := go1.Unmarshal(asMap["saturday"], &out.Saturday); err != nil {
			return err
		}

	}
	if len(asMap["sunday"]) > 0 {
		if err := go1.Unmarshal(asMap["sunday"], &out.Sunday); err != nil {
			return err
		}

	}
	if len(asMap["weekInterval"]) > 0 {
		if err := go1.Unmarshal(asMap["weekInterval"], &out.WeekInterval); err != nil {
			return err
		}

	}
	return nil
}

type AppointmentRecurrenceTemplateWeeklyTemplate struct {
	Friday            *bool        `bson:",omitempty" json:"friday,omitempty"`            // Indicates that recurring appointments should occur on Fridays.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Monday            *bool        `bson:",omitempty" json:"monday,omitempty"`            // Indicates that recurring appointments should occur on Mondays.
	Tuesday           *bool        `bson:",omitempty" json:"tuesday,omitempty"`           // Indicates that recurring appointments should occur on Tuesdays.
	Wednesday         *bool        `bson:",omitempty" json:"wednesday,omitempty"`         // Indicates that recurring appointments should occur on Wednesdays.
	Thursday          *bool        `bson:",omitempty" json:"thursday,omitempty"`          // Indicates that recurring appointments should occur on Thursdays.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Saturday     *bool `bson:",omitempty" json:"saturday,omitempty"`     // Indicates that recurring appointments should occur on Saturdays.
	Sunday       *bool `bson:",omitempty" json:"sunday,omitempty"`       // Indicates that recurring appointments should occur on Sundays.
	WeekInterval *int  `bson:",omitempty" json:"weekInterval,omitempty"` // The interval defines if the recurrence is every nth week. The default is every week, so it is expected that this value will be 2 or more.e.g. For recurring every second week this interval would be 2, or every third week the interval would be 3.
}

func (out *AppointmentRecurrenceTemplateMonthlyTemplate) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["dayOfMonth"]) > 0 {
		if err := go1.Unmarshal(asMap["dayOfMonth"], &out.DayOfMonth); err != nil {
			return err
		}

	}
	if len(asMap["nthWeekOfMonth"]) > 0 {
		if err := go1.Unmarshal(asMap["nthWeekOfMonth"], &out.NthWeekOfMonth); err != nil {
			return err
		}

	}
	if len(asMap["dayOfWeek"]) > 0 {
		if err := go1.Unmarshal(asMap["dayOfWeek"], &out.DayOfWeek); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["monthInterval"], &out.MonthInterval); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type AppointmentRecurrenceTemplateMonthlyTemplate struct {
	DayOfMonth        *int         `bson:",omitempty" json:"dayOfMonth,omitempty"`                       // Indicates that appointments in the series of recurring appointments should occur on a specific day of the month.
	NthWeekOfMonth    *Coding      `bson:",omitempty" json:"nthWeekOfMonth,omitempty"`                   // Indicates which week within a month the appointments in the series of recurring appointments should occur on.
	DayOfWeek         *Coding      `bson:",omitempty" json:"dayOfWeek,omitempty"`                        // Indicates which day of the week the recurring appointments should occur each nth week.
	MonthInterval     *int         `binding:"required" bson:",omitempty" json:"monthInterval,omitempty"` // Indicates that recurring appointments should occur every nth month.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                            // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                        // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`                /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *AppointmentRecurrenceTemplateYearlyTemplate) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["yearInterval"], &out.YearInterval); err != nil {
		return err
	}

	return nil
}

type AppointmentRecurrenceTemplateYearlyTemplate struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	YearInterval *int `binding:"required" bson:",omitempty" json:"yearInterval,omitempty"` // Appointment recurs every nth year.
}

func (out *AppointmentResponse) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"AppointmentResponse\"" {
		return fmt.Errorf("resourceType is not %s", "AppointmentResponse")
	}
	if len(asMap["start"]) > 0 {
		if err := go1.Unmarshal(asMap["start"], &out.Start); err != nil {
			return err
		}

	}
	if len(asMap["recurrenceId"]) > 0 {
		if err := go1.Unmarshal(asMap["recurrenceId"], &out.RecurrenceId); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["proposedNewTime"]) > 0 {
		if err := go1.Unmarshal(asMap["proposedNewTime"], &out.ProposedNewTime); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["participantStatus"], &out.ParticipantStatus); err != nil {
		return err
	}

	if len(asMap["recurring"]) > 0 {
		if err := go1.Unmarshal(asMap["recurring"], &out.Recurring); err != nil {
			return err
		}

	}
	if len(asMap["occurrenceDate"]) > 0 {
		if err := go1.Unmarshal(asMap["occurrenceDate"], &out.OccurrenceDate); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["appointment"], &out.Appointment); err != nil {
		return err
	}

	if len(asMap["participantType"]) > 0 {
		if err := go1.Unmarshal(asMap["participantType"], &out.ParticipantType); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["end"]) > 0 {
		if err := go1.Unmarshal(asMap["end"], &out.End); err != nil {
			return err
		}

	}
	if len(asMap["comment"]) > 0 {
		if err := go1.Unmarshal(asMap["comment"], &out.Comment); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["actor"]) > 0 {
		if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
			return err
		}

	}
	return nil
}

type AppointmentResponse struct {
	Start             *time.Time          `bson:",omitempty" json:"start,omitempty"`                                // Date/Time that the appointment is to take place, or requested new start time.
	RecurrenceId      *int                `bson:",omitempty" json:"recurrenceId,omitempty"`                         // The recurrence ID (sequence number) of the specific appointment when responding to a recurring request.
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                                // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta              *Meta               `bson:",omitempty" json:"meta,omitempty"`                                 // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Extension         []*Extension        `bson:",omitempty" json:"extension,omitempty"`                            // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ProposedNewTime   *bool               `bson:",omitempty" json:"proposedNewTime,omitempty"`                      // Indicates that the response is proposing a different time that was initially requested.  The new proposed time will be indicated in the start and end properties.
	ParticipantStatus *string             `binding:"required" bson:",omitempty" json:"participantStatus,omitempty"` // Participation status of the participant. When the status is declined or tentative if the start/end times are different to the appointment, then these times should be interpreted as a requested time change. When the status is accepted, the times can either be the time of the appointment (as a confirmation of the time) or can be empty.
	Recurring         *bool               `bson:",omitempty" json:"recurring,omitempty"`                            // Indicates that this AppointmentResponse applies to all occurrences in a recurring request.
	OccurrenceDate    *Date               `bson:",omitempty" json:"occurrenceDate,omitempty"`                       // The original date within a recurring request. This could be used in place of the recurrenceId to be more direct (or where the template is provided through the simple list of dates in `Appointment.occurrenceDate`).
	Text              *Narrative          `bson:",omitempty" json:"text,omitempty"`                                 // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained         []*Resource         `bson:",omitempty" json:"contained,omitempty"`                            // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Appointment       *Reference          `binding:"required" bson:",omitempty" json:"appointment,omitempty"`       // Appointment that this response is replying to.
	ParticipantType   []*CodeableConcept  `bson:",omitempty" json:"participantType,omitempty"`                      // Role of participant in the appointment.
	ImplicitRules     *string             `bson:",omitempty" json:"implicitRules,omitempty"`                        // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"`                    /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	End          *time.Time    `bson:",omitempty" json:"end,omitempty"`        // This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
	Comment      *string       `bson:",omitempty" json:"comment,omitempty"`    // Additional comments about the appointment.
	Language     *string       `bson:",omitempty" json:"language,omitempty"`   // The base language in which the resource is written.
	Identifier   []*Identifier `bson:",omitempty" json:"identifier,omitempty"` // This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
	Actor        *Reference    `bson:",omitempty" json:"actor,omitempty"`      // A Person, Location, HealthcareService, or Device that is participating in the appointment.
	ResourceType string        `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ArtifactAssessment) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ArtifactAssessment\"" {
		return fmt.Errorf("resourceType is not %s", "ArtifactAssessment")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["lastReviewDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastReviewDate"], &out.LastReviewDate); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["artifactReference"], &out.ArtifactReference); err == nil {
	} else if err := go1.Unmarshal(asMap["artifactCanonical"], &out.ArtifactCanonical); err == nil {
	} else if err := go1.Unmarshal(asMap["artifactUri"], &out.ArtifactUri); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "artifact[x]")
	}
	if len(asMap["content"]) > 0 {
		if err := go1.Unmarshal(asMap["content"], &out.Content); err != nil {
			return err
		}

	}
	if len(asMap["approvalDate"]) > 0 {
		if err := go1.Unmarshal(asMap["approvalDate"], &out.ApprovalDate); err != nil {
			return err
		}

	}
	if len(asMap["workflowStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["workflowStatus"], &out.WorkflowStatus); err != nil {
			return err
		}

	}
	if len(asMap["disposition"]) > 0 {
		if err := go1.Unmarshal(asMap["disposition"], &out.Disposition); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["citeAsReference"], &out.CiteAsReference); err == nil {
	} else if err := go1.Unmarshal(asMap["citeAsMarkdown"], &out.CiteAsMarkdown); err == nil {
	} else {

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	return nil
}

type ArtifactAssessment struct {
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Identifier        []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`        // A formal identifier that is used to identify this artifact assessment when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Copyright         *string             `bson:",omitempty" json:"copyright,omitempty"`         // A copyright statement relating to the artifact assessment and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the artifact assessment.
	LastReviewDate    *Date               `bson:",omitempty" json:"lastReviewDate,omitempty"`    // The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
	ImplicitRules     *string             `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained         []*Resource         `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension         []*Extension        `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Title             *string             `bson:",omitempty" json:"title,omitempty"`             // A short title for the assessment for use in displaying and selecting.
	Text              *Narrative          `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ArtifactAssessmentArtifactx
	Content        *ArtifactAssessmentContent `binding:"omitempty" bson:",omitempty"`
	ApprovalDate   *Date                      `bson:",omitempty" json:"approvalDate,omitempty"`   // The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
	WorkflowStatus *string                    `bson:",omitempty" json:"workflowStatus,omitempty"` // Indicates the workflow status of the comment or change request.
	Disposition    *string                    `bson:",omitempty" json:"disposition,omitempty"`    // Indicates the disposition of the responsible party to the comment or change request.
	Meta           *Meta                      `bson:",omitempty" json:"meta,omitempty"`           // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language       *string                    `bson:",omitempty" json:"language,omitempty"`       // The base language in which the resource is written.
	ArtifactAssessmentCiteAsx
	Date         *DateTime `bson:",omitempty" json:"date,omitempty"` // The date  (and optionally time) when the artifact assessment was published. The date must change when the disposition changes and it must change if the workflow status code changes. In addition, it should change when the substantive content of the artifact assessment changes.
	ResourceType string    `binding:"omitempty" bson:"-" json:"resourceType"`
}
type ArtifactAssessmentArtifactx struct {
	ArtifactReference Reference `bson:",omitempty" json:"artifactReference,omitempty"`
	ArtifactCanonical string    `bson:",omitempty" json:"artifactCanonical,omitempty"`
	ArtifactUri       string    `bson:",omitempty" json:"artifactUri,omitempty"`
}

func (out *ArtifactAssessmentContent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["path"]) > 0 {
		if err := go1.Unmarshal(asMap["path"], &out.Path); err != nil {
			return err
		}

	}
	if len(asMap["component"]) > 0 {
		if err := go1.Unmarshal(asMap["component"], &out.Component); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["summary"]) > 0 {
		if err := go1.Unmarshal(asMap["summary"], &out.Summary); err != nil {
			return err
		}

	}
	if len(asMap["classifier"]) > 0 {
		if err := go1.Unmarshal(asMap["classifier"], &out.Classifier); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["freeToShare"]) > 0 {
		if err := go1.Unmarshal(asMap["freeToShare"], &out.FreeToShare); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["informationType"]) > 0 {
		if err := go1.Unmarshal(asMap["informationType"], &out.InformationType); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["relatedArtifact"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedArtifact"], &out.RelatedArtifact); err != nil {
			return err
		}

	}
	return nil
}

type ArtifactAssessmentContent struct {
	Path              []*string `bson:",omitempty" json:"path,omitempty"` // A URI that points to what the comment is about, such as a line of text in the CQL, or a specific element in a resource.
	Component         interface{}
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Summary         *string            `bson:",omitempty" json:"summary,omitempty"`         // A brief summary of the content of this component.
	Classifier      []*CodeableConcept `bson:",omitempty" json:"classifier,omitempty"`      // Represents a rating, classifier, or assessment of the artifact.
	Quantity        *Quantity          `bson:",omitempty" json:"quantity,omitempty"`        // A quantitative rating of the artifact.
	FreeToShare     *bool              `bson:",omitempty" json:"freeToShare,omitempty"`     // Acceptable to publicly share the comment, classifier or rating.
	Id              *string            `bson:"_id,omitempty" json:"id,omitempty"`           // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	InformationType *string            `bson:",omitempty" json:"informationType,omitempty"` // The type of information this component of the content represents.
	Type            *CodeableConcept   `bson:",omitempty" json:"type,omitempty"`            // Indicates what type of content this component represents.
	Author          *Reference         `bson:",omitempty" json:"author,omitempty"`          // Indicates who or what authored the content.
	RelatedArtifact []*RelatedArtifact `bson:",omitempty" json:"relatedArtifact,omitempty"` // Additional related artifacts that provide supporting documentation, additional evidence, or further information related to the content.
}
type ArtifactAssessmentCiteAsx struct {
	CiteAsReference Reference `bson:",omitempty" json:"citeAsReference,omitempty"`
	CiteAsMarkdown  string    `bson:",omitempty" json:"citeAsMarkdown,omitempty"`
}

func (out *AuditEvent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"AuditEvent\"" {
		return fmt.Errorf("resourceType is not %s", "AuditEvent")
	}
	if len(asMap["severity"]) > 0 {
		if err := go1.Unmarshal(asMap["severity"], &out.Severity); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["agent"], &out.Agent); err != nil {
		return err
	}

	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["recorded"], &out.Recorded); err != nil {
		return err
	}

	if len(asMap["authorization"]) > 0 {
		if err := go1.Unmarshal(asMap["authorization"], &out.Authorization); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["patient"]) > 0 {
		if err := go1.Unmarshal(asMap["patient"], &out.Patient); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["action"]) > 0 {
		if err := go1.Unmarshal(asMap["action"], &out.Action); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["occurredPeriod"], &out.OccurredPeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["occurredDateTime"], &out.OccurredDateTime); err == nil {
	} else {

	}
	if len(asMap["outcome"]) > 0 {
		if err := go1.Unmarshal(asMap["outcome"], &out.Outcome); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
		return err
	}

	if len(asMap["entity"]) > 0 {
		if err := go1.Unmarshal(asMap["entity"], &out.Entity); err != nil {
			return err
		}

	}
	return nil
}

type AuditEvent struct {
	Severity      *string            `bson:",omitempty" json:"severity,omitempty"`      // Indicates and enables segmentation of various severity including debugging from critical.
	BasedOn       []*Reference       `bson:",omitempty" json:"basedOn,omitempty"`       // Allows tracing of authorizatino for the events and tracking whether proposals/recommendations were acted upon.
	Meta          *Meta              `bson:",omitempty" json:"meta,omitempty"`          // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules *string            `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Extension     []*Extension       `bson:",omitempty" json:"extension,omitempty"`     // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Agent         *AuditEventAgent   `binding:"omitempty" bson:",omitempty"`
	Text          *Narrative         `bson:",omitempty" json:"text,omitempty"`                        // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Recorded      *time.Time         `binding:"required" bson:",omitempty" json:"recorded,omitempty"` // The time when the event was recorded.
	Authorization []*CodeableConcept `bson:",omitempty" json:"authorization,omitempty"`               // The authorization (e.g., PurposeOfUse) that was used during the event being recorded.
	Contained     []*Resource        `bson:",omitempty" json:"contained,omitempty"`                   // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Patient       *Reference         `bson:",omitempty" json:"patient,omitempty"`                     // The patient element is available to enable deterministic tracking of activities that involve the patient as the subject of the data used in an activity.
	Encounter     *Reference         `bson:",omitempty" json:"encounter,omitempty"`                   // This will typically be the encounter the event occurred, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission lab tests).
	Category      []*CodeableConcept `bson:",omitempty" json:"category,omitempty"`                    // Classification of the type of event.
	Code          *CodeableConcept   `binding:"required" bson:",omitempty" json:"code,omitempty"`     // Describes what happened. The most specific code for the event.
	Action        *string            `bson:",omitempty" json:"action,omitempty"`                      // Indicator for type of action performed during the event that generated the audit.
	AuditEventOccurredx
	Outcome           *AuditEventOutcome  `binding:"omitempty" bson:",omitempty"`
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language          *string             `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Source       *AuditEventSource `binding:"omitempty" bson:",omitempty"`
	Entity       *AuditEventEntity `binding:"omitempty" bson:",omitempty"`
	ResourceType string            `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *AuditEventAgent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["policy"]) > 0 {
		if err := go1.Unmarshal(asMap["policy"], &out.Policy); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["networkReference"], &out.NetworkReference); err == nil {
	} else if err := go1.Unmarshal(asMap["networkUri"], &out.NetworkUri); err == nil {
	} else if err := go1.Unmarshal(asMap["networkString"], &out.NetworkString); err == nil {
	} else {

	}
	if len(asMap["authorization"]) > 0 {
		if err := go1.Unmarshal(asMap["authorization"], &out.Authorization); err != nil {
			return err
		}

	}
	if len(asMap["requestor"]) > 0 {
		if err := go1.Unmarshal(asMap["requestor"], &out.Requestor); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["role"]) > 0 {
		if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["who"], &out.Who); err != nil {
		return err
	}

	return nil
}

type AuditEventAgent struct {
	Id     *string   `bson:"_id,omitempty" json:"id,omitempty"`  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Policy []*string `bson:",omitempty" json:"policy,omitempty"` // Where the policy(ies) are known that authorized the agent participation in the event. Typically, a single activity may have multiple applicable policies, such as patient consent, guarantor funding, etc. The policy would also indicate the security token used.
	AuditEventAgentNetworkx
	Authorization     []*CodeableConcept `bson:",omitempty" json:"authorization,omitempty"`     // The authorization (e.g., PurposeOfUse) that was used during the event being recorded.
	Requestor         *bool              `bson:",omitempty" json:"requestor,omitempty"`         // Indicator that the user is or is not the requestor, or initiator, for the event being audited.
	Location          *Reference         `bson:",omitempty" json:"location,omitempty"`          // Where the agent location is known, the agent location when the event occurred.
	Extension         []*Extension       `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept   `bson:",omitempty" json:"type,omitempty"`                   // The Functional Role of the user when performing the event.
	Role []*CodeableConcept `bson:",omitempty" json:"role,omitempty"`                   // The structural roles of the agent indicating the agent's competency. The security role enabling the agent with respect to the activity.
	Who  *Reference         `binding:"required" bson:",omitempty" json:"who,omitempty"` // Reference to who this agent is that was involved in the event.
}
type AuditEventAgentNetworkx struct {
	NetworkReference Reference `bson:",omitempty" json:"networkReference,omitempty"`
	NetworkUri       string    `bson:",omitempty" json:"networkUri,omitempty"`
	NetworkString    string    `bson:",omitempty" json:"networkString,omitempty"`
}
type AuditEventOccurredx struct {
	OccurredPeriod   Period   `bson:",omitempty" json:"occurredPeriod,omitempty"`
	OccurredDateTime DateTime `bson:",omitempty" json:"occurredDateTime,omitempty"`
}

func (out *AuditEventOutcome) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["detail"]) > 0 {
		if err := go1.Unmarshal(asMap["detail"], &out.Detail); err != nil {
			return err
		}

	}
	return nil
}

type AuditEventOutcome struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code   *Coding            `binding:"required" bson:",omitempty" json:"code,omitempty"` // Indicates whether the event succeeded or failed.
	Detail []*CodeableConcept `bson:",omitempty" json:"detail,omitempty"`                  // Additional details about the error. This may be a text description of the error or a system code that identifies the error.
}

func (out *AuditEventSource) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["site"]) > 0 {
		if err := go1.Unmarshal(asMap["site"], &out.Site); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["observer"], &out.Observer); err != nil {
		return err
	}

	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	return nil
}

type AuditEventSource struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Site     *Reference         `bson:",omitempty" json:"site,omitempty"`                        // Logical source location within the healthcare enterprise network.  For example, a hospital or other provider location within a multi-entity provider group.
	Observer *Reference         `binding:"required" bson:",omitempty" json:"observer,omitempty"` // Identifier of the source where the event was detected.
	Type     []*CodeableConcept `bson:",omitempty" json:"type,omitempty"`                        // Code specifying the type of source where event originated.
}

func (out *AuditEventEntity) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["securityLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["securityLabel"], &out.SecurityLabel); err != nil {
			return err
		}

	}
	if len(asMap["detail"]) > 0 {
		if err := go1.Unmarshal(asMap["detail"], &out.Detail); err != nil {
			return err
		}

	}
	if len(asMap["agent"]) > 0 {
		if err := go1.Unmarshal(asMap["agent"], &out.Agent); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["what"]) > 0 {
		if err := go1.Unmarshal(asMap["what"], &out.What); err != nil {
			return err
		}

	}
	if len(asMap["role"]) > 0 {
		if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
			return err
		}

	}
	if len(asMap["query"]) > 0 {
		if err := go1.Unmarshal(asMap["query"], &out.Query); err != nil {
			return err
		}

	}
	return nil
}

type AuditEventEntity struct {
	Id                *string                 `bson:"_id,omitempty" json:"id,omitempty"`         // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	SecurityLabel     []*CodeableConcept      `bson:",omitempty" json:"securityLabel,omitempty"` // Security labels for the identified entity.
	Detail            *AuditEventEntityDetail `binding:"omitempty" bson:",omitempty"`
	Agent             interface{}
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	What  *Reference       `bson:",omitempty" json:"what,omitempty"`  // Identifies a specific instance of the entity. The reference should be version specific. This is allowed to be a Parameters resource.
	Role  *CodeableConcept `bson:",omitempty" json:"role,omitempty"`  // Code representing the role the entity played in the event being audited.
	Query Base64Binary     `bson:",omitempty" json:"query,omitempty"` // The query parameters for a query-type entities.
}

func (out *AuditEventEntityDetail) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRatio"], &out.ValueRatio); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTime"], &out.ValueTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDateTime"], &out.ValueDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valuePeriod"], &out.ValuePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBase64Binary"], &out.ValueBase64Binary); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	return nil
}

type AuditEventEntityDetail struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // The type of extra detail provided in the value.
	AuditEventEntityDetailValuex
}
type AuditEventEntityDetailValuex struct {
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueString          string          `bson:",omitempty" json:"valueString,omitempty"`
	ValueBoolean         bool            `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueInteger         int             `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueRange           Range           `bson:",omitempty" json:"valueRange,omitempty"`
	ValueRatio           Ratio           `bson:",omitempty" json:"valueRatio,omitempty"`
	ValueTime            Time            `bson:",omitempty" json:"valueTime,omitempty"`
	ValueDateTime        DateTime        `bson:",omitempty" json:"valueDateTime,omitempty"`
	ValuePeriod          Period          `bson:",omitempty" json:"valuePeriod,omitempty"`
	ValueBase64Binary    Base64Binary    `bson:",omitempty" json:"valueBase64Binary,omitempty"`
}

func (out *Basic) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Basic\"" {
		return fmt.Errorf("resourceType is not %s", "Basic")
	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["created"]) > 0 {
		if err := go1.Unmarshal(asMap["created"], &out.Created); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	return nil
}

type Basic struct {
	Subject           *Reference          `bson:",omitempty" json:"subject,omitempty"`                 // Identifies the patient, practitioner, device or any other resource that is the "focus" of this resource.
	Author            *Reference          `bson:",omitempty" json:"author,omitempty"`                  // Indicates who was responsible for creating the resource instance.
	Meta              *Meta               `bson:",omitempty" json:"meta,omitempty"`                    // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules     *string             `bson:",omitempty" json:"implicitRules,omitempty"`           // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained         []*Resource         `bson:",omitempty" json:"contained,omitempty"`               // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension         []*Extension        `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Code              *CodeableConcept    `binding:"required" bson:",omitempty" json:"code,omitempty"` // Identifies the 'type' of resource - equivalent to the resource name for other resources.
	Created           *DateTime           `bson:",omitempty" json:"created,omitempty"`                 // Identifies when the resource was first created.
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                   // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language          *string             `bson:",omitempty" json:"language,omitempty"`                // The base language in which the resource is written.
	Text              *Narrative          `bson:",omitempty" json:"text,omitempty"`                    // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"`       /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier   []*Identifier `bson:",omitempty" json:"identifier,omitempty"` // Identifier assigned to the resource for business purposes, outside the context of FHIR.
	ResourceType string        `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *Binary) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Binary\"" {
		return fmt.Errorf("resourceType is not %s", "Binary")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["contentType"], &out.ContentType); err != nil {
		return err
	}

	if len(asMap["securityContext"]) > 0 {
		if err := go1.Unmarshal(asMap["securityContext"], &out.SecurityContext); err != nil {
			return err
		}

	}
	if len(asMap["data"]) > 0 {
		if err := go1.Unmarshal(asMap["data"], &out.Data); err != nil {
			return err
		}

	}
	return nil
}

type Binary struct {
	Id              *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                          // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta            *Meta               `bson:",omitempty" json:"meta,omitempty"`                           // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules   *string             `bson:",omitempty" json:"implicitRules,omitempty"`                  // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language        *string             `bson:",omitempty" json:"language,omitempty"`                       // The base language in which the resource is written.
	ContentType     *string             `binding:"required" bson:",omitempty" json:"contentType,omitempty"` // MimeType of the binary content represented as a standard MimeType (BCP 13).
	SecurityContext *Reference          `bson:",omitempty" json:"securityContext,omitempty"`                // This element identifies another resource that can be used as a proxy of the security sensitivity to use when deciding and enforcing access control rules for the Binary resource. Given that the Binary resource contains very few elements that can be used to determine the sensitivity of the data and relationships to individuals, the referenced resource stands in as a proxy equivalent for this purpose. This referenced resource may be related to the Binary (e.g. DocumentReference), or may be some non-related Resource purely as a security proxy. E.g. to identify that the binary resource relates to a patient, and access should only be granted to applications that have access to the patient.
	Data            *Base64Binary       `bson:",omitempty" json:"data,omitempty"`                           // The actual content, base64 encoded.
	ResourceType    string              `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *BiologicallyDerivedProduct) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"BiologicallyDerivedProduct\"" {
		return fmt.Errorf("resourceType is not %s", "BiologicallyDerivedProduct")
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["parent"]) > 0 {
		if err := go1.Unmarshal(asMap["parent"], &out.Parent); err != nil {
			return err
		}

	}
	if len(asMap["storageTempRequirements"]) > 0 {
		if err := go1.Unmarshal(asMap["storageTempRequirements"], &out.StorageTempRequirements); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["productCategory"]) > 0 {
		if err := go1.Unmarshal(asMap["productCategory"], &out.ProductCategory); err != nil {
			return err
		}

	}
	if len(asMap["productCode"]) > 0 {
		if err := go1.Unmarshal(asMap["productCode"], &out.ProductCode); err != nil {
			return err
		}

	}
	if len(asMap["processingFacility"]) > 0 {
		if err := go1.Unmarshal(asMap["processingFacility"], &out.ProcessingFacility); err != nil {
			return err
		}

	}
	if len(asMap["division"]) > 0 {
		if err := go1.Unmarshal(asMap["division"], &out.Division); err != nil {
			return err
		}

	}
	if len(asMap["productStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["productStatus"], &out.ProductStatus); err != nil {
			return err
		}

	}
	if len(asMap["expirationDate"]) > 0 {
		if err := go1.Unmarshal(asMap["expirationDate"], &out.ExpirationDate); err != nil {
			return err
		}

	}
	if len(asMap["collection"]) > 0 {
		if err := go1.Unmarshal(asMap["collection"], &out.Collection); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["property"]) > 0 {
		if err := go1.Unmarshal(asMap["property"], &out.Property); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["biologicalSourceEvent"]) > 0 {
		if err := go1.Unmarshal(asMap["biologicalSourceEvent"], &out.BiologicalSourceEvent); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["request"]) > 0 {
		if err := go1.Unmarshal(asMap["request"], &out.Request); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	return nil
}

type BiologicallyDerivedProduct struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Parent                  []*Reference                          `bson:",omitempty" json:"parent,omitempty"`                  // Parent product (if any) for this biologically-derived product.
	StorageTempRequirements *Range                                `bson:",omitempty" json:"storageTempRequirements,omitempty"` // The temperature requirements for storage of the biologically-derived product.
	Contained               []*Resource                           `bson:",omitempty" json:"contained,omitempty"`               // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ProductCategory         *Coding                               `bson:",omitempty" json:"productCategory,omitempty"`         // Broad category of this product.
	ProductCode             *CodeableConcept                      `bson:",omitempty" json:"productCode,omitempty"`             // A codified value that systematically supports characterization and classification of medical products of human origin inclusive of processing conditions such as additives, volumes and handling conditions.
	ProcessingFacility      []*Reference                          `bson:",omitempty" json:"processingFacility,omitempty"`      // Processing facilities responsible for the labeling and distribution of this biologically derived product.
	Division                *string                               `bson:",omitempty" json:"division,omitempty"`                // A unique identifier for an aliquot of a product.  Used to distinguish individual aliquots of a product carrying the same biologicalSource and productCode identifiers.
	ProductStatus           *Coding                               `bson:",omitempty" json:"productStatus,omitempty"`           // Whether the product is currently available.
	ExpirationDate          *DateTime                             `bson:",omitempty" json:"expirationDate,omitempty"`          // Date, and where relevant time, of expiration.
	Collection              *BiologicallyDerivedProductCollection `binding:"omitempty" bson:",omitempty"`
	Language                *string                               `bson:",omitempty" json:"language,omitempty"` // The base language in which the resource is written.
	Property                *BiologicallyDerivedProductProperty   `binding:"omitempty" bson:",omitempty"`
	Meta                    *Meta                                 `bson:",omitempty" json:"meta,omitempty"`                  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Text                    *Narrative                            `bson:",omitempty" json:"text,omitempty"`                  // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	BiologicalSourceEvent   *Identifier                           `bson:",omitempty" json:"biologicalSourceEvent,omitempty"` // An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled.
	Id                      *primitive.ObjectID                   `bson:"_id,omitempty" json:"id,omitempty"`                 // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Request                 []*Reference                          `bson:",omitempty" json:"request,omitempty"`               // Request to obtain and/or infuse this biologically derived product.
	Identifier              []*Identifier                         `bson:",omitempty" json:"identifier,omitempty"`            // Unique instance identifiers assigned to a biologically derived product. Note: This is a business identifier, not a resource identifier.
	ImplicitRules           *string                               `bson:",omitempty" json:"implicitRules,omitempty"`         // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ResourceType            string                                `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *BiologicallyDerivedProductCollection) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["collector"]) > 0 {
		if err := go1.Unmarshal(asMap["collector"], &out.Collector); err != nil {
			return err
		}

	}
	if len(asMap["source"]) > 0 {
		if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["collectedDateTime"], &out.CollectedDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["collectedPeriod"], &out.CollectedPeriod); err == nil {
	} else {

	}
	return nil
}

type BiologicallyDerivedProductCollection struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Collector *Reference `bson:",omitempty" json:"collector,omitempty"` // Healthcare professional who is performing the collection.
	Source    *Reference `bson:",omitempty" json:"source,omitempty"`    // The patient or entity, such as a hospital or vendor in the case of a processed/manipulated/manufactured product, providing the product.
	BiologicallyDerivedProductCollectionCollectedx
}
type BiologicallyDerivedProductCollectionCollectedx struct {
	CollectedDateTime DateTime `bson:",omitempty" json:"collectedDateTime,omitempty"`
	CollectedPeriod   Period   `bson:",omitempty" json:"collectedPeriod,omitempty"`
}

func (out *BiologicallyDerivedProductProperty) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valuePeriod"], &out.ValuePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRatio"], &out.ValueRatio); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	return nil
}

type BiologicallyDerivedProductProperty struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // Code that specifies the property. It should reference an established coding system.
	BiologicallyDerivedProductPropertyValuex
}
type BiologicallyDerivedProductPropertyValuex struct {
	ValueBoolean         bool            `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueInteger         int             `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValuePeriod          Period          `bson:",omitempty" json:"valuePeriod,omitempty"`
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueRange           Range           `bson:",omitempty" json:"valueRange,omitempty"`
	ValueRatio           Ratio           `bson:",omitempty" json:"valueRatio,omitempty"`
	ValueString          string          `bson:",omitempty" json:"valueString,omitempty"`
	ValueAttachment      Attachment      `bson:",omitempty" json:"valueAttachment,omitempty"`
}

func (out *BiologicallyDerivedProductDispense) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"BiologicallyDerivedProductDispense\"" {
		return fmt.Errorf("resourceType is not %s", "BiologicallyDerivedProductDispense")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["product"], &out.Product); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["patient"], &out.Patient); err != nil {
		return err
	}

	if len(asMap["matchStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["matchStatus"], &out.MatchStatus); err != nil {
			return err
		}

	}
	if len(asMap["destination"]) > 0 {
		if err := go1.Unmarshal(asMap["destination"], &out.Destination); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["originRelationshipType"]) > 0 {
		if err := go1.Unmarshal(asMap["originRelationshipType"], &out.OriginRelationshipType); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["preparedDate"]) > 0 {
		if err := go1.Unmarshal(asMap["preparedDate"], &out.PreparedDate); err != nil {
			return err
		}

	}
	if len(asMap["whenHandedOver"]) > 0 {
		if err := go1.Unmarshal(asMap["whenHandedOver"], &out.WhenHandedOver); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["usageInstruction"]) > 0 {
		if err := go1.Unmarshal(asMap["usageInstruction"], &out.UsageInstruction); err != nil {
			return err
		}

	}
	return nil
}

type BiologicallyDerivedProductDispense struct {
	Id                     *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language               *string             `bson:",omitempty" json:"language,omitempty"`                   // The base language in which the resource is written.
	Identifier             []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`                 // Unique instance identifiers assigned to a biologically derived product dispense. Note: This is a business identifier, not a resource identifier.
	Product                *Reference          `binding:"required" bson:",omitempty" json:"product,omitempty"` // A link to a resource identifying the biologically derived product that is being dispensed.
	Patient                *Reference          `binding:"required" bson:",omitempty" json:"patient,omitempty"` // A link to a resource representing the patient that the product is dispensed for.
	MatchStatus            *CodeableConcept    `bson:",omitempty" json:"matchStatus,omitempty"`                // Indicates the type of matching associated with the dispense.
	Destination            *Reference          `bson:",omitempty" json:"destination,omitempty"`                // Link to a resource identifying the physical location that the product was dispatched to.
	ImplicitRules          *string             `bson:",omitempty" json:"implicitRules,omitempty"`              // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	BasedOn                []*Reference        `bson:",omitempty" json:"basedOn,omitempty"`                    // The order or request that the dispense is fulfilling. This is a reference to a ServiceRequest resource.
	Status                 *string             `binding:"required" bson:",omitempty" json:"status,omitempty"`  // A code specifying the state of the dispense event.
	OriginRelationshipType *CodeableConcept    `bson:",omitempty" json:"originRelationshipType,omitempty"`     // Indicates the relationship between the donor of the biologically derived product and the intended recipient.
	Location               *Reference          `bson:",omitempty" json:"location,omitempty"`                   // The physical location where the dispense was performed.
	PreparedDate           *DateTime           `bson:",omitempty" json:"preparedDate,omitempty"`               // When the product was selected/ matched.
	WhenHandedOver         *DateTime           `bson:",omitempty" json:"whenHandedOver,omitempty"`             // When the product was dispatched for clinical use.
	Note                   []*Annotation       `bson:",omitempty" json:"note,omitempty"`                       // Additional notes.
	Meta                   *Meta               `bson:",omitempty" json:"meta,omitempty"`                       // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Text                   *Narrative          `bson:",omitempty" json:"text,omitempty"`                       // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained              []*Resource         `bson:",omitempty" json:"contained,omitempty"`                  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension      []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"`          /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	PartOf           []*Reference                                 `bson:",omitempty" json:"partOf,omitempty"` // A larger event of which this particular event is a component.
	Performer        *BiologicallyDerivedProductDispensePerformer `binding:"omitempty" bson:",omitempty"`
	Quantity         *Quantity                                    `bson:",omitempty" json:"quantity,omitempty"`         // The amount of product in the dispense. Quantity will depend on the product being dispensed. Examples are: volume; cell count; concentration.
	Extension        []*Extension                                 `bson:",omitempty" json:"extension,omitempty"`        // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	UsageInstruction *string                                      `bson:",omitempty" json:"usageInstruction,omitempty"` // Specific instructions for use.
	ResourceType     string                                       `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *BiologicallyDerivedProductDispensePerformer) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
		return err
	}

	return nil
}

type BiologicallyDerivedProductDispensePerformer struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Function *CodeableConcept `bson:",omitempty" json:"function,omitempty"`                 // Identifies the function of the performer during the dispense.
	Actor    *Reference       `binding:"required" bson:",omitempty" json:"actor,omitempty"` // Identifies the person responsible for the action.
}

func (out *BodyStructure) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"BodyStructure\"" {
		return fmt.Errorf("resourceType is not %s", "BodyStructure")
	}
	if err := go1.Unmarshal(asMap["patient"], &out.Patient); err != nil {
		return err
	}

	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["active"]) > 0 {
		if err := go1.Unmarshal(asMap["active"], &out.Active); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["morphology"]) > 0 {
		if err := go1.Unmarshal(asMap["morphology"], &out.Morphology); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["includedStructure"], &out.IncludedStructure); err != nil {
		return err
	}

	if len(asMap["image"]) > 0 {
		if err := go1.Unmarshal(asMap["image"], &out.Image); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["excludedStructure"]) > 0 {
		if err := go1.Unmarshal(asMap["excludedStructure"], &out.ExcludedStructure); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type BodyStructure struct {
	Patient           *Reference   `binding:"required" bson:",omitempty" json:"patient,omitempty"` // The person to which the body site belongs.
	Language          *string      `bson:",omitempty" json:"language,omitempty"`                   // The base language in which the resource is written.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`          /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Active            *bool                           `bson:",omitempty" json:"active,omitempty"`     // Whether this body site is in active use.
	Contained         []*Resource                     `bson:",omitempty" json:"contained,omitempty"`  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Identifier        []*Identifier                   `bson:",omitempty" json:"identifier,omitempty"` // Identifier for this instance of the anatomical structure.
	Morphology        *CodeableConcept                `bson:",omitempty" json:"morphology,omitempty"` // The kind of structure being represented by the body structure at `BodyStructure.location`.  This can define both normal and abnormal morphologies.
	IncludedStructure *BodyStructureIncludedStructure `binding:"omitempty" bson:",omitempty"`
	Image             []*Attachment                   `bson:",omitempty" json:"image,omitempty"`         // Image or images used to identify a location.
	Extension         []*Extension                    `bson:",omitempty" json:"extension,omitempty"`     // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Meta              *Meta                           `bson:",omitempty" json:"meta,omitempty"`          // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules     *string                         `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text              *Narrative                      `bson:",omitempty" json:"text,omitempty"`          // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ExcludedStructure interface{}
	Description       *string             `bson:",omitempty" json:"description,omitempty"` // A summary, characterization or explanation of the body structure.
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`       // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ResourceType      string              `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *BodyStructureIncludedStructure) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["bodyLandmarkOrientation"]) > 0 {
		if err := go1.Unmarshal(asMap["bodyLandmarkOrientation"], &out.BodyLandmarkOrientation); err != nil {
			return err
		}

	}
	if len(asMap["spatialReference"]) > 0 {
		if err := go1.Unmarshal(asMap["spatialReference"], &out.SpatialReference); err != nil {
			return err
		}

	}
	if len(asMap["qualifier"]) > 0 {
		if err := go1.Unmarshal(asMap["qualifier"], &out.Qualifier); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["structure"], &out.Structure); err != nil {
		return err
	}

	if len(asMap["laterality"]) > 0 {
		if err := go1.Unmarshal(asMap["laterality"], &out.Laterality); err != nil {
			return err
		}

	}
	return nil
}

type BodyStructureIncludedStructure struct {
	BodyLandmarkOrientation *BodyStructureIncludedStructureBodyLandmarkOrientation `binding:"omitempty" bson:",omitempty"`
	SpatialReference        []*Reference                                           `bson:",omitempty" json:"spatialReference,omitempty"`  // XY or XYZ-coordinate orientation for structure.
	Qualifier               []*CodeableConcept                                     `bson:",omitempty" json:"qualifier,omitempty"`         // Code that represents the included structure qualifier.
	Id                      *string                                                `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension               []*Extension                                           `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension       []*Extension                                           `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Structure  *CodeableConcept `binding:"required" bson:",omitempty" json:"structure,omitempty"` // Code that represents the included structure.
	Laterality *CodeableConcept `bson:",omitempty" json:"laterality,omitempty"`                   // Code that represents the included structure laterality.
}

func (out *BodyStructureIncludedStructureBodyLandmarkOrientation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["landmarkDescription"]) > 0 {
		if err := go1.Unmarshal(asMap["landmarkDescription"], &out.LandmarkDescription); err != nil {
			return err
		}

	}
	if len(asMap["clockFacePosition"]) > 0 {
		if err := go1.Unmarshal(asMap["clockFacePosition"], &out.ClockFacePosition); err != nil {
			return err
		}

	}
	if len(asMap["distanceFromLandmark"]) > 0 {
		if err := go1.Unmarshal(asMap["distanceFromLandmark"], &out.DistanceFromLandmark); err != nil {
			return err
		}

	}
	if len(asMap["surfaceOrientation"]) > 0 {
		if err := go1.Unmarshal(asMap["surfaceOrientation"], &out.SurfaceOrientation); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type BodyStructureIncludedStructureBodyLandmarkOrientation struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	LandmarkDescription  []*CodeableConcept                                                         `bson:",omitempty" json:"landmarkDescription,omitempty"` // A description of a landmark on the body used as a reference to locate something else.
	ClockFacePosition    []*CodeableConcept                                                         `bson:",omitempty" json:"clockFacePosition,omitempty"`   // An description of the direction away from a landmark something is located based on a radial clock dial.
	DistanceFromLandmark *BodyStructureIncludedStructureBodyLandmarkOrientationDistanceFromLandmark `binding:"omitempty" bson:",omitempty"`
	SurfaceOrientation   []*CodeableConcept                                                         `bson:",omitempty" json:"surfaceOrientation,omitempty"` // The surface area a body location is in relation to a landmark.
	Id                   *string                                                                    `bson:"_id,omitempty" json:"id,omitempty"`              // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *BodyStructureIncludedStructureBodyLandmarkOrientationDistanceFromLandmark) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["device"]) > 0 {
		if err := go1.Unmarshal(asMap["device"], &out.Device); err != nil {
			return err
		}

	}
	if len(asMap["value"]) > 0 {
		if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
			return err
		}

	}
	return nil
}

type BodyStructureIncludedStructureBodyLandmarkOrientationDistanceFromLandmark struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Device []*CodeableReference `bson:",omitempty" json:"device,omitempty"` // An instrument, tool, analyzer, etc. used in the measurement.
	Value  []*Quantity          `bson:",omitempty" json:"value,omitempty"`  // The measured distance (e.g., in cm) from a body landmark.
}

func (out *Bundle) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Bundle\"" {
		return fmt.Errorf("resourceType is not %s", "Bundle")
	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["timestamp"]) > 0 {
		if err := go1.Unmarshal(asMap["timestamp"], &out.Timestamp); err != nil {
			return err
		}

	}
	if len(asMap["total"]) > 0 {
		if err := go1.Unmarshal(asMap["total"], &out.Total); err != nil {
			return err
		}

	}
	if len(asMap["issues"]) > 0 {
		if err := go1.Unmarshal(asMap["issues"], &out.Issues); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["link"]) > 0 {
		if err := go1.Unmarshal(asMap["link"], &out.Link); err != nil {
			return err
		}

	}
	if len(asMap["entry"]) > 0 {
		if err := go1.Unmarshal(asMap["entry"], &out.Entry); err != nil {
			return err
		}

	}
	if len(asMap["signature"]) > 0 {
		if err := go1.Unmarshal(asMap["signature"], &out.Signature); err != nil {
			return err
		}

	}
	return nil
}

type Bundle struct {
	Meta          *Meta               `bson:",omitempty" json:"meta,omitempty"`                    // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules *string             `bson:",omitempty" json:"implicitRules,omitempty"`           // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Identifier    *Identifier         `bson:",omitempty" json:"identifier,omitempty"`              // A persistent identifier for the bundle that won't change as a bundle is copied from server to server.
	Type          *string             `binding:"required" bson:",omitempty" json:"type,omitempty"` // Indicates the purpose of this bundle - how it is intended to be used.
	Timestamp     *time.Time          `bson:",omitempty" json:"timestamp,omitempty"`               // The date/time that the bundle was assembled - i.e. when the resources were placed in the bundle.
	Total         int                 `bson:",omitempty" json:"total,omitempty"`                   // If a set of search matches, this is the (potentially estimated) total number of entries of type 'match' across all pages in the search.  It does not include search.mode = 'include' or 'outcome' entries and it does not provide a count of the number of entries in the Bundle.
	Issues        *Resource           `bson:",omitempty" json:"issues,omitempty"`                  // Captures issues and warnings that relate to the construction of the Bundle and the content within it.
	Id            *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                   // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language      *string             `bson:",omitempty" json:"language,omitempty"`                // The base language in which the resource is written.
	Link          *BundleLink         `binding:"omitempty" bson:",omitempty"`
	Entry         *BundleEntry        `binding:"omitempty" bson:",omitempty"`
	Signature     Signature           `bson:",omitempty" json:"signature,omitempty"` // Digital Signature - base64 encoded. XML-DSig or a JWS.
	ResourceType  string              `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *BundleLink) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["relation"], &out.Relation); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
		return err
	}

	return nil
}

type BundleLink struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Relation *string `binding:"required" bson:",omitempty" json:"relation,omitempty"` // A name which details the functional use for this link - see [http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1](http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1).
	Url      *string `binding:"required" bson:",omitempty" json:"url,omitempty"`      // The reference details for the link.
}

func (out *BundleEntry) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["search"]) > 0 {
		if err := go1.Unmarshal(asMap["search"], &out.Search); err != nil {
			return err
		}

	}
	if len(asMap["request"]) > 0 {
		if err := go1.Unmarshal(asMap["request"], &out.Request); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["fullUrl"]) > 0 {
		if err := go1.Unmarshal(asMap["fullUrl"], &out.FullUrl); err != nil {
			return err
		}

	}
	if len(asMap["resource"]) > 0 {
		if err := go1.Unmarshal(asMap["resource"], &out.Resource); err != nil {
			return err
		}

	}
	if len(asMap["response"]) > 0 {
		if err := go1.Unmarshal(asMap["response"], &out.Response); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["link"]) > 0 {
		if err := go1.Unmarshal(asMap["link"], &out.Link); err != nil {
			return err
		}

	}
	return nil
}

type BundleEntry struct {
	Search  *BundleEntrySearch  `binding:"omitempty" bson:",omitempty"`
	Request *BundleEntryRequest `binding:"omitempty" bson:",omitempty"`
	Id      *string             `bson:"_id,omitempty" json:"id,omitempty"`   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	FullUrl *string             `bson:",omitempty" json:"fullUrl,omitempty"` /*
	The Absolute URL for the resource. Except for transactions and batches, each entry in a Bundle must have a fullUrl. The fullUrl SHALL NOT disagree with the id in the resource - i.e. if the fullUrl is not a urn:uuid, the URL shall be version-independent URL consistent with the Resource.id. The fullUrl is a version independent reference to the resource. Even when not required, fullUrl MAY be set to a urn:uuid to allow referencing entries in a transaction. The fullUrl can be an arbitrary URI and is not limited to urn:uuid, urn:oid, http, and https. The fullUrl element SHALL have a value except when:
	* invoking a create
	* invoking or responding to an operation where the body is not a single identified resource
	* invoking or returning the results of a search or history operation.
	*/
	Resource          *Resource            `bson:",omitempty" json:"resource,omitempty"` // The Resource for the entry. The purpose/meaning of the resource is determined by the Bundle.type. This is allowed to be a Parameters resource if and only if it is referenced by something else within the Bundle that provides context/meaning.
	Response          *BundleEntryResponse `binding:"omitempty" bson:",omitempty"`
	Extension         []*Extension         `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Link interface{}
}

func (out *BundleEntrySearch) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["mode"]) > 0 {
		if err := go1.Unmarshal(asMap["mode"], &out.Mode); err != nil {
			return err
		}

	}
	if len(asMap["score"]) > 0 {
		if err := go1.Unmarshal(asMap["score"], &out.Score); err != nil {
			return err
		}

	}
	return nil
}

type BundleEntrySearch struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Mode  *string `bson:",omitempty" json:"mode,omitempty"`  // Why this entry is in the result set - whether it's included as a match or because of an _include requirement, or to convey information or warning information about the search process.
	Score float64 `bson:",omitempty" json:"score,omitempty"` // When searching, the server's search ranking score for the entry.
}

func (out *BundleEntryRequest) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
		return err
	}

	if len(asMap["ifNoneMatch"]) > 0 {
		if err := go1.Unmarshal(asMap["ifNoneMatch"], &out.IfNoneMatch); err != nil {
			return err
		}

	}
	if len(asMap["ifNoneExist"]) > 0 {
		if err := go1.Unmarshal(asMap["ifNoneExist"], &out.IfNoneExist); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["method"], &out.Method); err != nil {
		return err
	}

	if len(asMap["ifModifiedSince"]) > 0 {
		if err := go1.Unmarshal(asMap["ifModifiedSince"], &out.IfModifiedSince); err != nil {
			return err
		}

	}
	if len(asMap["ifMatch"]) > 0 {
		if err := go1.Unmarshal(asMap["ifMatch"], &out.IfMatch); err != nil {
			return err
		}

	}
	return nil
}

type BundleEntryRequest struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Url             *string    `binding:"required" bson:",omitempty" json:"url,omitempty"`    // The URL for this entry, relative to the root (the address to which the request is posted).
	IfNoneMatch     *string    `bson:",omitempty" json:"ifNoneMatch,omitempty"`               // If the ETag values match, return a 304 Not Modified status. See the API documentation for ["Conditional Read"](http.html#cread).
	IfNoneExist     *string    `bson:",omitempty" json:"ifNoneExist,omitempty"`               // Instruct the server not to perform the create if a specified resource already exists. For further information, see the API documentation for ["Conditional Create"](http.html#ccreate). This is just the query portion of the URL - what follows the "?" (not including the "?").
	Id              *string    `bson:"_id,omitempty" json:"id,omitempty"`                     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Method          *string    `binding:"required" bson:",omitempty" json:"method,omitempty"` // In a transaction or batch, this is the HTTP action to be executed for this entry. In a history bundle, this indicates the HTTP action that occurred.
	IfModifiedSince *time.Time `bson:",omitempty" json:"ifModifiedSince,omitempty"`           // Only perform the operation if the last updated date matches. See the API documentation for ["Conditional Read"](http.html#cread).
	IfMatch         *string    `bson:",omitempty" json:"ifMatch,omitempty"`                   // Only perform the operation if the Etag value matches. For more information, see the API section ["Managing Resource Contention"](http.html#concurrency).
}

func (out *BundleEntryResponse) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["outcome"]) > 0 {
		if err := go1.Unmarshal(asMap["outcome"], &out.Outcome); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["etag"]) > 0 {
		if err := go1.Unmarshal(asMap["etag"], &out.Etag); err != nil {
			return err
		}

	}
	if len(asMap["lastModified"]) > 0 {
		if err := go1.Unmarshal(asMap["lastModified"], &out.LastModified); err != nil {
			return err
		}

	}
	return nil
}

type BundleEntryResponse struct {
	Outcome           *Resource    `bson:",omitempty" json:"outcome,omitempty"`           // An OperationOutcome containing hints and warnings produced as part of processing this entry in a batch or transaction.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Status       *string    `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status code returned by processing this entry. The status SHALL start with a 3 digit HTTP code (e.g. 404) and may contain the standard HTTP description associated with the status code.
	Location     *string    `bson:",omitempty" json:"location,omitempty"`                  // The location header created by processing this operation, populated if the operation returns a location.
	Etag         *string    `bson:",omitempty" json:"etag,omitempty"`                      // The Etag for the resource, if the operation for the entry produced a versioned resource (see [Resource Metadata and Versioning](http.html#versioning) and [Managing Resource Contention](http.html#concurrency)).
	LastModified *time.Time `bson:",omitempty" json:"lastModified,omitempty"`              // The date/time that the resource was modified on the server.
}

func (out *CanonicalResource) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"CanonicalResource\"" {
		return fmt.Errorf("resourceType is not %s", "CanonicalResource")
	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	return nil
}

type CanonicalResource struct {
	Jurisdiction      []*CodeableConcept `bson:",omitempty" json:"jurisdiction,omitempty"`      // A legal or geographic region in which the {{title}} is intended to be used.
	Date              *DateTime          `bson:",omitempty" json:"date,omitempty"`              // The date (and optionally time) when the {{title}} was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the {{title}} changes.
	Description       *string            `bson:",omitempty" json:"description,omitempty"`       // A free text natural language description of the {{title}} from a consumer's perspective.
	UseContext        []*UsageContext    `bson:",omitempty" json:"useContext,omitempty"`        // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate {{title}}s.
	Contained         []*Resource        `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension         []*Extension       `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Url           *string             `bson:",omitempty" json:"url,omitempty"`                       // An absolute URI that is used to identify this {{title}} when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this {{title}} is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the {{title}} is stored on different servers.
	Contact       []*ContactDetail    `bson:",omitempty" json:"contact,omitempty"`                   // Contact details to assist a user in finding and communicating with the publisher.
	Meta          *Meta               `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules *string             `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text          *Narrative          `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Purpose       *string             `bson:",omitempty" json:"purpose,omitempty"`                   // Explanation of why this {{title}} is needed and why it has been designed as it has.
	Copyright     *string             `bson:",omitempty" json:"copyright,omitempty"`                 // A copyright statement relating to the {{title}} and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the {{title}}.
	Name          *string             `bson:",omitempty" json:"name,omitempty"`                      // A natural language name identifying the {{title}}. This name should be usable as an identifier for the resource by machine processing applications such as code generation.
	Status        *string             `binding:"required" bson:",omitempty" json:"status,omitempty"` // The current state of this {{title}}.
	Id            *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Identifier    []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`                // A formal identifier that is used to identify this {{title}} when it is represented in other formats, or referenced in a specification, model, design or an instance.
	CanonicalResourceVersionAlgorithmx
	Experimental   *bool   `bson:",omitempty" json:"experimental,omitempty"`   // A Boolean value to indicate that this {{title}} is authored for testing purposes (or education/evaluation/marketing) and is not intended for genuine usage.
	Publisher      *string `bson:",omitempty" json:"publisher,omitempty"`      // The name of the organization or individual responsible for the release and ongoing maintenance of the {{title}}.
	CopyrightLabel *string `bson:",omitempty" json:"copyrightLabel,omitempty"` // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Language       *string `bson:",omitempty" json:"language,omitempty"`       // The base language in which the resource is written.
	Version        *string `bson:",omitempty" json:"version,omitempty"`        // The identifier that is used to identify this version of the {{title}} when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the {{title}} author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence without additional knowledge.  (See the versionAlgorithm element.)
	Title          *string `bson:",omitempty" json:"title,omitempty"`          // A short, descriptive, user-friendly title for the {{title}}.
	ResourceType   string  `binding:"omitempty" bson:"-" json:"resourceType"`
}
type CanonicalResourceVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *CapabilityStatement) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"CapabilityStatement\"" {
		return fmt.Errorf("resourceType is not %s", "CapabilityStatement")
	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["imports"]) > 0 {
		if err := go1.Unmarshal(asMap["imports"], &out.Imports); err != nil {
			return err
		}

	}
	if len(asMap["document"]) > 0 {
		if err := go1.Unmarshal(asMap["document"], &out.Document); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["patchFormat"]) > 0 {
		if err := go1.Unmarshal(asMap["patchFormat"], &out.PatchFormat); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["format"], &out.Format); err != nil {
		return err
	}

	if len(asMap["acceptLanguage"]) > 0 {
		if err := go1.Unmarshal(asMap["acceptLanguage"], &out.AcceptLanguage); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["fhirVersion"], &out.FhirVersion); err != nil {
		return err
	}

	if len(asMap["implementationGuide"]) > 0 {
		if err := go1.Unmarshal(asMap["implementationGuide"], &out.ImplementationGuide); err != nil {
			return err
		}

	}
	if len(asMap["messaging"]) > 0 {
		if err := go1.Unmarshal(asMap["messaging"], &out.Messaging); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["implementation"]) > 0 {
		if err := go1.Unmarshal(asMap["implementation"], &out.Implementation); err != nil {
			return err
		}

	}
	if len(asMap["software"]) > 0 {
		if err := go1.Unmarshal(asMap["software"], &out.Software); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["kind"], &out.Kind); err != nil {
		return err
	}

	if len(asMap["instantiates"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiates"], &out.Instantiates); err != nil {
			return err
		}

	}
	if len(asMap["rest"]) > 0 {
		if err := go1.Unmarshal(asMap["rest"], &out.Rest); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type CapabilityStatement struct {
	Experimental      *bool                        `bson:",omitempty" json:"experimental,omitempty"` // A Boolean value to indicate that this capability statement is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Contact           []*ContactDetail             `bson:",omitempty" json:"contact,omitempty"`      // Contact details to assist a user in finding and communicating with the publisher.
	Imports           []*string                    `bson:",omitempty" json:"imports,omitempty"`      // Reference to a canonical URL of another CapabilityStatement that this software adds to. The capability statement automatically includes everything in the other statement, and it is not duplicated, though the server may repeat the same resources, interactions and operations to add additional details to them.
	Document          *CapabilityStatementDocument `binding:"omitempty" bson:",omitempty"`
	Text              *Narrative                   `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Title             *string                      `bson:",omitempty" json:"title,omitempty"`                     // A short, descriptive, user-friendly title for the capability statement.
	PatchFormat       []*string                    `bson:",omitempty" json:"patchFormat,omitempty"`               // A list of the patch formats supported by this implementation using their content types.
	Description       *string                      `bson:",omitempty" json:"description,omitempty"`               // A free text natural language description of the capability statement from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
	UseContext        []*UsageContext              `bson:",omitempty" json:"useContext,omitempty"`                // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate capability statement instances.
	ImplicitRules     *string                      `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Identifier        []*Identifier                `bson:",omitempty" json:"identifier,omitempty"`                // A formal identifier that is used to identify this CapabilityStatement when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Status            *string                      `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this capability statement. Enables tracking the life-cycle of the content.
	Jurisdiction      []*CodeableConcept           `bson:",omitempty" json:"jurisdiction,omitempty"`              // A legal or geographic region in which the capability statement is intended to be used.
	Purpose           *string                      `bson:",omitempty" json:"purpose,omitempty"`                   // Explanation of why this capability statement is needed and why it has been designed as it has.
	Format            []*string                    `binding:"required" bson:",omitempty" json:"format,omitempty"` // A list of the formats supported by this implementation using their content types.
	AcceptLanguage    []*string                    `bson:",omitempty" json:"acceptLanguage,omitempty"`            // A list of the languages supported by this implementation that are usefully supported in the ```Accept-Language``` header.
	ModifierExtension []*Extension                 `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Url                 *string                            `bson:",omitempty" json:"url,omitempty"`                            // An absolute URI that is used to identify this capability statement when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this capability statement is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the capability statement is stored on different servers.
	Version             *string                            `bson:",omitempty" json:"version,omitempty"`                        // The identifier that is used to identify this version of the capability statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the capability statement author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Date                *DateTime                          `binding:"required" bson:",omitempty" json:"date,omitempty"`        // The date  (and optionally time) when the capability statement was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the capability statement changes.
	FhirVersion         *string                            `binding:"required" bson:",omitempty" json:"fhirVersion,omitempty"` // The version of the FHIR specification that this CapabilityStatement describes (which SHALL be the same as the FHIR version of the CapabilityStatement itself). There is no default value.
	ImplementationGuide []*string                          `bson:",omitempty" json:"implementationGuide,omitempty"`            // A list of implementation guides that the server does (or should) support in their entirety.
	Messaging           *CapabilityStatementMessaging      `binding:"omitempty" bson:",omitempty"`
	Meta                *Meta                              `bson:",omitempty" json:"meta,omitempty"`      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Copyright           *string                            `bson:",omitempty" json:"copyright,omitempty"` // A copyright statement relating to the capability statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the capability statement.
	Implementation      *CapabilityStatementImplementation `binding:"omitempty" bson:",omitempty"`
	Software            *CapabilityStatementSoftware       `binding:"omitempty" bson:",omitempty"`
	Id                  *primitive.ObjectID                `bson:"_id,omitempty" json:"id,omitempty"` // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	CapabilityStatementVersionAlgorithmx
	Name           *string                  `bson:",omitempty" json:"name,omitempty"`                    // A natural language name identifying the capability statement. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Publisher      *string                  `bson:",omitempty" json:"publisher,omitempty"`               // The name of the organization or individual responsible for the release and ongoing maintenance of the capability statement.
	CopyrightLabel *string                  `bson:",omitempty" json:"copyrightLabel,omitempty"`          // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Kind           *string                  `binding:"required" bson:",omitempty" json:"kind,omitempty"` // The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).
	Instantiates   []*string                `bson:",omitempty" json:"instantiates,omitempty"`            // Reference to a canonical URL of another CapabilityStatement that this software implements. This capability statement is a published API description that corresponds to a business service. The server may actually implement a subset of the capability statement it claims to implement, so the capability statement must specify the full capability details.
	Rest           *CapabilityStatementRest `binding:"omitempty" bson:",omitempty"`
	Language       *string                  `bson:",omitempty" json:"language,omitempty"`  // The base language in which the resource is written.
	Contained      []*Resource              `bson:",omitempty" json:"contained,omitempty"` // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension      []*Extension             `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ResourceType   string                   `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *CapabilityStatementDocument) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["mode"], &out.Mode); err != nil {
		return err
	}

	if len(asMap["documentation"]) > 0 {
		if err := go1.Unmarshal(asMap["documentation"], &out.Documentation); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["profile"], &out.Profile); err != nil {
		return err
	}

	return nil
}

type CapabilityStatementDocument struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Mode          *string `binding:"required" bson:",omitempty" json:"mode,omitempty"`    // Mode of this document declaration - whether an application is a producer or consumer.
	Documentation *string `bson:",omitempty" json:"documentation,omitempty"`              // A description of how the application supports or uses the specified document profile.  For example, when documents are created, what action is taken with consumed documents, etc.
	Profile       *string `binding:"required" bson:",omitempty" json:"profile,omitempty"` // A profile on the document Bundle that constrains which resources are present, and their contents.
}

func (out *CapabilityStatementMessaging) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["endpoint"]) > 0 {
		if err := go1.Unmarshal(asMap["endpoint"], &out.Endpoint); err != nil {
			return err
		}

	}
	if len(asMap["reliableCache"]) > 0 {
		if err := go1.Unmarshal(asMap["reliableCache"], &out.ReliableCache); err != nil {
			return err
		}

	}
	if len(asMap["documentation"]) > 0 {
		if err := go1.Unmarshal(asMap["documentation"], &out.Documentation); err != nil {
			return err
		}

	}
	if len(asMap["supportedMessage"]) > 0 {
		if err := go1.Unmarshal(asMap["supportedMessage"], &out.SupportedMessage); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type CapabilityStatementMessaging struct {
	Endpoint          *CapabilityStatementMessagingEndpoint         `binding:"omitempty" bson:",omitempty"`
	ReliableCache     *int                                          `bson:",omitempty" json:"reliableCache,omitempty"` // Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender).
	Documentation     *string                                       `bson:",omitempty" json:"documentation,omitempty"` // Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the capability statement.  For example, the process for becoming an authorized messaging exchange partner.
	SupportedMessage  *CapabilityStatementMessagingSupportedMessage `binding:"omitempty" bson:",omitempty"`
	Id                *string                                       `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                                  `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                                  `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *CapabilityStatementMessagingEndpoint) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["protocol"], &out.Protocol); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["address"], &out.Address); err != nil {
		return err
	}

	return nil
}

type CapabilityStatementMessagingEndpoint struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Protocol *Coding  `binding:"required" bson:",omitempty" json:"protocol,omitempty"` // A list of the messaging transport protocol(s) identifiers, supported by this endpoint.
	Address  *url.URL `binding:"required" bson:",omitempty" json:"address,omitempty"`  // The network address of the endpoint. For solutions that do not use network addresses for routing, it can be just an identifier.
}

func (out *CapabilityStatementMessagingSupportedMessage) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["mode"], &out.Mode); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["definition"], &out.Definition); err != nil {
		return err
	}

	return nil
}

type CapabilityStatementMessagingSupportedMessage struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Mode       *string `binding:"required" bson:",omitempty" json:"mode,omitempty"`       // The mode of this event declaration - whether application is sender or receiver.
	Definition *string `binding:"required" bson:",omitempty" json:"definition,omitempty"` // Points to a message definition that identifies the messaging event, message structure, allowed responses, etc.
}

func (out *CapabilityStatementImplementation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
		return err
	}

	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["custodian"]) > 0 {
		if err := go1.Unmarshal(asMap["custodian"], &out.Custodian); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type CapabilityStatementImplementation struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Description *string    `binding:"required" bson:",omitempty" json:"description,omitempty"` // Information about the specific installation that this capability statement relates to.
	Url         *url.URL   `bson:",omitempty" json:"url,omitempty"`                            // An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.
	Custodian   *Reference `bson:",omitempty" json:"custodian,omitempty"`                      // The organization responsible for the management of the instance and oversight of the data on the server at the specified URL.
	Id          *string    `bson:"_id,omitempty" json:"id,omitempty"`                          // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *CapabilityStatementSoftware) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["releaseDate"]) > 0 {
		if err := go1.Unmarshal(asMap["releaseDate"], &out.ReleaseDate); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type CapabilityStatementSoftware struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name        *string      `binding:"required" bson:",omitempty" json:"name,omitempty"` // Name the software is known by.
	Version     *string      `bson:",omitempty" json:"version,omitempty"`                 // The version identifier for the software covered by this statement.
	ReleaseDate *DateTime    `bson:",omitempty" json:"releaseDate,omitempty"`             // Date this version of the software was released.
	Id          *string      `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension   []*Extension `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}
type CapabilityStatementVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *CapabilityStatementRest) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["mode"], &out.Mode); err != nil {
		return err
	}

	if len(asMap["documentation"]) > 0 {
		if err := go1.Unmarshal(asMap["documentation"], &out.Documentation); err != nil {
			return err
		}

	}
	if len(asMap["security"]) > 0 {
		if err := go1.Unmarshal(asMap["security"], &out.Security); err != nil {
			return err
		}

	}
	if len(asMap["resource"]) > 0 {
		if err := go1.Unmarshal(asMap["resource"], &out.Resource); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["interaction"]) > 0 {
		if err := go1.Unmarshal(asMap["interaction"], &out.Interaction); err != nil {
			return err
		}

	}
	if len(asMap["searchParam"]) > 0 {
		if err := go1.Unmarshal(asMap["searchParam"], &out.SearchParam); err != nil {
			return err
		}

	}
	if len(asMap["operation"]) > 0 {
		if err := go1.Unmarshal(asMap["operation"], &out.Operation); err != nil {
			return err
		}

	}
	if len(asMap["compartment"]) > 0 {
		if err := go1.Unmarshal(asMap["compartment"], &out.Compartment); err != nil {
			return err
		}

	}
	return nil
}

type CapabilityStatementRest struct {
	Id                *string                          `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Mode              *string                          `binding:"required" bson:",omitempty" json:"mode,omitempty"` // Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.
	Documentation     *string                          `bson:",omitempty" json:"documentation,omitempty"`           // Information about the system's restful capabilities that apply across all applications, such as security.
	Security          *CapabilityStatementRestSecurity `binding:"omitempty" bson:",omitempty"`
	Resource          *CapabilityStatementRestResource `binding:"omitempty" bson:",omitempty"`
	Extension         []*Extension                     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Interaction *CapabilityStatementRestInteraction `binding:"omitempty" bson:",omitempty"`
	SearchParam interface{}
	Operation   interface{}
	Compartment []*string `bson:",omitempty" json:"compartment,omitempty"` // An absolute URI which is a reference to the definition of a compartment that the system supports. The reference is to a CompartmentDefinition resource by its canonical URL .
}

func (out *CapabilityStatementRestSecurity) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["cors"]) > 0 {
		if err := go1.Unmarshal(asMap["cors"], &out.Cors); err != nil {
			return err
		}

	}
	if len(asMap["service"]) > 0 {
		if err := go1.Unmarshal(asMap["service"], &out.Service); err != nil {
			return err
		}

	}
	return nil
}

type CapabilityStatementRestSecurity struct {
	Description       *string      `bson:",omitempty" json:"description,omitempty"`       // General description of how security works.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Cors    *bool              `bson:",omitempty" json:"cors,omitempty"`    // Server adds CORS headers when responding to requests - this enables Javascript applications to use the server.
	Service []*CodeableConcept `bson:",omitempty" json:"service,omitempty"` // Types of security services that are supported/required by the system.
}

func (out *CapabilityStatementRestResource) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["interaction"]) > 0 {
		if err := go1.Unmarshal(asMap["interaction"], &out.Interaction); err != nil {
			return err
		}

	}
	if len(asMap["referencePolicy"]) > 0 {
		if err := go1.Unmarshal(asMap["referencePolicy"], &out.ReferencePolicy); err != nil {
			return err
		}

	}
	if len(asMap["searchInclude"]) > 0 {
		if err := go1.Unmarshal(asMap["searchInclude"], &out.SearchInclude); err != nil {
			return err
		}

	}
	if len(asMap["operation"]) > 0 {
		if err := go1.Unmarshal(asMap["operation"], &out.Operation); err != nil {
			return err
		}

	}
	if len(asMap["profile"]) > 0 {
		if err := go1.Unmarshal(asMap["profile"], &out.Profile); err != nil {
			return err
		}

	}
	if len(asMap["versioning"]) > 0 {
		if err := go1.Unmarshal(asMap["versioning"], &out.Versioning); err != nil {
			return err
		}

	}
	if len(asMap["readHistory"]) > 0 {
		if err := go1.Unmarshal(asMap["readHistory"], &out.ReadHistory); err != nil {
			return err
		}

	}
	if len(asMap["conditionalUpdate"]) > 0 {
		if err := go1.Unmarshal(asMap["conditionalUpdate"], &out.ConditionalUpdate); err != nil {
			return err
		}

	}
	if len(asMap["conditionalDelete"]) > 0 {
		if err := go1.Unmarshal(asMap["conditionalDelete"], &out.ConditionalDelete); err != nil {
			return err
		}

	}
	if len(asMap["searchRevInclude"]) > 0 {
		if err := go1.Unmarshal(asMap["searchRevInclude"], &out.SearchRevInclude); err != nil {
			return err
		}

	}
	if len(asMap["searchParam"]) > 0 {
		if err := go1.Unmarshal(asMap["searchParam"], &out.SearchParam); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["supportedProfile"]) > 0 {
		if err := go1.Unmarshal(asMap["supportedProfile"], &out.SupportedProfile); err != nil {
			return err
		}

	}
	if len(asMap["documentation"]) > 0 {
		if err := go1.Unmarshal(asMap["documentation"], &out.Documentation); err != nil {
			return err
		}

	}
	if len(asMap["updateCreate"]) > 0 {
		if err := go1.Unmarshal(asMap["updateCreate"], &out.UpdateCreate); err != nil {
			return err
		}

	}
	if len(asMap["conditionalCreate"]) > 0 {
		if err := go1.Unmarshal(asMap["conditionalCreate"], &out.ConditionalCreate); err != nil {
			return err
		}

	}
	if len(asMap["conditionalPatch"]) > 0 {
		if err := go1.Unmarshal(asMap["conditionalPatch"], &out.ConditionalPatch); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["conditionalRead"]) > 0 {
		if err := go1.Unmarshal(asMap["conditionalRead"], &out.ConditionalRead); err != nil {
			return err
		}

	}
	return nil
}

type CapabilityStatementRestResource struct {
	Type              *string                                     `binding:"required" bson:",omitempty" json:"type,omitempty"` // A type of resource exposed via the restful interface.
	Interaction       *CapabilityStatementRestResourceInteraction `binding:"omitempty" bson:",omitempty"`
	ReferencePolicy   []*string                                   `bson:",omitempty" json:"referencePolicy,omitempty"` // A set of flags that defines how references are supported.
	SearchInclude     []*string                                   `bson:",omitempty" json:"searchInclude,omitempty"`   // A list of _include values supported by the server.
	Operation         *CapabilityStatementRestResourceOperation   `binding:"omitempty" bson:",omitempty"`
	Profile           *string                                     `bson:",omitempty" json:"profile,omitempty"`           // A system-wide profile that is applied across *all* instances of the resource supported by the system. For example, if declared on Observation, this profile is the "superset" of capabilities for laboratory *and* vitals *and* other domains. See further discussion in [Using Profiles](profiling.html#profile-uses).
	Versioning        *string                                     `bson:",omitempty" json:"versioning,omitempty"`        // This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.
	ReadHistory       *bool                                       `bson:",omitempty" json:"readHistory,omitempty"`       // A flag for whether the server is able to return past versions as part of the vRead operation.
	ConditionalUpdate *bool                                       `bson:",omitempty" json:"conditionalUpdate,omitempty"` // A flag that indicates that the server supports conditional update.
	ConditionalDelete *string                                     `bson:",omitempty" json:"conditionalDelete,omitempty"` // A code that indicates how the server supports conditional delete.
	SearchRevInclude  []*string                                   `bson:",omitempty" json:"searchRevInclude,omitempty"`  // A list of _revinclude (reverse include) values supported by the server.
	SearchParam       *CapabilityStatementRestResourceSearchParam `binding:"omitempty" bson:",omitempty"`
	Extension         []*Extension                                `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	SupportedProfile  []*string                                   `bson:",omitempty" json:"supportedProfile,omitempty"`  // A list of profiles representing different use cases the system hosts/produces. A supported profile is a statement about the functionality of the data and services provided by the server (or the client) for supported use cases. For example, a system can define and declare multiple Observation profiles for laboratory observations, vital sign observations, etc. By declaring supported profiles, systems provide a way to determine whether individual resources are conformant. See further discussion in [Using Profiles](profiling.html#profile-uses).
	Documentation     *string                                     `bson:",omitempty" json:"documentation,omitempty"`     // Additional information about the resource type used by the system.
	UpdateCreate      *bool                                       `bson:",omitempty" json:"updateCreate,omitempty"`      // A flag to indicate that the server allows or needs to allow the client to create new identities on the server (that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.
	ConditionalCreate *bool                                       `bson:",omitempty" json:"conditionalCreate,omitempty"` // A flag that indicates that the server supports conditional create.
	ConditionalPatch  *bool                                       `bson:",omitempty" json:"conditionalPatch,omitempty"`  // A flag that indicates that the server supports conditional patch.
	Id                *string                                     `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension []*Extension                                `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ConditionalRead *string `bson:",omitempty" json:"conditionalRead,omitempty"` // A code that indicates how the server supports conditional read.
}

func (out *CapabilityStatementRestResourceInteraction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["documentation"]) > 0 {
		if err := go1.Unmarshal(asMap["documentation"], &out.Documentation); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type CapabilityStatementRestResourceInteraction struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code          *string      `binding:"required" bson:",omitempty" json:"code,omitempty"` // Coded identifier of the operation, supported by the system resource.
	Documentation *string      `bson:",omitempty" json:"documentation,omitempty"`           // Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.
	Id            *string      `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension     []*Extension `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *CapabilityStatementRestResourceOperation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["documentation"]) > 0 {
		if err := go1.Unmarshal(asMap["documentation"], &out.Documentation); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["definition"], &out.Definition); err != nil {
		return err
	}

	return nil
}

type CapabilityStatementRestResourceOperation struct {
	Documentation     *string      `bson:",omitempty" json:"documentation,omitempty"`     // Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance-level invocation of the operation.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name       *string `binding:"required" bson:",omitempty" json:"name,omitempty"`       // The name of the operation or query. For an operation, this name is prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called. This SHOULD be the same as the OperationDefinition.code of the defining OperationDefinition.  However, it can sometimes differ if necessary to disambiguate when a server supports multiple OperationDefinition that happen to share the same code.
	Definition *string `binding:"required" bson:",omitempty" json:"definition,omitempty"` // Where the formal definition can be found. If a server references the base definition of an Operation (i.e. from the specification itself such as ```http://hl7.org/fhir/OperationDefinition/ValueSet-expand```), that means it supports the full capabilities of the operation - e.g. both GET and POST invocation.  If it only supports a subset, it must define its own custom [OperationDefinition](operationdefinition.html#) with a 'base' of the original OperationDefinition.  The custom definition would describe the specific subset of functionality supported.
}

func (out *CapabilityStatementRestResourceSearchParam) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["documentation"]) > 0 {
		if err := go1.Unmarshal(asMap["documentation"], &out.Documentation); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if len(asMap["definition"]) > 0 {
		if err := go1.Unmarshal(asMap["definition"], &out.Definition); err != nil {
			return err
		}

	}
	return nil
}

type CapabilityStatementRestResourceSearchParam struct {
	Type              *string      `binding:"required" bson:",omitempty" json:"type,omitempty"` // The type of value a search parameter refers to, and how the content is interpreted.
	Documentation     *string      `bson:",omitempty" json:"documentation,omitempty"`           // This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`       /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name       *string `binding:"required" bson:",omitempty" json:"name,omitempty"` // The label used for the search parameter in this particular system's API - i.e. the 'name' portion of the name-value pair that will appear as part of the search URL.  This SHOULD be the same as the SearchParameter.code of the defining SearchParameter.  However, it can sometimes differ if necessary to disambiguate when a server supports multiple SearchParameters that happen to share the same code.
	Definition *string `bson:",omitempty" json:"definition,omitempty"`              // An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [SearchParameter.url](searchparameter-definitions.html#SearchParameter.url)). This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.
}

func (out *CapabilityStatementRestInteraction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["documentation"]) > 0 {
		if err := go1.Unmarshal(asMap["documentation"], &out.Documentation); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	return nil
}

type CapabilityStatementRestInteraction struct {
	Documentation     *string      `bson:",omitempty" json:"documentation,omitempty"`     // Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code *string `binding:"required" bson:",omitempty" json:"code,omitempty"` // A coded identifier of the operation, supported by the system.
}

func (out *CarePlan) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"CarePlan\"" {
		return fmt.Errorf("resourceType is not %s", "CarePlan")
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["addresses"]) > 0 {
		if err := go1.Unmarshal(asMap["addresses"], &out.Addresses); err != nil {
			return err
		}

	}
	if len(asMap["activity"]) > 0 {
		if err := go1.Unmarshal(asMap["activity"], &out.Activity); err != nil {
			return err
		}

	}
	if len(asMap["contributor"]) > 0 {
		if err := go1.Unmarshal(asMap["contributor"], &out.Contributor); err != nil {
			return err
		}

	}
	if len(asMap["careTeam"]) > 0 {
		if err := go1.Unmarshal(asMap["careTeam"], &out.CareTeam); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["created"]) > 0 {
		if err := go1.Unmarshal(asMap["created"], &out.Created); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if len(asMap["instantiatesCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesCanonical"], &out.InstantiatesCanonical); err != nil {
			return err
		}

	}
	if len(asMap["replaces"]) > 0 {
		if err := go1.Unmarshal(asMap["replaces"], &out.Replaces); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["custodian"]) > 0 {
		if err := go1.Unmarshal(asMap["custodian"], &out.Custodian); err != nil {
			return err
		}

	}
	if len(asMap["goal"]) > 0 {
		if err := go1.Unmarshal(asMap["goal"], &out.Goal); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesUri"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesUri"], &out.InstantiatesUri); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["supportingInfo"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInfo"], &out.SupportingInfo); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["intent"], &out.Intent); err != nil {
		return err
	}

	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	return nil
}

type CarePlan struct {
	Extension             []*Extension         `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Status                *string              `binding:"required" bson:",omitempty" json:"status,omitempty"` // Indicates whether the plan is currently being acted upon, represents future intentions or is now a historical record.
	Addresses             []*CodeableReference `bson:",omitempty" json:"addresses,omitempty"`                 // Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or mitigation are handled by this plan.
	Activity              *CarePlanActivity    `binding:"omitempty" bson:",omitempty"`
	Contributor           []*Reference         `bson:",omitempty" json:"contributor,omitempty"`                // Identifies the individual(s), organization or device who provided the contents of the care plan.
	CareTeam              []*Reference         `bson:",omitempty" json:"careTeam,omitempty"`                   // Identifies all people and organizations who are expected to be involved in the care envisioned by this plan.
	ImplicitRules         *string              `bson:",omitempty" json:"implicitRules,omitempty"`              // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text                  *Narrative           `bson:",omitempty" json:"text,omitempty"`                       // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Encounter             *Reference           `bson:",omitempty" json:"encounter,omitempty"`                  // The Encounter during which this CarePlan was created or to which the creation of this record is tightly associated.
	Created               *DateTime            `bson:",omitempty" json:"created,omitempty"`                    // Represents when this particular CarePlan record was created in the system, which is often a system-generated date.
	Contained             []*Resource          `bson:",omitempty" json:"contained,omitempty"`                  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Identifier            []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`                 // Business identifiers assigned to this care plan by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
	PartOf                []*Reference         `bson:",omitempty" json:"partOf,omitempty"`                     // A larger care plan of which this particular care plan is a component or step.
	Subject               *Reference           `binding:"required" bson:",omitempty" json:"subject,omitempty"` // Identifies the patient or group whose intended care is described by the plan.
	InstantiatesCanonical []*string            `bson:",omitempty" json:"instantiatesCanonical,omitempty"`      // The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan.
	Replaces              []*Reference         `bson:",omitempty" json:"replaces,omitempty"`                   // Completed or terminated care plan whose function is taken by this new care plan.
	Category              []*CodeableConcept   `bson:",omitempty" json:"category,omitempty"`                   // Identifies what "kind" of plan this is to support differentiation between multiple co-existing plans; e.g. "Home health", "psychiatric", "asthma", "disease management", "wellness plan", etc.
	Custodian             *Reference           `bson:",omitempty" json:"custodian,omitempty"`                  // When populated, the custodian is responsible for the care plan. The care plan is attributed to the custodian.
	Goal                  []*Reference         `bson:",omitempty" json:"goal,omitempty"`                       // Describes the intended objective(s) of carrying out the care plan.
	Meta                  *Meta                `bson:",omitempty" json:"meta,omitempty"`                       // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language              *string              `bson:",omitempty" json:"language,omitempty"`                   // The base language in which the resource is written.
	ModifierExtension     []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"`          /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	InstantiatesUri []*string           `bson:",omitempty" json:"instantiatesUri,omitempty"`           // The URL pointing to an externally maintained protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan.
	Period          *Period             `bson:",omitempty" json:"period,omitempty"`                    // Indicates when the plan did (or is intended to) come into effect and end.
	SupportingInfo  []*Reference        `bson:",omitempty" json:"supportingInfo,omitempty"`            // Identifies portions of the patient's record that specifically influenced the formation of the plan.  These might include comorbidities, recent procedures, limitations, recent assessments, etc.
	Id              *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Intent          *string             `binding:"required" bson:",omitempty" json:"intent,omitempty"` // Indicates the level of authority/intentionality associated with the care plan and where the care plan fits into the workflow chain.
	Title           *string             `bson:",omitempty" json:"title,omitempty"`                     // Human-friendly name for the care plan.
	Description     *string             `bson:",omitempty" json:"description,omitempty"`               // A description of the scope and nature of the plan.
	Note            []*Annotation       `bson:",omitempty" json:"note,omitempty"`                      // General notes about the care plan not covered elsewhere.
	BasedOn         []*Reference        `bson:",omitempty" json:"basedOn,omitempty"`                   // A higher-level request resource (i.e. a plan, proposal or order) that is fulfilled in whole or in part by this care plan.
	ResourceType    string              `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *CarePlanActivity) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["plannedActivityReference"]) > 0 {
		if err := go1.Unmarshal(asMap["plannedActivityReference"], &out.PlannedActivityReference); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["performedActivity"]) > 0 {
		if err := go1.Unmarshal(asMap["performedActivity"], &out.PerformedActivity); err != nil {
			return err
		}

	}
	if len(asMap["progress"]) > 0 {
		if err := go1.Unmarshal(asMap["progress"], &out.Progress); err != nil {
			return err
		}

	}
	return nil
}

type CarePlanActivity struct {
	PlannedActivityReference *Reference   `bson:",omitempty" json:"plannedActivityReference,omitempty"` // The details of the proposed activity represented in a specific resource.
	Id                       *string      `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension                []*Extension `bson:",omitempty" json:"extension,omitempty"`                // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension        []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`        /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	PerformedActivity []*CodeableReference `bson:",omitempty" json:"performedActivity,omitempty"` // Identifies the activity that was performed. For example, an activity could be patient education, exercise, or a medication administration. The reference to an "event" resource, such as Procedure or Encounter or Observation, represents the activity that was performed. The requested activity can be conveyed using the CarePlan.activity.plannedActivityReference (a reference to a “request” resource).
	Progress          []*Annotation        `bson:",omitempty" json:"progress,omitempty"`          // Notes about the adherence/status/progress of the activity.
}

func (out *CareTeam) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"CareTeam\"" {
		return fmt.Errorf("resourceType is not %s", "CareTeam")
	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["participant"]) > 0 {
		if err := go1.Unmarshal(asMap["participant"], &out.Participant); err != nil {
			return err
		}

	}
	if len(asMap["managingOrganization"]) > 0 {
		if err := go1.Unmarshal(asMap["managingOrganization"], &out.ManagingOrganization); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["telecom"]) > 0 {
		if err := go1.Unmarshal(asMap["telecom"], &out.Telecom); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	return nil
}

type CareTeam struct {
	Meta              *Meta        `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Text              *Narrative   `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained         []*Resource  `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Period               *Period              `bson:",omitempty" json:"period,omitempty"` // Indicates when the team did (or is intended to) come into effect and end.
	Participant          *CareTeamParticipant `binding:"omitempty" bson:",omitempty"`
	ManagingOrganization []*Reference         `bson:",omitempty" json:"managingOrganization,omitempty"` // The organization responsible for the care team.
	Note                 []*Annotation        `bson:",omitempty" json:"note,omitempty"`                 // Comments made about the CareTeam.
	Extension            []*Extension         `bson:",omitempty" json:"extension,omitempty"`            // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Identifier           []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`           // Business identifiers assigned to this care team by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
	Status               *string              `bson:",omitempty" json:"status,omitempty"`               // Indicates the current state of the care team.
	Reason               []*CodeableReference `bson:",omitempty" json:"reason,omitempty"`               // Describes why the care team exists.
	Telecom              []ContactPoint       `bson:",omitempty" json:"telecom,omitempty"`              // A central contact detail for the care team (that applies to all members).
	ImplicitRules        *string              `bson:",omitempty" json:"implicitRules,omitempty"`        // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Category             []*CodeableConcept   `bson:",omitempty" json:"category,omitempty"`             // Identifies what kind of team.  This is to support differentiation between multiple co-existing teams, such as care plan team, episode of care team, longitudinal care team.
	Subject              *Reference           `bson:",omitempty" json:"subject,omitempty"`              // Identifies the patient or group whose intended care is handled by the team.
	Id                   *primitive.ObjectID  `bson:"_id,omitempty" json:"id,omitempty"`                // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language             *string              `bson:",omitempty" json:"language,omitempty"`             // The base language in which the resource is written.
	Name                 *string              `bson:",omitempty" json:"name,omitempty"`                 // A label for human use intended to distinguish like teams.  E.g. the "red" vs. "green" trauma teams.
	ResourceType         string               `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *CareTeamParticipant) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["role"]) > 0 {
		if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
			return err
		}

	}
	if len(asMap["member"]) > 0 {
		if err := go1.Unmarshal(asMap["member"], &out.Member); err != nil {
			return err
		}

	}
	if len(asMap["onBehalfOf"]) > 0 {
		if err := go1.Unmarshal(asMap["onBehalfOf"], &out.OnBehalfOf); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["coveragePeriod"], &out.CoveragePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["coverageTiming"], &out.CoverageTiming); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type CareTeamParticipant struct {
	Role       *CodeableConcept `bson:",omitempty" json:"role,omitempty"`       // Indicates specific responsibility of an individual within the care team, such as "Primary care physician", "Trained social worker counselor", "Caregiver", etc.
	Member     *Reference       `bson:",omitempty" json:"member,omitempty"`     // The specific person or organization who is participating/expected to participate in the care team.
	OnBehalfOf *Reference       `bson:",omitempty" json:"onBehalfOf,omitempty"` // The organization of the practitioner.
	CareTeamParticipantCoveragex
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type CareTeamParticipantCoveragex struct {
	CoveragePeriod Period `bson:",omitempty" json:"coveragePeriod,omitempty"`
	CoverageTiming Timing `bson:",omitempty" json:"coverageTiming,omitempty"`
}

func (out *ChargeItem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ChargeItem\"" {
		return fmt.Errorf("resourceType is not %s", "ChargeItem")
	}
	if len(asMap["overrideReason"]) > 0 {
		if err := go1.Unmarshal(asMap["overrideReason"], &out.OverrideReason); err != nil {
			return err
		}

	}
	if len(asMap["product"]) > 0 {
		if err := go1.Unmarshal(asMap["product"], &out.Product); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["service"]) > 0 {
		if err := go1.Unmarshal(asMap["service"], &out.Service); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["definitionCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["definitionCanonical"], &out.DefinitionCanonical); err != nil {
			return err
		}

	}
	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["occurrenceDateTime"], &out.OccurrenceDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrencePeriod"], &out.OccurrencePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrenceTiming"], &out.OccurrenceTiming); err == nil {
	} else {

	}
	if len(asMap["performingOrganization"]) > 0 {
		if err := go1.Unmarshal(asMap["performingOrganization"], &out.PerformingOrganization); err != nil {
			return err
		}

	}
	if len(asMap["account"]) > 0 {
		if err := go1.Unmarshal(asMap["account"], &out.Account); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["unitPriceComponent"]) > 0 {
		if err := go1.Unmarshal(asMap["unitPriceComponent"], &out.UnitPriceComponent); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if len(asMap["totalPriceComponent"]) > 0 {
		if err := go1.Unmarshal(asMap["totalPriceComponent"], &out.TotalPriceComponent); err != nil {
			return err
		}

	}
	if len(asMap["enterer"]) > 0 {
		if err := go1.Unmarshal(asMap["enterer"], &out.Enterer); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["requestingOrganization"]) > 0 {
		if err := go1.Unmarshal(asMap["requestingOrganization"], &out.RequestingOrganization); err != nil {
			return err
		}

	}
	if len(asMap["bodysite"]) > 0 {
		if err := go1.Unmarshal(asMap["bodysite"], &out.Bodysite); err != nil {
			return err
		}

	}
	if len(asMap["supportingInformation"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInformation"], &out.SupportingInformation); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["costCenter"]) > 0 {
		if err := go1.Unmarshal(asMap["costCenter"], &out.CostCenter); err != nil {
			return err
		}

	}
	if len(asMap["enteredDate"]) > 0 {
		if err := go1.Unmarshal(asMap["enteredDate"], &out.EnteredDate); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["definitionUri"]) > 0 {
		if err := go1.Unmarshal(asMap["definitionUri"], &out.DefinitionUri); err != nil {
			return err
		}

	}
	return nil
}

type ChargeItem struct {
	OverrideReason    *CodeableConcept     `bson:",omitempty" json:"overrideReason,omitempty"`    // If the list price or the rule-based factor associated with the code is overridden, this attribute can capture a text to indicate the  reason for this action.
	Product           []*CodeableReference `bson:",omitempty" json:"product,omitempty"`           // Identifies the device, food, drug or other product being charged either by type code or reference to an instance.
	Reason            []*CodeableConcept   `bson:",omitempty" json:"reason,omitempty"`            // Describes why the event occurred in coded or textual form.
	Service           []*CodeableReference `bson:",omitempty" json:"service,omitempty"`           // Indicated the rendered service that caused this charge.
	ImplicitRules     *string              `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	DefinitionCanonical []*string    `bson:",omitempty" json:"definitionCanonical,omitempty"` // References the source of pricing information, rules of application for the code this ChargeItem uses.
	PartOf              []*Reference `bson:",omitempty" json:"partOf,omitempty"`              // ChargeItems can be grouped to larger ChargeItems covering the whole set.
	ChargeItemOccurrencex
	PerformingOrganization *Reference           `bson:",omitempty" json:"performingOrganization,omitempty"`    // The organization performing the service.
	Account                []*Reference         `bson:",omitempty" json:"account,omitempty"`                   // Account into which this ChargeItems belongs.
	Status                 *string              `binding:"required" bson:",omitempty" json:"status,omitempty"` // The current state of the ChargeItem.
	Code                   *CodeableConcept     `binding:"required" bson:",omitempty" json:"code,omitempty"`   // A code that identifies the charge, like a billing code.
	Performer              *ChargeItemPerformer `binding:"omitempty" bson:",omitempty"`
	Quantity               *Quantity            `bson:",omitempty" json:"quantity,omitempty"`                   // Quantity of which the charge item has been serviced.
	UnitPriceComponent     MonetaryComponent    `bson:",omitempty" json:"unitPriceComponent,omitempty"`         // The unit price of the chargable item.
	Text                   *Narrative           `bson:",omitempty" json:"text,omitempty"`                       // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension              []*Extension         `bson:",omitempty" json:"extension,omitempty"`                  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Subject                *Reference           `binding:"required" bson:",omitempty" json:"subject,omitempty"` // The individual or set of individuals the action is being or was performed on.
	TotalPriceComponent    *MonetaryComponent   `bson:",omitempty" json:"totalPriceComponent,omitempty"`        // The total price for the chargable item, accounting for the quantity.
	Enterer                *Reference           `bson:",omitempty" json:"enterer,omitempty"`                    // The device, practitioner, etc. who entered the charge item.
	Encounter              *Reference           `bson:",omitempty" json:"encounter,omitempty"`                  // This ChargeItem has the details of how the associated Encounter should be billed or otherwise be handled by finance systems.
	Note                   []*Annotation        `bson:",omitempty" json:"note,omitempty"`                       // Comments made about the event by the performer, subject or other participants.
	Id                     *primitive.ObjectID  `bson:"_id,omitempty" json:"id,omitempty"`                      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	RequestingOrganization *Reference           `bson:",omitempty" json:"requestingOrganization,omitempty"`     // The organization requesting the service.
	Bodysite               []*CodeableConcept   `bson:",omitempty" json:"bodysite,omitempty"`                   // The anatomical location where the related service has been applied.
	SupportingInformation  []*Reference         `bson:",omitempty" json:"supportingInformation,omitempty"`      // Further information supporting this charge.
	Identifier             []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`                 // Identifiers assigned to this event performer or other systems.
	CostCenter             *Reference           `bson:",omitempty" json:"costCenter,omitempty"`                 // The financial cost center permits the tracking of charge attribution.
	EnteredDate            *DateTime            `bson:",omitempty" json:"enteredDate,omitempty"`                // Date the charge item was entered.
	Meta                   *Meta                `bson:",omitempty" json:"meta,omitempty"`                       // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language               *string              `bson:",omitempty" json:"language,omitempty"`                   // The base language in which the resource is written.
	Contained              []*Resource          `bson:",omitempty" json:"contained,omitempty"`                  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	DefinitionUri          []*string            `bson:",omitempty" json:"definitionUri,omitempty"`              // References the (external) source of pricing information, rules of application for the code this ChargeItem uses.
	ResourceType           string               `binding:"omitempty" bson:"-" json:"resourceType"`
}
type ChargeItemOccurrencex struct {
	OccurrenceDateTime DateTime `bson:",omitempty" json:"occurrenceDateTime,omitempty"`
	OccurrencePeriod   Period   `bson:",omitempty" json:"occurrencePeriod,omitempty"`
	OccurrenceTiming   Timing   `bson:",omitempty" json:"occurrenceTiming,omitempty"`
}

func (out *ChargeItemPerformer) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type ChargeItemPerformer struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Function *CodeableConcept `bson:",omitempty" json:"function,omitempty"`                 // Describes the type of performance or participation(e.g. primary surgeon, anesthesiologiest, etc.).
	Actor    *Reference       `binding:"required" bson:",omitempty" json:"actor,omitempty"` // The device, practitioner, etc. who performed or participated in the service.
	Id       *string          `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *ChargeItemDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ChargeItemDefinition\"" {
		return fmt.Errorf("resourceType is not %s", "ChargeItemDefinition")
	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["derivedFromUri"]) > 0 {
		if err := go1.Unmarshal(asMap["derivedFromUri"], &out.DerivedFromUri); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["replaces"]) > 0 {
		if err := go1.Unmarshal(asMap["replaces"], &out.Replaces); err != nil {
			return err
		}

	}
	if len(asMap["applicability"]) > 0 {
		if err := go1.Unmarshal(asMap["applicability"], &out.Applicability); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["approvalDate"]) > 0 {
		if err := go1.Unmarshal(asMap["approvalDate"], &out.ApprovalDate); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["instance"]) > 0 {
		if err := go1.Unmarshal(asMap["instance"], &out.Instance); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["lastReviewDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastReviewDate"], &out.LastReviewDate); err != nil {
			return err
		}

	}
	if len(asMap["propertyGroup"]) > 0 {
		if err := go1.Unmarshal(asMap["propertyGroup"], &out.PropertyGroup); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	return nil
}

type ChargeItemDefinition struct {
	Contained      []*Resource         `bson:",omitempty" json:"contained,omitempty"`      // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Title          *string             `bson:",omitempty" json:"title,omitempty"`          // A short, descriptive, user-friendly title for the charge item definition.
	DerivedFromUri []*string           `bson:",omitempty" json:"derivedFromUri,omitempty"` // The URL pointing to an externally-defined charge item definition that is adhered to in whole or in part by this definition.
	UseContext     []*UsageContext     `bson:",omitempty" json:"useContext,omitempty"`     // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate charge item definition instances.
	Id             *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`          // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ImplicitRules  *string             `bson:",omitempty" json:"implicitRules,omitempty"`  // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language       *string             `bson:",omitempty" json:"language,omitempty"`       // The base language in which the resource is written.
	ChargeItemDefinitionVersionAlgorithmx
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Replaces       []*string                          `bson:",omitempty" json:"replaces,omitempty"` // As new versions of a protocol or guideline are defined, allows identification of what versions are replaced by a new instance.
	Applicability  *ChargeItemDefinitionApplicability `binding:"omitempty" bson:",omitempty"`
	Identifier     []*Identifier                      `bson:",omitempty" json:"identifier,omitempty"`                // A formal identifier that is used to identify this charge item definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Version        *string                            `bson:",omitempty" json:"version,omitempty"`                   // The identifier that is used to identify this version of the charge item definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the charge item definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active assets.
	Name           *string                            `bson:",omitempty" json:"name,omitempty"`                      // A natural language name identifying the ChargeItemDefinition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Jurisdiction   []*CodeableConcept                 `bson:",omitempty" json:"jurisdiction,omitempty"`              // A legal or geographic region in which the charge item definition is intended to be used.
	Url            *string                            `bson:",omitempty" json:"url,omitempty"`                       // An absolute URI that is used to identify this charge item definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this charge item definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the charge item definition is stored on different servers.
	Contact        []*ContactDetail                   `bson:",omitempty" json:"contact,omitempty"`                   // Contact details to assist a user in finding and communicating with the publisher.
	Copyright      *string                            `bson:",omitempty" json:"copyright,omitempty"`                 // A copyright statement relating to the charge item definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the charge item definition.
	ApprovalDate   *Date                              `bson:",omitempty" json:"approvalDate,omitempty"`              // The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
	Extension      []*Extension                       `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Publisher      *string                            `bson:",omitempty" json:"publisher,omitempty"`                 // The name of the organization or individual responsible for the release and ongoing maintenance of the charge item definition.
	Instance       []*Reference                       `bson:",omitempty" json:"instance,omitempty"`                  // The defined billing details in this resource pertain to the given product instance(s).
	Status         *string                            `binding:"required" bson:",omitempty" json:"status,omitempty"` // The current state of the ChargeItemDefinition.
	Experimental   *bool                              `bson:",omitempty" json:"experimental,omitempty"`              // A Boolean value to indicate that this charge item definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	LastReviewDate *Date                              `bson:",omitempty" json:"lastReviewDate,omitempty"`            // The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
	PropertyGroup  *ChargeItemDefinitionPropertyGroup `binding:"omitempty" bson:",omitempty"`
	Description    *string                            `bson:",omitempty" json:"description,omitempty"`    // A free text natural language description of the charge item definition from a consumer's perspective.
	Purpose        *string                            `bson:",omitempty" json:"purpose,omitempty"`        // Explanation of why this charge item definition is needed and why it has been designed as it has.
	CopyrightLabel *string                            `bson:",omitempty" json:"copyrightLabel,omitempty"` // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Code           *CodeableConcept                   `bson:",omitempty" json:"code,omitempty"`           // The defined billing details in this resource pertain to the given billing code.
	Meta           *Meta                              `bson:",omitempty" json:"meta,omitempty"`           // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Text           *Narrative                         `bson:",omitempty" json:"text,omitempty"`           // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	PartOf         []*string                          `bson:",omitempty" json:"partOf,omitempty"`         // A larger definition of which this particular definition is a component or step.
	Date           *DateTime                          `bson:",omitempty" json:"date,omitempty"`           // The date  (and optionally time) when the charge item definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the charge item definition changes.
	ResourceType   string                             `binding:"omitempty" bson:"-" json:"resourceType"`
}
type ChargeItemDefinitionVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *ChargeItemDefinitionApplicability) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["condition"]) > 0 {
		if err := go1.Unmarshal(asMap["condition"], &out.Condition); err != nil {
			return err
		}

	}
	if len(asMap["effectivePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err != nil {
			return err
		}

	}
	if len(asMap["relatedArtifact"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedArtifact"], &out.RelatedArtifact); err != nil {
			return err
		}

	}
	return nil
}

type ChargeItemDefinitionApplicability struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Condition       *Expression      `bson:",omitempty" json:"condition,omitempty"`       // An expression that returns true or false, indicating whether the condition is satisfied. When using FHIRPath expressions, the %context environment variable must be replaced at runtime with the ChargeItem resource to which this definition is applied.
	EffectivePeriod *Period          `bson:",omitempty" json:"effectivePeriod,omitempty"` // The period during which the charge item definition content was or is planned to be in active use.
	RelatedArtifact *RelatedArtifact `bson:",omitempty" json:"relatedArtifact,omitempty"` // Reference to / quotation of the external source of the group of properties.
}

func (out *ChargeItemDefinitionPropertyGroup) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["applicability"]) > 0 {
		if err := go1.Unmarshal(asMap["applicability"], &out.Applicability); err != nil {
			return err
		}

	}
	if len(asMap["priceComponent"]) > 0 {
		if err := go1.Unmarshal(asMap["priceComponent"], &out.PriceComponent); err != nil {
			return err
		}

	}
	return nil
}

type ChargeItemDefinitionPropertyGroup struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Applicability  interface{}
	PriceComponent []*MonetaryComponent `bson:",omitempty" json:"priceComponent,omitempty"` // The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the prices have been calculated.
}

func (out *Citation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Citation\"" {
		return fmt.Errorf("resourceType is not %s", "Citation")
	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["lastReviewDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastReviewDate"], &out.LastReviewDate); err != nil {
			return err
		}

	}
	if len(asMap["reviewer"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewer"], &out.Reviewer); err != nil {
			return err
		}

	}
	if len(asMap["currentState"]) > 0 {
		if err := go1.Unmarshal(asMap["currentState"], &out.CurrentState); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["approvalDate"]) > 0 {
		if err := go1.Unmarshal(asMap["approvalDate"], &out.ApprovalDate); err != nil {
			return err
		}

	}
	if len(asMap["effectivePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err != nil {
			return err
		}

	}
	if len(asMap["editor"]) > 0 {
		if err := go1.Unmarshal(asMap["editor"], &out.Editor); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["statusDate"]) > 0 {
		if err := go1.Unmarshal(asMap["statusDate"], &out.StatusDate); err != nil {
			return err
		}

	}
	if len(asMap["citedArtifact"]) > 0 {
		if err := go1.Unmarshal(asMap["citedArtifact"], &out.CitedArtifact); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["classification"]) > 0 {
		if err := go1.Unmarshal(asMap["classification"], &out.Classification); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["endorser"]) > 0 {
		if err := go1.Unmarshal(asMap["endorser"], &out.Endorser); err != nil {
			return err
		}

	}
	if len(asMap["summary"]) > 0 {
		if err := go1.Unmarshal(asMap["summary"], &out.Summary); err != nil {
			return err
		}

	}
	if len(asMap["relatedArtifact"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedArtifact"], &out.RelatedArtifact); err != nil {
			return err
		}

	}
	return nil
}

type Citation struct {
	Language        *string             `bson:",omitempty" json:"language,omitempty"`        // The base language in which the resource is written.
	Text            *Narrative          `bson:",omitempty" json:"text,omitempty"`            // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Title           *string             `bson:",omitempty" json:"title,omitempty"`           // A short, descriptive, user-friendly title for the citation record.
	Date            *DateTime           `bson:",omitempty" json:"date,omitempty"`            // The date (and optionally time) when the citation record was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the citation record changes.
	Author          []*ContactDetail    `bson:",omitempty" json:"author,omitempty"`          // Who authored or created the citation record.
	Id              *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`           // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Copyright       *string             `bson:",omitempty" json:"copyright,omitempty"`       // Use and/or publishing restrictions for the citation record, not for the cited artifact.
	LastReviewDate  *Date               `bson:",omitempty" json:"lastReviewDate,omitempty"`  // The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
	Reviewer        []*ContactDetail    `bson:",omitempty" json:"reviewer,omitempty"`        // Who reviewed the citation record.
	CurrentState    []*CodeableConcept  `bson:",omitempty" json:"currentState,omitempty"`    // The status of the citation record.
	Jurisdiction    []*CodeableConcept  `bson:",omitempty" json:"jurisdiction,omitempty"`    // A legal or geographic region in which the citation record is intended to be used.
	Purpose         *string             `bson:",omitempty" json:"purpose,omitempty"`         // Explanation of why this citation is needed and why it has been designed as it has.
	ApprovalDate    *Date               `bson:",omitempty" json:"approvalDate,omitempty"`    // The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
	EffectivePeriod *Period             `bson:",omitempty" json:"effectivePeriod,omitempty"` // The period during which the citation record content was or is planned to be in active use.
	Editor          []*ContactDetail    `bson:",omitempty" json:"editor,omitempty"`          // Who edited or revised the citation record.
	Identifier      []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`      // A formal identifier that is used to identify this citation record when it is represented in other formats, or referenced in a specification, model, design or an instance.
	UseContext      []*UsageContext     `bson:",omitempty" json:"useContext,omitempty"`      // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate citation record instances.
	CitationVersionAlgorithmx
	Publisher         *string                `bson:",omitempty" json:"publisher,omitempty"`   // The name of the organization or individual that published the citation record.
	Description       *string                `bson:",omitempty" json:"description,omitempty"` // A free text natural language description of the citation from a consumer's perspective.
	StatusDate        *CitationStatusDate    `binding:"omitempty" bson:",omitempty"`
	CitedArtifact     *CitationCitedArtifact `binding:"omitempty" bson:",omitempty"`
	ImplicitRules     *string                `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained         []*Resource            `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension []*Extension           `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Version         *string                 `bson:",omitempty" json:"version,omitempty"` // The identifier that is used to identify this version of the citation record when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the citation record author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Classification  *CitationClassification `binding:"omitempty" bson:",omitempty"`
	CopyrightLabel  *string                 `bson:",omitempty" json:"copyrightLabel,omitempty"`            // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Note            []*Annotation           `bson:",omitempty" json:"note,omitempty"`                      // Used for general notes and annotations not coded elsewhere.
	Meta            *Meta                   `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Extension       []*Extension            `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Name            *string                 `bson:",omitempty" json:"name,omitempty"`                      // A natural language name identifying the citation record. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Status          *string                 `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this summary. Enables tracking the life-cycle of the content.
	Contact         []*ContactDetail        `bson:",omitempty" json:"contact,omitempty"`                   // Contact details to assist a user in finding and communicating with the publisher.
	Url             *string                 `bson:",omitempty" json:"url,omitempty"`                       // An absolute URI that is used to identify this citation record when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this summary is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the summary is stored on different servers.
	Experimental    *bool                   `bson:",omitempty" json:"experimental,omitempty"`              // A Boolean value to indicate that this citation record is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Endorser        []*ContactDetail        `bson:",omitempty" json:"endorser,omitempty"`                  // Who endorsed the citation record.
	Summary         *CitationSummary        `binding:"omitempty" bson:",omitempty"`
	RelatedArtifact []*RelatedArtifact      `bson:",omitempty" json:"relatedArtifact,omitempty"` // Artifact related to the citation record.
	ResourceType    string                  `binding:"omitempty" bson:"-" json:"resourceType"`
}
type CitationVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *CitationStatusDate) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["activity"], &out.Activity); err != nil {
		return err
	}

	if len(asMap["actual"]) > 0 {
		if err := go1.Unmarshal(asMap["actual"], &out.Actual); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type CitationStatusDate struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Activity *CodeableConcept `binding:"required" bson:",omitempty" json:"activity,omitempty"` // The state or status of the citation record (that will be paired with the period).
	Actual   *bool            `bson:",omitempty" json:"actual,omitempty"`                      // Whether the status date is actual (has occurred) or expected (estimated or anticipated).
	Period   *Period          `binding:"required" bson:",omitempty" json:"period,omitempty"`   // When the status started and/or ended.
	Id       *string          `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *CitationCitedArtifact) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["dateAccessed"]) > 0 {
		if err := go1.Unmarshal(asMap["dateAccessed"], &out.DateAccessed); err != nil {
			return err
		}

	}
	if len(asMap["statusDate"]) > 0 {
		if err := go1.Unmarshal(asMap["statusDate"], &out.StatusDate); err != nil {
			return err
		}

	}
	if len(asMap["webLocation"]) > 0 {
		if err := go1.Unmarshal(asMap["webLocation"], &out.WebLocation); err != nil {
			return err
		}

	}
	if len(asMap["classification"]) > 0 {
		if err := go1.Unmarshal(asMap["classification"], &out.Classification); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["currentState"]) > 0 {
		if err := go1.Unmarshal(asMap["currentState"], &out.CurrentState); err != nil {
			return err
		}

	}
	if len(asMap["part"]) > 0 {
		if err := go1.Unmarshal(asMap["part"], &out.Part); err != nil {
			return err
		}

	}
	if len(asMap["relatesTo"]) > 0 {
		if err := go1.Unmarshal(asMap["relatesTo"], &out.RelatesTo); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["abstract"]) > 0 {
		if err := go1.Unmarshal(asMap["abstract"], &out.Abstract); err != nil {
			return err
		}

	}
	if len(asMap["publicationForm"]) > 0 {
		if err := go1.Unmarshal(asMap["publicationForm"], &out.PublicationForm); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["relatedIdentifier"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedIdentifier"], &out.RelatedIdentifier); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["contributorship"]) > 0 {
		if err := go1.Unmarshal(asMap["contributorship"], &out.Contributorship); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	return nil
}

type CitationCitedArtifact struct {
	Extension         []*Extension                          `bson:",omitempty" json:"extension,omitempty"`    // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	DateAccessed      *DateTime                             `bson:",omitempty" json:"dateAccessed,omitempty"` // When the cited artifact was accessed.
	StatusDate        *CitationCitedArtifactStatusDate      `binding:"omitempty" bson:",omitempty"`
	WebLocation       *CitationCitedArtifactWebLocation     `binding:"omitempty" bson:",omitempty"`
	Classification    *CitationCitedArtifactClassification  `binding:"omitempty" bson:",omitempty"`
	Identifier        []*Identifier                         `bson:",omitempty" json:"identifier,omitempty"` // A formal identifier that is used to identify the cited artifact when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Version           *CitationCitedArtifactVersion         `binding:"omitempty" bson:",omitempty"`
	CurrentState      []*CodeableConcept                    `bson:",omitempty" json:"currentState,omitempty"` // The status of the cited artifact.
	Part              *CitationCitedArtifactPart            `binding:"omitempty" bson:",omitempty"`
	RelatesTo         *CitationCitedArtifactRelatesTo       `binding:"omitempty" bson:",omitempty"`
	Id                *string                               `bson:"_id,omitempty" json:"id,omitempty"` // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Abstract          *CitationCitedArtifactAbstract        `binding:"omitempty" bson:",omitempty"`
	PublicationForm   *CitationCitedArtifactPublicationForm `binding:"omitempty" bson:",omitempty"`
	ModifierExtension []*Extension                          `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	RelatedIdentifier []*Identifier                         `bson:",omitempty" json:"relatedIdentifier,omitempty"` // A formal identifier that is used to identify things closely related to the cited artifact.
	Title             *CitationCitedArtifactTitle           `binding:"omitempty" bson:",omitempty"`
	Contributorship   *CitationCitedArtifactContributorship `binding:"omitempty" bson:",omitempty"`
	Note              []*Annotation                         `bson:",omitempty" json:"note,omitempty"` // Any additional information or content for the article or artifact.
}

func (out *CitationCitedArtifactStatusDate) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["actual"]) > 0 {
		if err := go1.Unmarshal(asMap["actual"], &out.Actual); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["activity"], &out.Activity); err != nil {
		return err
	}

	return nil
}

type CitationCitedArtifactStatusDate struct {
	Actual            *bool        `bson:",omitempty" json:"actual,omitempty"`                    // Either occurred or expected.
	Period            *Period      `binding:"required" bson:",omitempty" json:"period,omitempty"` // When the status started and/or ended.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Activity *CodeableConcept `binding:"required" bson:",omitempty" json:"activity,omitempty"` // A definition of the status associated with a date or period.
}

func (out *CitationCitedArtifactWebLocation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["classifier"]) > 0 {
		if err := go1.Unmarshal(asMap["classifier"], &out.Classifier); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	return nil
}

type CitationCitedArtifactWebLocation struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Classifier []*CodeableConcept `bson:",omitempty" json:"classifier,omitempty"` // A characterization of the object expected at the web location.
	Url        *string            `bson:",omitempty" json:"url,omitempty"`        // The specific URL.
}

func (out *CitationCitedArtifactClassification) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["artifactAssessment"]) > 0 {
		if err := go1.Unmarshal(asMap["artifactAssessment"], &out.ArtifactAssessment); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["classifier"]) > 0 {
		if err := go1.Unmarshal(asMap["classifier"], &out.Classifier); err != nil {
			return err
		}

	}
	return nil
}

type CitationCitedArtifactClassification struct {
	ArtifactAssessment []*Reference `bson:",omitempty" json:"artifactAssessment,omitempty"` // Complex or externally created classification.
	Id                 *string      `bson:"_id,omitempty" json:"id,omitempty"`              // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension          []*Extension `bson:",omitempty" json:"extension,omitempty"`          // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension  []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`  /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type       *CodeableConcept   `bson:",omitempty" json:"type,omitempty"`       // The kind of classifier (e.g. publication type, keyword).
	Classifier []*CodeableConcept `bson:",omitempty" json:"classifier,omitempty"` // The specific classification value.
}

func (out *CitationCitedArtifactVersion) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["baseCitation"]) > 0 {
		if err := go1.Unmarshal(asMap["baseCitation"], &out.BaseCitation); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
		return err
	}

	return nil
}

type CitationCitedArtifactVersion struct {
	BaseCitation      *Reference   `bson:",omitempty" json:"baseCitation,omitempty"`      // Citation for the main version of the cited artifact.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Value *string `binding:"required" bson:",omitempty" json:"value,omitempty"` // The version number or other version identifier.
}

func (out *CitationCitedArtifactPart) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["value"]) > 0 {
		if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
			return err
		}

	}
	if len(asMap["baseCitation"]) > 0 {
		if err := go1.Unmarshal(asMap["baseCitation"], &out.BaseCitation); err != nil {
			return err
		}

	}
	return nil
}

type CitationCitedArtifactPart struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type         *CodeableConcept `bson:",omitempty" json:"type,omitempty"`         // The kind of component.
	Value        *string          `bson:",omitempty" json:"value,omitempty"`        // The specification of the component.
	BaseCitation *Reference       `bson:",omitempty" json:"baseCitation,omitempty"` // The citation for the full article or artifact.
}

func (out *CitationCitedArtifactRelatesTo) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["classifier"]) > 0 {
		if err := go1.Unmarshal(asMap["classifier"], &out.Classifier); err != nil {
			return err
		}

	}
	if len(asMap["label"]) > 0 {
		if err := go1.Unmarshal(asMap["label"], &out.Label); err != nil {
			return err
		}

	}
	if len(asMap["citation"]) > 0 {
		if err := go1.Unmarshal(asMap["citation"], &out.Citation); err != nil {
			return err
		}

	}
	if len(asMap["resourceReference"]) > 0 {
		if err := go1.Unmarshal(asMap["resourceReference"], &out.ResourceReference); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["display"]) > 0 {
		if err := go1.Unmarshal(asMap["display"], &out.Display); err != nil {
			return err
		}

	}
	if len(asMap["document"]) > 0 {
		if err := go1.Unmarshal(asMap["document"], &out.Document); err != nil {
			return err
		}

	}
	if len(asMap["resource"]) > 0 {
		if err := go1.Unmarshal(asMap["resource"], &out.Resource); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	return nil
}

type CitationCitedArtifactRelatesTo struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Classifier        []*CodeableConcept `bson:",omitempty" json:"classifier,omitempty"`              // Provides additional classifiers of the related artifact.
	Label             *string            `bson:",omitempty" json:"label,omitempty"`                   // A short label that can be used to reference the related artifact from elsewhere in the containing artifact, such as a footnote index.
	Citation          *string            `bson:",omitempty" json:"citation,omitempty"`                // A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.
	ResourceReference *Reference         `bson:",omitempty" json:"resourceReference,omitempty"`       // The related artifact, if the artifact is not a canonical resource, or a resource reference to a canonical resource.
	Id                *string            `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Display           *string            `bson:",omitempty" json:"display,omitempty"`                 // A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.
	Document          *Attachment        `bson:",omitempty" json:"document,omitempty"`                // The document being referenced, represented as an attachment. Do not use this element if using the resource element to provide the canonical to the related artifact.
	Resource          *string            `bson:",omitempty" json:"resource,omitempty"`                // The related artifact, such as a library, value set, profile, or other knowledge resource.
	Type              *string            `binding:"required" bson:",omitempty" json:"type,omitempty"` // The type of relationship to the related artifact.
}

func (out *CitationCitedArtifactAbstract) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
		return err
	}

	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	return nil
}

type CitationCitedArtifactAbstract struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type      *CodeableConcept `bson:",omitempty" json:"type,omitempty"`                    // Used to express the reason for or classification of the abstract.
	Language  *CodeableConcept `bson:",omitempty" json:"language,omitempty"`                // Used to express the specific language of the abstract.
	Text      *string          `binding:"required" bson:",omitempty" json:"text,omitempty"` // Abstract content.
	Copyright *string          `bson:",omitempty" json:"copyright,omitempty"`               // Copyright notice for the abstract.
}

func (out *CitationCitedArtifactPublicationForm) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["publishedIn"]) > 0 {
		if err := go1.Unmarshal(asMap["publishedIn"], &out.PublishedIn); err != nil {
			return err
		}

	}
	if len(asMap["publicationDateText"]) > 0 {
		if err := go1.Unmarshal(asMap["publicationDateText"], &out.PublicationDateText); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["issue"]) > 0 {
		if err := go1.Unmarshal(asMap["issue"], &out.Issue); err != nil {
			return err
		}

	}
	if len(asMap["publicationDateSeason"]) > 0 {
		if err := go1.Unmarshal(asMap["publicationDateSeason"], &out.PublicationDateSeason); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["articleDate"]) > 0 {
		if err := go1.Unmarshal(asMap["articleDate"], &out.ArticleDate); err != nil {
			return err
		}

	}
	if len(asMap["lastRevisionDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastRevisionDate"], &out.LastRevisionDate); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["firstPage"]) > 0 {
		if err := go1.Unmarshal(asMap["firstPage"], &out.FirstPage); err != nil {
			return err
		}

	}
	if len(asMap["pageCount"]) > 0 {
		if err := go1.Unmarshal(asMap["pageCount"], &out.PageCount); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["citedMedium"]) > 0 {
		if err := go1.Unmarshal(asMap["citedMedium"], &out.CitedMedium); err != nil {
			return err
		}

	}
	if len(asMap["volume"]) > 0 {
		if err := go1.Unmarshal(asMap["volume"], &out.Volume); err != nil {
			return err
		}

	}
	if len(asMap["accessionNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["accessionNumber"], &out.AccessionNumber); err != nil {
			return err
		}

	}
	if len(asMap["pageString"]) > 0 {
		if err := go1.Unmarshal(asMap["pageString"], &out.PageString); err != nil {
			return err
		}

	}
	if len(asMap["lastPage"]) > 0 {
		if err := go1.Unmarshal(asMap["lastPage"], &out.LastPage); err != nil {
			return err
		}

	}
	return nil
}

type CitationCitedArtifactPublicationForm struct {
	PublishedIn           *CitationCitedArtifactPublicationFormPublishedIn `binding:"omitempty" bson:",omitempty"`
	PublicationDateText   *string                                          `bson:",omitempty" json:"publicationDateText,omitempty"`   // Text representation of the date on which the issue of the cited artifact was published.
	Id                    *string                                          `bson:"_id,omitempty" json:"id,omitempty"`                 // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Issue                 *string                                          `bson:",omitempty" json:"issue,omitempty"`                 // Issue, part or supplement of journal or other collection in which the article is published.
	PublicationDateSeason *string                                          `bson:",omitempty" json:"publicationDateSeason,omitempty"` // Spring, Summer, Fall/Autumn, Winter.
	Copyright             *string                                          `bson:",omitempty" json:"copyright,omitempty"`             // Copyright notice for the full article or artifact.
	ArticleDate           *DateTime                                        `bson:",omitempty" json:"articleDate,omitempty"`           // The date the article was added to the database, or the date the article was released.
	LastRevisionDate      *DateTime                                        `bson:",omitempty" json:"lastRevisionDate,omitempty"`      // The date the article was last revised or updated in the database.
	Language              []*CodeableConcept                               `bson:",omitempty" json:"language,omitempty"`              // The language or languages in which this form of the article is published.
	FirstPage             *string                                          `bson:",omitempty" json:"firstPage,omitempty"`             // Used for isolated representation of first page.
	PageCount             *string                                          `bson:",omitempty" json:"pageCount,omitempty"`             // Actual or approximate number of pages or screens. Distinct from reporting the page numbers.
	Extension             []*Extension                                     `bson:",omitempty" json:"extension,omitempty"`             // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension     []*Extension                                     `bson:",omitempty" json:"modifierExtension,omitempty"`     /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	CitedMedium     *CodeableConcept `bson:",omitempty" json:"citedMedium,omitempty"`     // Describes the form of the medium cited. Common codes are "Internet" or "Print". The CitedMedium value set has 6 codes. The codes internet, print, and offline-digital-storage are the common codes for a typical publication form, though internet and print are more common for study citations. Three additional codes (each appending one of the primary codes with "-without-issue" are used for situations when a study is published both within an issue (of a periodical release as commonly done for journals) AND is published separately from the issue (as commonly done with early online publication), to represent specific identification of the publication form not associated with the issue.
	Volume          *string          `bson:",omitempty" json:"volume,omitempty"`          // Volume number of journal or other collection in which the article is published.
	AccessionNumber *string          `bson:",omitempty" json:"accessionNumber,omitempty"` // Entry number or identifier for inclusion in a database.
	PageString      *string          `bson:",omitempty" json:"pageString,omitempty"`      // Used for full display of pagination.
	LastPage        *string          `bson:",omitempty" json:"lastPage,omitempty"`        // Used for isolated representation of last page.
}

func (out *CitationCitedArtifactPublicationFormPublishedIn) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["publisherLocation"]) > 0 {
		if err := go1.Unmarshal(asMap["publisherLocation"], &out.PublisherLocation); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	return nil
}

type CitationCitedArtifactPublicationFormPublishedIn struct {
	Identifier        []*Identifier `bson:",omitempty" json:"identifier,omitempty"`        // Journal identifiers include ISSN, ISO Abbreviation and NLMuniqueID; Book identifiers include ISBN.
	Title             *string       `bson:",omitempty" json:"title,omitempty"`             // Name of the database or title of the book or journal.
	Publisher         *Reference    `bson:",omitempty" json:"publisher,omitempty"`         // Name of or resource describing the publisher.
	PublisherLocation *string       `bson:",omitempty" json:"publisherLocation,omitempty"` // Geographic location of the publisher.
	Id                *string       `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension  `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension  `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `bson:",omitempty" json:"type,omitempty"` // Kind of container (e.g. Periodical, database, or book).
}

func (out *CitationCitedArtifactTitle) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	return nil
}

type CitationCitedArtifactTitle struct {
	Language          *CodeableConcept `bson:",omitempty" json:"language,omitempty"`                // Used to express the specific language of the title.
	Text              *string          `binding:"required" bson:",omitempty" json:"text,omitempty"` // The title of the article or artifact.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`       /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type []*CodeableConcept `bson:",omitempty" json:"type,omitempty"` // Used to express the reason for or classification of the title.
}

func (out *CitationCitedArtifactContributorship) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["entry"]) > 0 {
		if err := go1.Unmarshal(asMap["entry"], &out.Entry); err != nil {
			return err
		}

	}
	if len(asMap["summary"]) > 0 {
		if err := go1.Unmarshal(asMap["summary"], &out.Summary); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["complete"]) > 0 {
		if err := go1.Unmarshal(asMap["complete"], &out.Complete); err != nil {
			return err
		}

	}
	return nil
}

type CitationCitedArtifactContributorship struct {
	Entry             *CitationCitedArtifactContributorshipEntry   `binding:"omitempty" bson:",omitempty"`
	Summary           *CitationCitedArtifactContributorshipSummary `binding:"omitempty" bson:",omitempty"`
	Id                *string                                      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                                 `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                                 `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Complete *bool `bson:",omitempty" json:"complete,omitempty"` // Indicates if the list includes all authors and/or contributors.
}

func (out *CitationCitedArtifactContributorshipEntry) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["contributor"], &out.Contributor); err != nil {
		return err
	}

	if len(asMap["forenameInitials"]) > 0 {
		if err := go1.Unmarshal(asMap["forenameInitials"], &out.ForenameInitials); err != nil {
			return err
		}

	}
	if len(asMap["role"]) > 0 {
		if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
			return err
		}

	}
	if len(asMap["correspondingContact"]) > 0 {
		if err := go1.Unmarshal(asMap["correspondingContact"], &out.CorrespondingContact); err != nil {
			return err
		}

	}
	if len(asMap["rankingOrder"]) > 0 {
		if err := go1.Unmarshal(asMap["rankingOrder"], &out.RankingOrder); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["affiliation"]) > 0 {
		if err := go1.Unmarshal(asMap["affiliation"], &out.Affiliation); err != nil {
			return err
		}

	}
	if len(asMap["contributionType"]) > 0 {
		if err := go1.Unmarshal(asMap["contributionType"], &out.ContributionType); err != nil {
			return err
		}

	}
	if len(asMap["contributionInstance"]) > 0 {
		if err := go1.Unmarshal(asMap["contributionInstance"], &out.ContributionInstance); err != nil {
			return err
		}

	}
	return nil
}

type CitationCitedArtifactContributorshipEntry struct {
	Id                   *string          `bson:"_id,omitempty" json:"id,omitempty"`                          // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Contributor          *Reference       `binding:"required" bson:",omitempty" json:"contributor,omitempty"` // The identity of the individual contributor.
	ForenameInitials     *string          `bson:",omitempty" json:"forenameInitials,omitempty"`               // For citation styles that use initials.
	Role                 *CodeableConcept `bson:",omitempty" json:"role,omitempty"`                           // The role of the contributor (e.g. author, editor, reviewer, funder).
	CorrespondingContact *bool            `bson:",omitempty" json:"correspondingContact,omitempty"`           // Whether the contributor is the corresponding contributor for the role.
	RankingOrder         *int             `bson:",omitempty" json:"rankingOrder,omitempty"`                   // Provides a numerical ranking to represent the degree of contributorship relative to other contributors, such as 1 for first author and 2 for second author.
	Extension            []*Extension     `bson:",omitempty" json:"extension,omitempty"`                      // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension    []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`              /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Affiliation          []*Reference                                                   `bson:",omitempty" json:"affiliation,omitempty"`      // Organization affiliated with the contributor.
	ContributionType     []*CodeableConcept                                             `bson:",omitempty" json:"contributionType,omitempty"` // This element identifies the specific nature of an individual’s contribution with respect to the cited work.
	ContributionInstance *CitationCitedArtifactContributorshipEntryContributionInstance `binding:"omitempty" bson:",omitempty"`
}

func (out *CitationCitedArtifactContributorshipEntryContributionInstance) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["time"]) > 0 {
		if err := go1.Unmarshal(asMap["time"], &out.Time); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	return nil
}

type CitationCitedArtifactContributorshipEntryContributionInstance struct {
	Time              *DateTime    `bson:",omitempty" json:"time,omitempty"`              // The time that the contribution was made.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // The specific contribution.
}

func (out *CitationCitedArtifactContributorshipSummary) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["style"]) > 0 {
		if err := go1.Unmarshal(asMap["style"], &out.Style); err != nil {
			return err
		}

	}
	if len(asMap["source"]) > 0 {
		if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type CitationCitedArtifactContributorshipSummary struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type      *CodeableConcept `bson:",omitempty" json:"type,omitempty"`                     // Used most commonly to express an author list or a contributorship statement.
	Style     *CodeableConcept `bson:",omitempty" json:"style,omitempty"`                    // The format for the display string, such as author last name with first letter capitalized followed by forename initials.
	Source    *CodeableConcept `bson:",omitempty" json:"source,omitempty"`                   // Used to code the producer or rule for creating the display string.
	Value     *string          `binding:"required" bson:",omitempty" json:"value,omitempty"` // The display string for the author list, contributor list, or contributorship statement.
	Id        *string          `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension     `bson:",omitempty" json:"extension,omitempty"`                // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *CitationClassification) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["classifier"]) > 0 {
		if err := go1.Unmarshal(asMap["classifier"], &out.Classifier); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type CitationClassification struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type       *CodeableConcept   `bson:",omitempty" json:"type,omitempty"`       // The kind of classifier (e.g. publication type, keyword).
	Classifier []*CodeableConcept `bson:",omitempty" json:"classifier,omitempty"` // The specific classification value.
	Id         *string            `bson:"_id,omitempty" json:"id,omitempty"`      // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension  []*Extension       `bson:",omitempty" json:"extension,omitempty"`  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *CitationSummary) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["style"]) > 0 {
		if err := go1.Unmarshal(asMap["style"], &out.Style); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
		return err
	}

	return nil
}

type CitationSummary struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Style *CodeableConcept `bson:",omitempty" json:"style,omitempty"`                   // Format for display of the citation summary.
	Text  *string          `binding:"required" bson:",omitempty" json:"text,omitempty"` // The human-readable display of the citation summary.
}

func (out *Claim) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Claim\"" {
		return fmt.Errorf("resourceType is not %s", "Claim")
	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["enterer"]) > 0 {
		if err := go1.Unmarshal(asMap["enterer"], &out.Enterer); err != nil {
			return err
		}

	}
	if len(asMap["supportingInfo"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInfo"], &out.SupportingInfo); err != nil {
			return err
		}

	}
	if len(asMap["insurance"]) > 0 {
		if err := go1.Unmarshal(asMap["insurance"], &out.Insurance); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["prescription"]) > 0 {
		if err := go1.Unmarshal(asMap["prescription"], &out.Prescription); err != nil {
			return err
		}

	}
	if len(asMap["event"]) > 0 {
		if err := go1.Unmarshal(asMap["event"], &out.Event); err != nil {
			return err
		}

	}
	if len(asMap["patientPaid"]) > 0 {
		if err := go1.Unmarshal(asMap["patientPaid"], &out.PatientPaid); err != nil {
			return err
		}

	}
	if len(asMap["careTeam"]) > 0 {
		if err := go1.Unmarshal(asMap["careTeam"], &out.CareTeam); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["traceNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["traceNumber"], &out.TraceNumber); err != nil {
			return err
		}

	}
	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	if len(asMap["originalPrescription"]) > 0 {
		if err := go1.Unmarshal(asMap["originalPrescription"], &out.OriginalPrescription); err != nil {
			return err
		}

	}
	if len(asMap["payee"]) > 0 {
		if err := go1.Unmarshal(asMap["payee"], &out.Payee); err != nil {
			return err
		}

	}
	if len(asMap["referral"]) > 0 {
		if err := go1.Unmarshal(asMap["referral"], &out.Referral); err != nil {
			return err
		}

	}
	if len(asMap["diagnosisRelatedGroup"]) > 0 {
		if err := go1.Unmarshal(asMap["diagnosisRelatedGroup"], &out.DiagnosisRelatedGroup); err != nil {
			return err
		}

	}
	if len(asMap["accident"]) > 0 {
		if err := go1.Unmarshal(asMap["accident"], &out.Accident); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["use"], &out.Use); err != nil {
		return err
	}

	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["total"]) > 0 {
		if err := go1.Unmarshal(asMap["total"], &out.Total); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["insurer"]) > 0 {
		if err := go1.Unmarshal(asMap["insurer"], &out.Insurer); err != nil {
			return err
		}

	}
	if len(asMap["facility"]) > 0 {
		if err := go1.Unmarshal(asMap["facility"], &out.Facility); err != nil {
			return err
		}

	}
	if len(asMap["diagnosis"]) > 0 {
		if err := go1.Unmarshal(asMap["diagnosis"], &out.Diagnosis); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["fundsReserve"]) > 0 {
		if err := go1.Unmarshal(asMap["fundsReserve"], &out.FundsReserve); err != nil {
			return err
		}

	}
	if len(asMap["procedure"]) > 0 {
		if err := go1.Unmarshal(asMap["procedure"], &out.Procedure); err != nil {
			return err
		}

	}
	if len(asMap["item"]) > 0 {
		if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["billablePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["billablePeriod"], &out.BillablePeriod); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["created"], &out.Created); err != nil {
		return err
	}

	if len(asMap["related"]) > 0 {
		if err := go1.Unmarshal(asMap["related"], &out.Related); err != nil {
			return err
		}

	}
	if len(asMap["subType"]) > 0 {
		if err := go1.Unmarshal(asMap["subType"], &out.SubType); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["patient"], &out.Patient); err != nil {
		return err
	}

	if len(asMap["provider"]) > 0 {
		if err := go1.Unmarshal(asMap["provider"], &out.Provider); err != nil {
			return err
		}

	}
	return nil
}

type Claim struct {
	ImplicitRules     *string              `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Enterer           *Reference           `bson:",omitempty" json:"enterer,omitempty"`       // Individual who created the claim, predetermination or preauthorization.
	SupportingInfo    *ClaimSupportingInfo `binding:"omitempty" bson:",omitempty"`
	Insurance         *ClaimInsurance      `binding:"omitempty" bson:",omitempty"`
	Contained         []*Resource          `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Status                *string             `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of the resource instance.
	Prescription          *Reference          `bson:",omitempty" json:"prescription,omitempty"`              // Prescription is the document/authorization given to the claim author for them to provide products and services for which consideration (reimbursement) is sought. Could be a RX for medications, an 'order' for oxygen or wheelchair or physiotherapy treatments.
	Event                 *ClaimEvent         `binding:"omitempty" bson:",omitempty"`
	PatientPaid           *Money              `bson:",omitempty" json:"patientPaid,omitempty"` // The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
	CareTeam              *ClaimCareTeam      `binding:"omitempty" bson:",omitempty"`
	Extension             []*Extension        `bson:",omitempty" json:"extension,omitempty"`            // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	TraceNumber           []*Identifier       `bson:",omitempty" json:"traceNumber,omitempty"`          // Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
	Priority              *CodeableConcept    `bson:",omitempty" json:"priority,omitempty"`             // The provider-required urgency of processing the request. Typical values include: stat, normal, deferred.
	OriginalPrescription  *Reference          `bson:",omitempty" json:"originalPrescription,omitempty"` // Original prescription which has been superseded by this prescription to support the dispensing of pharmacy services, medications or products.
	Payee                 *ClaimPayee         `binding:"omitempty" bson:",omitempty"`
	Referral              *Reference          `bson:",omitempty" json:"referral,omitempty"`              // The referral information received by the claim author, it is not to be used when the author generates a referral for a patient. A copy of that referral may be provided as supporting information. Some insurers require proof of referral to pay for services or to pay specialist rates for services.
	DiagnosisRelatedGroup *CodeableConcept    `bson:",omitempty" json:"diagnosisRelatedGroup,omitempty"` // A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system.
	Accident              *ClaimAccident      `binding:"omitempty" bson:",omitempty"`
	Id                    *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                  // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language              *string             `bson:",omitempty" json:"language,omitempty"`               // The base language in which the resource is written.
	Use                   *string             `binding:"required" bson:",omitempty" json:"use,omitempty"` // A code to indicate whether the nature of the request is: Claim - A request to an Insurer to adjudicate the supplied charges for health care goods and services under the identified policy and to pay the determined Benefit amount, if any; Preauthorization - A request to an Insurer to adjudicate the supplied proposed future charges for health care goods and services under the identified policy and to approve the services and provide the expected benefit amounts and potentially to reserve funds to pay the benefits when Claims for the indicated services are later submitted; or, Pre-determination - A request to an Insurer to adjudicate the supplied 'what if' charges for health care goods and services under the identified policy and report back what the Benefit payable would be had the services actually been provided.
	Encounter             []*Reference        `bson:",omitempty" json:"encounter,omitempty"`              // Healthcare encounters related to this claim.
	Total                 *Money              `bson:",omitempty" json:"total,omitempty"`                  // The total value of the all the items in the claim.
	Identifier            []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`             // A unique identifier assigned to this claim.
	Insurer               *Reference          `bson:",omitempty" json:"insurer,omitempty"`                // The Insurer who is target of the request.
	Facility              *Reference          `bson:",omitempty" json:"facility,omitempty"`               // Facility where the services were provided.
	Diagnosis             *ClaimDiagnosis     `binding:"omitempty" bson:",omitempty"`
	Text                  *Narrative          `bson:",omitempty" json:"text,omitempty"`                    // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Type                  *CodeableConcept    `binding:"required" bson:",omitempty" json:"type,omitempty"` // The category of claim, e.g. oral, pharmacy, vision, institutional, professional.
	FundsReserve          *CodeableConcept    `bson:",omitempty" json:"fundsReserve,omitempty"`            // A code to indicate whether and for whom funds are to be reserved for future claims.
	Procedure             *ClaimProcedure     `binding:"omitempty" bson:",omitempty"`
	Item                  *ClaimItem          `binding:"omitempty" bson:",omitempty"`
	Meta                  *Meta               `bson:",omitempty" json:"meta,omitempty"`                       // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	BillablePeriod        *Period             `bson:",omitempty" json:"billablePeriod,omitempty"`             // The period for which charges are being submitted.
	Created               *DateTime           `binding:"required" bson:",omitempty" json:"created,omitempty"` // The date this resource was created.
	Related               *ClaimRelated       `binding:"omitempty" bson:",omitempty"`
	SubType               *CodeableConcept    `bson:",omitempty" json:"subType,omitempty"`                    // A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
	Patient               *Reference          `binding:"required" bson:",omitempty" json:"patient,omitempty"` // The party to whom the professional services and/or products have been supplied or are being considered and for whom actual or forecast reimbursement is sought.
	Provider              *Reference          `bson:",omitempty" json:"provider,omitempty"`                   // The provider which is responsible for the claim, predetermination or preauthorization.
	ResourceType          string              `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ClaimSupportingInfo) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["timingDate"], &out.TimingDate); err == nil {
	} else if err := go1.Unmarshal(asMap["timingPeriod"], &out.TimingPeriod); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["valueReference"], &out.ValueReference); err == nil {
	} else if err := go1.Unmarshal(asMap["valueIdentifier"], &out.ValueIdentifier); err == nil {
	} else {

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type ClaimSupportingInfo struct {
	Code              *CodeableConcept `bson:",omitempty" json:"code,omitempty"`              // System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Sequence *int             `binding:"required" bson:",omitempty" json:"sequence,omitempty"` // A number to uniquely identify supporting information entries.
	Category *CodeableConcept `binding:"required" bson:",omitempty" json:"category,omitempty"` // The general class of the information supplied: information; exception; accident, employment; onset, etc.
	ClaimSupportingInfoTimingx
	ClaimSupportingInfoValuex
	Reason    *CodeableConcept `bson:",omitempty" json:"reason,omitempty"`    // Provides the reason in the situation where a reason code is required in addition to the content.
	Id        *string          `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension     `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}
type ClaimSupportingInfoTimingx struct {
	TimingDate   Date   `bson:",omitempty" json:"timingDate,omitempty"`
	TimingPeriod Period `bson:",omitempty" json:"timingPeriod,omitempty"`
}
type ClaimSupportingInfoValuex struct {
	ValueBoolean    bool       `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueString     string     `bson:",omitempty" json:"valueString,omitempty"`
	ValueQuantity   Quantity   `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueAttachment Attachment `bson:",omitempty" json:"valueAttachment,omitempty"`
	ValueReference  Reference  `bson:",omitempty" json:"valueReference,omitempty"`
	ValueIdentifier Identifier `bson:",omitempty" json:"valueIdentifier,omitempty"`
}

func (out *ClaimInsurance) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["coverage"], &out.Coverage); err != nil {
		return err
	}

	if len(asMap["businessArrangement"]) > 0 {
		if err := go1.Unmarshal(asMap["businessArrangement"], &out.BusinessArrangement); err != nil {
			return err
		}

	}
	if len(asMap["preAuthRef"]) > 0 {
		if err := go1.Unmarshal(asMap["preAuthRef"], &out.PreAuthRef); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["focal"], &out.Focal); err != nil {
		return err
	}

	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["claimResponse"]) > 0 {
		if err := go1.Unmarshal(asMap["claimResponse"], &out.ClaimResponse); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ClaimInsurance struct {
	Coverage            *Reference   `binding:"required" bson:",omitempty" json:"coverage,omitempty"` // Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
	BusinessArrangement *string      `bson:",omitempty" json:"businessArrangement,omitempty"`         // A business agreement number established between the provider and the insurer for special business processing purposes.
	PreAuthRef          []*string    `bson:",omitempty" json:"preAuthRef,omitempty"`                  // Reference numbers previously provided by the insurer to the provider to be quoted on subsequent claims containing services or products related to the prior authorization.
	Sequence            *int         `binding:"required" bson:",omitempty" json:"sequence,omitempty"` // A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
	Focal               *bool        `binding:"required" bson:",omitempty" json:"focal,omitempty"`    // A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.
	Identifier          *Identifier  `bson:",omitempty" json:"identifier,omitempty"`                  // The business identifier to be used when the claim is sent for adjudication against this insurance policy.
	ClaimResponse       *Reference   `bson:",omitempty" json:"claimResponse,omitempty"`               // The result of the adjudication of the line items for the Coverage specified in this insurance.
	Id                  *string      `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension           []*Extension `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension   []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`           /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *ClaimEvent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["whenDateTime"], &out.WhenDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["whenPeriod"], &out.WhenPeriod); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "when[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ClaimEvent struct {
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // A coded event such as when a service is expected or a card printed.
	ClaimEventWhenx
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type ClaimEventWhenx struct {
	WhenDateTime DateTime `bson:",omitempty" json:"whenDateTime,omitempty"`
	WhenPeriod   Period   `bson:",omitempty" json:"whenPeriod,omitempty"`
}

func (out *ClaimCareTeam) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["specialty"]) > 0 {
		if err := go1.Unmarshal(asMap["specialty"], &out.Specialty); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["provider"], &out.Provider); err != nil {
		return err
	}

	if len(asMap["responsible"]) > 0 {
		if err := go1.Unmarshal(asMap["responsible"], &out.Responsible); err != nil {
			return err
		}

	}
	if len(asMap["role"]) > 0 {
		if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
			return err
		}

	}
	return nil
}

type ClaimCareTeam struct {
	Specialty         *CodeableConcept `bson:",omitempty" json:"specialty,omitempty"`         // The specialization of the practitioner or provider which is applicable for this service.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Sequence    *int             `binding:"required" bson:",omitempty" json:"sequence,omitempty"` // A number to uniquely identify care team entries.
	Provider    *Reference       `binding:"required" bson:",omitempty" json:"provider,omitempty"` // Member of the team who provided the product or service.
	Responsible *bool            `bson:",omitempty" json:"responsible,omitempty"`                 // The party who is billing and/or responsible for the claimed products or services.
	Role        *CodeableConcept `bson:",omitempty" json:"role,omitempty"`                        // The lead, assisting or supervising practitioner and their discipline if a multidisciplinary team.
}

func (out *ClaimPayee) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["party"]) > 0 {
		if err := go1.Unmarshal(asMap["party"], &out.Party); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ClaimPayee struct {
	Type              *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // Type of Party to be reimbursed: subscriber, provider, other.
	Party             *Reference       `bson:",omitempty" json:"party,omitempty"`                   // Reference to the individual or organization to whom any payment will be made.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`       /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *ClaimAccident) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
		return err
	}

	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["locationAddress"], &out.LocationAddress); err == nil {
	} else if err := go1.Unmarshal(asMap["locationReference"], &out.LocationReference); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ClaimAccident struct {
	Date *Date            `binding:"required" bson:",omitempty" json:"date,omitempty"` // Date of an accident event  related to the products and services contained in the claim.
	Type *CodeableConcept `bson:",omitempty" json:"type,omitempty"`                    // The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
	ClaimAccidentLocationx
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type ClaimAccidentLocationx struct {
	LocationAddress   Address   `bson:",omitempty" json:"locationAddress,omitempty"`
	LocationReference Reference `bson:",omitempty" json:"locationReference,omitempty"`
}

func (out *ClaimDiagnosis) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["diagnosisCodeableConcept"], &out.DiagnosisCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["diagnosisReference"], &out.DiagnosisReference); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "diagnosis[x]")
	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["onAdmission"]) > 0 {
		if err := go1.Unmarshal(asMap["onAdmission"], &out.OnAdmission); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type ClaimDiagnosis struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Sequence *int `binding:"required" bson:",omitempty" json:"sequence,omitempty"` // A number to uniquely identify diagnosis entries.
	ClaimDiagnosisDiagnosisx
	Type        []*CodeableConcept `bson:",omitempty" json:"type,omitempty"`        // When the condition was observed or the relative ranking.
	OnAdmission *CodeableConcept   `bson:",omitempty" json:"onAdmission,omitempty"` // Indication of whether the diagnosis was present on admission to a facility.
	Id          *string            `bson:"_id,omitempty" json:"id,omitempty"`       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension   []*Extension       `bson:",omitempty" json:"extension,omitempty"`   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}
type ClaimDiagnosisDiagnosisx struct {
	DiagnosisCodeableConcept CodeableConcept `bson:",omitempty" json:"diagnosisCodeableConcept,omitempty"`
	DiagnosisReference       Reference       `bson:",omitempty" json:"diagnosisReference,omitempty"`
}

func (out *ClaimProcedure) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["procedureCodeableConcept"], &out.ProcedureCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["procedureReference"], &out.ProcedureReference); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "procedure[x]")
	}
	if len(asMap["udi"]) > 0 {
		if err := go1.Unmarshal(asMap["udi"], &out.Udi); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
		return err
	}

	return nil
}

type ClaimProcedure struct {
	Type []*CodeableConcept `bson:",omitempty" json:"type,omitempty"` // When the condition was observed or the relative ranking.
	Date *DateTime          `bson:",omitempty" json:"date,omitempty"` // Date and optionally time the procedure was performed.
	ClaimProcedureProcedurex
	Udi               []*Reference `bson:",omitempty" json:"udi,omitempty"`               // Unique Device Identifiers associated with this line item.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Sequence *int `binding:"required" bson:",omitempty" json:"sequence,omitempty"` // A number to uniquely identify procedure entries.
}
type ClaimProcedureProcedurex struct {
	ProcedureCodeableConcept CodeableConcept `bson:",omitempty" json:"procedureCodeableConcept,omitempty"`
	ProcedureReference       Reference       `bson:",omitempty" json:"procedureReference,omitempty"`
}

func (out *ClaimItem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["factor"]) > 0 {
		if err := go1.Unmarshal(asMap["factor"], &out.Factor); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["traceNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["traceNumber"], &out.TraceNumber); err != nil {
			return err
		}

	}
	if len(asMap["procedureSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["procedureSequence"], &out.ProcedureSequence); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["productOrServiceEnd"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrServiceEnd"], &out.ProductOrServiceEnd); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["informationSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["informationSequence"], &out.InformationSequence); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["locationCodeableConcept"], &out.LocationCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["locationAddress"], &out.LocationAddress); err == nil {
	} else if err := go1.Unmarshal(asMap["locationReference"], &out.LocationReference); err == nil {
	} else {

	}
	if len(asMap["tax"]) > 0 {
		if err := go1.Unmarshal(asMap["tax"], &out.Tax); err != nil {
			return err
		}

	}
	if len(asMap["detail"]) > 0 {
		if err := go1.Unmarshal(asMap["detail"], &out.Detail); err != nil {
			return err
		}

	}
	if len(asMap["modifier"]) > 0 {
		if err := go1.Unmarshal(asMap["modifier"], &out.Modifier); err != nil {
			return err
		}

	}
	if len(asMap["programCode"]) > 0 {
		if err := go1.Unmarshal(asMap["programCode"], &out.ProgramCode); err != nil {
			return err
		}

	}
	if len(asMap["patientPaid"]) > 0 {
		if err := go1.Unmarshal(asMap["patientPaid"], &out.PatientPaid); err != nil {
			return err
		}

	}
	if len(asMap["unitPrice"]) > 0 {
		if err := go1.Unmarshal(asMap["unitPrice"], &out.UnitPrice); err != nil {
			return err
		}

	}
	if len(asMap["net"]) > 0 {
		if err := go1.Unmarshal(asMap["net"], &out.Net); err != nil {
			return err
		}

	}
	if len(asMap["diagnosisSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["diagnosisSequence"], &out.DiagnosisSequence); err != nil {
			return err
		}

	}
	if len(asMap["revenue"]) > 0 {
		if err := go1.Unmarshal(asMap["revenue"], &out.Revenue); err != nil {
			return err
		}

	}
	if len(asMap["udi"]) > 0 {
		if err := go1.Unmarshal(asMap["udi"], &out.Udi); err != nil {
			return err
		}

	}
	if len(asMap["bodySite"]) > 0 {
		if err := go1.Unmarshal(asMap["bodySite"], &out.BodySite); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["careTeamSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["careTeamSequence"], &out.CareTeamSequence); err != nil {
			return err
		}

	}
	if len(asMap["productOrService"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrService"], &out.ProductOrService); err != nil {
			return err
		}

	}
	if len(asMap["request"]) > 0 {
		if err := go1.Unmarshal(asMap["request"], &out.Request); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["servicedDate"], &out.ServicedDate); err == nil {
	} else if err := go1.Unmarshal(asMap["servicedPeriod"], &out.ServicedPeriod); err == nil {
	} else {

	}
	return nil
}

type ClaimItem struct {
	Quantity          *Quantity    `bson:",omitempty" json:"quantity,omitempty"`          // The number of repetitions of a service or product.
	Factor            *float64     `bson:",omitempty" json:"factor,omitempty"`            // A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	TraceNumber         []*Identifier    `bson:",omitempty" json:"traceNumber,omitempty"`                 // Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
	ProcedureSequence   []*int           `bson:",omitempty" json:"procedureSequence,omitempty"`           // Procedures applicable for this service or product.
	Category            *CodeableConcept `bson:",omitempty" json:"category,omitempty"`                    // Code to identify the general type of benefits under which products and services are provided.
	ProductOrServiceEnd *CodeableConcept `bson:",omitempty" json:"productOrServiceEnd,omitempty"`         // This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
	Extension           []*Extension     `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	InformationSequence []*int           `bson:",omitempty" json:"informationSequence,omitempty"`         // Exceptions, special conditions and supporting information applicable for this service or product.
	Id                  *string          `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Sequence            *int             `binding:"required" bson:",omitempty" json:"sequence,omitempty"` // A number to uniquely identify item entries.
	ClaimItemLocationx
	Tax               *Money             `bson:",omitempty" json:"tax,omitempty"` // The total of taxes applicable for this product or service.
	Detail            *ClaimItemDetail   `binding:"omitempty" bson:",omitempty"`
	Modifier          []*CodeableConcept `bson:",omitempty" json:"modifier,omitempty"`          // Item typification or modifiers codes to convey additional context for the product or service.
	ProgramCode       []*CodeableConcept `bson:",omitempty" json:"programCode,omitempty"`       // Identifies the program under which this may be recovered.
	PatientPaid       *Money             `bson:",omitempty" json:"patientPaid,omitempty"`       // The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
	UnitPrice         *Money             `bson:",omitempty" json:"unitPrice,omitempty"`         // If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
	Net               *Money             `bson:",omitempty" json:"net,omitempty"`               // The total amount claimed for the group (if a grouper) or the line item. Net = unit price * quantity * factor.
	DiagnosisSequence []*int             `bson:",omitempty" json:"diagnosisSequence,omitempty"` // Diagnosis applicable for this service or product.
	Revenue           *CodeableConcept   `bson:",omitempty" json:"revenue,omitempty"`           // The type of revenue or cost center providing the product and/or service.
	Udi               []*Reference       `bson:",omitempty" json:"udi,omitempty"`               // Unique Device Identifiers associated with this line item.
	BodySite          *ClaimItemBodySite `binding:"omitempty" bson:",omitempty"`
	Encounter         []*Reference       `bson:",omitempty" json:"encounter,omitempty"`        // Healthcare encounters related to this claim.
	CareTeamSequence  []*int             `bson:",omitempty" json:"careTeamSequence,omitempty"` // CareTeam members related to this service or product.
	ProductOrService  *CodeableConcept   `bson:",omitempty" json:"productOrService,omitempty"` // When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
	Request           []*Reference       `bson:",omitempty" json:"request,omitempty"`          // Request or Referral for Goods or Service to be rendered.
	ClaimItemServicedx
}
type ClaimItemLocationx struct {
	LocationCodeableConcept CodeableConcept `bson:",omitempty" json:"locationCodeableConcept,omitempty"`
	LocationAddress         Address         `bson:",omitempty" json:"locationAddress,omitempty"`
	LocationReference       Reference       `bson:",omitempty" json:"locationReference,omitempty"`
}

func (out *ClaimItemDetail) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["traceNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["traceNumber"], &out.TraceNumber); err != nil {
			return err
		}

	}
	if len(asMap["revenue"]) > 0 {
		if err := go1.Unmarshal(asMap["revenue"], &out.Revenue); err != nil {
			return err
		}

	}
	if len(asMap["programCode"]) > 0 {
		if err := go1.Unmarshal(asMap["programCode"], &out.ProgramCode); err != nil {
			return err
		}

	}
	if len(asMap["patientPaid"]) > 0 {
		if err := go1.Unmarshal(asMap["patientPaid"], &out.PatientPaid); err != nil {
			return err
		}

	}
	if len(asMap["subDetail"]) > 0 {
		if err := go1.Unmarshal(asMap["subDetail"], &out.SubDetail); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["modifier"]) > 0 {
		if err := go1.Unmarshal(asMap["modifier"], &out.Modifier); err != nil {
			return err
		}

	}
	if len(asMap["factor"]) > 0 {
		if err := go1.Unmarshal(asMap["factor"], &out.Factor); err != nil {
			return err
		}

	}
	if len(asMap["tax"]) > 0 {
		if err := go1.Unmarshal(asMap["tax"], &out.Tax); err != nil {
			return err
		}

	}
	if len(asMap["net"]) > 0 {
		if err := go1.Unmarshal(asMap["net"], &out.Net); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
		return err
	}

	if len(asMap["productOrService"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrService"], &out.ProductOrService); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["unitPrice"]) > 0 {
		if err := go1.Unmarshal(asMap["unitPrice"], &out.UnitPrice); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["productOrServiceEnd"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrServiceEnd"], &out.ProductOrServiceEnd); err != nil {
			return err
		}

	}
	if len(asMap["udi"]) > 0 {
		if err := go1.Unmarshal(asMap["udi"], &out.Udi); err != nil {
			return err
		}

	}
	return nil
}

type ClaimItemDetail struct {
	TraceNumber       []*Identifier             `bson:",omitempty" json:"traceNumber,omitempty"` // Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
	Revenue           *CodeableConcept          `bson:",omitempty" json:"revenue,omitempty"`     // The type of revenue or cost center providing the product and/or service.
	ProgramCode       []*CodeableConcept        `bson:",omitempty" json:"programCode,omitempty"` // Identifies the program under which this may be recovered.
	PatientPaid       *Money                    `bson:",omitempty" json:"patientPaid,omitempty"` // The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
	SubDetail         *ClaimItemDetailSubDetail `binding:"omitempty" bson:",omitempty"`
	Extension         []*Extension              `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Category          *CodeableConcept          `bson:",omitempty" json:"category,omitempty"`                    // Code to identify the general type of benefits under which products and services are provided.
	Modifier          []*CodeableConcept        `bson:",omitempty" json:"modifier,omitempty"`                    // Item typification or modifiers codes to convey additional context for the product or service.
	Factor            *float64                  `bson:",omitempty" json:"factor,omitempty"`                      // A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
	Tax               *Money                    `bson:",omitempty" json:"tax,omitempty"`                         // The total of taxes applicable for this product or service.
	Net               *Money                    `bson:",omitempty" json:"net,omitempty"`                         // The total amount claimed for the group (if a grouper) or the line item.detail. Net = unit price * quantity * factor.
	Id                *string                   `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Sequence          *int                      `binding:"required" bson:",omitempty" json:"sequence,omitempty"` // A number to uniquely identify item entries.
	ProductOrService  *CodeableConcept          `bson:",omitempty" json:"productOrService,omitempty"`            // When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
	Quantity          *Quantity                 `bson:",omitempty" json:"quantity,omitempty"`                    // The number of repetitions of a service or product.
	UnitPrice         *Money                    `bson:",omitempty" json:"unitPrice,omitempty"`                   // If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
	ModifierExtension []*Extension              `bson:",omitempty" json:"modifierExtension,omitempty"`           /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ProductOrServiceEnd *CodeableConcept `bson:",omitempty" json:"productOrServiceEnd,omitempty"` // This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
	Udi                 []*Reference     `bson:",omitempty" json:"udi,omitempty"`                 // Unique Device Identifiers associated with this line item.
}

func (out *ClaimItemDetailSubDetail) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["productOrService"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrService"], &out.ProductOrService); err != nil {
			return err
		}

	}
	if len(asMap["productOrServiceEnd"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrServiceEnd"], &out.ProductOrServiceEnd); err != nil {
			return err
		}

	}
	if len(asMap["patientPaid"]) > 0 {
		if err := go1.Unmarshal(asMap["patientPaid"], &out.PatientPaid); err != nil {
			return err
		}

	}
	if len(asMap["factor"]) > 0 {
		if err := go1.Unmarshal(asMap["factor"], &out.Factor); err != nil {
			return err
		}

	}
	if len(asMap["net"]) > 0 {
		if err := go1.Unmarshal(asMap["net"], &out.Net); err != nil {
			return err
		}

	}
	if len(asMap["udi"]) > 0 {
		if err := go1.Unmarshal(asMap["udi"], &out.Udi); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["traceNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["traceNumber"], &out.TraceNumber); err != nil {
			return err
		}

	}
	if len(asMap["programCode"]) > 0 {
		if err := go1.Unmarshal(asMap["programCode"], &out.ProgramCode); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
		return err
	}

	if len(asMap["unitPrice"]) > 0 {
		if err := go1.Unmarshal(asMap["unitPrice"], &out.UnitPrice); err != nil {
			return err
		}

	}
	if len(asMap["tax"]) > 0 {
		if err := go1.Unmarshal(asMap["tax"], &out.Tax); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["revenue"]) > 0 {
		if err := go1.Unmarshal(asMap["revenue"], &out.Revenue); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["modifier"]) > 0 {
		if err := go1.Unmarshal(asMap["modifier"], &out.Modifier); err != nil {
			return err
		}

	}
	return nil
}

type ClaimItemDetailSubDetail struct {
	Extension           []*Extension     `bson:",omitempty" json:"extension,omitempty"`           // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ProductOrService    *CodeableConcept `bson:",omitempty" json:"productOrService,omitempty"`    // When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
	ProductOrServiceEnd *CodeableConcept `bson:",omitempty" json:"productOrServiceEnd,omitempty"` // This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
	PatientPaid         *Money           `bson:",omitempty" json:"patientPaid,omitempty"`         // The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
	Factor              *float64         `bson:",omitempty" json:"factor,omitempty"`              // A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
	Net                 *Money           `bson:",omitempty" json:"net,omitempty"`                 // The total amount claimed for line item.detail.subDetail. Net = unit price * quantity * factor.
	Udi                 []*Reference     `bson:",omitempty" json:"udi,omitempty"`                 // Unique Device Identifiers associated with this line item.
	ModifierExtension   []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`   /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	TraceNumber []*Identifier      `bson:",omitempty" json:"traceNumber,omitempty"`                 // Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
	ProgramCode []*CodeableConcept `bson:",omitempty" json:"programCode,omitempty"`                 // Identifies the program under which this may be recovered.
	Quantity    *Quantity          `bson:",omitempty" json:"quantity,omitempty"`                    // The number of repetitions of a service or product.
	Sequence    *int               `binding:"required" bson:",omitempty" json:"sequence,omitempty"` // A number to uniquely identify item entries.
	UnitPrice   *Money             `bson:",omitempty" json:"unitPrice,omitempty"`                   // If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
	Tax         *Money             `bson:",omitempty" json:"tax,omitempty"`                         // The total of taxes applicable for this product or service.
	Id          *string            `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Revenue     *CodeableConcept   `bson:",omitempty" json:"revenue,omitempty"`                     // The type of revenue or cost center providing the product and/or service.
	Category    *CodeableConcept   `bson:",omitempty" json:"category,omitempty"`                    // Code to identify the general type of benefits under which products and services are provided.
	Modifier    []*CodeableConcept `bson:",omitempty" json:"modifier,omitempty"`                    // Item typification or modifiers codes to convey additional context for the product or service.
}

func (out *ClaimItemBodySite) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["site"], &out.Site); err != nil {
		return err
	}

	if len(asMap["subSite"]) > 0 {
		if err := go1.Unmarshal(asMap["subSite"], &out.SubSite); err != nil {
			return err
		}

	}
	return nil
}

type ClaimItemBodySite struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Site    []*CodeableReference `binding:"required" bson:",omitempty" json:"site,omitempty"` // Physical service site on the patient (limb, tooth, etc.).
	SubSite []*CodeableConcept   `bson:",omitempty" json:"subSite,omitempty"`                 // A region or surface of the bodySite, e.g. limb region or tooth surface(s).
}
type ClaimItemServicedx struct {
	ServicedDate   Date   `bson:",omitempty" json:"servicedDate,omitempty"`
	ServicedPeriod Period `bson:",omitempty" json:"servicedPeriod,omitempty"`
}

func (out *ClaimRelated) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["claim"]) > 0 {
		if err := go1.Unmarshal(asMap["claim"], &out.Claim); err != nil {
			return err
		}

	}
	if len(asMap["relationship"]) > 0 {
		if err := go1.Unmarshal(asMap["relationship"], &out.Relationship); err != nil {
			return err
		}

	}
	if len(asMap["reference"]) > 0 {
		if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
			return err
		}

	}
	return nil
}

type ClaimRelated struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Claim        *Reference       `bson:",omitempty" json:"claim,omitempty"`        // Reference to a related claim.
	Relationship *CodeableConcept `bson:",omitempty" json:"relationship,omitempty"` // A code to convey how the claims are related.
	Reference    *Identifier      `bson:",omitempty" json:"reference,omitempty"`    // An alternate organizational reference to the case or file to which this particular claim pertains.
}

func (out *ClaimResponse) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ClaimResponse\"" {
		return fmt.Errorf("resourceType is not %s", "ClaimResponse")
	}
	if len(asMap["traceNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["traceNumber"], &out.TraceNumber); err != nil {
			return err
		}

	}
	if len(asMap["diagnosisRelatedGroup"]) > 0 {
		if err := go1.Unmarshal(asMap["diagnosisRelatedGroup"], &out.DiagnosisRelatedGroup); err != nil {
			return err
		}

	}
	if len(asMap["fundsReserve"]) > 0 {
		if err := go1.Unmarshal(asMap["fundsReserve"], &out.FundsReserve); err != nil {
			return err
		}

	}
	if len(asMap["communicationRequest"]) > 0 {
		if err := go1.Unmarshal(asMap["communicationRequest"], &out.CommunicationRequest); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["processNote"]) > 0 {
		if err := go1.Unmarshal(asMap["processNote"], &out.ProcessNote); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["disposition"]) > 0 {
		if err := go1.Unmarshal(asMap["disposition"], &out.Disposition); err != nil {
			return err
		}

	}
	if len(asMap["event"]) > 0 {
		if err := go1.Unmarshal(asMap["event"], &out.Event); err != nil {
			return err
		}

	}
	if len(asMap["total"]) > 0 {
		if err := go1.Unmarshal(asMap["total"], &out.Total); err != nil {
			return err
		}

	}
	if len(asMap["request"]) > 0 {
		if err := go1.Unmarshal(asMap["request"], &out.Request); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["insurer"]) > 0 {
		if err := go1.Unmarshal(asMap["insurer"], &out.Insurer); err != nil {
			return err
		}

	}
	if len(asMap["preAuthPeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["preAuthPeriod"], &out.PreAuthPeriod); err != nil {
			return err
		}

	}
	if len(asMap["addItem"]) > 0 {
		if err := go1.Unmarshal(asMap["addItem"], &out.AddItem); err != nil {
			return err
		}

	}
	if len(asMap["payment"]) > 0 {
		if err := go1.Unmarshal(asMap["payment"], &out.Payment); err != nil {
			return err
		}

	}
	if len(asMap["formCode"]) > 0 {
		if err := go1.Unmarshal(asMap["formCode"], &out.FormCode); err != nil {
			return err
		}

	}
	if len(asMap["insurance"]) > 0 {
		if err := go1.Unmarshal(asMap["insurance"], &out.Insurance); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["patient"], &out.Patient); err != nil {
		return err
	}

	if len(asMap["payeeType"]) > 0 {
		if err := go1.Unmarshal(asMap["payeeType"], &out.PayeeType); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["adjudication"]) > 0 {
		if err := go1.Unmarshal(asMap["adjudication"], &out.Adjudication); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["subType"]) > 0 {
		if err := go1.Unmarshal(asMap["subType"], &out.SubType); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["use"], &out.Use); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["created"], &out.Created); err != nil {
		return err
	}

	if len(asMap["preAuthRef"]) > 0 {
		if err := go1.Unmarshal(asMap["preAuthRef"], &out.PreAuthRef); err != nil {
			return err
		}

	}
	if len(asMap["error"]) > 0 {
		if err := go1.Unmarshal(asMap["error"], &out.Error); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["requestor"]) > 0 {
		if err := go1.Unmarshal(asMap["requestor"], &out.Requestor); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["outcome"], &out.Outcome); err != nil {
		return err
	}

	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["item"]) > 0 {
		if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
			return err
		}

	}
	if len(asMap["form"]) > 0 {
		if err := go1.Unmarshal(asMap["form"], &out.Form); err != nil {
			return err
		}

	}
	if len(asMap["decision"]) > 0 {
		if err := go1.Unmarshal(asMap["decision"], &out.Decision); err != nil {
			return err
		}

	}
	return nil
}

type ClaimResponse struct {
	TraceNumber           []*Identifier    `bson:",omitempty" json:"traceNumber,omitempty"`           // Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
	DiagnosisRelatedGroup *CodeableConcept `bson:",omitempty" json:"diagnosisRelatedGroup,omitempty"` // A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system.
	FundsReserve          *CodeableConcept `bson:",omitempty" json:"fundsReserve,omitempty"`          // A code, used only on a response to a preauthorization, to indicate whether the benefits payable have been reserved and for whom.
	CommunicationRequest  []*Reference     `bson:",omitempty" json:"communicationRequest,omitempty"`  // Request for additional supporting or authorizing information.
	Language              *string          `bson:",omitempty" json:"language,omitempty"`              // The base language in which the resource is written.
	ImplicitRules         *string          `bson:",omitempty" json:"implicitRules,omitempty"`         // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ModifierExtension     []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`     /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type          *CodeableConcept          `binding:"required" bson:",omitempty" json:"type,omitempty"` // A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
	ProcessNote   *ClaimResponseProcessNote `binding:"omitempty" bson:",omitempty"`
	Meta          *Meta                     `bson:",omitempty" json:"meta,omitempty"`        // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Disposition   *string                   `bson:",omitempty" json:"disposition,omitempty"` // A human readable description of the status of the adjudication.
	Event         *ClaimResponseEvent       `binding:"omitempty" bson:",omitempty"`
	Total         *ClaimResponseTotal       `binding:"omitempty" bson:",omitempty"`
	Request       *Reference                `bson:",omitempty" json:"request,omitempty"`                   // Original request resource reference.
	Status        *string                   `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of the resource instance.
	Insurer       *Reference                `bson:",omitempty" json:"insurer,omitempty"`                   // The party responsible for authorization, adjudication and reimbursement.
	PreAuthPeriod *Period                   `bson:",omitempty" json:"preAuthPeriod,omitempty"`             // The time frame during which this authorization is effective.
	AddItem       *ClaimResponseAddItem     `binding:"omitempty" bson:",omitempty"`
	Payment       *ClaimResponsePayment     `binding:"omitempty" bson:",omitempty"`
	FormCode      *CodeableConcept          `bson:",omitempty" json:"formCode,omitempty"` // A code for the form to be used for printing the content.
	Insurance     *ClaimResponseInsurance   `binding:"omitempty" bson:",omitempty"`
	Extension     []*Extension              `bson:",omitempty" json:"extension,omitempty"`                  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Patient       *Reference                `binding:"required" bson:",omitempty" json:"patient,omitempty"` // The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for facast reimbursement is sought.
	PayeeType     *CodeableConcept          `bson:",omitempty" json:"payeeType,omitempty"`                  // Type of Party to be reimbursed: subscriber, provider, other.
	Encounter     []*Reference              `bson:",omitempty" json:"encounter,omitempty"`                  // Healthcare encounters related to this claim.
	Adjudication  interface{}
	Id            *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Contained     []*Resource         `bson:",omitempty" json:"contained,omitempty"`                  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	SubType       *CodeableConcept    `bson:",omitempty" json:"subType,omitempty"`                    // A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
	Use           *string             `binding:"required" bson:",omitempty" json:"use,omitempty"`     // A code to indicate whether the nature of the request is: Claim - A request to an Insurer to adjudicate the supplied charges for health care goods and services under the identified policy and to pay the determined Benefit amount, if any; Preauthorization - A request to an Insurer to adjudicate the supplied proposed future charges for health care goods and services under the identified policy and to approve the services and provide the expected benefit amounts and potentially to reserve funds to pay the benefits when Claims for the indicated services are later submitted; or, Pre-determination - A request to an Insurer to adjudicate the supplied 'what if' charges for health care goods and services under the identified policy and report back what the Benefit payable would be had the services actually been provided.
	Created       *DateTime           `binding:"required" bson:",omitempty" json:"created,omitempty"` // The date this resource was created.
	PreAuthRef    *string             `bson:",omitempty" json:"preAuthRef,omitempty"`                 // Reference from the Insurer which is used in later communications which refers to this adjudication.
	Error         *ClaimResponseError `binding:"omitempty" bson:",omitempty"`
	Text          *Narrative          `bson:",omitempty" json:"text,omitempty"`                       // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Requestor     *Reference          `bson:",omitempty" json:"requestor,omitempty"`                  // The provider which is responsible for the claim, predetermination or preauthorization.
	Outcome       *string             `binding:"required" bson:",omitempty" json:"outcome,omitempty"` // The outcome of the claim, predetermination, or preauthorization processing.
	Identifier    []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`                 // A unique identifier assigned to this claim response.
	Item          *ClaimResponseItem  `binding:"omitempty" bson:",omitempty"`
	Form          *Attachment         `bson:",omitempty" json:"form,omitempty"`     // The actual form, by reference or inclusion, for printing the content or an EOB.
	Decision      *CodeableConcept    `bson:",omitempty" json:"decision,omitempty"` // The result of the claim, predetermination, or preauthorization adjudication.
	ResourceType  string              `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ClaimResponseProcessNote) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["number"]) > 0 {
		if err := go1.Unmarshal(asMap["number"], &out.Number); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
		return err
	}

	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	return nil
}

type ClaimResponseProcessNote struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Number   *int             `bson:",omitempty" json:"number,omitempty"`                  // A number to uniquely identify a note entry.
	Type     *CodeableConcept `bson:",omitempty" json:"type,omitempty"`                    // The business purpose of the note text.
	Text     *string          `binding:"required" bson:",omitempty" json:"text,omitempty"` // The explanation or description associated with the processing.
	Language *CodeableConcept `bson:",omitempty" json:"language,omitempty"`                // A code to define the language used in the text of the note.
}

func (out *ClaimResponseEvent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["whenDateTime"], &out.WhenDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["whenPeriod"], &out.WhenPeriod); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "when[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	return nil
}

type ClaimResponseEvent struct {
	ClaimResponseEventWhenx
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // A coded event such as when a service is expected or a card printed.
}
type ClaimResponseEventWhenx struct {
	WhenDateTime DateTime `bson:",omitempty" json:"whenDateTime,omitempty"`
	WhenPeriod   Period   `bson:",omitempty" json:"whenPeriod,omitempty"`
}

func (out *ClaimResponseTotal) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
		return err
	}

	return nil
}

type ClaimResponseTotal struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Category *CodeableConcept `binding:"required" bson:",omitempty" json:"category,omitempty"` // A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item.
	Amount   *Money           `binding:"required" bson:",omitempty" json:"amount,omitempty"`   // Monetary total amount associated with the category.
}

func (out *ClaimResponseAddItem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["unitPrice"]) > 0 {
		if err := go1.Unmarshal(asMap["unitPrice"], &out.UnitPrice); err != nil {
			return err
		}

	}
	if len(asMap["factor"]) > 0 {
		if err := go1.Unmarshal(asMap["factor"], &out.Factor); err != nil {
			return err
		}

	}
	if len(asMap["net"]) > 0 {
		if err := go1.Unmarshal(asMap["net"], &out.Net); err != nil {
			return err
		}

	}
	if len(asMap["detail"]) > 0 {
		if err := go1.Unmarshal(asMap["detail"], &out.Detail); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["itemSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["itemSequence"], &out.ItemSequence); err != nil {
			return err
		}

	}
	if len(asMap["productOrServiceEnd"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrServiceEnd"], &out.ProductOrServiceEnd); err != nil {
			return err
		}

	}
	if len(asMap["programCode"]) > 0 {
		if err := go1.Unmarshal(asMap["programCode"], &out.ProgramCode); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["traceNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["traceNumber"], &out.TraceNumber); err != nil {
			return err
		}

	}
	if len(asMap["provider"]) > 0 {
		if err := go1.Unmarshal(asMap["provider"], &out.Provider); err != nil {
			return err
		}

	}
	if len(asMap["revenue"]) > 0 {
		if err := go1.Unmarshal(asMap["revenue"], &out.Revenue); err != nil {
			return err
		}

	}
	if len(asMap["modifier"]) > 0 {
		if err := go1.Unmarshal(asMap["modifier"], &out.Modifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["servicedDate"], &out.ServicedDate); err == nil {
	} else if err := go1.Unmarshal(asMap["servicedPeriod"], &out.ServicedPeriod); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["detailSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["detailSequence"], &out.DetailSequence); err != nil {
			return err
		}

	}
	if len(asMap["subdetailSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["subdetailSequence"], &out.SubdetailSequence); err != nil {
			return err
		}

	}
	if len(asMap["request"]) > 0 {
		if err := go1.Unmarshal(asMap["request"], &out.Request); err != nil {
			return err
		}

	}
	if len(asMap["bodySite"]) > 0 {
		if err := go1.Unmarshal(asMap["bodySite"], &out.BodySite); err != nil {
			return err
		}

	}
	if len(asMap["noteNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["noteNumber"], &out.NoteNumber); err != nil {
			return err
		}

	}
	if len(asMap["reviewOutcome"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewOutcome"], &out.ReviewOutcome); err != nil {
			return err
		}

	}
	if len(asMap["adjudication"]) > 0 {
		if err := go1.Unmarshal(asMap["adjudication"], &out.Adjudication); err != nil {
			return err
		}

	}
	if len(asMap["productOrService"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrService"], &out.ProductOrService); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["locationCodeableConcept"], &out.LocationCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["locationAddress"], &out.LocationAddress); err == nil {
	} else if err := go1.Unmarshal(asMap["locationReference"], &out.LocationReference); err == nil {
	} else {

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["tax"]) > 0 {
		if err := go1.Unmarshal(asMap["tax"], &out.Tax); err != nil {
			return err
		}

	}
	return nil
}

type ClaimResponseAddItem struct {
	UnitPrice           *Money                      `bson:",omitempty" json:"unitPrice,omitempty"` // If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
	Factor              *float64                    `bson:",omitempty" json:"factor,omitempty"`    // A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
	Net                 *Money                      `bson:",omitempty" json:"net,omitempty"`       // The total amount claimed for the group (if a grouper) or the addItem. Net = unit price * quantity * factor.
	Detail              *ClaimResponseAddItemDetail `binding:"omitempty" bson:",omitempty"`
	Extension           []*Extension                `bson:",omitempty" json:"extension,omitempty"`           // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ItemSequence        []*int                      `bson:",omitempty" json:"itemSequence,omitempty"`        // Claim items which this service line is intended to replace.
	ProductOrServiceEnd *CodeableConcept            `bson:",omitempty" json:"productOrServiceEnd,omitempty"` // This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
	ProgramCode         []*CodeableConcept          `bson:",omitempty" json:"programCode,omitempty"`         // Identifies the program under which this may be recovered.
	ModifierExtension   []*Extension                `bson:",omitempty" json:"modifierExtension,omitempty"`   /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	TraceNumber []*Identifier      `bson:",omitempty" json:"traceNumber,omitempty"` // Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
	Provider    []*Reference       `bson:",omitempty" json:"provider,omitempty"`    // The providers who are authorized for the services rendered to the patient.
	Revenue     *CodeableConcept   `bson:",omitempty" json:"revenue,omitempty"`     // The type of revenue or cost center providing the product and/or service.
	Modifier    []*CodeableConcept `bson:",omitempty" json:"modifier,omitempty"`    // Item typification or modifiers codes to convey additional context for the product or service.
	ClaimResponseAddItemServicedx
	Id                *string                       `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	DetailSequence    []*int                        `bson:",omitempty" json:"detailSequence,omitempty"`    // The sequence number of the details within the claim item which this line is intended to replace.
	SubdetailSequence []*int                        `bson:",omitempty" json:"subdetailSequence,omitempty"` // The sequence number of the sub-details within the details within the claim item which this line is intended to replace.
	Request           []*Reference                  `bson:",omitempty" json:"request,omitempty"`           // Request or Referral for Goods or Service to be rendered.
	BodySite          *ClaimResponseAddItemBodySite `binding:"omitempty" bson:",omitempty"`
	NoteNumber        []*int                        `bson:",omitempty" json:"noteNumber,omitempty"` // The numbers associated with notes below which apply to the adjudication of this item.
	ReviewOutcome     interface{}
	Adjudication      interface{}
	ProductOrService  *CodeableConcept `bson:",omitempty" json:"productOrService,omitempty"` // When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
	ClaimResponseAddItemLocationx
	Quantity *Quantity `bson:",omitempty" json:"quantity,omitempty"` // The number of repetitions of a service or product.
	Tax      *Money    `bson:",omitempty" json:"tax,omitempty"`      // The total of taxes applicable for this product or service.
}

func (out *ClaimResponseAddItemDetail) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["unitPrice"]) > 0 {
		if err := go1.Unmarshal(asMap["unitPrice"], &out.UnitPrice); err != nil {
			return err
		}

	}
	if len(asMap["subDetail"]) > 0 {
		if err := go1.Unmarshal(asMap["subDetail"], &out.SubDetail); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifier"]) > 0 {
		if err := go1.Unmarshal(asMap["modifier"], &out.Modifier); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["net"]) > 0 {
		if err := go1.Unmarshal(asMap["net"], &out.Net); err != nil {
			return err
		}

	}
	if len(asMap["adjudication"]) > 0 {
		if err := go1.Unmarshal(asMap["adjudication"], &out.Adjudication); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["traceNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["traceNumber"], &out.TraceNumber); err != nil {
			return err
		}

	}
	if len(asMap["productOrService"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrService"], &out.ProductOrService); err != nil {
			return err
		}

	}
	if len(asMap["tax"]) > 0 {
		if err := go1.Unmarshal(asMap["tax"], &out.Tax); err != nil {
			return err
		}

	}
	if len(asMap["noteNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["noteNumber"], &out.NoteNumber); err != nil {
			return err
		}

	}
	if len(asMap["reviewOutcome"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewOutcome"], &out.ReviewOutcome); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["revenue"]) > 0 {
		if err := go1.Unmarshal(asMap["revenue"], &out.Revenue); err != nil {
			return err
		}

	}
	if len(asMap["productOrServiceEnd"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrServiceEnd"], &out.ProductOrServiceEnd); err != nil {
			return err
		}

	}
	if len(asMap["factor"]) > 0 {
		if err := go1.Unmarshal(asMap["factor"], &out.Factor); err != nil {
			return err
		}

	}
	return nil
}

type ClaimResponseAddItemDetail struct {
	UnitPrice         *Money                               `bson:",omitempty" json:"unitPrice,omitempty"` // If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
	SubDetail         *ClaimResponseAddItemDetailSubDetail `binding:"omitempty" bson:",omitempty"`
	Extension         []*Extension                         `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Modifier          []*CodeableConcept                   `bson:",omitempty" json:"modifier,omitempty"`  // Item typification or modifiers codes to convey additional context for the product or service.
	Quantity          *Quantity                            `bson:",omitempty" json:"quantity,omitempty"`  // The number of repetitions of a service or product.
	Net               *Money                               `bson:",omitempty" json:"net,omitempty"`       // The total amount claimed for the group (if a grouper) or the addItem.detail. Net = unit price * quantity * factor.
	Adjudication      interface{}
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	TraceNumber         []*Identifier    `bson:",omitempty" json:"traceNumber,omitempty"`      // Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
	ProductOrService    *CodeableConcept `bson:",omitempty" json:"productOrService,omitempty"` // When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
	Tax                 *Money           `bson:",omitempty" json:"tax,omitempty"`              // The total of taxes applicable for this product or service.
	NoteNumber          []*int           `bson:",omitempty" json:"noteNumber,omitempty"`       // The numbers associated with notes below which apply to the adjudication of this item.
	ReviewOutcome       interface{}
	Id                  *string          `bson:"_id,omitempty" json:"id,omitempty"`               // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Revenue             *CodeableConcept `bson:",omitempty" json:"revenue,omitempty"`             // The type of revenue or cost center providing the product and/or service.
	ProductOrServiceEnd *CodeableConcept `bson:",omitempty" json:"productOrServiceEnd,omitempty"` // This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
	Factor              *float64         `bson:",omitempty" json:"factor,omitempty"`              // A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
}

func (out *ClaimResponseAddItemDetailSubDetail) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["productOrService"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrService"], &out.ProductOrService); err != nil {
			return err
		}

	}
	if len(asMap["factor"]) > 0 {
		if err := go1.Unmarshal(asMap["factor"], &out.Factor); err != nil {
			return err
		}

	}
	if len(asMap["tax"]) > 0 {
		if err := go1.Unmarshal(asMap["tax"], &out.Tax); err != nil {
			return err
		}

	}
	if len(asMap["noteNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["noteNumber"], &out.NoteNumber); err != nil {
			return err
		}

	}
	if len(asMap["reviewOutcome"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewOutcome"], &out.ReviewOutcome); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["revenue"]) > 0 {
		if err := go1.Unmarshal(asMap["revenue"], &out.Revenue); err != nil {
			return err
		}

	}
	if len(asMap["unitPrice"]) > 0 {
		if err := go1.Unmarshal(asMap["unitPrice"], &out.UnitPrice); err != nil {
			return err
		}

	}
	if len(asMap["adjudication"]) > 0 {
		if err := go1.Unmarshal(asMap["adjudication"], &out.Adjudication); err != nil {
			return err
		}

	}
	if len(asMap["traceNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["traceNumber"], &out.TraceNumber); err != nil {
			return err
		}

	}
	if len(asMap["productOrServiceEnd"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrServiceEnd"], &out.ProductOrServiceEnd); err != nil {
			return err
		}

	}
	if len(asMap["modifier"]) > 0 {
		if err := go1.Unmarshal(asMap["modifier"], &out.Modifier); err != nil {
			return err
		}

	}
	if len(asMap["net"]) > 0 {
		if err := go1.Unmarshal(asMap["net"], &out.Net); err != nil {
			return err
		}

	}
	return nil
}

type ClaimResponseAddItemDetailSubDetail struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Quantity            *Quantity        `bson:",omitempty" json:"quantity,omitempty"`         // The number of repetitions of a service or product.
	ProductOrService    *CodeableConcept `bson:",omitempty" json:"productOrService,omitempty"` // When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
	Factor              *float64         `bson:",omitempty" json:"factor,omitempty"`           // A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
	Tax                 *Money           `bson:",omitempty" json:"tax,omitempty"`              // The total of taxes applicable for this product or service.
	NoteNumber          []*int           `bson:",omitempty" json:"noteNumber,omitempty"`       // The numbers associated with notes below which apply to the adjudication of this item.
	ReviewOutcome       interface{}
	Id                  *string          `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension           []*Extension     `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Revenue             *CodeableConcept `bson:",omitempty" json:"revenue,omitempty"`   // The type of revenue or cost center providing the product and/or service.
	UnitPrice           *Money           `bson:",omitempty" json:"unitPrice,omitempty"` // If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
	Adjudication        interface{}
	TraceNumber         []*Identifier      `bson:",omitempty" json:"traceNumber,omitempty"`         // Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
	ProductOrServiceEnd *CodeableConcept   `bson:",omitempty" json:"productOrServiceEnd,omitempty"` // This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
	Modifier            []*CodeableConcept `bson:",omitempty" json:"modifier,omitempty"`            // Item typification or modifiers codes to convey additional context for the product or service.
	Net                 *Money             `bson:",omitempty" json:"net,omitempty"`                 // The total amount claimed for the addItem.detail.subDetail. Net = unit price * quantity * factor.
}
type ClaimResponseAddItemServicedx struct {
	ServicedDate   Date   `bson:",omitempty" json:"servicedDate,omitempty"`
	ServicedPeriod Period `bson:",omitempty" json:"servicedPeriod,omitempty"`
}

func (out *ClaimResponseAddItemBodySite) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["site"], &out.Site); err != nil {
		return err
	}

	if len(asMap["subSite"]) > 0 {
		if err := go1.Unmarshal(asMap["subSite"], &out.SubSite); err != nil {
			return err
		}

	}
	return nil
}

type ClaimResponseAddItemBodySite struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Site    []*CodeableReference `binding:"required" bson:",omitempty" json:"site,omitempty"` // Physical service site on the patient (limb, tooth, etc.).
	SubSite []*CodeableConcept   `bson:",omitempty" json:"subSite,omitempty"`                 // A region or surface of the bodySite, e.g. limb region or tooth surface(s).
}
type ClaimResponseAddItemLocationx struct {
	LocationCodeableConcept CodeableConcept `bson:",omitempty" json:"locationCodeableConcept,omitempty"`
	LocationAddress         Address         `bson:",omitempty" json:"locationAddress,omitempty"`
	LocationReference       Reference       `bson:",omitempty" json:"locationReference,omitempty"`
}

func (out *ClaimResponsePayment) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["adjustment"]) > 0 {
		if err := go1.Unmarshal(asMap["adjustment"], &out.Adjustment); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
		return err
	}

	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["adjustmentReason"]) > 0 {
		if err := go1.Unmarshal(asMap["adjustmentReason"], &out.AdjustmentReason); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	return nil
}

type ClaimResponsePayment struct {
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`                     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Type              *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"`   // Whether this represents partial or complete payment of the benefits payable.
	Adjustment        *Money           `bson:",omitempty" json:"adjustment,omitempty"`                // Total amount of all adjustments to this payment included in this transaction which are not related to this claim's adjudication.
	Amount            *Money           `binding:"required" bson:",omitempty" json:"amount,omitempty"` // Benefits payable less any payment adjustment.
	Identifier        *Identifier      `bson:",omitempty" json:"identifier,omitempty"`                // Issuer's unique identifier for the payment instrument.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	AdjustmentReason *CodeableConcept `bson:",omitempty" json:"adjustmentReason,omitempty"` // Reason for the payment adjustment.
	Date             *Date            `bson:",omitempty" json:"date,omitempty"`             // Estimated date the payment will be issued or the actual issue date of payment.
}

func (out *ClaimResponseInsurance) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["focal"], &out.Focal); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["coverage"], &out.Coverage); err != nil {
		return err
	}

	if len(asMap["businessArrangement"]) > 0 {
		if err := go1.Unmarshal(asMap["businessArrangement"], &out.BusinessArrangement); err != nil {
			return err
		}

	}
	if len(asMap["claimResponse"]) > 0 {
		if err := go1.Unmarshal(asMap["claimResponse"], &out.ClaimResponse); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
		return err
	}

	return nil
}

type ClaimResponseInsurance struct {
	Focal               *bool        `binding:"required" bson:",omitempty" json:"focal,omitempty"`    // A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.
	Coverage            *Reference   `binding:"required" bson:",omitempty" json:"coverage,omitempty"` // Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
	BusinessArrangement *string      `bson:",omitempty" json:"businessArrangement,omitempty"`         // A business agreement number established between the provider and the insurer for special business processing purposes.
	ClaimResponse       *Reference   `bson:",omitempty" json:"claimResponse,omitempty"`               // The result of the adjudication of the line items for the Coverage specified in this insurance.
	Id                  *string      `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension           []*Extension `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension   []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`           /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Sequence *int `binding:"required" bson:",omitempty" json:"sequence,omitempty"` // A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
}

func (out *ClaimResponseError) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["itemSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["itemSequence"], &out.ItemSequence); err != nil {
			return err
		}

	}
	if len(asMap["detailSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["detailSequence"], &out.DetailSequence); err != nil {
			return err
		}

	}
	if len(asMap["subDetailSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["subDetailSequence"], &out.SubDetailSequence); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["expression"]) > 0 {
		if err := go1.Unmarshal(asMap["expression"], &out.Expression); err != nil {
			return err
		}

	}
	return nil
}

type ClaimResponseError struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ItemSequence      *int             `bson:",omitempty" json:"itemSequence,omitempty"`            // The sequence number of the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
	DetailSequence    *int             `bson:",omitempty" json:"detailSequence,omitempty"`          // The sequence number of the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
	SubDetailSequence *int             `bson:",omitempty" json:"subDetailSequence,omitempty"`       // The sequence number of the sub-detail within the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
	Code              *CodeableConcept `binding:"required" bson:",omitempty" json:"code,omitempty"` // An error code, from a specified code system, which details why the claim could not be adjudicated.
	Expression        []*string        `bson:",omitempty" json:"expression,omitempty"`              // A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.
}

func (out *ClaimResponseItem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["adjudication"]) > 0 {
		if err := go1.Unmarshal(asMap["adjudication"], &out.Adjudication); err != nil {
			return err
		}

	}
	if len(asMap["detail"]) > 0 {
		if err := go1.Unmarshal(asMap["detail"], &out.Detail); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["itemSequence"], &out.ItemSequence); err != nil {
		return err
	}

	if len(asMap["traceNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["traceNumber"], &out.TraceNumber); err != nil {
			return err
		}

	}
	if len(asMap["noteNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["noteNumber"], &out.NoteNumber); err != nil {
			return err
		}

	}
	if len(asMap["reviewOutcome"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewOutcome"], &out.ReviewOutcome); err != nil {
			return err
		}

	}
	return nil
}

type ClaimResponseItem struct {
	Id                *string                        `bson:"_id,omitempty" json:"id,omitempty"` // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Adjudication      *ClaimResponseItemAdjudication `binding:"omitempty" bson:",omitempty"`
	Detail            *ClaimResponseItemDetail       `binding:"omitempty" bson:",omitempty"`
	Extension         []*Extension                   `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                   `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ItemSequence  *int                            `binding:"required" bson:",omitempty" json:"itemSequence,omitempty"` // A number to uniquely reference the claim item entries.
	TraceNumber   []*Identifier                   `bson:",omitempty" json:"traceNumber,omitempty"`                     // Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
	NoteNumber    []*int                          `bson:",omitempty" json:"noteNumber,omitempty"`                      // The numbers associated with notes below which apply to the adjudication of this item.
	ReviewOutcome *ClaimResponseItemReviewOutcome `binding:"omitempty" bson:",omitempty"`
}

func (out *ClaimResponseItemAdjudication) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["amount"]) > 0 {
		if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
		return err
	}

	return nil
}

type ClaimResponseItemAdjudication struct {
	Reason            *CodeableConcept `bson:",omitempty" json:"reason,omitempty"`            // A code supporting the understanding of the adjudication result and explaining variance from expected amount.
	Amount            *Money           `bson:",omitempty" json:"amount,omitempty"`            // Monetary amount associated with the category.
	Quantity          *Quantity        `bson:",omitempty" json:"quantity,omitempty"`          // A non-monetary value associated with the category. Mutually exclusive to the amount element above.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Category *CodeableConcept `binding:"required" bson:",omitempty" json:"category,omitempty"` // A code to indicate the information type of this adjudication record. Information types may include the value submitted, maximum values or percentages allowed or payable under the plan, amounts that: the patient is responsible for in aggregate or pertaining to this item; amounts paid by other coverages; and, the benefit payable for this item.
}

func (out *ClaimResponseItemDetail) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["adjudication"]) > 0 {
		if err := go1.Unmarshal(asMap["adjudication"], &out.Adjudication); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["detailSequence"], &out.DetailSequence); err != nil {
		return err
	}

	if len(asMap["traceNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["traceNumber"], &out.TraceNumber); err != nil {
			return err
		}

	}
	if len(asMap["noteNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["noteNumber"], &out.NoteNumber); err != nil {
			return err
		}

	}
	if len(asMap["reviewOutcome"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewOutcome"], &out.ReviewOutcome); err != nil {
			return err
		}

	}
	if len(asMap["subDetail"]) > 0 {
		if err := go1.Unmarshal(asMap["subDetail"], &out.SubDetail); err != nil {
			return err
		}

	}
	return nil
}

type ClaimResponseItemDetail struct {
	Id                *string `bson:"_id,omitempty" json:"id,omitempty"` // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Adjudication      interface{}
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	DetailSequence *int          `binding:"required" bson:",omitempty" json:"detailSequence,omitempty"` // A number to uniquely reference the claim detail entry.
	TraceNumber    []*Identifier `bson:",omitempty" json:"traceNumber,omitempty"`                       // Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
	NoteNumber     []*int        `bson:",omitempty" json:"noteNumber,omitempty"`                        // The numbers associated with notes below which apply to the adjudication of this item.
	ReviewOutcome  interface{}
	SubDetail      *ClaimResponseItemDetailSubDetail `binding:"omitempty" bson:",omitempty"`
}

func (out *ClaimResponseItemDetailSubDetail) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["subDetailSequence"], &out.SubDetailSequence); err != nil {
		return err
	}

	if len(asMap["traceNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["traceNumber"], &out.TraceNumber); err != nil {
			return err
		}

	}
	if len(asMap["noteNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["noteNumber"], &out.NoteNumber); err != nil {
			return err
		}

	}
	if len(asMap["reviewOutcome"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewOutcome"], &out.ReviewOutcome); err != nil {
			return err
		}

	}
	if len(asMap["adjudication"]) > 0 {
		if err := go1.Unmarshal(asMap["adjudication"], &out.Adjudication); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ClaimResponseItemDetailSubDetail struct {
	SubDetailSequence *int          `binding:"required" bson:",omitempty" json:"subDetailSequence,omitempty"` // A number to uniquely reference the claim sub-detail entry.
	TraceNumber       []*Identifier `bson:",omitempty" json:"traceNumber,omitempty"`                          // Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
	NoteNumber        []*int        `bson:",omitempty" json:"noteNumber,omitempty"`                           // The numbers associated with notes below which apply to the adjudication of this item.
	ReviewOutcome     interface{}
	Adjudication      interface{}
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *ClaimResponseItemReviewOutcome) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["decision"]) > 0 {
		if err := go1.Unmarshal(asMap["decision"], &out.Decision); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["preAuthRef"]) > 0 {
		if err := go1.Unmarshal(asMap["preAuthRef"], &out.PreAuthRef); err != nil {
			return err
		}

	}
	if len(asMap["preAuthPeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["preAuthPeriod"], &out.PreAuthPeriod); err != nil {
			return err
		}

	}
	return nil
}

type ClaimResponseItemReviewOutcome struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Decision      *CodeableConcept   `bson:",omitempty" json:"decision,omitempty"`      // The result of the claim, predetermination, or preauthorization adjudication.
	Reason        []*CodeableConcept `bson:",omitempty" json:"reason,omitempty"`        // The reasons for the result of the claim, predetermination, or preauthorization adjudication.
	PreAuthRef    *string            `bson:",omitempty" json:"preAuthRef,omitempty"`    // Reference from the Insurer which is used in later communications which refers to this adjudication.
	PreAuthPeriod *Period            `bson:",omitempty" json:"preAuthPeriod,omitempty"` // The time frame during which this authorization is effective.
}

func (out *ClinicalImpression) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ClinicalImpression\"" {
		return fmt.Errorf("resourceType is not %s", "ClinicalImpression")
	}
	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if len(asMap["previous"]) > 0 {
		if err := go1.Unmarshal(asMap["previous"], &out.Previous); err != nil {
			return err
		}

	}
	if len(asMap["prognosisCodeableConcept"]) > 0 {
		if err := go1.Unmarshal(asMap["prognosisCodeableConcept"], &out.PrognosisCodeableConcept); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["effectiveDateTime"], &out.EffectiveDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err == nil {
	} else {

	}
	if len(asMap["summary"]) > 0 {
		if err := go1.Unmarshal(asMap["summary"], &out.Summary); err != nil {
			return err
		}

	}
	if len(asMap["protocol"]) > 0 {
		if err := go1.Unmarshal(asMap["protocol"], &out.Protocol); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["statusReason"]) > 0 {
		if err := go1.Unmarshal(asMap["statusReason"], &out.StatusReason); err != nil {
			return err
		}

	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["finding"]) > 0 {
		if err := go1.Unmarshal(asMap["finding"], &out.Finding); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["problem"]) > 0 {
		if err := go1.Unmarshal(asMap["problem"], &out.Problem); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["changePattern"]) > 0 {
		if err := go1.Unmarshal(asMap["changePattern"], &out.ChangePattern); err != nil {
			return err
		}

	}
	if len(asMap["supportingInfo"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInfo"], &out.SupportingInfo); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["prognosisReference"]) > 0 {
		if err := go1.Unmarshal(asMap["prognosisReference"], &out.PrognosisReference); err != nil {
			return err
		}

	}
	return nil
}

type ClinicalImpression struct {
	Subject                  *Reference         `binding:"required" bson:",omitempty" json:"subject,omitempty"` // The patient or group of individuals assessed as part of this record.
	Previous                 *Reference         `bson:",omitempty" json:"previous,omitempty"`                   // A reference to the last assessment that was conducted on this patient. Assessments are often/usually ongoing in nature; a care provider (practitioner or team) will make new assessments on an ongoing basis as new data arises or the patient's conditions changes.
	PrognosisCodeableConcept []*CodeableConcept `bson:",omitempty" json:"prognosisCodeableConcept,omitempty"`   // Estimate of likely outcome.
	Language                 *string            `bson:",omitempty" json:"language,omitempty"`                   // The base language in which the resource is written.
	Extension                []*Extension       `bson:",omitempty" json:"extension,omitempty"`                  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ClinicalImpressionEffectivex
	Summary           *string      `bson:",omitempty" json:"summary,omitempty"`           // A text summary of the investigations and the diagnosis.
	Protocol          []*string    `bson:",omitempty" json:"protocol,omitempty"`          // Reference to a specific published clinical protocol that was followed during this assessment, and/or that provides evidence in support of the diagnosis.
	Meta              *Meta        `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules     *string      `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	StatusReason       *CodeableConcept           `bson:",omitempty" json:"statusReason,omitempty"` // Captures the reason for the current state of the ClinicalImpression.
	Performer          *Reference                 `bson:",omitempty" json:"performer,omitempty"`    // The clinician performing the assessment.
	Finding            *ClinicalImpressionFinding `binding:"omitempty" bson:",omitempty"`
	Note               []*Annotation              `bson:",omitempty" json:"note,omitempty"`                      // Commentary about the impression, typically recorded after the impression itself was made, though supplemental notes by the original author could also appear.
	Id                 *primitive.ObjectID        `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Problem            []*Reference               `bson:",omitempty" json:"problem,omitempty"`                   // A list of the relevant problems/conditions for a patient.
	Text               *Narrative                 `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained          []*Resource                `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Identifier         []*Identifier              `bson:",omitempty" json:"identifier,omitempty"`                // Business identifiers assigned to this clinical impression by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
	Description        *string                    `bson:",omitempty" json:"description,omitempty"`               // A summary of the context and/or cause of the assessment - why / where it was performed, and what patient events/status prompted it.
	Date               *DateTime                  `bson:",omitempty" json:"date,omitempty"`                      // Indicates when the documentation of the assessment was complete.
	ChangePattern      *CodeableConcept           `bson:",omitempty" json:"changePattern,omitempty"`             // Change in the status/pattern of a subject's condition since previously assessed, such as worsening, improving, or no change.  It is a subjective assessment of the direction of the change.
	SupportingInfo     []*Reference               `bson:",omitempty" json:"supportingInfo,omitempty"`            // Information supporting the clinical impression, which can contain investigation results.
	Status             *string                    `binding:"required" bson:",omitempty" json:"status,omitempty"` // Identifies the workflow status of the assessment.
	Encounter          *Reference                 `bson:",omitempty" json:"encounter,omitempty"`                 // The Encounter during which this ClinicalImpression was created or to which the creation of this record is tightly associated.
	PrognosisReference []*Reference               `bson:",omitempty" json:"prognosisReference,omitempty"`        // RiskAssessment expressing likely outcome.
	ResourceType       string                     `binding:"omitempty" bson:"-" json:"resourceType"`
}
type ClinicalImpressionEffectivex struct {
	EffectiveDateTime DateTime `bson:",omitempty" json:"effectiveDateTime,omitempty"`
	EffectivePeriod   Period   `bson:",omitempty" json:"effectivePeriod,omitempty"`
}

func (out *ClinicalImpressionFinding) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["item"]) > 0 {
		if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
			return err
		}

	}
	if len(asMap["basis"]) > 0 {
		if err := go1.Unmarshal(asMap["basis"], &out.Basis); err != nil {
			return err
		}

	}
	return nil
}

type ClinicalImpressionFinding struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Item  *CodeableReference `bson:",omitempty" json:"item,omitempty"`  // Specific text, code or reference for finding or diagnosis, which may include ruled-out or resolved conditions.
	Basis *string            `bson:",omitempty" json:"basis,omitempty"` // Which investigations support finding or diagnosis.
}

func (out *ClinicalUseDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ClinicalUseDefinition\"" {
		return fmt.Errorf("resourceType is not %s", "ClinicalUseDefinition")
	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["indication"]) > 0 {
		if err := go1.Unmarshal(asMap["indication"], &out.Indication); err != nil {
			return err
		}

	}
	if len(asMap["interaction"]) > 0 {
		if err := go1.Unmarshal(asMap["interaction"], &out.Interaction); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["contraindication"]) > 0 {
		if err := go1.Unmarshal(asMap["contraindication"], &out.Contraindication); err != nil {
			return err
		}

	}
	if len(asMap["population"]) > 0 {
		if err := go1.Unmarshal(asMap["population"], &out.Population); err != nil {
			return err
		}

	}
	if len(asMap["undesirableEffect"]) > 0 {
		if err := go1.Unmarshal(asMap["undesirableEffect"], &out.UndesirableEffect); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["library"]) > 0 {
		if err := go1.Unmarshal(asMap["library"], &out.Library); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["warning"]) > 0 {
		if err := go1.Unmarshal(asMap["warning"], &out.Warning); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	return nil
}

type ClinicalUseDefinition struct {
	Category          []*CodeableConcept                `bson:",omitempty" json:"category,omitempty"` // A categorisation of the issue, primarily for dividing warnings into subject heading areas such as "Pregnancy and Lactation", "Overdose", "Effects on Ability to Drive and Use Machines".
	Indication        *ClinicalUseDefinitionIndication  `binding:"omitempty" bson:",omitempty"`
	Interaction       *ClinicalUseDefinitionInteraction `binding:"omitempty" bson:",omitempty"`
	Text              *Narrative                        `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Identifier        []*Identifier                     `bson:",omitempty" json:"identifier,omitempty"`        // Business identifier for this issue.
	ModifierExtension []*Extension                      `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Status            *CodeableConcept                        `bson:",omitempty" json:"status,omitempty"` // Whether this is a current issue or one that has been retired etc.
	Contraindication  *ClinicalUseDefinitionContraindication  `binding:"omitempty" bson:",omitempty"`
	Population        []*Reference                            `bson:",omitempty" json:"population,omitempty"` // The population group to which this applies.
	UndesirableEffect *ClinicalUseDefinitionUndesirableEffect `binding:"omitempty" bson:",omitempty"`
	Id                *primitive.ObjectID                     `bson:"_id,omitempty" json:"id,omitempty"`                   // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta              *Meta                                   `bson:",omitempty" json:"meta,omitempty"`                    // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Subject           []*Reference                            `bson:",omitempty" json:"subject,omitempty"`                 // The medication, product, substance, device, procedure etc. for which this is an indication.
	Library           []*string                               `bson:",omitempty" json:"library,omitempty"`                 // Logic used by the clinical use definition.
	ImplicitRules     *string                                 `bson:",omitempty" json:"implicitRules,omitempty"`           // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Extension         []*Extension                            `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Type              *string                                 `binding:"required" bson:",omitempty" json:"type,omitempty"` // indication | contraindication | interaction | undesirable-effect | warning.
	Warning           *ClinicalUseDefinitionWarning           `binding:"omitempty" bson:",omitempty"`
	Language          *string                                 `bson:",omitempty" json:"language,omitempty"`  // The base language in which the resource is written.
	Contained         []*Resource                             `bson:",omitempty" json:"contained,omitempty"` // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ResourceType      string                                  `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ClinicalUseDefinitionIndication) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["diseaseStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["diseaseStatus"], &out.DiseaseStatus); err != nil {
			return err
		}

	}
	if len(asMap["intendedEffect"]) > 0 {
		if err := go1.Unmarshal(asMap["intendedEffect"], &out.IntendedEffect); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["durationRange"], &out.DurationRange); err == nil {
	} else if err := go1.Unmarshal(asMap["durationString"], &out.DurationString); err == nil {
	} else {

	}
	if len(asMap["undesirableEffect"]) > 0 {
		if err := go1.Unmarshal(asMap["undesirableEffect"], &out.UndesirableEffect); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["diseaseSymptomProcedure"]) > 0 {
		if err := go1.Unmarshal(asMap["diseaseSymptomProcedure"], &out.DiseaseSymptomProcedure); err != nil {
			return err
		}

	}
	if len(asMap["comorbidity"]) > 0 {
		if err := go1.Unmarshal(asMap["comorbidity"], &out.Comorbidity); err != nil {
			return err
		}

	}
	if len(asMap["applicability"]) > 0 {
		if err := go1.Unmarshal(asMap["applicability"], &out.Applicability); err != nil {
			return err
		}

	}
	if len(asMap["otherTherapy"]) > 0 {
		if err := go1.Unmarshal(asMap["otherTherapy"], &out.OtherTherapy); err != nil {
			return err
		}

	}
	return nil
}

type ClinicalUseDefinitionIndication struct {
	DiseaseStatus  *CodeableReference `bson:",omitempty" json:"diseaseStatus,omitempty"`  // The status of the disease or symptom for the indication, for example "chronic" or "metastatic".
	IntendedEffect *CodeableReference `bson:",omitempty" json:"intendedEffect,omitempty"` // The intended effect, aim or strategy to be achieved.
	ClinicalUseDefinitionIndicationDurationx
	UndesirableEffect []*Reference `bson:",omitempty" json:"undesirableEffect,omitempty"` // An unwanted side effect or negative outcome that may happen if you use the drug (or other subject of this resource) for this indication.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	DiseaseSymptomProcedure *CodeableReference   `bson:",omitempty" json:"diseaseSymptomProcedure,omitempty"` // The situation that is being documented as an indicaton for this item.
	Comorbidity             []*CodeableReference `bson:",omitempty" json:"comorbidity,omitempty"`             // A comorbidity (concurrent condition) or coinfection as part of the indication.
	Applicability           *Expression          `bson:",omitempty" json:"applicability,omitempty"`           // An expression that returns true or false, indicating whether the indication is applicable or not, after having applied its other elements.
	OtherTherapy            interface{}
}
type ClinicalUseDefinitionIndicationDurationx struct {
	DurationRange  Range  `bson:",omitempty" json:"durationRange,omitempty"`
	DurationString string `bson:",omitempty" json:"durationString,omitempty"`
}

func (out *ClinicalUseDefinitionInteraction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["interactant"]) > 0 {
		if err := go1.Unmarshal(asMap["interactant"], &out.Interactant); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["effect"]) > 0 {
		if err := go1.Unmarshal(asMap["effect"], &out.Effect); err != nil {
			return err
		}

	}
	if len(asMap["incidence"]) > 0 {
		if err := go1.Unmarshal(asMap["incidence"], &out.Incidence); err != nil {
			return err
		}

	}
	if len(asMap["management"]) > 0 {
		if err := go1.Unmarshal(asMap["management"], &out.Management); err != nil {
			return err
		}

	}
	return nil
}

type ClinicalUseDefinitionInteraction struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Interactant *ClinicalUseDefinitionInteractionInteractant `binding:"omitempty" bson:",omitempty"`
	Type        *CodeableConcept                             `bson:",omitempty" json:"type,omitempty"`       // The type of the interaction e.g. drug-drug interaction, drug-food interaction, drug-lab test interaction.
	Effect      *CodeableReference                           `bson:",omitempty" json:"effect,omitempty"`     // The effect of the interaction, for example "reduced gastric absorption of primary medication".
	Incidence   *CodeableConcept                             `bson:",omitempty" json:"incidence,omitempty"`  // The incidence of the interaction, e.g. theoretical, observed.
	Management  []*CodeableConcept                           `bson:",omitempty" json:"management,omitempty"` // Actions for managing the interaction.
}

func (out *ClinicalUseDefinitionInteractionInteractant) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["itemReference"], &out.ItemReference); err == nil {
	} else if err := go1.Unmarshal(asMap["itemCodeableConcept"], &out.ItemCodeableConcept); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "item[x]")
	}
	return nil
}

type ClinicalUseDefinitionInteractionInteractant struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ClinicalUseDefinitionInteractionInteractantItemx
}
type ClinicalUseDefinitionInteractionInteractantItemx struct {
	ItemReference       Reference       `bson:",omitempty" json:"itemReference,omitempty"`
	ItemCodeableConcept CodeableConcept `bson:",omitempty" json:"itemCodeableConcept,omitempty"`
}

func (out *ClinicalUseDefinitionContraindication) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["applicability"]) > 0 {
		if err := go1.Unmarshal(asMap["applicability"], &out.Applicability); err != nil {
			return err
		}

	}
	if len(asMap["otherTherapy"]) > 0 {
		if err := go1.Unmarshal(asMap["otherTherapy"], &out.OtherTherapy); err != nil {
			return err
		}

	}
	if len(asMap["diseaseStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["diseaseStatus"], &out.DiseaseStatus); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["diseaseSymptomProcedure"]) > 0 {
		if err := go1.Unmarshal(asMap["diseaseSymptomProcedure"], &out.DiseaseSymptomProcedure); err != nil {
			return err
		}

	}
	if len(asMap["comorbidity"]) > 0 {
		if err := go1.Unmarshal(asMap["comorbidity"], &out.Comorbidity); err != nil {
			return err
		}

	}
	if len(asMap["indication"]) > 0 {
		if err := go1.Unmarshal(asMap["indication"], &out.Indication); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type ClinicalUseDefinitionContraindication struct {
	Applicability     *Expression                                        `bson:",omitempty" json:"applicability,omitempty"` // An expression that returns true or false, indicating whether the indication is applicable or not, after having applied its other elements.
	OtherTherapy      *ClinicalUseDefinitionContraindicationOtherTherapy `binding:"omitempty" bson:",omitempty"`
	DiseaseStatus     *CodeableReference                                 `bson:",omitempty" json:"diseaseStatus,omitempty"`     // The status of the disease or symptom for the contraindication, for example "chronic" or "metastatic".
	Extension         []*Extension                                       `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                                       `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	DiseaseSymptomProcedure *CodeableReference   `bson:",omitempty" json:"diseaseSymptomProcedure,omitempty"` // The situation that is being documented as contraindicating against this item.
	Comorbidity             []*CodeableReference `bson:",omitempty" json:"comorbidity,omitempty"`             // A comorbidity (concurrent condition) or coinfection.
	Indication              []*Reference         `bson:",omitempty" json:"indication,omitempty"`              // The indication which this is a contraidication for.
	Id                      *string              `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *ClinicalUseDefinitionContraindicationOtherTherapy) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["relationshipType"], &out.RelationshipType); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["treatment"], &out.Treatment); err != nil {
		return err
	}

	return nil
}

type ClinicalUseDefinitionContraindicationOtherTherapy struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	RelationshipType *CodeableConcept   `binding:"required" bson:",omitempty" json:"relationshipType,omitempty"` // The type of relationship between the medicinal product indication or contraindication and another therapy.
	Treatment        *CodeableReference `binding:"required" bson:",omitempty" json:"treatment,omitempty"`        // Reference to a specific medication (active substance, medicinal product or class of products, biological, food etc.) as part of an indication or contraindication.
}

func (out *ClinicalUseDefinitionUndesirableEffect) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["symptomConditionEffect"]) > 0 {
		if err := go1.Unmarshal(asMap["symptomConditionEffect"], &out.SymptomConditionEffect); err != nil {
			return err
		}

	}
	if len(asMap["classification"]) > 0 {
		if err := go1.Unmarshal(asMap["classification"], &out.Classification); err != nil {
			return err
		}

	}
	if len(asMap["frequencyOfOccurrence"]) > 0 {
		if err := go1.Unmarshal(asMap["frequencyOfOccurrence"], &out.FrequencyOfOccurrence); err != nil {
			return err
		}

	}
	return nil
}

type ClinicalUseDefinitionUndesirableEffect struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	SymptomConditionEffect *CodeableReference `bson:",omitempty" json:"symptomConditionEffect,omitempty"` // The situation in which the undesirable effect may manifest.
	Classification         *CodeableConcept   `bson:",omitempty" json:"classification,omitempty"`         // High level classification of the effect.
	FrequencyOfOccurrence  *CodeableConcept   `bson:",omitempty" json:"frequencyOfOccurrence,omitempty"`  // How often the effect is seen.
}

func (out *ClinicalUseDefinitionWarning) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type ClinicalUseDefinitionWarning struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Description *string          `bson:",omitempty" json:"description,omitempty"` // A textual definition of this warning, with formatting.
	Code        *CodeableConcept `bson:",omitempty" json:"code,omitempty"`        // A coded or unformatted textual definition of this warning.
	Id          *string          `bson:"_id,omitempty" json:"id,omitempty"`       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *CodeSystem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"CodeSystem\"" {
		return fmt.Errorf("resourceType is not %s", "CodeSystem")
	}
	if len(asMap["compositional"]) > 0 {
		if err := go1.Unmarshal(asMap["compositional"], &out.Compositional); err != nil {
			return err
		}

	}
	if len(asMap["supplements"]) > 0 {
		if err := go1.Unmarshal(asMap["supplements"], &out.Supplements); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["approvalDate"]) > 0 {
		if err := go1.Unmarshal(asMap["approvalDate"], &out.ApprovalDate); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["content"], &out.Content); err != nil {
		return err
	}

	if len(asMap["count"]) > 0 {
		if err := go1.Unmarshal(asMap["count"], &out.Count); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["editor"]) > 0 {
		if err := go1.Unmarshal(asMap["editor"], &out.Editor); err != nil {
			return err
		}

	}
	if len(asMap["relatedArtifact"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedArtifact"], &out.RelatedArtifact); err != nil {
			return err
		}

	}
	if len(asMap["concept"]) > 0 {
		if err := go1.Unmarshal(asMap["concept"], &out.Concept); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["effectivePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err != nil {
			return err
		}

	}
	if len(asMap["topic"]) > 0 {
		if err := go1.Unmarshal(asMap["topic"], &out.Topic); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["reviewer"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewer"], &out.Reviewer); err != nil {
			return err
		}

	}
	if len(asMap["endorser"]) > 0 {
		if err := go1.Unmarshal(asMap["endorser"], &out.Endorser); err != nil {
			return err
		}

	}
	if len(asMap["filter"]) > 0 {
		if err := go1.Unmarshal(asMap["filter"], &out.Filter); err != nil {
			return err
		}

	}
	if len(asMap["property"]) > 0 {
		if err := go1.Unmarshal(asMap["property"], &out.Property); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["hierarchyMeaning"]) > 0 {
		if err := go1.Unmarshal(asMap["hierarchyMeaning"], &out.HierarchyMeaning); err != nil {
			return err
		}

	}
	if len(asMap["versionNeeded"]) > 0 {
		if err := go1.Unmarshal(asMap["versionNeeded"], &out.VersionNeeded); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["caseSensitive"]) > 0 {
		if err := go1.Unmarshal(asMap["caseSensitive"], &out.CaseSensitive); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["lastReviewDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastReviewDate"], &out.LastReviewDate); err != nil {
			return err
		}

	}
	if len(asMap["valueSet"]) > 0 {
		if err := go1.Unmarshal(asMap["valueSet"], &out.ValueSet); err != nil {
			return err
		}

	}
	return nil
}

type CodeSystem struct {
	Compositional     *bool            `bson:",omitempty" json:"compositional,omitempty"`     // The code system defines a compositional (post-coordination) grammar.
	Supplements       *string          `bson:",omitempty" json:"supplements,omitempty"`       // The canonical URL of the code system that this code system supplement is adding designations and properties to.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Url               *string          `bson:",omitempty" json:"url,omitempty"`               // An absolute URI that is used to identify this code system when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this code system is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the code system is stored on different servers. This is used in [Coding](datatypes.html#Coding).system.
	Name              *string          `bson:",omitempty" json:"name,omitempty"`              // A natural language name identifying the code system. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Experimental      *bool            `bson:",omitempty" json:"experimental,omitempty"`      // A Boolean value to indicate that this code system is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Contact           []*ContactDetail `bson:",omitempty" json:"contact,omitempty"`           // Contact details to assist a user in finding and communicating with the publisher.
	UseContext        []*UsageContext  `bson:",omitempty" json:"useContext,omitempty"`        // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate code system instances.
	Copyright         *string          `bson:",omitempty" json:"copyright,omitempty"`         // A copyright statement relating to the code system and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the code system.
	ApprovalDate      *Date            `bson:",omitempty" json:"approvalDate,omitempty"`      // The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Version          *string             `bson:",omitempty" json:"version,omitempty"`                    // The identifier that is used to identify this version of the code system when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the code system author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. This is used in [Coding](datatypes.html#Coding).version.
	Title            *string             `bson:",omitempty" json:"title,omitempty"`                      // A short, descriptive, user-friendly title for the code system.
	Purpose          *string             `bson:",omitempty" json:"purpose,omitempty"`                    // Explanation of why this code system is needed and why it has been designed as it has.
	Content          *string             `binding:"required" bson:",omitempty" json:"content,omitempty"` // The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.
	Count            *int                `bson:",omitempty" json:"count,omitempty"`                      // The total number of concepts defined by the code system. Where the code system has a compositional grammar, the basis of this count is defined by the system steward.
	ImplicitRules    *string             `bson:",omitempty" json:"implicitRules,omitempty"`              // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Status           *string             `binding:"required" bson:",omitempty" json:"status,omitempty"`  // The status of this code system. Enables tracking the life-cycle of the content.
	Publisher        *string             `bson:",omitempty" json:"publisher,omitempty"`                  // The name of the organization or individual responsible for the release and ongoing maintenance of the code system.
	Editor           []*ContactDetail    `bson:",omitempty" json:"editor,omitempty"`                     // An individual or organization primarily responsible for internal coherence of the CodeSystem.
	RelatedArtifact  []*RelatedArtifact  `bson:",omitempty" json:"relatedArtifact,omitempty"`            // Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts.
	Concept          *CodeSystemConcept  `binding:"omitempty" bson:",omitempty"`
	Date             *DateTime           `bson:",omitempty" json:"date,omitempty"`            // The date  (and optionally time) when the code system was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the code system changes.
	EffectivePeriod  *Period             `bson:",omitempty" json:"effectivePeriod,omitempty"` // The period during which the CodeSystem content was or is planned to be in active use.
	Topic            []*CodeableConcept  `bson:",omitempty" json:"topic,omitempty"`           // Descriptions related to the content of the CodeSystem. Topics provide a high-level categorization as well as keywords for the CodeSystem that can be useful for filtering and searching.
	Author           []*ContactDetail    `bson:",omitempty" json:"author,omitempty"`          // An individiual or organization primarily involved in the creation and maintenance of the CodeSystem.
	Reviewer         []*ContactDetail    `bson:",omitempty" json:"reviewer,omitempty"`        // An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the CodeSystem.
	Endorser         []*ContactDetail    `bson:",omitempty" json:"endorser,omitempty"`        // An individual or organization asserted by the publisher to be responsible for officially endorsing the CodeSystem for use in some setting.
	Filter           *CodeSystemFilter   `binding:"omitempty" bson:",omitempty"`
	Property         *CodeSystemProperty `binding:"omitempty" bson:",omitempty"`
	Id               *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`            // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta             *Meta               `bson:",omitempty" json:"meta,omitempty"`             // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Text             *Narrative          `bson:",omitempty" json:"text,omitempty"`             // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	CopyrightLabel   *string             `bson:",omitempty" json:"copyrightLabel,omitempty"`   // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	HierarchyMeaning *string             `bson:",omitempty" json:"hierarchyMeaning,omitempty"` // The meaning of the hierarchy of concepts as represented in this resource.
	VersionNeeded    *bool               `bson:",omitempty" json:"versionNeeded,omitempty"`    // This flag is used to signify that the code system does not commit to concept permanence across versions. If true, a version must be specified when referencing this code system.
	Language         *string             `bson:",omitempty" json:"language,omitempty"`         // The base language in which the resource is written.
	Contained        []*Resource         `bson:",omitempty" json:"contained,omitempty"`        // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	CodeSystemVersionAlgorithmx
	Identifier     []*Identifier      `bson:",omitempty" json:"identifier,omitempty"`     // A formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Jurisdiction   []*CodeableConcept `bson:",omitempty" json:"jurisdiction,omitempty"`   // A legal or geographic region in which the code system is intended to be used.
	CaseSensitive  *bool              `bson:",omitempty" json:"caseSensitive,omitempty"`  // If code comparison is case sensitive when codes within this system are compared to each other.
	Description    *string            `bson:",omitempty" json:"description,omitempty"`    // A free text natural language description of the code system from a consumer's perspective.
	LastReviewDate *Date              `bson:",omitempty" json:"lastReviewDate,omitempty"` // The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
	ValueSet       *string            `bson:",omitempty" json:"valueSet,omitempty"`       // Canonical reference to the value set that contains all codes in the code system independent of code status.
	ResourceType   string             `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *CodeSystemConcept) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["property"]) > 0 {
		if err := go1.Unmarshal(asMap["property"], &out.Property); err != nil {
			return err
		}

	}
	if len(asMap["concept"]) > 0 {
		if err := go1.Unmarshal(asMap["concept"], &out.Concept); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["display"]) > 0 {
		if err := go1.Unmarshal(asMap["display"], &out.Display); err != nil {
			return err
		}

	}
	if len(asMap["definition"]) > 0 {
		if err := go1.Unmarshal(asMap["definition"], &out.Definition); err != nil {
			return err
		}

	}
	if len(asMap["designation"]) > 0 {
		if err := go1.Unmarshal(asMap["designation"], &out.Designation); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type CodeSystemConcept struct {
	Code              *string                    `binding:"required" bson:",omitempty" json:"code,omitempty"` // A code - a text symbol - that uniquely identifies the concept within the code system.
	Property          *CodeSystemConceptProperty `binding:"omitempty" bson:",omitempty"`
	Concept           interface{}
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Display     *string                       `bson:",omitempty" json:"display,omitempty"`    // A human readable string that is the recommended default way to present this concept to a user.
	Definition  *string                       `bson:",omitempty" json:"definition,omitempty"` // The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.
	Designation *CodeSystemConceptDesignation `binding:"omitempty" bson:",omitempty"`
	Extension   []*Extension                  `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *CodeSystemConceptProperty) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueCode"], &out.ValueCode); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCoding"], &out.ValueCoding); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDateTime"], &out.ValueDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDecimal"], &out.ValueDecimal); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	return nil
}

type CodeSystemConceptProperty struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code *string `binding:"required" bson:",omitempty" json:"code,omitempty"` // A code that is a reference to CodeSystem.property.code.
	CodeSystemConceptPropertyValuex
}
type CodeSystemConceptPropertyValuex struct {
	ValueCode     string   `bson:",omitempty" json:"valueCode,omitempty"`
	ValueCoding   Coding   `bson:",omitempty" json:"valueCoding,omitempty"`
	ValueString   string   `bson:",omitempty" json:"valueString,omitempty"`
	ValueInteger  int      `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueBoolean  bool     `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueDateTime DateTime `bson:",omitempty" json:"valueDateTime,omitempty"`
	ValueDecimal  float64  `bson:",omitempty" json:"valueDecimal,omitempty"`
}

func (out *CodeSystemConceptDesignation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["use"]) > 0 {
		if err := go1.Unmarshal(asMap["use"], &out.Use); err != nil {
			return err
		}

	}
	if len(asMap["additionalUse"]) > 0 {
		if err := go1.Unmarshal(asMap["additionalUse"], &out.AdditionalUse); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
		return err
	}

	return nil
}

type CodeSystemConceptDesignation struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Language      *string   `bson:",omitempty" json:"language,omitempty"`                 // The language this designation is defined for.
	Use           *Coding   `bson:",omitempty" json:"use,omitempty"`                      // A code that details how this designation would be used.
	AdditionalUse []*Coding `bson:",omitempty" json:"additionalUse,omitempty"`            // Additional codes that detail how this designation would be used, if there is more than one use.
	Value         *string   `binding:"required" bson:",omitempty" json:"value,omitempty"` // The text value for this designation.
}

func (out *CodeSystemFilter) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["operator"], &out.Operator); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type CodeSystemFilter struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code        *string   `binding:"required" bson:",omitempty" json:"code,omitempty"`     // The code that identifies this filter when it is used as a filter in [ValueSet](valueset.html#).compose.include.filter.
	Description *string   `bson:",omitempty" json:"description,omitempty"`                 // A description of how or why the filter is used.
	Operator    []*string `binding:"required" bson:",omitempty" json:"operator,omitempty"` // A list of operators that can be used with the filter.
	Value       *string   `binding:"required" bson:",omitempty" json:"value,omitempty"`    // A description of what the value for the filter should be.
	Id          *string   `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *CodeSystemProperty) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["uri"]) > 0 {
		if err := go1.Unmarshal(asMap["uri"], &out.Uri); err != nil {
			return err
		}

	}
	return nil
}

type CodeSystemProperty struct {
	Description       *string      `bson:",omitempty" json:"description,omitempty"`             // A description of the property- why it is defined, and how its value might be used.
	Type              *string      `binding:"required" bson:",omitempty" json:"type,omitempty"` // The type of the property value. Properties of type "code" contain a code defined by the code system (e.g. a reference to another defined concept).
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`       /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code *string `binding:"required" bson:",omitempty" json:"code,omitempty"` // A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters.
	Uri  *string `bson:",omitempty" json:"uri,omitempty"`                     // Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.
}
type CodeSystemVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *Communication) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Communication\"" {
		return fmt.Errorf("resourceType is not %s", "Communication")
	}
	if len(asMap["statusReason"]) > 0 {
		if err := go1.Unmarshal(asMap["statusReason"], &out.StatusReason); err != nil {
			return err
		}

	}
	if len(asMap["about"]) > 0 {
		if err := go1.Unmarshal(asMap["about"], &out.About); err != nil {
			return err
		}

	}
	if len(asMap["payload"]) > 0 {
		if err := go1.Unmarshal(asMap["payload"], &out.Payload); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesUri"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesUri"], &out.InstantiatesUri); err != nil {
			return err
		}

	}
	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["sent"]) > 0 {
		if err := go1.Unmarshal(asMap["sent"], &out.Sent); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["received"]) > 0 {
		if err := go1.Unmarshal(asMap["received"], &out.Received); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["inResponseTo"]) > 0 {
		if err := go1.Unmarshal(asMap["inResponseTo"], &out.InResponseTo); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["medium"]) > 0 {
		if err := go1.Unmarshal(asMap["medium"], &out.Medium); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["topic"]) > 0 {
		if err := go1.Unmarshal(asMap["topic"], &out.Topic); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesCanonical"], &out.InstantiatesCanonical); err != nil {
			return err
		}

	}
	if len(asMap["sender"]) > 0 {
		if err := go1.Unmarshal(asMap["sender"], &out.Sender); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["recipient"]) > 0 {
		if err := go1.Unmarshal(asMap["recipient"], &out.Recipient); err != nil {
			return err
		}

	}
	return nil
}

type Communication struct {
	StatusReason          *CodeableConcept      `bson:",omitempty" json:"statusReason,omitempty"` // Captures the reason for the current state of the Communication.
	About                 []*Reference          `bson:",omitempty" json:"about,omitempty"`        // Other resources that pertain to this communication and to which this communication should be associated.
	Payload               *CommunicationPayload `binding:"omitempty" bson:",omitempty"`
	InstantiatesUri       []*string             `bson:",omitempty" json:"instantiatesUri,omitempty"`           // The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Communication.
	PartOf                []*Reference          `bson:",omitempty" json:"partOf,omitempty"`                    // A larger event (e.g. Communication, Procedure) of which this particular communication is a component or step.
	Priority              *string               `bson:",omitempty" json:"priority,omitempty"`                  // Characterizes how quickly the planned or in progress communication must be addressed. Includes concepts such as stat, urgent, routine.
	Subject               *Reference            `bson:",omitempty" json:"subject,omitempty"`                   // The patient or group that was the focus of this communication.
	Sent                  *DateTime             `bson:",omitempty" json:"sent,omitempty"`                      // The time when this communication was sent.
	Id                    *primitive.ObjectID   `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Contained             []*Resource           `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension             []*Extension          `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	BasedOn               []*Reference          `bson:",omitempty" json:"basedOn,omitempty"`                   // An order, proposal or plan fulfilled in whole or in part by this Communication.
	Received              *DateTime             `bson:",omitempty" json:"received,omitempty"`                  // The time when this communication arrived at the destination.
	Reason                []*CodeableReference  `bson:",omitempty" json:"reason,omitempty"`                    // The reason or justification for the communication.
	Identifier            []*Identifier         `bson:",omitempty" json:"identifier,omitempty"`                // Business identifiers assigned to this communication by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
	InResponseTo          []*Reference          `bson:",omitempty" json:"inResponseTo,omitempty"`              // Prior communication that this communication is in response to.
	Category              []*CodeableConcept    `bson:",omitempty" json:"category,omitempty"`                  // The type of message conveyed such as alert, notification, reminder, instruction, etc.
	Medium                []*CodeableConcept    `bson:",omitempty" json:"medium,omitempty"`                    // A channel that was used for this communication (e.g. email, fax).
	ImplicitRules         *string               `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language              *string               `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Topic                 *CodeableConcept      `bson:",omitempty" json:"topic,omitempty"`                     // Description of the purpose/content, similar to a subject line in an email.
	Encounter             *Reference            `bson:",omitempty" json:"encounter,omitempty"`                 // The Encounter during which this Communication was created or to which the creation of this record is tightly associated.
	Note                  []*Annotation         `bson:",omitempty" json:"note,omitempty"`                      // Additional notes or commentary about the communication by the sender, receiver or other interested parties.
	Meta                  *Meta                 `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Status                *string               `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of the transmission.
	Text                  *Narrative            `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	InstantiatesCanonical []*string             `bson:",omitempty" json:"instantiatesCanonical,omitempty"`     // The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Communication.
	Sender                *Reference            `bson:",omitempty" json:"sender,omitempty"`                    // The entity (e.g. person, organization, clinical information system, or device) which is the source of the communication.
	ModifierExtension     []*Extension          `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Recipient    []*Reference `bson:",omitempty" json:"recipient,omitempty"` // The entity (e.g. person, organization, clinical information system, care team or device) which is the target of the communication.
	ResourceType string       `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *CommunicationPayload) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["contentAttachment"], &out.ContentAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["contentReference"], &out.ContentReference); err == nil {
	} else if err := go1.Unmarshal(asMap["contentCodeableConcept"], &out.ContentCodeableConcept); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "content[x]")
	}
	return nil
}

type CommunicationPayload struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	CommunicationPayloadContentx
}
type CommunicationPayloadContentx struct {
	ContentAttachment      Attachment      `bson:",omitempty" json:"contentAttachment,omitempty"`
	ContentReference       Reference       `bson:",omitempty" json:"contentReference,omitempty"`
	ContentCodeableConcept CodeableConcept `bson:",omitempty" json:"contentCodeableConcept,omitempty"`
}

func (out *CommunicationRequest) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"CommunicationRequest\"" {
		return fmt.Errorf("resourceType is not %s", "CommunicationRequest")
	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["doNotPerform"]) > 0 {
		if err := go1.Unmarshal(asMap["doNotPerform"], &out.DoNotPerform); err != nil {
			return err
		}

	}
	if len(asMap["about"]) > 0 {
		if err := go1.Unmarshal(asMap["about"], &out.About); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["occurrenceDateTime"], &out.OccurrenceDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrencePeriod"], &out.OccurrencePeriod); err == nil {
	} else {

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["informationProvider"]) > 0 {
		if err := go1.Unmarshal(asMap["informationProvider"], &out.InformationProvider); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["statusReason"]) > 0 {
		if err := go1.Unmarshal(asMap["statusReason"], &out.StatusReason); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["intent"], &out.Intent); err != nil {
		return err
	}

	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["payload"]) > 0 {
		if err := go1.Unmarshal(asMap["payload"], &out.Payload); err != nil {
			return err
		}

	}
	if len(asMap["recipient"]) > 0 {
		if err := go1.Unmarshal(asMap["recipient"], &out.Recipient); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["groupIdentifier"]) > 0 {
		if err := go1.Unmarshal(asMap["groupIdentifier"], &out.GroupIdentifier); err != nil {
			return err
		}

	}
	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	if len(asMap["authoredOn"]) > 0 {
		if err := go1.Unmarshal(asMap["authoredOn"], &out.AuthoredOn); err != nil {
			return err
		}

	}
	if len(asMap["requester"]) > 0 {
		if err := go1.Unmarshal(asMap["requester"], &out.Requester); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["replaces"]) > 0 {
		if err := go1.Unmarshal(asMap["replaces"], &out.Replaces); err != nil {
			return err
		}

	}
	if len(asMap["medium"]) > 0 {
		if err := go1.Unmarshal(asMap["medium"], &out.Medium); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	return nil
}

type CommunicationRequest struct {
	Identifier    []*Identifier `bson:",omitempty" json:"identifier,omitempty"`    // Business identifiers assigned to this communication request by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
	Encounter     *Reference    `bson:",omitempty" json:"encounter,omitempty"`     // The Encounter during which this CommunicationRequest was created or to which the creation of this record is tightly associated.
	ImplicitRules *string       `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained     []*Resource   `bson:",omitempty" json:"contained,omitempty"`     // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	DoNotPerform  *bool         `bson:",omitempty" json:"doNotPerform,omitempty"`  // If true indicates that the CommunicationRequest is asking for the specified action to *not* occur.
	About         []*Reference  `bson:",omitempty" json:"about,omitempty"`         // Other resources that pertain to this communication request and to which this communication request should be associated.
	CommunicationRequestOccurrencex
	Meta                *Meta        `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Subject             *Reference   `bson:",omitempty" json:"subject,omitempty"`                   // The patient or group that is the focus of this communication request.
	Status              *string      `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of the proposal or order.
	InformationProvider []*Reference `bson:",omitempty" json:"informationProvider,omitempty"`       // The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication.
	ModifierExtension   []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	BasedOn         []*Reference                 `bson:",omitempty" json:"basedOn,omitempty"`                   // A plan or proposal that is fulfilled in whole or in part by this request.
	StatusReason    *CodeableConcept             `bson:",omitempty" json:"statusReason,omitempty"`              // Captures the reason for the current state of the CommunicationRequest.
	Intent          *string                      `binding:"required" bson:",omitempty" json:"intent,omitempty"` // Indicates the level of authority/intentionality associated with the CommunicationRequest and where the request fits into the workflow chain.
	Category        []*CodeableConcept           `bson:",omitempty" json:"category,omitempty"`                  // The type of message to be sent such as alert, notification, reminder, instruction, etc.
	Payload         *CommunicationRequestPayload `binding:"omitempty" bson:",omitempty"`
	Recipient       []*Reference                 `bson:",omitempty" json:"recipient,omitempty"`       // The entity (e.g. person, organization, clinical information system, device, group, or care team) which is the intended target of the communication.
	Reason          []*CodeableReference         `bson:",omitempty" json:"reason,omitempty"`          // Describes why the request is being made in coded or textual form.
	Id              *primitive.ObjectID          `bson:"_id,omitempty" json:"id,omitempty"`           // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Extension       []*Extension                 `bson:",omitempty" json:"extension,omitempty"`       // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	GroupIdentifier *Identifier                  `bson:",omitempty" json:"groupIdentifier,omitempty"` // A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.
	Priority        *string                      `bson:",omitempty" json:"priority,omitempty"`        // Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.
	AuthoredOn      *DateTime                    `bson:",omitempty" json:"authoredOn,omitempty"`      // For draft requests, indicates the date of initial creation.  For requests with other statuses, indicates the date of activation.
	Requester       *Reference                   `bson:",omitempty" json:"requester,omitempty"`       // The device, individual, or organization who asks for the information to be shared.
	Language        *string                      `bson:",omitempty" json:"language,omitempty"`        // The base language in which the resource is written.
	Text            *Narrative                   `bson:",omitempty" json:"text,omitempty"`            // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Replaces        []*Reference                 `bson:",omitempty" json:"replaces,omitempty"`        // Completed or terminated request(s) whose function is taken by this new request.
	Medium          []*CodeableConcept           `bson:",omitempty" json:"medium,omitempty"`          // A channel that was used for this communication (e.g. email, fax).
	Note            []*Annotation                `bson:",omitempty" json:"note,omitempty"`            // Comments made about the request by the requester, sender, recipient, subject or other participants.
	ResourceType    string                       `binding:"omitempty" bson:"-" json:"resourceType"`
}
type CommunicationRequestOccurrencex struct {
	OccurrenceDateTime DateTime `bson:",omitempty" json:"occurrenceDateTime,omitempty"`
	OccurrencePeriod   Period   `bson:",omitempty" json:"occurrencePeriod,omitempty"`
}

func (out *CommunicationRequestPayload) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["contentAttachment"], &out.ContentAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["contentReference"], &out.ContentReference); err == nil {
	} else if err := go1.Unmarshal(asMap["contentCodeableConcept"], &out.ContentCodeableConcept); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "content[x]")
	}
	return nil
}

type CommunicationRequestPayload struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	CommunicationRequestPayloadContentx
}
type CommunicationRequestPayloadContentx struct {
	ContentAttachment      Attachment      `bson:",omitempty" json:"contentAttachment,omitempty"`
	ContentReference       Reference       `bson:",omitempty" json:"contentReference,omitempty"`
	ContentCodeableConcept CodeableConcept `bson:",omitempty" json:"contentCodeableConcept,omitempty"`
}

func (out *CompartmentDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"CompartmentDefinition\"" {
		return fmt.Errorf("resourceType is not %s", "CompartmentDefinition")
	}
	if err := go1.Unmarshal(asMap["search"], &out.Search); err != nil {
		return err
	}

	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
		return err
	}

	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["resource"]) > 0 {
		if err := go1.Unmarshal(asMap["resource"], &out.Resource); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	return nil
}

type CompartmentDefinition struct {
	Search            *bool            `binding:"required" bson:",omitempty" json:"search,omitempty"` // Whether the search syntax is supported,.
	Contact           []*ContactDetail `bson:",omitempty" json:"contact,omitempty"`                   // Contact details to assist a user in finding and communicating with the publisher.
	Description       *string          `bson:",omitempty" json:"description,omitempty"`               // A free text natural language description of the compartment definition from a consumer's perspective.
	Title             *string          `bson:",omitempty" json:"title,omitempty"`                     // A short, descriptive, user-friendly title for the capability statement.
	Date              *DateTime        `bson:",omitempty" json:"date,omitempty"`                      // The date  (and optionally time) when the compartment definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the compartment definition changes.
	Publisher         *string          `bson:",omitempty" json:"publisher,omitempty"`                 // The name of the organization or individual responsible for the release and ongoing maintenance of the compartment definition.
	Language          *string          `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Url               *string          `binding:"required" bson:",omitempty" json:"url,omitempty"`    // An absolute URI that is used to identify this compartment definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this compartment definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the compartment definition is stored on different servers.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Version       *string                        `bson:",omitempty" json:"version,omitempty"`                   // The identifier that is used to identify this version of the compartment definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the compartment definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Name          *string                        `binding:"required" bson:",omitempty" json:"name,omitempty"`   // A natural language name identifying the compartment definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Status        *string                        `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this compartment definition. Enables tracking the life-cycle of the content.
	Experimental  *bool                          `bson:",omitempty" json:"experimental,omitempty"`              // A Boolean value to indicate that this compartment definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Meta          *Meta                          `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules *string                        `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Resource      *CompartmentDefinitionResource `binding:"omitempty" bson:",omitempty"`
	Purpose       *string                        `bson:",omitempty" json:"purpose,omitempty"`                 // Explanation of why this compartment definition is needed and why it has been designed as it has.
	Code          *string                        `binding:"required" bson:",omitempty" json:"code,omitempty"` // Which compartment this definition describes.
	Contained     []*Resource                    `bson:",omitempty" json:"contained,omitempty"`               // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	CompartmentDefinitionVersionAlgorithmx
	UseContext   []*UsageContext     `bson:",omitempty" json:"useContext,omitempty"` // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate compartment definition instances.
	Id           *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Text         *Narrative          `bson:",omitempty" json:"text,omitempty"`       // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ResourceType string              `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *CompartmentDefinitionResource) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["param"]) > 0 {
		if err := go1.Unmarshal(asMap["param"], &out.Param); err != nil {
			return err
		}

	}
	if len(asMap["documentation"]) > 0 {
		if err := go1.Unmarshal(asMap["documentation"], &out.Documentation); err != nil {
			return err
		}

	}
	if len(asMap["startParam"]) > 0 {
		if err := go1.Unmarshal(asMap["startParam"], &out.StartParam); err != nil {
			return err
		}

	}
	if len(asMap["endParam"]) > 0 {
		if err := go1.Unmarshal(asMap["endParam"], &out.EndParam); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type CompartmentDefinitionResource struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code          *string      `binding:"required" bson:",omitempty" json:"code,omitempty"` // The name of a resource supported by the server.
	Param         []*string    `bson:",omitempty" json:"param,omitempty"`                   // The name of a search parameter that represents the link to the compartment. More than one may be listed because a resource may be linked to a compartment in more than one way,.
	Documentation *string      `bson:",omitempty" json:"documentation,omitempty"`           // Additional documentation about the resource and compartment.
	StartParam    *string      `bson:",omitempty" json:"startParam,omitempty"`              // Search Parameter for mapping requests made with $everything.start (e.g. on [Patient.$everything](patient-operation-everything.html)).
	EndParam      *string      `bson:",omitempty" json:"endParam,omitempty"`                // Search Parameter for mapping requests made with $everything.end (e.g. on [Patient.$everything](patient-operation-everything.html)).
	Id            *string      `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension     []*Extension `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}
type CompartmentDefinitionVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *Composition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Composition\"" {
		return fmt.Errorf("resourceType is not %s", "Composition")
	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["attester"]) > 0 {
		if err := go1.Unmarshal(asMap["attester"], &out.Attester); err != nil {
			return err
		}

	}
	if len(asMap["section"]) > 0 {
		if err := go1.Unmarshal(asMap["section"], &out.Section); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["event"]) > 0 {
		if err := go1.Unmarshal(asMap["event"], &out.Event); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
		return err
	}

	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
		return err
	}

	if len(asMap["custodian"]) > 0 {
		if err := go1.Unmarshal(asMap["custodian"], &out.Custodian); err != nil {
			return err
		}

	}
	if len(asMap["relatesTo"]) > 0 {
		if err := go1.Unmarshal(asMap["relatesTo"], &out.RelatesTo); err != nil {
			return err
		}

	}
	return nil
}

type Composition struct {
	ImplicitRules     *string      `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Url          *string              `bson:",omitempty" json:"url,omitempty"`                       // An absolute URI that is used to identify this Composition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this Composition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the Composition is stored on different servers.
	Text         *Narrative           `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Version      *string              `bson:",omitempty" json:"version,omitempty"`                   // An explicitly assigned identifer of a variation of the content in the Composition.
	Status       *string              `binding:"required" bson:",omitempty" json:"status,omitempty"` // The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document.
	UseContext   []*UsageContext      `bson:",omitempty" json:"useContext,omitempty"`                // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate Composition instances.
	Attester     *CompositionAttester `binding:"omitempty" bson:",omitempty"`
	Section      *CompositionSection  `binding:"omitempty" bson:",omitempty"`
	Meta         *Meta                `bson:",omitempty" json:"meta,omitempty"`       // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Contained    []*Resource          `bson:",omitempty" json:"contained,omitempty"`  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Identifier   []*Identifier        `bson:",omitempty" json:"identifier,omitempty"` // A version-independent identifier for the Composition. This identifier stays constant as the composition is changed over time.
	Event        *CompositionEvent    `binding:"omitempty" bson:",omitempty"`
	Subject      []*Reference         `bson:",omitempty" json:"subject,omitempty"`                   // Who or what the composition is about. The composition can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of livestock, or a set of patients that share a common exposure).
	Name         *string              `bson:",omitempty" json:"name,omitempty"`                      // A natural language name identifying the {{title}}. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Category     []*CodeableConcept   `bson:",omitempty" json:"category,omitempty"`                  // A categorization for the type of the composition - helps for indexing and searching. This may be implied by or derived from the code specified in the Composition Type.
	Title        *string              `binding:"required" bson:",omitempty" json:"title,omitempty"`  // Official human-readable label for the composition.
	Note         []*Annotation        `bson:",omitempty" json:"note,omitempty"`                      // For any additional notes.
	Id           *primitive.ObjectID  `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Extension    []*Extension         `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Language     *string              `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Encounter    *Reference           `bson:",omitempty" json:"encounter,omitempty"`                 // Describes the clinical encounter or type of care this documentation is associated with.
	Type         *CodeableConcept     `binding:"required" bson:",omitempty" json:"type,omitempty"`   // Specifies the particular kind of composition (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the composition.
	Date         *DateTime            `binding:"required" bson:",omitempty" json:"date,omitempty"`   // The composition editing time, when the composition was last logically changed by the author.
	Author       []*Reference         `binding:"required" bson:",omitempty" json:"author,omitempty"` // Identifies who is responsible for the information in the composition, not necessarily who typed it in.
	Custodian    *Reference           `bson:",omitempty" json:"custodian,omitempty"`                 // Identifies the organization or group who is responsible for ongoing maintenance of and access to the composition/document information.
	RelatesTo    []*RelatedArtifact   `bson:",omitempty" json:"relatesTo,omitempty"`                 // Relationships that this composition has with other compositions or documents that already exist.
	ResourceType string               `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *CompositionAttester) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["mode"], &out.Mode); err != nil {
		return err
	}

	if len(asMap["time"]) > 0 {
		if err := go1.Unmarshal(asMap["time"], &out.Time); err != nil {
			return err
		}

	}
	if len(asMap["party"]) > 0 {
		if err := go1.Unmarshal(asMap["party"], &out.Party); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type CompositionAttester struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Mode  *CodeableConcept `binding:"required" bson:",omitempty" json:"mode,omitempty"` // The type of attestation the authenticator offers.
	Time  *DateTime        `bson:",omitempty" json:"time,omitempty"`                    // When the composition was attested by the party.
	Party *Reference       `bson:",omitempty" json:"party,omitempty"`                   // Who attested the composition in the specified way.
	Id    *string          `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *CompositionSection) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["emptyReason"]) > 0 {
		if err := go1.Unmarshal(asMap["emptyReason"], &out.EmptyReason); err != nil {
			return err
		}

	}
	if len(asMap["section"]) > 0 {
		if err := go1.Unmarshal(asMap["section"], &out.Section); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["orderedBy"]) > 0 {
		if err := go1.Unmarshal(asMap["orderedBy"], &out.OrderedBy); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["entry"]) > 0 {
		if err := go1.Unmarshal(asMap["entry"], &out.Entry); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["focus"]) > 0 {
		if err := go1.Unmarshal(asMap["focus"], &out.Focus); err != nil {
			return err
		}

	}
	return nil
}

type CompositionSection struct {
	EmptyReason       *CodeableConcept `bson:",omitempty" json:"emptyReason,omitempty"` // If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
	Section           interface{}
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Title     *string          `bson:",omitempty" json:"title,omitempty"`     // The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents.
	Code      *CodeableConcept `bson:",omitempty" json:"code,omitempty"`      // A code identifying the kind of content contained within the section. This must be consistent with the section title.
	OrderedBy *CodeableConcept `bson:",omitempty" json:"orderedBy,omitempty"` // Specifies the order applied to the items in the section entries.
	Text      *Narrative       `bson:",omitempty" json:"text,omitempty"`      // A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative.
	Entry     []*Reference     `bson:",omitempty" json:"entry,omitempty"`     // A reference to the actual resource from which the narrative in the section is derived.
	Id        *string          `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension     `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Author    []*Reference     `bson:",omitempty" json:"author,omitempty"`    // Identifies who is responsible for the information in this section, not necessarily who typed it in.
	Focus     *Reference       `bson:",omitempty" json:"focus,omitempty"`     // The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
}

func (out *CompositionEvent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["detail"]) > 0 {
		if err := go1.Unmarshal(asMap["detail"], &out.Detail); err != nil {
			return err
		}

	}
	return nil
}

type CompositionEvent struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Period *Period              `bson:",omitempty" json:"period,omitempty"` // The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
	Detail []*CodeableReference `bson:",omitempty" json:"detail,omitempty"` // Represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which case the procedure being documented is necessarily a "History and Physical" act. The events may be included as a code or as a reference to an other resource.
}

func (out *ConceptMap) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ConceptMap\"" {
		return fmt.Errorf("resourceType is not %s", "ConceptMap")
	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["effectivePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err != nil {
			return err
		}

	}
	if len(asMap["additionalAttribute"]) > 0 {
		if err := go1.Unmarshal(asMap["additionalAttribute"], &out.AdditionalAttribute); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["property"]) > 0 {
		if err := go1.Unmarshal(asMap["property"], &out.Property); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["endorser"]) > 0 {
		if err := go1.Unmarshal(asMap["endorser"], &out.Endorser); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["topic"]) > 0 {
		if err := go1.Unmarshal(asMap["topic"], &out.Topic); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["targetScopeUri"], &out.TargetScopeUri); err == nil {
	} else if err := go1.Unmarshal(asMap["targetScopeCanonical"], &out.TargetScopeCanonical); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["approvalDate"]) > 0 {
		if err := go1.Unmarshal(asMap["approvalDate"], &out.ApprovalDate); err != nil {
			return err
		}

	}
	if len(asMap["lastReviewDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastReviewDate"], &out.LastReviewDate); err != nil {
			return err
		}

	}
	if len(asMap["reviewer"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewer"], &out.Reviewer); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["group"]) > 0 {
		if err := go1.Unmarshal(asMap["group"], &out.Group); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["editor"]) > 0 {
		if err := go1.Unmarshal(asMap["editor"], &out.Editor); err != nil {
			return err
		}

	}
	if len(asMap["relatedArtifact"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedArtifact"], &out.RelatedArtifact); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sourceScopeUri"], &out.SourceScopeUri); err == nil {
	} else if err := go1.Unmarshal(asMap["sourceScopeCanonical"], &out.SourceScopeCanonical); err == nil {
	} else {

	}
	return nil
}

type ConceptMap struct {
	Name                *string                        `bson:",omitempty" json:"name,omitempty"`            // A natural language name identifying the concept map. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Title               *string                        `bson:",omitempty" json:"title,omitempty"`           // A short, descriptive, user-friendly title for the concept map.
	EffectivePeriod     *Period                        `bson:",omitempty" json:"effectivePeriod,omitempty"` // The period during which the ConceptMap content was or is planned to be in active use.
	AdditionalAttribute *ConceptMapAdditionalAttribute `binding:"omitempty" bson:",omitempty"`
	Identifier          []*Identifier                  `bson:",omitempty" json:"identifier,omitempty"`     // A formal identifier that is used to identify this concept map when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Purpose             *string                        `bson:",omitempty" json:"purpose,omitempty"`        // Explanation of why this concept map is needed and why it has been designed as it has.
	CopyrightLabel      *string                        `bson:",omitempty" json:"copyrightLabel,omitempty"` // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Property            *ConceptMapProperty            `binding:"omitempty" bson:",omitempty"`
	Extension           []*Extension                   `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Url                 *string                        `bson:",omitempty" json:"url,omitempty"`       // An absolute URI that is used to identify this concept map when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this concept map is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the concept map is stored on different servers.
	ConceptMapVersionAlgorithmx
	Contact      []*ContactDetail   `bson:",omitempty" json:"contact,omitempty"`                   // Contact details to assist a user in finding and communicating with the publisher.
	Copyright    *string            `bson:",omitempty" json:"copyright,omitempty"`                 // A copyright statement relating to the concept map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the concept map.
	Author       []*ContactDetail   `bson:",omitempty" json:"author,omitempty"`                    // An individiual or organization primarily involved in the creation and maintenance of the ConceptMap.
	Endorser     []*ContactDetail   `bson:",omitempty" json:"endorser,omitempty"`                  // An individual or organization asserted by the publisher to be responsible for officially endorsing the ConceptMap for use in some setting.
	Status       *string            `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this concept map. Enables tracking the life-cycle of the content.
	Meta         *Meta              `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Version      *string            `bson:",omitempty" json:"version,omitempty"`                   // The identifier that is used to identify this version of the concept map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the concept map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Experimental *bool              `bson:",omitempty" json:"experimental,omitempty"`              // A Boolean value to indicate that this concept map is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Description  *string            `bson:",omitempty" json:"description,omitempty"`               // A free text natural language description of the concept map from a consumer's perspective.
	Topic        []*CodeableConcept `bson:",omitempty" json:"topic,omitempty"`                     // Descriptions related to the content of the ConceptMap. Topics provide a high-level categorization as well as keywords for the ConceptMap that can be useful for filtering and searching.
	ConceptMapTargetScopex
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`          // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Text              *Narrative          `bson:",omitempty" json:"text,omitempty"`           // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Date              *DateTime           `bson:",omitempty" json:"date,omitempty"`           // The date  (and optionally time) when the concept map was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the concept map changes.
	Publisher         *string             `bson:",omitempty" json:"publisher,omitempty"`      // The name of the organization or individual responsible for the release and ongoing maintenance of the concept map.
	ApprovalDate      *Date               `bson:",omitempty" json:"approvalDate,omitempty"`   // The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
	LastReviewDate    *Date               `bson:",omitempty" json:"lastReviewDate,omitempty"` // The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
	Reviewer          []*ContactDetail    `bson:",omitempty" json:"reviewer,omitempty"`       // An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the ConceptMap.
	ImplicitRules     *string             `bson:",omitempty" json:"implicitRules,omitempty"`  // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language          *string             `bson:",omitempty" json:"language,omitempty"`       // The base language in which the resource is written.
	Contained         []*Resource         `bson:",omitempty" json:"contained,omitempty"`      // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Group             *ConceptMapGroup    `binding:"omitempty" bson:",omitempty"`
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	UseContext      []*UsageContext    `bson:",omitempty" json:"useContext,omitempty"`      // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate concept map instances.
	Jurisdiction    []*CodeableConcept `bson:",omitempty" json:"jurisdiction,omitempty"`    // A legal or geographic region in which the concept map is intended to be used.
	Editor          []*ContactDetail   `bson:",omitempty" json:"editor,omitempty"`          // An individual or organization primarily responsible for internal coherence of the ConceptMap.
	RelatedArtifact []*RelatedArtifact `bson:",omitempty" json:"relatedArtifact,omitempty"` // Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts.
	ConceptMapSourceScopex
	ResourceType string `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ConceptMapAdditionalAttribute) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["uri"]) > 0 {
		if err := go1.Unmarshal(asMap["uri"], &out.Uri); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	return nil
}

type ConceptMapAdditionalAttribute struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code        *string `binding:"required" bson:",omitempty" json:"code,omitempty"` // A code that is used to identify this additional data attribute. The code is used internally in ConceptMap.group.element.target.dependsOn.attribute and ConceptMap.group.element.target.product.attribute.
	Uri         *string `bson:",omitempty" json:"uri,omitempty"`                     // Reference to the formal definition of the source/target data element. For elements defined by the FHIR specification, or using a FHIR logical model, the correct format is {canonical-url}#{element-id}.
	Description *string `bson:",omitempty" json:"description,omitempty"`             // A description of the additional attribute and/or the data element it refers to - why it is defined, and how the value might be used in mappings, and a discussion of issues associated with the use of the data element.
	Type        *string `binding:"required" bson:",omitempty" json:"type,omitempty"` // The type of the source data contained in this concept map for this data element.
}

func (out *ConceptMapProperty) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["system"]) > 0 {
		if err := go1.Unmarshal(asMap["system"], &out.System); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["uri"]) > 0 {
		if err := go1.Unmarshal(asMap["uri"], &out.Uri); err != nil {
			return err
		}

	}
	return nil
}

type ConceptMapProperty struct {
	Description       *string      `bson:",omitempty" json:"description,omitempty"`             // A description of the property - why it is defined, and how its value might be used.
	Type              *string      `binding:"required" bson:",omitempty" json:"type,omitempty"` // The type of the property value.
	System            *string      `bson:",omitempty" json:"system,omitempty"`                  // The CodeSystem that defines the codes from which values of type ```code``` in property values.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`       /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code *string `binding:"required" bson:",omitempty" json:"code,omitempty"` // A code that is used to identify the property. The code is used internally (in ConceptMap.group.element.target.property.code) and also in the $translate operation.
	Uri  *string `bson:",omitempty" json:"uri,omitempty"`                     // Reference to the formal meaning of the property.
}
type ConceptMapVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}
type ConceptMapTargetScopex struct {
	TargetScopeUri       string `bson:",omitempty" json:"targetScopeUri,omitempty"`
	TargetScopeCanonical string `bson:",omitempty" json:"targetScopeCanonical,omitempty"`
}

func (out *ConceptMapGroup) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["target"]) > 0 {
		if err := go1.Unmarshal(asMap["target"], &out.Target); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["element"], &out.Element); err != nil {
		return err
	}

	if len(asMap["unmapped"]) > 0 {
		if err := go1.Unmarshal(asMap["unmapped"], &out.UnMapped); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["source"]) > 0 {
		if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
			return err
		}

	}
	return nil
}

type ConceptMapGroup struct {
	Target            *string                  `bson:",omitempty" json:"target,omitempty"` // An absolute URI that identifies the target system that the concepts will be mapped to.
	Element           *ConceptMapGroupElement  `binding:"omitempty" bson:",omitempty"`
	UnMapped          *ConceptMapGroupUnmapped `binding:"omitempty" bson:",omitempty"`
	Id                *string                  `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension             `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension             `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Source *string `bson:",omitempty" json:"source,omitempty"` // An absolute URI that identifies the source system where the concepts to be mapped are defined.
}

func (out *ConceptMapGroupElement) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["noMap"]) > 0 {
		if err := go1.Unmarshal(asMap["noMap"], &out.NoMap); err != nil {
			return err
		}

	}
	if len(asMap["target"]) > 0 {
		if err := go1.Unmarshal(asMap["target"], &out.Target); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["display"]) > 0 {
		if err := go1.Unmarshal(asMap["display"], &out.Display); err != nil {
			return err
		}

	}
	if len(asMap["valueSet"]) > 0 {
		if err := go1.Unmarshal(asMap["valueSet"], &out.ValueSet); err != nil {
			return err
		}

	}
	return nil
}

type ConceptMapGroupElement struct {
	NoMap             *bool                         `bson:",omitempty" json:"noMap,omitempty"` // If noMap = true this indicates that no mapping to a target concept exists for this source concept.
	Target            *ConceptMapGroupElementTarget `binding:"omitempty" bson:",omitempty"`
	Id                *string                       `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                  `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                  `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code     *string `bson:",omitempty" json:"code,omitempty"`     // Identity (code or path) or the element/item being mapped.
	Display  *string `bson:",omitempty" json:"display,omitempty"`  // The display for the code. The display is only provided to help editors when editing the concept map.
	ValueSet *string `bson:",omitempty" json:"valueSet,omitempty"` // The set of concepts from the ConceptMap.group.source code system which are all being mapped to the target as part of this mapping rule.
}

func (out *ConceptMapGroupElementTarget) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["comment"]) > 0 {
		if err := go1.Unmarshal(asMap["comment"], &out.Comment); err != nil {
			return err
		}

	}
	if len(asMap["dependsOn"]) > 0 {
		if err := go1.Unmarshal(asMap["dependsOn"], &out.DependsOn); err != nil {
			return err
		}

	}
	if len(asMap["product"]) > 0 {
		if err := go1.Unmarshal(asMap["product"], &out.Product); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["display"]) > 0 {
		if err := go1.Unmarshal(asMap["display"], &out.Display); err != nil {
			return err
		}

	}
	if len(asMap["valueSet"]) > 0 {
		if err := go1.Unmarshal(asMap["valueSet"], &out.ValueSet); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["relationship"], &out.Relationship); err != nil {
		return err
	}

	if len(asMap["property"]) > 0 {
		if err := go1.Unmarshal(asMap["property"], &out.Property); err != nil {
			return err
		}

	}
	return nil
}

type ConceptMapGroupElementTarget struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Comment      *string                                `bson:",omitempty" json:"comment,omitempty"` // A description of status/issues in mapping that conveys additional information not represented in  the structured data.
	DependsOn    *ConceptMapGroupElementTargetDependsOn `binding:"omitempty" bson:",omitempty"`
	Product      interface{}
	Code         *string                               `bson:",omitempty" json:"code,omitempty"`                            // Identity (code or path) or the element/item that the map refers to.
	Display      *string                               `bson:",omitempty" json:"display,omitempty"`                         // The display for the code. The display is only provided to help editors when editing the concept map.
	ValueSet     *string                               `bson:",omitempty" json:"valueSet,omitempty"`                        // The set of concepts from the ConceptMap.group.target code system which are all being mapped to as part of this mapping rule. The effect of using this data element is the same as having multiple ConceptMap.group.element.target elements with one for each concept in the ConceptMap.group.element.target.valueSet value set.
	Relationship *string                               `binding:"required" bson:",omitempty" json:"relationship,omitempty"` // The relationship between the source and target concepts. The relationship is read from source to target (e.g. source-is-narrower-than-target).
	Property     *ConceptMapGroupElementTargetProperty `binding:"omitempty" bson:",omitempty"`
}

func (out *ConceptMapGroupElementTargetDependsOn) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["attribute"], &out.Attribute); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueCode"], &out.ValueCode); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCoding"], &out.ValueCoding); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else {

	}
	if len(asMap["valueSet"]) > 0 {
		if err := go1.Unmarshal(asMap["valueSet"], &out.ValueSet); err != nil {
			return err
		}

	}
	return nil
}

type ConceptMapGroupElementTargetDependsOn struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Attribute *string `binding:"required" bson:",omitempty" json:"attribute,omitempty"` // A reference to the additional attribute that holds a value the map depends on.
	ConceptMapGroupElementTargetDependsOnValuex
	ValueSet *string `bson:",omitempty" json:"valueSet,omitempty"` // This mapping applies if the data element value is a code from this value set.
}
type ConceptMapGroupElementTargetDependsOnValuex struct {
	ValueCode     string   `bson:",omitempty" json:"valueCode,omitempty"`
	ValueCoding   Coding   `bson:",omitempty" json:"valueCoding,omitempty"`
	ValueString   string   `bson:",omitempty" json:"valueString,omitempty"`
	ValueBoolean  bool     `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueQuantity Quantity `bson:",omitempty" json:"valueQuantity,omitempty"`
}

func (out *ConceptMapGroupElementTargetProperty) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueCoding"], &out.ValueCoding); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDateTime"], &out.ValueDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDecimal"], &out.ValueDecimal); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCode"], &out.ValueCode); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type ConceptMapGroupElementTargetProperty struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code *string `binding:"required" bson:",omitempty" json:"code,omitempty"` // A reference to a mapping property defined in ConceptMap.property.
	ConceptMapGroupElementTargetPropertyValuex
	Id        *string      `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}
type ConceptMapGroupElementTargetPropertyValuex struct {
	ValueCoding   Coding   `bson:",omitempty" json:"valueCoding,omitempty"`
	ValueString   string   `bson:",omitempty" json:"valueString,omitempty"`
	ValueInteger  int      `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueBoolean  bool     `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueDateTime DateTime `bson:",omitempty" json:"valueDateTime,omitempty"`
	ValueDecimal  float64  `bson:",omitempty" json:"valueDecimal,omitempty"`
	ValueCode     string   `bson:",omitempty" json:"valueCode,omitempty"`
}

func (out *ConceptMapGroupUnmapped) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["valueSet"]) > 0 {
		if err := go1.Unmarshal(asMap["valueSet"], &out.ValueSet); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["mode"], &out.Mode); err != nil {
		return err
	}

	if len(asMap["display"]) > 0 {
		if err := go1.Unmarshal(asMap["display"], &out.Display); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["relationship"]) > 0 {
		if err := go1.Unmarshal(asMap["relationship"], &out.Relationship); err != nil {
			return err
		}

	}
	if len(asMap["otherMap"]) > 0 {
		if err := go1.Unmarshal(asMap["otherMap"], &out.OtherMap); err != nil {
			return err
		}

	}
	return nil
}

type ConceptMapGroupUnmapped struct {
	ValueSet          *string      `bson:",omitempty" json:"valueSet,omitempty"`          // The set of fixed codes to use when the mode = 'fixed'  - all unmapped codes are mapped to each of the fixed codes.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Mode         *string `binding:"required" bson:",omitempty" json:"mode,omitempty"` // Defines which action to take if there is no match for the source concept in the target system designated for the group. One of 3 actions are possible: use the unmapped source code (this is useful when doing a mapping between versions, and only a few codes have changed), use a fixed code (a default code), or alternatively, a reference to a different concept map can be provided (by canonical URL).
	Display      *string `bson:",omitempty" json:"display,omitempty"`                 // The display for the code. The display is only provided to help editors when editing the concept map.
	Code         *string `bson:",omitempty" json:"code,omitempty"`                    // The fixed code to use when the mode = 'fixed'  - all unmapped codes are mapped to a single fixed code.
	Relationship *string `bson:",omitempty" json:"relationship,omitempty"`            // The default relationship value to apply between the source and target concepts when the source code is unmapped and the mode is 'fixed' or 'use-source-code'.
	OtherMap     *string `bson:",omitempty" json:"otherMap,omitempty"`                // The canonical reference to an additional ConceptMap resource instance to use for mapping if this ConceptMap resource contains no matching mapping for the source concept.
}
type ConceptMapSourceScopex struct {
	SourceScopeUri       string `bson:",omitempty" json:"sourceScopeUri,omitempty"`
	SourceScopeCanonical string `bson:",omitempty" json:"sourceScopeCanonical,omitempty"`
}

func (out *Condition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Condition\"" {
		return fmt.Errorf("resourceType is not %s", "Condition")
	}
	if len(asMap["bodySite"]) > 0 {
		if err := go1.Unmarshal(asMap["bodySite"], &out.BodySite); err != nil {
			return err
		}

	}
	if len(asMap["recordedDate"]) > 0 {
		if err := go1.Unmarshal(asMap["recordedDate"], &out.RecordedDate); err != nil {
			return err
		}

	}
	if len(asMap["participant"]) > 0 {
		if err := go1.Unmarshal(asMap["participant"], &out.Participant); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["clinicalStatus"], &out.ClinicalStatus); err != nil {
		return err
	}

	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["severity"]) > 0 {
		if err := go1.Unmarshal(asMap["severity"], &out.Severity); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["onsetDateTime"], &out.OnsetDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["onsetAge"], &out.OnsetAge); err == nil {
	} else if err := go1.Unmarshal(asMap["onsetPeriod"], &out.OnsetPeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["onsetRange"], &out.OnsetRange); err == nil {
	} else if err := go1.Unmarshal(asMap["onsetString"], &out.OnsetString); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["abatementDateTime"], &out.AbatementDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["abatementAge"], &out.AbatementAge); err == nil {
	} else if err := go1.Unmarshal(asMap["abatementPeriod"], &out.AbatementPeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["abatementRange"], &out.AbatementRange); err == nil {
	} else if err := go1.Unmarshal(asMap["abatementString"], &out.AbatementString); err == nil {
	} else {

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["verificationStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["verificationStatus"], &out.VerificationStatus); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["stage"]) > 0 {
		if err := go1.Unmarshal(asMap["stage"], &out.Stage); err != nil {
			return err
		}

	}
	if len(asMap["evidence"]) > 0 {
		if err := go1.Unmarshal(asMap["evidence"], &out.Evidence); err != nil {
			return err
		}

	}
	return nil
}

type Condition struct {
	BodySite          []*CodeableConcept    `bson:",omitempty" json:"bodySite,omitempty"`     // The anatomical location where this condition manifests itself.
	RecordedDate      *DateTime             `bson:",omitempty" json:"recordedDate,omitempty"` // The recordedDate represents when this particular Condition record was created in the system, which is often a system-generated date.
	Participant       *ConditionParticipant `binding:"omitempty" bson:",omitempty"`
	Meta              *Meta                 `bson:",omitempty" json:"meta,omitempty"`                              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules     *string               `bson:",omitempty" json:"implicitRules,omitempty"`                     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text              *Narrative            `bson:",omitempty" json:"text,omitempty"`                              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Code              *CodeableConcept      `bson:",omitempty" json:"code,omitempty"`                              // Identification of the condition, problem or diagnosis.
	ClinicalStatus    *CodeableConcept      `binding:"required" bson:",omitempty" json:"clinicalStatus,omitempty"` // The clinical status of the condition.
	Encounter         *Reference            `bson:",omitempty" json:"encounter,omitempty"`                         // The Encounter during which this Condition was created or to which the creation of this record is tightly associated.
	Note              []*Annotation         `bson:",omitempty" json:"note,omitempty"`                              // Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
	Id                *primitive.ObjectID   `bson:"_id,omitempty" json:"id,omitempty"`                             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Contained         []*Resource           `bson:",omitempty" json:"contained,omitempty"`                         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension         []*Extension          `bson:",omitempty" json:"extension,omitempty"`                         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension          `bson:",omitempty" json:"modifierExtension,omitempty"`                 /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Severity *CodeableConcept `bson:",omitempty" json:"severity,omitempty"`                   // A subjective assessment of the severity of the condition as evaluated by the clinician.
	Subject  *Reference       `binding:"required" bson:",omitempty" json:"subject,omitempty"` // Indicates the patient or group who the condition record is associated with.
	ConditionOnsetx
	ConditionAbatementx
	Language           *string              `bson:",omitempty" json:"language,omitempty"`           // The base language in which the resource is written.
	Identifier         []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`         // Business identifiers assigned to this condition by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
	VerificationStatus *CodeableConcept     `bson:",omitempty" json:"verificationStatus,omitempty"` // The verification status to support the clinical status of the condition.  The verification status pertains to the condition, itself, not to any specific condition attribute.
	Category           []*CodeableConcept   `bson:",omitempty" json:"category,omitempty"`           // A category assigned to the condition.
	Stage              *ConditionStage      `binding:"omitempty" bson:",omitempty"`
	Evidence           []*CodeableReference `bson:",omitempty" json:"evidence,omitempty"` // Supporting evidence / manifestations that are the basis of the Condition's verification status, such as evidence that confirmed or refuted the condition.
	ResourceType       string               `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ConditionParticipant) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
		return err
	}

	return nil
}

type ConditionParticipant struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Function *CodeableConcept `bson:",omitempty" json:"function,omitempty"`                 // Distinguishes the type of involvement of the actor in the activities related to the condition.
	Actor    *Reference       `binding:"required" bson:",omitempty" json:"actor,omitempty"` // Indicates who or what participated in the activities related to the condition.
}
type ConditionOnsetx struct {
	OnsetDateTime DateTime `bson:",omitempty" json:"onsetDateTime,omitempty"`
	OnsetAge      Age      `bson:",omitempty" json:"onsetAge,omitempty"`
	OnsetPeriod   Period   `bson:",omitempty" json:"onsetPeriod,omitempty"`
	OnsetRange    Range    `bson:",omitempty" json:"onsetRange,omitempty"`
	OnsetString   string   `bson:",omitempty" json:"onsetString,omitempty"`
}
type ConditionAbatementx struct {
	AbatementDateTime DateTime `bson:",omitempty" json:"abatementDateTime,omitempty"`
	AbatementAge      Age      `bson:",omitempty" json:"abatementAge,omitempty"`
	AbatementPeriod   Period   `bson:",omitempty" json:"abatementPeriod,omitempty"`
	AbatementRange    Range    `bson:",omitempty" json:"abatementRange,omitempty"`
	AbatementString   string   `bson:",omitempty" json:"abatementString,omitempty"`
}

func (out *ConditionStage) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["summary"]) > 0 {
		if err := go1.Unmarshal(asMap["summary"], &out.Summary); err != nil {
			return err
		}

	}
	if len(asMap["assessment"]) > 0 {
		if err := go1.Unmarshal(asMap["assessment"], &out.Assessment); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ConditionStage struct {
	Summary           *CodeableConcept `bson:",omitempty" json:"summary,omitempty"`           // A simple summary of the stage such as "Stage 3" or "Early Onset". The determination of the stage is disease-specific, such as cancer, retinopathy of prematurity, kidney diseases, Alzheimer's, or Parkinson disease.
	Assessment        []*Reference     `bson:",omitempty" json:"assessment,omitempty"`        // Reference to a formal record of the evidence on which the staging assessment is based.
	Type              *CodeableConcept `bson:",omitempty" json:"type,omitempty"`              // The kind of staging, such as pathological or clinical staging.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *ConditionDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ConditionDefinition\"" {
		return fmt.Errorf("resourceType is not %s", "ConditionDefinition")
	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["severity"]) > 0 {
		if err := go1.Unmarshal(asMap["severity"], &out.Severity); err != nil {
			return err
		}

	}
	if len(asMap["team"]) > 0 {
		if err := go1.Unmarshal(asMap["team"], &out.Team); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["stage"]) > 0 {
		if err := go1.Unmarshal(asMap["stage"], &out.Stage); err != nil {
			return err
		}

	}
	if len(asMap["hasSeverity"]) > 0 {
		if err := go1.Unmarshal(asMap["hasSeverity"], &out.HasSeverity); err != nil {
			return err
		}

	}
	if len(asMap["medication"]) > 0 {
		if err := go1.Unmarshal(asMap["medication"], &out.Medication); err != nil {
			return err
		}

	}
	if len(asMap["subtitle"]) > 0 {
		if err := go1.Unmarshal(asMap["subtitle"], &out.Subtitle); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["plan"]) > 0 {
		if err := go1.Unmarshal(asMap["plan"], &out.Plan); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["hasBodySite"]) > 0 {
		if err := go1.Unmarshal(asMap["hasBodySite"], &out.HasBodySite); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["precondition"]) > 0 {
		if err := go1.Unmarshal(asMap["precondition"], &out.Precondition); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["hasStage"]) > 0 {
		if err := go1.Unmarshal(asMap["hasStage"], &out.HasStage); err != nil {
			return err
		}

	}
	if len(asMap["definition"]) > 0 {
		if err := go1.Unmarshal(asMap["definition"], &out.Definition); err != nil {
			return err
		}

	}
	if len(asMap["questionnaire"]) > 0 {
		if err := go1.Unmarshal(asMap["questionnaire"], &out.Questionnaire); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["bodySite"]) > 0 {
		if err := go1.Unmarshal(asMap["bodySite"], &out.BodySite); err != nil {
			return err
		}

	}
	if len(asMap["observation"]) > 0 {
		if err := go1.Unmarshal(asMap["observation"], &out.Observation); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	return nil
}

type ConditionDefinition struct {
	Identifier    []*Identifier                  `bson:",omitempty" json:"identifier,omitempty"`   // A formal identifier that is used to identify this condition definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Experimental  *bool                          `bson:",omitempty" json:"experimental,omitempty"` // A Boolean value to indicate that this condition definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Severity      *CodeableConcept               `bson:",omitempty" json:"severity,omitempty"`     // A subjective assessment of the severity of the condition as evaluated by the clinician.
	Team          []*Reference                   `bson:",omitempty" json:"team,omitempty"`         // Appropriate team for this condition.
	Meta          *Meta                          `bson:",omitempty" json:"meta,omitempty"`         // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Extension     []*Extension                   `bson:",omitempty" json:"extension,omitempty"`    // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Date          *DateTime                      `bson:",omitempty" json:"date,omitempty"`         // The date  (and optionally time) when the condition definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the condition definition changes.
	UseContext    []*UsageContext                `bson:",omitempty" json:"useContext,omitempty"`   // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate condition definition instances.
	Jurisdiction  []*CodeableConcept             `bson:",omitempty" json:"jurisdiction,omitempty"` // A legal or geographic region in which the condition definition is intended to be used.
	Stage         *CodeableConcept               `bson:",omitempty" json:"stage,omitempty"`        // Clinical stage or grade of a condition. May include formal severity assessments.
	HasSeverity   *bool                          `bson:",omitempty" json:"hasSeverity,omitempty"`  // Whether Severity is appropriate to collect for this condition.
	Medication    *ConditionDefinitionMedication `binding:"omitempty" bson:",omitempty"`
	Subtitle      *string                        `bson:",omitempty" json:"subtitle,omitempty"`                  // An explanatory or alternate title for the event definition giving additional information about its content.
	Status        *string                        `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this condition definition. Enables tracking the life-cycle of the content.
	Name          *string                        `bson:",omitempty" json:"name,omitempty"`                      // A natural language name identifying the condition definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Description   *string                        `bson:",omitempty" json:"description,omitempty"`               // A free text natural language description of the condition definition from a consumer's perspective.
	Code          *CodeableConcept               `binding:"required" bson:",omitempty" json:"code,omitempty"`   // Identification of the condition, problem or diagnosis.
	Plan          *ConditionDefinitionPlan       `binding:"omitempty" bson:",omitempty"`
	ImplicitRules *string                        `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language      *string                        `bson:",omitempty" json:"language,omitempty"`      // The base language in which the resource is written.
	Version       *string                        `bson:",omitempty" json:"version,omitempty"`       // The identifier that is used to identify this version of the condition definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the condition definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	ConditionDefinitionVersionAlgorithmx
	HasBodySite       *bool        `bson:",omitempty" json:"hasBodySite,omitempty"`       // Whether bodySite is appropriate to collect for this condition.
	Contained         []*Resource  `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Url           *string                           `bson:",omitempty" json:"url,omitempty"` // An absolute URI that is used to identify this condition definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this condition definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the condition definition is stored on different servers.
	Precondition  *ConditionDefinitionPrecondition  `binding:"omitempty" bson:",omitempty"`
	Id            *primitive.ObjectID               `bson:"_id,omitempty" json:"id,omitempty"`      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Text          *Narrative                        `bson:",omitempty" json:"text,omitempty"`       // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	HasStage      *bool                             `bson:",omitempty" json:"hasStage,omitempty"`   // Whether stage is appropriate to collect for this condition.
	Definition    []*string                         `bson:",omitempty" json:"definition,omitempty"` // Formal definitions of the condition. These may be references to ontologies, published clinical protocols or research papers.
	Questionnaire *ConditionDefinitionQuestionnaire `binding:"omitempty" bson:",omitempty"`
	Title         *string                           `bson:",omitempty" json:"title,omitempty"`    // A short, descriptive, user-friendly title for the condition definition.
	BodySite      *CodeableConcept                  `bson:",omitempty" json:"bodySite,omitempty"` // The anatomical location where this condition manifests itself.
	Observation   *ConditionDefinitionObservation   `binding:"omitempty" bson:",omitempty"`
	Publisher     *string                           `bson:",omitempty" json:"publisher,omitempty"` // The name of the organization or individual responsible for the release and ongoing maintenance of the condition definition.
	Contact       []*ContactDetail                  `bson:",omitempty" json:"contact,omitempty"`   // Contact details to assist a user in finding and communicating with the publisher.
	ResourceType  string                            `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ConditionDefinitionMedication) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	return nil
}

type ConditionDefinitionMedication struct {
	Code              *CodeableConcept `bson:",omitempty" json:"code,omitempty"`              // Code for relevant Medication.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Category *CodeableConcept `bson:",omitempty" json:"category,omitempty"` // Category that is relevant.
}

func (out *ConditionDefinitionPlan) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["role"]) > 0 {
		if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
		return err
	}

	return nil
}

type ConditionDefinitionPlan struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Role      *CodeableConcept `bson:",omitempty" json:"role,omitempty"`                         // Use for the plan.
	Reference *Reference       `binding:"required" bson:",omitempty" json:"reference,omitempty"` // The actual plan.
}
type ConditionDefinitionVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *ConditionDefinitionPrecondition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else {

	}
	return nil
}

type ConditionDefinitionPrecondition struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *string          `binding:"required" bson:",omitempty" json:"type,omitempty"` // Kind of pre-condition.
	Code *CodeableConcept `binding:"required" bson:",omitempty" json:"code,omitempty"` // Code for relevant Observation.
	ConditionDefinitionPreconditionValuex
}
type ConditionDefinitionPreconditionValuex struct {
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
}

func (out *ConditionDefinitionQuestionnaire) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
		return err
	}

	return nil
}

type ConditionDefinitionQuestionnaire struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Purpose   *string    `binding:"required" bson:",omitempty" json:"purpose,omitempty"`   // Use of the questionnaire.
	Reference *Reference `binding:"required" bson:",omitempty" json:"reference,omitempty"` // Specific Questionnaire.
}

func (out *ConditionDefinitionObservation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type ConditionDefinitionObservation struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Category  *CodeableConcept `bson:",omitempty" json:"category,omitempty"`  // Category that is relevant.
	Code      *CodeableConcept `bson:",omitempty" json:"code,omitempty"`      // Code for relevant Observation.
	Id        *string          `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension     `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *Consent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Consent\"" {
		return fmt.Errorf("resourceType is not %s", "Consent")
	}
	if len(asMap["grantee"]) > 0 {
		if err := go1.Unmarshal(asMap["grantee"], &out.Grantee); err != nil {
			return err
		}

	}
	if len(asMap["sourceReference"]) > 0 {
		if err := go1.Unmarshal(asMap["sourceReference"], &out.SourceReference); err != nil {
			return err
		}

	}
	if len(asMap["regulatoryBasis"]) > 0 {
		if err := go1.Unmarshal(asMap["regulatoryBasis"], &out.RegulatoryBasis); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["manager"]) > 0 {
		if err := go1.Unmarshal(asMap["manager"], &out.Manager); err != nil {
			return err
		}

	}
	if len(asMap["controller"]) > 0 {
		if err := go1.Unmarshal(asMap["controller"], &out.Controller); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["verification"]) > 0 {
		if err := go1.Unmarshal(asMap["verification"], &out.Verification); err != nil {
			return err
		}

	}
	if len(asMap["decision"]) > 0 {
		if err := go1.Unmarshal(asMap["decision"], &out.Decision); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["grantor"]) > 0 {
		if err := go1.Unmarshal(asMap["grantor"], &out.Grantor); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["sourceAttachment"]) > 0 {
		if err := go1.Unmarshal(asMap["sourceAttachment"], &out.SourceAttachment); err != nil {
			return err
		}

	}
	if len(asMap["policyBasis"]) > 0 {
		if err := go1.Unmarshal(asMap["policyBasis"], &out.PolicyBasis); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["policyText"]) > 0 {
		if err := go1.Unmarshal(asMap["policyText"], &out.PolicyText); err != nil {
			return err
		}

	}
	if len(asMap["provision"]) > 0 {
		if err := go1.Unmarshal(asMap["provision"], &out.Provision); err != nil {
			return err
		}

	}
	return nil
}

type Consent struct {
	Grantee           []*Reference       `bson:",omitempty" json:"grantee,omitempty"`           // The entity responsible for complying with the Consent Directive, including any obligations or limitations on authorizations and enforcement of prohibitions.
	SourceReference   []*Reference       `bson:",omitempty" json:"sourceReference,omitempty"`   // A reference to a consent that links back to such a source, a reference to a document repository (e.g. XDS) that stores the original consent document.
	RegulatoryBasis   []*CodeableConcept `bson:",omitempty" json:"regulatoryBasis,omitempty"`   // A set of codes that indicate the regulatory basis (if any) that this consent supports.
	Meta              *Meta              `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Text              *Narrative         `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension         []*Extension       `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Date             *Date                `bson:",omitempty" json:"date,omitempty"`       // Date the consent instance was agreed to.
	Manager          []*Reference         `bson:",omitempty" json:"manager,omitempty"`    // The actor that manages the consent through its lifecycle.
	Controller       []*Reference         `bson:",omitempty" json:"controller,omitempty"` // The actor that controls/enforces the access according to the consent.
	Id               *primitive.ObjectID  `bson:"_id,omitempty" json:"id,omitempty"`      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language         *string              `bson:",omitempty" json:"language,omitempty"`   // The base language in which the resource is written.
	Verification     *ConsentVerification `binding:"omitempty" bson:",omitempty"`
	Decision         *string              `bson:",omitempty" json:"decision,omitempty"`                  // Action to take - permit or deny - as default.
	Status           *string              `binding:"required" bson:",omitempty" json:"status,omitempty"` // Indicates the current state of this Consent resource.
	Grantor          []*Reference         `bson:",omitempty" json:"grantor,omitempty"`                   // The entity responsible for granting the rights listed in a Consent Directive.
	Identifier       []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`                // Unique identifier for this copy of the Consent Statement.
	Category         []*CodeableConcept   `bson:",omitempty" json:"category,omitempty"`                  // A classification of the type of consents found in the statement. This element supports indexing and retrieval of consent statements.
	Subject          *Reference           `bson:",omitempty" json:"subject,omitempty"`                   // The patient/healthcare practitioner or group of persons to whom this consent applies.
	Period           *Period              `bson:",omitempty" json:"period,omitempty"`                    // Effective period for this Consent Resource and all provisions unless specified in that provision.
	SourceAttachment []*Attachment        `bson:",omitempty" json:"sourceAttachment,omitempty"`          // The source on which this consent statement is based. The source might be a scanned original paper form.
	PolicyBasis      *ConsentPolicyBasis  `binding:"omitempty" bson:",omitempty"`
	ImplicitRules    *string              `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained        []*Resource          `bson:",omitempty" json:"contained,omitempty"`     // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	PolicyText       []*Reference         `bson:",omitempty" json:"policyText,omitempty"`    // A Reference to the human readable policy explaining the basis for the Consent.
	Provision        *ConsentProvision    `binding:"omitempty" bson:",omitempty"`
	ResourceType     string               `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ConsentVerification) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["verified"], &out.Verified); err != nil {
		return err
	}

	if len(asMap["verificationType"]) > 0 {
		if err := go1.Unmarshal(asMap["verificationType"], &out.VerificationType); err != nil {
			return err
		}

	}
	if len(asMap["verifiedBy"]) > 0 {
		if err := go1.Unmarshal(asMap["verifiedBy"], &out.VerifiedBy); err != nil {
			return err
		}

	}
	if len(asMap["verifiedWith"]) > 0 {
		if err := go1.Unmarshal(asMap["verifiedWith"], &out.VerifiedWith); err != nil {
			return err
		}

	}
	if len(asMap["verificationDate"]) > 0 {
		if err := go1.Unmarshal(asMap["verificationDate"], &out.VerificationDate); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ConsentVerification struct {
	Verified          *bool            `binding:"required" bson:",omitempty" json:"verified,omitempty"` // Has the instruction been verified.
	VerificationType  *CodeableConcept `bson:",omitempty" json:"verificationType,omitempty"`            // Extensible list of verification type starting with verification and re-validation.
	VerifiedBy        *Reference       `bson:",omitempty" json:"verifiedBy,omitempty"`                  // The person who conducted the verification/validation of the Grantor decision.
	VerifiedWith      *Reference       `bson:",omitempty" json:"verifiedWith,omitempty"`                // Who verified the instruction (Patient, Relative or other Authorized Person).
	VerificationDate  []*DateTime      `bson:",omitempty" json:"verificationDate,omitempty"`            // Date(s) verification was collected.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`           /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *ConsentPolicyBasis) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["reference"]) > 0 {
		if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	return nil
}

type ConsentPolicyBasis struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Reference *Reference `bson:",omitempty" json:"reference,omitempty"` // A Reference that identifies the policy the organization will enforce for this Consent.
	Url       *url.URL   `bson:",omitempty" json:"url,omitempty"`       // A URL that links to a computable version of the policy the organization will enforce for this Consent.
}

func (out *ConsentProvision) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["documentType"]) > 0 {
		if err := go1.Unmarshal(asMap["documentType"], &out.DocumentType); err != nil {
			return err
		}

	}
	if len(asMap["dataPeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["dataPeriod"], &out.DataPeriod); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["securityLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["securityLabel"], &out.SecurityLabel); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["action"]) > 0 {
		if err := go1.Unmarshal(asMap["action"], &out.Action); err != nil {
			return err
		}

	}
	if len(asMap["actor"]) > 0 {
		if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["data"]) > 0 {
		if err := go1.Unmarshal(asMap["data"], &out.Data); err != nil {
			return err
		}

	}
	if len(asMap["provision"]) > 0 {
		if err := go1.Unmarshal(asMap["provision"], &out.Provision); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["resourceType"]) > 0 {
		if err := go1.Unmarshal(asMap["resourceType"], &out.ResourceType); err != nil {
			return err
		}

	}
	if len(asMap["expression"]) > 0 {
		if err := go1.Unmarshal(asMap["expression"], &out.Expression); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type ConsentProvision struct {
	DocumentType      []*Coding    `bson:",omitempty" json:"documentType,omitempty"`      // The documentType(s) covered by this provision. The type can be a CDA document, or some other type that indicates what sort of information the consent relates to.
	DataPeriod        *Period      `bson:",omitempty" json:"dataPeriod,omitempty"`        // Clinical or Operational Relevant period of time that bounds the data controlled by this provision.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	SecurityLabel []*Coding              `bson:",omitempty" json:"securityLabel,omitempty"` // A security label, comprised of 0..* security label fields (Privacy tags), which define which resources are controlled by this exception.
	Purpose       []*Coding              `bson:",omitempty" json:"purpose,omitempty"`       // The context of the activities a user is taking - why the user is accessing the data - that are controlled by this provision.
	Action        []*CodeableConcept     `bson:",omitempty" json:"action,omitempty"`        // Actions controlled by this provision.
	Actor         *ConsentProvisionActor `binding:"omitempty" bson:",omitempty"`
	Code          []*CodeableConcept     `bson:",omitempty" json:"code,omitempty"` // If this code is found in an instance, then the provision applies.
	Data          *ConsentProvisionData  `binding:"omitempty" bson:",omitempty"`
	Provision     interface{}
	Id            *string      `bson:"_id,omitempty" json:"id,omitempty"`        // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Period        *Period      `bson:",omitempty" json:"period,omitempty"`       // Timeframe for this provision.
	ResourceType  []*Coding    `bson:",omitempty" json:"resourceType,omitempty"` // The resourceType(s) covered by this provision. The type can be a FHIR resource type or a profile on a type that indicates what information the consent relates to.
	Expression    *Expression  `bson:",omitempty" json:"expression,omitempty"`   // A computable (FHIRPath or other) definition of what is controlled by this consent.
	Extension     []*Extension `bson:",omitempty" json:"extension,omitempty"`    // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *ConsentProvisionActor) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["reference"]) > 0 {
		if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["role"]) > 0 {
		if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
			return err
		}

	}
	return nil
}

type ConsentProvisionActor struct {
	Reference         *Reference   `bson:",omitempty" json:"reference,omitempty"`         // The resource that identifies the actor. To identify actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Role *CodeableConcept `bson:",omitempty" json:"role,omitempty"` // How the individual is involved in the resources content that is described in the exception.
}

func (out *ConsentProvisionData) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["meaning"], &out.Meaning); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type ConsentProvisionData struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Meaning   *string      `binding:"required" bson:",omitempty" json:"meaning,omitempty"`   // How the resource reference is interpreted when testing consent restrictions.
	Reference *Reference   `binding:"required" bson:",omitempty" json:"reference,omitempty"` // A reference to a specific resource that defines which resources are covered by this consent.
	Id        *string      `bson:"_id,omitempty" json:"id,omitempty"`                        // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"`                    // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *Contract) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Contract\"" {
		return fmt.Errorf("resourceType is not %s", "Contract")
	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesUri"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesUri"], &out.InstantiatesUri); err != nil {
			return err
		}

	}
	if len(asMap["relevantHistory"]) > 0 {
		if err := go1.Unmarshal(asMap["relevantHistory"], &out.RelevantHistory); err != nil {
			return err
		}

	}
	if len(asMap["friendly"]) > 0 {
		if err := go1.Unmarshal(asMap["friendly"], &out.Friendly); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesCanonical"], &out.InstantiatesCanonical); err != nil {
			return err
		}

	}
	if len(asMap["expirationType"]) > 0 {
		if err := go1.Unmarshal(asMap["expirationType"], &out.ExpirationType); err != nil {
			return err
		}

	}
	if len(asMap["term"]) > 0 {
		if err := go1.Unmarshal(asMap["term"], &out.Term); err != nil {
			return err
		}

	}
	if len(asMap["subtitle"]) > 0 {
		if err := go1.Unmarshal(asMap["subtitle"], &out.Subtitle); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["supportingInfo"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInfo"], &out.SupportingInfo); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["issued"]) > 0 {
		if err := go1.Unmarshal(asMap["issued"], &out.Issued); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["rule"]) > 0 {
		if err := go1.Unmarshal(asMap["rule"], &out.Rule); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["applies"]) > 0 {
		if err := go1.Unmarshal(asMap["applies"], &out.Applies); err != nil {
			return err
		}

	}
	if len(asMap["domain"]) > 0 {
		if err := go1.Unmarshal(asMap["domain"], &out.Domain); err != nil {
			return err
		}

	}
	if len(asMap["contentDefinition"]) > 0 {
		if err := go1.Unmarshal(asMap["contentDefinition"], &out.ContentDefinition); err != nil {
			return err
		}

	}
	if len(asMap["legal"]) > 0 {
		if err := go1.Unmarshal(asMap["legal"], &out.Legal); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["alias"]) > 0 {
		if err := go1.Unmarshal(asMap["alias"], &out.Alias); err != nil {
			return err
		}

	}
	if len(asMap["scope"]) > 0 {
		if err := go1.Unmarshal(asMap["scope"], &out.Scope); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["topicCodeableConcept"], &out.TopicCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["topicReference"], &out.TopicReference); err == nil {
	} else {

	}
	if len(asMap["subType"]) > 0 {
		if err := go1.Unmarshal(asMap["subType"], &out.SubType); err != nil {
			return err
		}

	}
	if len(asMap["signer"]) > 0 {
		if err := go1.Unmarshal(asMap["signer"], &out.Signer); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["legallyBindingAttachment"], &out.LegallyBindingAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["legallyBindingReference"], &out.LegallyBindingReference); err == nil {
	} else {

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["legalState"]) > 0 {
		if err := go1.Unmarshal(asMap["legalState"], &out.LegalState); err != nil {
			return err
		}

	}
	if len(asMap["contentDerivative"]) > 0 {
		if err := go1.Unmarshal(asMap["contentDerivative"], &out.ContentDerivative); err != nil {
			return err
		}

	}
	if len(asMap["authority"]) > 0 {
		if err := go1.Unmarshal(asMap["authority"], &out.Authority); err != nil {
			return err
		}

	}
	if len(asMap["site"]) > 0 {
		if err := go1.Unmarshal(asMap["site"], &out.Site); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	return nil
}

type Contract struct {
	Status                *string           `bson:",omitempty" json:"status,omitempty"`          // The status of the resource instance.
	InstantiatesUri       *string           `bson:",omitempty" json:"instantiatesUri,omitempty"` // The URL pointing to an externally maintained definition that is adhered to in whole or in part by this Contract.
	RelevantHistory       []*Reference      `bson:",omitempty" json:"relevantHistory,omitempty"` // Links to Provenance records for past versions of this Contract definition, derivative, or instance, which identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the Contract.  The Provenance.entity indicates the target that was changed in the update (see [Provenance.entity](provenance-definitions.html#Provenance.entity)).
	Friendly              *ContractFriendly `binding:"omitempty" bson:",omitempty"`
	Language              *string           `bson:",omitempty" json:"language,omitempty"`              // The base language in which the resource is written.
	Contained             []*Resource       `bson:",omitempty" json:"contained,omitempty"`             // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Version               *string           `bson:",omitempty" json:"version,omitempty"`               // An edition identifier used for business purposes to label business significant variants.
	InstantiatesCanonical *Reference        `bson:",omitempty" json:"instantiatesCanonical,omitempty"` // The URL pointing to a FHIR-defined Contract Definition that is adhered to in whole or part by this Contract.
	ExpirationType        *CodeableConcept  `bson:",omitempty" json:"expirationType,omitempty"`        // Event resulting in discontinuation or termination of this Contract instance by one or more parties to the contract.
	Term                  *ContractTerm     `binding:"omitempty" bson:",omitempty"`
	Subtitle              *string           `bson:",omitempty" json:"subtitle,omitempty"`          // A more detailed or qualifying explanatory or alternate user-friendly title for this Contract definition, derivative, or instance in any legal state.
	Type                  *CodeableConcept  `bson:",omitempty" json:"type,omitempty"`              // A high-level category for the legal instrument, whether constructed as a Contract definition, derivative, or instance in any legal state.  Provides additional information about its content within the context of the Contract's scope to distinguish the kinds of systems that would be interested in the contract.
	Identifier            []*Identifier     `bson:",omitempty" json:"identifier,omitempty"`        // Unique identifier for this Contract or a derivative that references a Source Contract.
	Title                 *string           `bson:",omitempty" json:"title,omitempty"`             // A short, descriptive, user-friendly title for this Contract definition, derivative, or instance in any legal state.
	SupportingInfo        []*Reference      `bson:",omitempty" json:"supportingInfo,omitempty"`    // Information that may be needed by/relevant to the performer in their execution of this term action.
	ImplicitRules         *string           `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ModifierExtension     []*Extension      `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Issued            *DateTime                  `bson:",omitempty" json:"issued,omitempty"`  // When this  Contract was issued.
	Subject           []*Reference               `bson:",omitempty" json:"subject,omitempty"` // The target entity impacted by or of interest to parties to the agreement.
	Author            *Reference                 `bson:",omitempty" json:"author,omitempty"`  // The individual or organization that authored the Contract definition, derivative, or instance in any legal state.
	Rule              *ContractRule              `binding:"omitempty" bson:",omitempty"`
	Text              *Narrative                 `bson:",omitempty" json:"text,omitempty"`      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension         []*Extension               `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Applies           *Period                    `bson:",omitempty" json:"applies,omitempty"`   // Relevant time or time-period when this Contract is applicable.
	Domain            []*Reference               `bson:",omitempty" json:"domain,omitempty"`    // Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.
	ContentDefinition *ContractContentDefinition `binding:"omitempty" bson:",omitempty"`
	Legal             *ContractLegal             `binding:"omitempty" bson:",omitempty"`
	Id                *primitive.ObjectID        `bson:"_id,omitempty" json:"id,omitempty"` // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta              *Meta                      `bson:",omitempty" json:"meta,omitempty"`  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Alias             []*string                  `bson:",omitempty" json:"alias,omitempty"` // Alternative representation of the title for this Contract definition, derivative, or instance in any legal state., e.g., a domain specific contract number related to legislation.
	Scope             *CodeableConcept           `bson:",omitempty" json:"scope,omitempty"` // A selector of legal concerns for this Contract definition, derivative, or instance in any legal state.
	ContractTopicx
	SubType []*CodeableConcept `bson:",omitempty" json:"subType,omitempty"` // Sub-category for the Contract that distinguishes the kinds of systems that would be interested in the Contract within the context of the Contract's scope.
	Signer  *ContractSigner    `binding:"omitempty" bson:",omitempty"`
	ContractLegallyBindingx
	Url               *string          `bson:",omitempty" json:"url,omitempty"`               // Canonical identifier for this contract, represented as a URI (globally unique).
	LegalState        *CodeableConcept `bson:",omitempty" json:"legalState,omitempty"`        // Legal states of the formation of a legal instrument, which is a formally executed written document that can be formally attributed to its author, records and formally expresses a legally enforceable act, process, or contractual duty, obligation, or right, and therefore evidences that act, process, or agreement.
	ContentDerivative *CodeableConcept `bson:",omitempty" json:"contentDerivative,omitempty"` // The minimal content derived from the basal information source at a specific stage in its lifecycle.
	Authority         []*Reference     `bson:",omitempty" json:"authority,omitempty"`         // A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.
	Site              []*Reference     `bson:",omitempty" json:"site,omitempty"`              // Sites in which the contract is complied with,  exercised, or in force.
	Name              *string          `bson:",omitempty" json:"name,omitempty"`              // A natural language name identifying this Contract definition, derivative, or instance in any legal state. Provides additional information about its content. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	ResourceType      string           `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ContractFriendly) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["contentAttachment"], &out.ContentAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["contentReference"], &out.ContentReference); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "content[x]")
	}
	return nil
}

type ContractFriendly struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ContractFriendlyContentx
}
type ContractFriendlyContentx struct {
	ContentAttachment Attachment `bson:",omitempty" json:"contentAttachment,omitempty"`
	ContentReference  Reference  `bson:",omitempty" json:"contentReference,omitempty"`
}

func (out *ContractTerm) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["issued"]) > 0 {
		if err := go1.Unmarshal(asMap["issued"], &out.Issued); err != nil {
			return err
		}

	}
	if len(asMap["applies"]) > 0 {
		if err := go1.Unmarshal(asMap["applies"], &out.Applies); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["asset"]) > 0 {
		if err := go1.Unmarshal(asMap["asset"], &out.Asset); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["securityLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["securityLabel"], &out.SecurityLabel); err != nil {
			return err
		}

	}
	if len(asMap["action"]) > 0 {
		if err := go1.Unmarshal(asMap["action"], &out.Action); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["topicCodeableConcept"], &out.TopicCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["topicReference"], &out.TopicReference); err == nil {
	} else {

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["offer"], &out.Offer); err != nil {
		return err
	}

	if len(asMap["group"]) > 0 {
		if err := go1.Unmarshal(asMap["group"], &out.Group); err != nil {
			return err
		}

	}
	if len(asMap["subType"]) > 0 {
		if err := go1.Unmarshal(asMap["subType"], &out.SubType); err != nil {
			return err
		}

	}
	return nil
}

type ContractTerm struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Issued        *DateTime                  `bson:",omitempty" json:"issued,omitempty"`  // When this Contract Provision was issued.
	Applies       *Period                    `bson:",omitempty" json:"applies,omitempty"` // Relevant time or time-period when this Contract Provision is applicable.
	Type          *CodeableConcept           `bson:",omitempty" json:"type,omitempty"`    // A legal clause or condition contained within a contract that requires one or both parties to perform a particular requirement by some specified time or prevents one or both parties from performing a particular requirement by some specified time.
	Asset         *ContractTermAsset         `binding:"omitempty" bson:",omitempty"`
	Identifier    *Identifier                `bson:",omitempty" json:"identifier,omitempty"` // Unique identifier for this particular Contract Provision.
	SecurityLabel *ContractTermSecurityLabel `binding:"omitempty" bson:",omitempty"`
	Action        *ContractTermAction        `binding:"omitempty" bson:",omitempty"`
	ContractTermTopicx
	Text    *string            `bson:",omitempty" json:"text,omitempty"` // Statement of a provision in a policy or a contract.
	Offer   *ContractTermOffer `binding:"omitempty" bson:",omitempty"`
	Group   interface{}
	SubType *CodeableConcept `bson:",omitempty" json:"subType,omitempty"` // A specialized legal clause or condition based on overarching contract type.
}

func (out *ContractTermAsset) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["linkId"]) > 0 {
		if err := go1.Unmarshal(asMap["linkId"], &out.LinkId); err != nil {
			return err
		}

	}
	if len(asMap["answer"]) > 0 {
		if err := go1.Unmarshal(asMap["answer"], &out.Answer); err != nil {
			return err
		}

	}
	if len(asMap["securityLabelNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["securityLabelNumber"], &out.SecurityLabelNumber); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["usePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["usePeriod"], &out.UsePeriod); err != nil {
			return err
		}

	}
	if len(asMap["relationship"]) > 0 {
		if err := go1.Unmarshal(asMap["relationship"], &out.Relationship); err != nil {
			return err
		}

	}
	if len(asMap["valuedItem"]) > 0 {
		if err := go1.Unmarshal(asMap["valuedItem"], &out.ValuedItem); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["scope"]) > 0 {
		if err := go1.Unmarshal(asMap["scope"], &out.Scope); err != nil {
			return err
		}

	}
	if len(asMap["subtype"]) > 0 {
		if err := go1.Unmarshal(asMap["subtype"], &out.SubType); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["typeReference"]) > 0 {
		if err := go1.Unmarshal(asMap["typeReference"], &out.TypeReference); err != nil {
			return err
		}

	}
	if len(asMap["context"]) > 0 {
		if err := go1.Unmarshal(asMap["context"], &out.Context); err != nil {
			return err
		}

	}
	if len(asMap["condition"]) > 0 {
		if err := go1.Unmarshal(asMap["condition"], &out.Condition); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["periodType"]) > 0 {
		if err := go1.Unmarshal(asMap["periodType"], &out.PeriodType); err != nil {
			return err
		}

	}
	return nil
}

type ContractTermAsset struct {
	LinkId              []*string `bson:",omitempty" json:"linkId,omitempty"` // Id [identifier??] of the clause or question text about the asset in the referenced form or QuestionnaireResponse.
	Answer              interface{}
	SecurityLabelNumber []*int                       `bson:",omitempty" json:"securityLabelNumber,omitempty"` // Security labels that protects the asset.
	Type                []*CodeableConcept           `bson:",omitempty" json:"type,omitempty"`                // Target entity type about which the term may be concerned.
	Period              []*Period                    `bson:",omitempty" json:"period,omitempty"`              // Asset relevant contractual time period.
	UsePeriod           []*Period                    `bson:",omitempty" json:"usePeriod,omitempty"`           // Time period of asset use.
	Relationship        *Coding                      `bson:",omitempty" json:"relationship,omitempty"`        // Specifies the applicability of the term to an asset resource instance, and instances it refers to or instances that refer to it, and/or are owned by the offeree.
	ValuedItem          *ContractTermAssetValuedItem `binding:"omitempty" bson:",omitempty"`
	Id                  *string                      `bson:"_id,omitempty" json:"id,omitempty"`         // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Scope               *CodeableConcept             `bson:",omitempty" json:"scope,omitempty"`         // Differentiates the kind of the asset .
	SubType             []*CodeableConcept           `bson:",omitempty" json:"subtype,omitempty"`       // May be a subtype or part of an offered asset.
	Text                *string                      `bson:",omitempty" json:"text,omitempty"`          // Clause or question text (Prose Object) concerning the asset in a linked form, such as a QuestionnaireResponse used in the formation of the contract.
	TypeReference       []*Reference                 `bson:",omitempty" json:"typeReference,omitempty"` // Associated entities.
	Context             *ContractTermAssetContext    `binding:"omitempty" bson:",omitempty"`
	Condition           *string                      `bson:",omitempty" json:"condition,omitempty"`         // Description of the quality and completeness of the asset that may be a factor in its valuation.
	Extension           []*Extension                 `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension   []*Extension                 `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	PeriodType []*CodeableConcept `bson:",omitempty" json:"periodType,omitempty"` // Type of Asset availability for use or ownership.
}

func (out *ContractTermAssetValuedItem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["effectiveTime"]) > 0 {
		if err := go1.Unmarshal(asMap["effectiveTime"], &out.EffectiveTime); err != nil {
			return err
		}

	}
	if len(asMap["paymentDate"]) > 0 {
		if err := go1.Unmarshal(asMap["paymentDate"], &out.PaymentDate); err != nil {
			return err
		}

	}
	if len(asMap["recipient"]) > 0 {
		if err := go1.Unmarshal(asMap["recipient"], &out.Recipient); err != nil {
			return err
		}

	}
	if len(asMap["securityLabelNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["securityLabelNumber"], &out.SecurityLabelNumber); err != nil {
			return err
		}

	}
	if len(asMap["factor"]) > 0 {
		if err := go1.Unmarshal(asMap["factor"], &out.Factor); err != nil {
			return err
		}

	}
	if len(asMap["payment"]) > 0 {
		if err := go1.Unmarshal(asMap["payment"], &out.Payment); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["unitPrice"]) > 0 {
		if err := go1.Unmarshal(asMap["unitPrice"], &out.UnitPrice); err != nil {
			return err
		}

	}
	if len(asMap["responsible"]) > 0 {
		if err := go1.Unmarshal(asMap["responsible"], &out.Responsible); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["points"]) > 0 {
		if err := go1.Unmarshal(asMap["points"], &out.Points); err != nil {
			return err
		}

	}
	if len(asMap["net"]) > 0 {
		if err := go1.Unmarshal(asMap["net"], &out.Net); err != nil {
			return err
		}

	}
	if len(asMap["linkId"]) > 0 {
		if err := go1.Unmarshal(asMap["linkId"], &out.LinkId); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["entityCodeableConcept"], &out.EntityCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["entityReference"], &out.EntityReference); err == nil {
	} else {

	}
	return nil
}

type ContractTermAssetValuedItem struct {
	EffectiveTime       *DateTime    `bson:",omitempty" json:"effectiveTime,omitempty"`       // Indicates the time during which this Contract ValuedItem information is effective.
	PaymentDate         *DateTime    `bson:",omitempty" json:"paymentDate,omitempty"`         // When payment is due.
	Recipient           *Reference   `bson:",omitempty" json:"recipient,omitempty"`           // Who will receive payment.
	SecurityLabelNumber []*int       `bson:",omitempty" json:"securityLabelNumber,omitempty"` // A set of security labels that define which terms are controlled by this condition.
	Factor              *float64     `bson:",omitempty" json:"factor,omitempty"`              // A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
	Payment             *string      `bson:",omitempty" json:"payment,omitempty"`             // Terms of valuation.
	Quantity            *Quantity    `bson:",omitempty" json:"quantity,omitempty"`            // Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.
	UnitPrice           *Money       `bson:",omitempty" json:"unitPrice,omitempty"`           // A Contract Valued Item unit valuation measure.
	Responsible         *Reference   `bson:",omitempty" json:"responsible,omitempty"`         // Who will make payment.
	Id                  *string      `bson:"_id,omitempty" json:"id,omitempty"`               // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension           []*Extension `bson:",omitempty" json:"extension,omitempty"`           // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Identifier          *Identifier  `bson:",omitempty" json:"identifier,omitempty"`          // Identifies a Contract Valued Item instance.
	Points              *float64     `bson:",omitempty" json:"points,omitempty"`              // An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point.
	Net                 *Money       `bson:",omitempty" json:"net,omitempty"`                 // Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
	LinkId              []*string    `bson:",omitempty" json:"linkId,omitempty"`              // Id  of the clause or question text related to the context of this valuedItem in the referenced form or QuestionnaireResponse.
	ModifierExtension   []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`   /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ContractTermAssetValuedItemEntityx
}
type ContractTermAssetValuedItemEntityx struct {
	EntityCodeableConcept CodeableConcept `bson:",omitempty" json:"entityCodeableConcept,omitempty"`
	EntityReference       Reference       `bson:",omitempty" json:"entityReference,omitempty"`
}

func (out *ContractTermAssetContext) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["reference"]) > 0 {
		if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type ContractTermAssetContext struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Reference *Reference         `bson:",omitempty" json:"reference,omitempty"` // Asset context reference may include the creator, custodian, or owning Person or Organization (e.g., bank, repository),  location held, e.g., building,  jurisdiction.
	Code      []*CodeableConcept `bson:",omitempty" json:"code,omitempty"`      // Coded representation of the context generally or of the Referenced entity, such as the asset holder type or location.
	Text      *string            `bson:",omitempty" json:"text,omitempty"`      // Context description.
	Id        *string            `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension       `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *ContractTermSecurityLabel) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["classification"], &out.Classification); err != nil {
		return err
	}

	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["control"]) > 0 {
		if err := go1.Unmarshal(asMap["control"], &out.Control); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["number"]) > 0 {
		if err := go1.Unmarshal(asMap["number"], &out.Number); err != nil {
			return err
		}

	}
	return nil
}

type ContractTermSecurityLabel struct {
	Classification    *Coding      `binding:"required" bson:",omitempty" json:"classification,omitempty"` // Security label privacy tag that specifies the level of confidentiality protection required for this term and/or term elements.
	Category          []*Coding    `bson:",omitempty" json:"category,omitempty"`                          // Security label privacy tag that specifies the applicable privacy and security policies governing this term and/or term elements.
	Control           []*Coding    `bson:",omitempty" json:"control,omitempty"`                           // Security label privacy tag that specifies the manner in which term and/or term elements are to be protected.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`                 /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Number []*int `bson:",omitempty" json:"number,omitempty"` // Number used to link this term or term element to the applicable Security Label.
}

func (out *ContractTermAction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["doNotPerform"]) > 0 {
		if err := go1.Unmarshal(asMap["doNotPerform"], &out.DoNotPerform); err != nil {
			return err
		}

	}
	if len(asMap["performerType"]) > 0 {
		if err := go1.Unmarshal(asMap["performerType"], &out.PerformerType); err != nil {
			return err
		}

	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["securityLabelNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["securityLabelNumber"], &out.SecurityLabelNumber); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["performerLinkId"]) > 0 {
		if err := go1.Unmarshal(asMap["performerLinkId"], &out.PerformerLinkId); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["linkId"]) > 0 {
		if err := go1.Unmarshal(asMap["linkId"], &out.LinkId); err != nil {
			return err
		}

	}
	if len(asMap["context"]) > 0 {
		if err := go1.Unmarshal(asMap["context"], &out.Context); err != nil {
			return err
		}

	}
	if len(asMap["contextLinkId"]) > 0 {
		if err := go1.Unmarshal(asMap["contextLinkId"], &out.ContextLinkId); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["intent"], &out.Intent); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["occurrenceDateTime"], &out.OccurrenceDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrencePeriod"], &out.OccurrencePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrenceTiming"], &out.OccurrenceTiming); err == nil {
	} else {

	}
	if len(asMap["requester"]) > 0 {
		if err := go1.Unmarshal(asMap["requester"], &out.Requester); err != nil {
			return err
		}

	}
	if len(asMap["requesterLinkId"]) > 0 {
		if err := go1.Unmarshal(asMap["requesterLinkId"], &out.RequesterLinkId); err != nil {
			return err
		}

	}
	if len(asMap["performerRole"]) > 0 {
		if err := go1.Unmarshal(asMap["performerRole"], &out.PerformerRole); err != nil {
			return err
		}

	}
	if len(asMap["reasonLinkId"]) > 0 {
		if err := go1.Unmarshal(asMap["reasonLinkId"], &out.ReasonLinkId); err != nil {
			return err
		}

	}
	return nil
}

type ContractTermAction struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	DoNotPerform        *bool                      `bson:",omitempty" json:"doNotPerform,omitempty"`        // True if the term prohibits the  action.
	PerformerType       []*CodeableConcept         `bson:",omitempty" json:"performerType,omitempty"`       // The type of individual that is desired or required to perform or not perform the action.
	Performer           *Reference                 `bson:",omitempty" json:"performer,omitempty"`           // Indicates who or what is being asked to perform (or not perform) the ction.
	SecurityLabelNumber []*int                     `bson:",omitempty" json:"securityLabelNumber,omitempty"` // Security labels that protects the action.
	Subject             *ContractTermActionSubject `binding:"omitempty" bson:",omitempty"`
	Status              *CodeableConcept           `binding:"required" bson:",omitempty" json:"status,omitempty"` // Current state of the term action.
	PerformerLinkId     []*string                  `bson:",omitempty" json:"performerLinkId,omitempty"`           // Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
	Id                  *string                    `bson:"_id,omitempty" json:"id,omitempty"`                     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	LinkId              []*string                  `bson:",omitempty" json:"linkId,omitempty"`                    // Id [identifier??] of the clause or question text related to this action in the referenced form or QuestionnaireResponse.
	Context             *Reference                 `bson:",omitempty" json:"context,omitempty"`                   // Encounter or Episode with primary association to the specified term activity.
	ContextLinkId       []*string                  `bson:",omitempty" json:"contextLinkId,omitempty"`             // Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
	Reason              []*CodeableReference       `bson:",omitempty" json:"reason,omitempty"`                    // Rationale for the action to be performed or not performed. Describes why the action is permitted or prohibited. Either a coded concept, or another resource whose existence justifies permitting or not permitting this action.
	Note                []*Annotation              `bson:",omitempty" json:"note,omitempty"`                      // Comments made about the term action made by the requester, performer, subject or other participants.
	Extension           []*Extension               `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Type                *CodeableConcept           `binding:"required" bson:",omitempty" json:"type,omitempty"`   // Activity or service obligation to be done or not done, performed or not performed, effectuated or not by this Contract term.
	Intent              *CodeableConcept           `binding:"required" bson:",omitempty" json:"intent,omitempty"` // Reason or purpose for the action stipulated by this Contract Provision.
	ContractTermActionOccurrencex
	Requester       []*Reference     `bson:",omitempty" json:"requester,omitempty"`       // Who or what initiated the action and has responsibility for its activation.
	RequesterLinkId []*string        `bson:",omitempty" json:"requesterLinkId,omitempty"` // Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
	PerformerRole   *CodeableConcept `bson:",omitempty" json:"performerRole,omitempty"`   // The type of role or competency of an individual desired or required to perform or not perform the action.
	ReasonLinkId    []*string        `bson:",omitempty" json:"reasonLinkId,omitempty"`    // Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
}

func (out *ContractTermActionSubject) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
		return err
	}

	if len(asMap["role"]) > 0 {
		if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type ContractTermActionSubject struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Reference []*Reference     `binding:"required" bson:",omitempty" json:"reference,omitempty"` // The entity the action is performed or not performed on or for.
	Role      *CodeableConcept `bson:",omitempty" json:"role,omitempty"`                         // Role type of agent assigned roles in this Contract.
	Id        *string          `bson:"_id,omitempty" json:"id,omitempty"`                        // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}
type ContractTermActionOccurrencex struct {
	OccurrenceDateTime DateTime `bson:",omitempty" json:"occurrenceDateTime,omitempty"`
	OccurrencePeriod   Period   `bson:",omitempty" json:"occurrencePeriod,omitempty"`
	OccurrenceTiming   Timing   `bson:",omitempty" json:"occurrenceTiming,omitempty"`
}
type ContractTermTopicx struct {
	TopicCodeableConcept CodeableConcept `bson:",omitempty" json:"topicCodeableConcept,omitempty"`
	TopicReference       Reference       `bson:",omitempty" json:"topicReference,omitempty"`
}

func (out *ContractTermOffer) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["party"]) > 0 {
		if err := go1.Unmarshal(asMap["party"], &out.Party); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["decisionMode"]) > 0 {
		if err := go1.Unmarshal(asMap["decisionMode"], &out.DecisionMode); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["securityLabelNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["securityLabelNumber"], &out.SecurityLabelNumber); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["topic"]) > 0 {
		if err := go1.Unmarshal(asMap["topic"], &out.Topic); err != nil {
			return err
		}

	}
	if len(asMap["decision"]) > 0 {
		if err := go1.Unmarshal(asMap["decision"], &out.Decision); err != nil {
			return err
		}

	}
	if len(asMap["answer"]) > 0 {
		if err := go1.Unmarshal(asMap["answer"], &out.Answer); err != nil {
			return err
		}

	}
	if len(asMap["linkId"]) > 0 {
		if err := go1.Unmarshal(asMap["linkId"], &out.LinkId); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type ContractTermOffer struct {
	Party               *ContractTermOfferParty `binding:"omitempty" bson:",omitempty"`
	Type                *CodeableConcept        `bson:",omitempty" json:"type,omitempty"`                // Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit.
	DecisionMode        []*CodeableConcept      `bson:",omitempty" json:"decisionMode,omitempty"`        // How the decision about a Contract was conveyed.
	Text                *string                 `bson:",omitempty" json:"text,omitempty"`                // Human readable form of this Contract Offer.
	SecurityLabelNumber []*int                  `bson:",omitempty" json:"securityLabelNumber,omitempty"` // Security labels that protects the offer.
	Id                  *string                 `bson:"_id,omitempty" json:"id,omitempty"`               // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension   []*Extension            `bson:",omitempty" json:"modifierExtension,omitempty"`   /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier []*Identifier            `bson:",omitempty" json:"identifier,omitempty"` // Unique identifier for this particular Contract Provision.
	Topic      *Reference               `bson:",omitempty" json:"topic,omitempty"`      // The owner of an asset has the residual control rights over the asset: the right to decide all usages of the asset in any way not inconsistent with a prior contract, custom, or law (Hart, 1995, p. 30).
	Decision   *CodeableConcept         `bson:",omitempty" json:"decision,omitempty"`   // Type of choice made by accepting party with respect to an offer made by an offeror/ grantee.
	Answer     *ContractTermOfferAnswer `binding:"omitempty" bson:",omitempty"`
	LinkId     []*string                `bson:",omitempty" json:"linkId,omitempty"`    // The id of the clause or question text of the offer in the referenced questionnaire/response.
	Extension  []*Extension             `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *ContractTermOfferParty) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
		return err
	}

	return nil
}

type ContractTermOfferParty struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Reference []*Reference     `binding:"required" bson:",omitempty" json:"reference,omitempty"` // Participant in the offer.
	Role      *CodeableConcept `binding:"required" bson:",omitempty" json:"role,omitempty"`      // How the party participates in the offer.
}

func (out *ContractTermOfferAnswer) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDecimal"], &out.ValueDecimal); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDate"], &out.ValueDate); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDateTime"], &out.ValueDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTime"], &out.ValueTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUri"], &out.ValueUri); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCoding"], &out.ValueCoding); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueReference"], &out.ValueReference); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type ContractTermOfferAnswer struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ContractTermOfferAnswerValuex
	Id        *string      `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}
type ContractTermOfferAnswerValuex struct {
	ValueBoolean    bool       `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueDecimal    float64    `bson:",omitempty" json:"valueDecimal,omitempty"`
	ValueInteger    int        `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueDate       Date       `bson:",omitempty" json:"valueDate,omitempty"`
	ValueDateTime   DateTime   `bson:",omitempty" json:"valueDateTime,omitempty"`
	ValueTime       Time       `bson:",omitempty" json:"valueTime,omitempty"`
	ValueString     string     `bson:",omitempty" json:"valueString,omitempty"`
	ValueUri        string     `bson:",omitempty" json:"valueUri,omitempty"`
	ValueAttachment Attachment `bson:",omitempty" json:"valueAttachment,omitempty"`
	ValueCoding     Coding     `bson:",omitempty" json:"valueCoding,omitempty"`
	ValueQuantity   Quantity   `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueReference  Reference  `bson:",omitempty" json:"valueReference,omitempty"`
}

func (out *ContractRule) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["contentAttachment"], &out.ContentAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["contentReference"], &out.ContentReference); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "content[x]")
	}
	return nil
}

type ContractRule struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ContractRuleContentx
}
type ContractRuleContentx struct {
	ContentAttachment Attachment `bson:",omitempty" json:"contentAttachment,omitempty"`
	ContentReference  Reference  `bson:",omitempty" json:"contentReference,omitempty"`
}

func (out *ContractContentDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["subType"]) > 0 {
		if err := go1.Unmarshal(asMap["subType"], &out.SubType); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["publicationDate"]) > 0 {
		if err := go1.Unmarshal(asMap["publicationDate"], &out.PublicationDate); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["publicationStatus"], &out.PublicationStatus); err != nil {
		return err
	}

	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	return nil
}

type ContractContentDefinition struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type              *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"`              // Precusory content structure and use, i.e., a boilerplate, template, application for a contract such as an insurance policy or benefits under a program, e.g., workers compensation.
	SubType           *CodeableConcept `bson:",omitempty" json:"subType,omitempty"`                              // Detailed Precusory content type.
	Publisher         *Reference       `bson:",omitempty" json:"publisher,omitempty"`                            // The  individual or organization that published the Contract precursor content.
	PublicationDate   *DateTime        `bson:",omitempty" json:"publicationDate,omitempty"`                      // The date (and optionally time) when the contract was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the contract changes.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`                                // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`                            // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	PublicationStatus *string          `binding:"required" bson:",omitempty" json:"publicationStatus,omitempty"` // amended | appended | cancelled | disputed | entered-in-error | executable +.
	Copyright         *string          `bson:",omitempty" json:"copyright,omitempty"`                            // A copyright statement relating to Contract precursor content. Copyright statements are generally legal restrictions on the use and publishing of the Contract precursor content.
}

func (out *ContractLegal) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["contentAttachment"], &out.ContentAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["contentReference"], &out.ContentReference); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "content[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ContractLegal struct {
	ContractLegalContentx
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type ContractLegalContentx struct {
	ContentAttachment Attachment `bson:",omitempty" json:"contentAttachment,omitempty"`
	ContentReference  Reference  `bson:",omitempty" json:"contentReference,omitempty"`
}
type ContractTopicx struct {
	TopicCodeableConcept CodeableConcept `bson:",omitempty" json:"topicCodeableConcept,omitempty"`
	TopicReference       Reference       `bson:",omitempty" json:"topicReference,omitempty"`
}

func (out *ContractSigner) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["party"], &out.Party); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["signature"], &out.Signature); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ContractSigner struct {
	Type              *Coding      `binding:"required" bson:",omitempty" json:"type,omitempty"`      // Role of this Contract signer, e.g. notary, grantee.
	Party             *Reference   `binding:"required" bson:",omitempty" json:"party,omitempty"`     // Party which is a signator to this Contract.
	Signature         []*Signature `binding:"required" bson:",omitempty" json:"signature,omitempty"` // Legally binding Contract DSIG signature contents in Base64.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                        // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                    // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`            /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type ContractLegallyBindingx struct {
	LegallyBindingAttachment Attachment `bson:",omitempty" json:"legallyBindingAttachment,omitempty"`
	LegallyBindingReference  Reference  `bson:",omitempty" json:"legallyBindingReference,omitempty"`
}

func (out *Coverage) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Coverage\"" {
		return fmt.Errorf("resourceType is not %s", "Coverage")
	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["insurancePlan"]) > 0 {
		if err := go1.Unmarshal(asMap["insurancePlan"], &out.InsurancePlan); err != nil {
			return err
		}

	}
	if len(asMap["network"]) > 0 {
		if err := go1.Unmarshal(asMap["network"], &out.Network); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["kind"], &out.Kind); err != nil {
		return err
	}

	if len(asMap["policyHolder"]) > 0 {
		if err := go1.Unmarshal(asMap["policyHolder"], &out.PolicyHolder); err != nil {
			return err
		}

	}
	if len(asMap["relationship"]) > 0 {
		if err := go1.Unmarshal(asMap["relationship"], &out.Relationship); err != nil {
			return err
		}

	}
	if len(asMap["class"]) > 0 {
		if err := go1.Unmarshal(asMap["class"], &out.Class); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["subscriberId"]) > 0 {
		if err := go1.Unmarshal(asMap["subscriberId"], &out.SubscriberId); err != nil {
			return err
		}

	}
	if len(asMap["contract"]) > 0 {
		if err := go1.Unmarshal(asMap["contract"], &out.Contract); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["costToBeneficiary"]) > 0 {
		if err := go1.Unmarshal(asMap["costToBeneficiary"], &out.CostToBeneficiary); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["order"]) > 0 {
		if err := go1.Unmarshal(asMap["order"], &out.Order); err != nil {
			return err
		}

	}
	if len(asMap["subrogation"]) > 0 {
		if err := go1.Unmarshal(asMap["subrogation"], &out.Subrogation); err != nil {
			return err
		}

	}
	if len(asMap["paymentBy"]) > 0 {
		if err := go1.Unmarshal(asMap["paymentBy"], &out.PaymentBy); err != nil {
			return err
		}

	}
	if len(asMap["subscriber"]) > 0 {
		if err := go1.Unmarshal(asMap["subscriber"], &out.Subscriber); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["beneficiary"], &out.Beneficiary); err != nil {
		return err
	}

	if len(asMap["dependent"]) > 0 {
		if err := go1.Unmarshal(asMap["dependent"], &out.Dependent); err != nil {
			return err
		}

	}
	if len(asMap["insurer"]) > 0 {
		if err := go1.Unmarshal(asMap["insurer"], &out.Insurer); err != nil {
			return err
		}

	}
	return nil
}

type Coverage struct {
	Meta              *Meta        `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	InsurancePlan     *Reference   `bson:",omitempty" json:"insurancePlan,omitempty"`     // The insurance plan details, benefits and costs, which constitute this insurance coverage.
	Network           *string      `bson:",omitempty" json:"network,omitempty"`           // The insurer-specific identifier for the insurer-defined network of providers to which the beneficiary may seek treatment which will be covered at the 'in-network' rate, otherwise 'out of network' terms and conditions apply.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Kind              *string                    `binding:"required" bson:",omitempty" json:"kind,omitempty"` // The nature of the coverage be it insurance, or cash payment such as self-pay.
	PolicyHolder      *Reference                 `bson:",omitempty" json:"policyHolder,omitempty"`            // The party who 'owns' the insurance policy.
	Relationship      *CodeableConcept           `bson:",omitempty" json:"relationship,omitempty"`            // The relationship of beneficiary (patient) to the subscriber.
	Class             *CoverageClass             `binding:"omitempty" bson:",omitempty"`
	Extension         []*Extension               `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Status            *string                    `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of the resource instance.
	SubscriberId      []*Identifier              `bson:",omitempty" json:"subscriberId,omitempty"`              // The insurer assigned ID for the Subscriber.
	Contract          []*Reference               `bson:",omitempty" json:"contract,omitempty"`                  // The policy(s) which constitute this insurance coverage.
	Id                *primitive.ObjectID        `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language          *string                    `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Text              *Narrative                 `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained         []*Resource                `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Identifier        []*Identifier              `bson:",omitempty" json:"identifier,omitempty"`                // The identifier of the coverage as issued by the insurer.
	ImplicitRules     *string                    `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Period            *Period                    `bson:",omitempty" json:"period,omitempty"`                    // Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force.
	CostToBeneficiary *CoverageCostToBeneficiary `binding:"omitempty" bson:",omitempty"`
	Type              *CodeableConcept           `bson:",omitempty" json:"type,omitempty"`        // The type of coverage: social program, medical plan, accident coverage (workers compensation, auto), group health or payment by an individual or organization.
	Order             *int                       `bson:",omitempty" json:"order,omitempty"`       // The order of applicability of this coverage relative to other coverages which are currently in force. Note, there may be gaps in the numbering and this does not imply primary, secondary etc. as the specific positioning of coverages depends upon the episode of care. For example; a patient might have (0) auto insurance (1) their own health insurance and (2) spouse's health insurance. When claiming for treatments which were not the result of an auto accident then only coverages (1) and (2) above would be applicatble and would apply in the order specified in parenthesis.
	Subrogation       *bool                      `bson:",omitempty" json:"subrogation,omitempty"` // When 'subrogation=true' this insurance instance has been included not for adjudication but to provide insurers with the details to recover costs.
	PaymentBy         *CoveragePaymentBy         `binding:"omitempty" bson:",omitempty"`
	Subscriber        *Reference                 `bson:",omitempty" json:"subscriber,omitempty"`                     // The party who has signed-up for or 'owns' the contractual relationship to the policy or to whom the benefit of the policy for services rendered to them or their family is due.
	Beneficiary       *Reference                 `binding:"required" bson:",omitempty" json:"beneficiary,omitempty"` // The party who benefits from the insurance coverage; the patient when products and/or services are provided.
	Dependent         *string                    `bson:",omitempty" json:"dependent,omitempty"`                      // A designator for a dependent under the coverage.
	Insurer           *Reference                 `bson:",omitempty" json:"insurer,omitempty"`                        // The program or plan underwriter, payor, insurance company.
	ResourceType      string                     `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *CoverageClass) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
		return err
	}

	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	return nil
}

type CoverageClass struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type  *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"`  // The type of classification for which an insurer-specific class label or number and optional name is provided.  For example, type may be used to identify a class of coverage or employer group, policy, or plan.
	Value *Identifier      `binding:"required" bson:",omitempty" json:"value,omitempty"` // The alphanumeric identifier associated with the insurer issued label.
	Name  *string          `bson:",omitempty" json:"name,omitempty"`                     // A short description for the class.
}

func (out *CoverageCostToBeneficiary) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["network"]) > 0 {
		if err := go1.Unmarshal(asMap["network"], &out.Network); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueMoney"], &out.ValueMoney); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["unit"]) > 0 {
		if err := go1.Unmarshal(asMap["unit"], &out.Unit); err != nil {
			return err
		}

	}
	if len(asMap["term"]) > 0 {
		if err := go1.Unmarshal(asMap["term"], &out.Term); err != nil {
			return err
		}

	}
	if len(asMap["exception"]) > 0 {
		if err := go1.Unmarshal(asMap["exception"], &out.Exception); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type CoverageCostToBeneficiary struct {
	Extension []*Extension     `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Type      *CodeableConcept `bson:",omitempty" json:"type,omitempty"`      // The category of patient centric costs associated with treatment.
	Network   *CodeableConcept `bson:",omitempty" json:"network,omitempty"`   // Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
	CoverageCostToBeneficiaryValuex
	Id                *string                             `bson:"_id,omitempty" json:"id,omitempty"`    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Category          *CodeableConcept                    `bson:",omitempty" json:"category,omitempty"` // Code to identify the general type of benefits under which products and services are provided.
	Unit              *CodeableConcept                    `bson:",omitempty" json:"unit,omitempty"`     // Indicates if the benefits apply to an individual or to the family.
	Term              *CodeableConcept                    `bson:",omitempty" json:"term,omitempty"`     // The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
	Exception         *CoverageCostToBeneficiaryException `binding:"omitempty" bson:",omitempty"`
	ModifierExtension []*Extension                        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type CoverageCostToBeneficiaryValuex struct {
	ValueQuantity Quantity `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueMoney    Money    `bson:",omitempty" json:"valueMoney,omitempty"`
}

func (out *CoverageCostToBeneficiaryException) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type CoverageCostToBeneficiaryException struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type      *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // The code for the specific exception.
	Period    *Period          `bson:",omitempty" json:"period,omitempty"`                  // The timeframe the exception is in force.
	Id        *string          `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension     `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *CoveragePaymentBy) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["party"], &out.Party); err != nil {
		return err
	}

	if len(asMap["responsibility"]) > 0 {
		if err := go1.Unmarshal(asMap["responsibility"], &out.Responsibility); err != nil {
			return err
		}

	}
	return nil
}

type CoveragePaymentBy struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Party          *Reference `binding:"required" bson:",omitempty" json:"party,omitempty"` // The list of parties providing non-insurance payment for the treatment costs.
	Responsibility *string    `bson:",omitempty" json:"responsibility,omitempty"`           //  Description of the financial responsibility.
}

func (out *CoverageEligibilityRequest) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"CoverageEligibilityRequest\"" {
		return fmt.Errorf("resourceType is not %s", "CoverageEligibilityRequest")
	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["patient"], &out.Patient); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["servicedDate"], &out.ServicedDate); err == nil {
	} else if err := go1.Unmarshal(asMap["servicedPeriod"], &out.ServicedPeriod); err == nil {
	} else {

	}
	if len(asMap["provider"]) > 0 {
		if err := go1.Unmarshal(asMap["provider"], &out.Provider); err != nil {
			return err
		}

	}
	if len(asMap["supportingInfo"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInfo"], &out.SupportingInfo); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["item"]) > 0 {
		if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
			return err
		}

	}
	if len(asMap["event"]) > 0 {
		if err := go1.Unmarshal(asMap["event"], &out.Event); err != nil {
			return err
		}

	}
	if len(asMap["facility"]) > 0 {
		if err := go1.Unmarshal(asMap["facility"], &out.Facility); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["insurer"], &out.Insurer); err != nil {
		return err
	}

	if len(asMap["insurance"]) > 0 {
		if err := go1.Unmarshal(asMap["insurance"], &out.Insurance); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["created"], &out.Created); err != nil {
		return err
	}

	if len(asMap["enterer"]) > 0 {
		if err := go1.Unmarshal(asMap["enterer"], &out.Enterer); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type CoverageEligibilityRequest struct {
	Language  *string     `bson:",omitempty" json:"language,omitempty"`                   // The base language in which the resource is written.
	Contained []*Resource `bson:",omitempty" json:"contained,omitempty"`                  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Patient   *Reference  `binding:"required" bson:",omitempty" json:"patient,omitempty"` // The party who is the beneficiary of the supplied coverage and for whom eligibility is sought.
	CoverageEligibilityRequestServicedx
	Provider          *Reference                                `bson:",omitempty" json:"provider,omitempty"` // The provider which is responsible for the request.
	SupportingInfo    *CoverageEligibilityRequestSupportingInfo `binding:"omitempty" bson:",omitempty"`
	Id                *primitive.ObjectID                       `bson:"_id,omitempty" json:"id,omitempty"` // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta              *Meta                                     `bson:",omitempty" json:"meta,omitempty"`  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Item              *CoverageEligibilityRequestItem           `binding:"omitempty" bson:",omitempty"`
	Event             *CoverageEligibilityRequestEvent          `binding:"omitempty" bson:",omitempty"`
	Facility          *Reference                                `bson:",omitempty" json:"facility,omitempty"`                   // Facility where the services are intended to be provided.
	Text              *Narrative                                `bson:",omitempty" json:"text,omitempty"`                       // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Priority          *CodeableConcept                          `bson:",omitempty" json:"priority,omitempty"`                   // When the requestor expects the processor to complete processing.
	Status            *string                                   `binding:"required" bson:",omitempty" json:"status,omitempty"`  // The status of the resource instance.
	Purpose           []*string                                 `binding:"required" bson:",omitempty" json:"purpose,omitempty"` // Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
	Insurer           *Reference                                `binding:"required" bson:",omitempty" json:"insurer,omitempty"` // The Insurer who issued the coverage in question and is the recipient of the request.
	Insurance         *CoverageEligibilityRequestInsurance      `binding:"omitempty" bson:",omitempty"`
	Extension         []*Extension                              `bson:",omitempty" json:"extension,omitempty"`                  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Identifier        []*Identifier                             `bson:",omitempty" json:"identifier,omitempty"`                 // A unique identifier assigned to this coverage eligiblity request.
	Created           *DateTime                                 `binding:"required" bson:",omitempty" json:"created,omitempty"` // The date when this resource was created.
	Enterer           *Reference                                `bson:",omitempty" json:"enterer,omitempty"`                    // Person who created the request.
	ImplicitRules     *string                                   `bson:",omitempty" json:"implicitRules,omitempty"`              // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ModifierExtension []*Extension                              `bson:",omitempty" json:"modifierExtension,omitempty"`          /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ResourceType string `binding:"omitempty" bson:"-" json:"resourceType"`
}
type CoverageEligibilityRequestServicedx struct {
	ServicedDate   Date   `bson:",omitempty" json:"servicedDate,omitempty"`
	ServicedPeriod Period `bson:",omitempty" json:"servicedPeriod,omitempty"`
}

func (out *CoverageEligibilityRequestSupportingInfo) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["information"], &out.Information); err != nil {
		return err
	}

	if len(asMap["appliesToAll"]) > 0 {
		if err := go1.Unmarshal(asMap["appliesToAll"], &out.AppliesToAll); err != nil {
			return err
		}

	}
	return nil
}

type CoverageEligibilityRequestSupportingInfo struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Sequence     *int       `binding:"required" bson:",omitempty" json:"sequence,omitempty"`    // A number to uniquely identify supporting information entries.
	Information  *Reference `binding:"required" bson:",omitempty" json:"information,omitempty"` // Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
	AppliesToAll *bool      `bson:",omitempty" json:"appliesToAll,omitempty"`                   // The supporting materials are applicable for all detail items, product/servce categories and specific billing codes.
}

func (out *CoverageEligibilityRequestItem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["productOrService"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrService"], &out.ProductOrService); err != nil {
			return err
		}

	}
	if len(asMap["modifier"]) > 0 {
		if err := go1.Unmarshal(asMap["modifier"], &out.Modifier); err != nil {
			return err
		}

	}
	if len(asMap["facility"]) > 0 {
		if err := go1.Unmarshal(asMap["facility"], &out.Facility); err != nil {
			return err
		}

	}
	if len(asMap["diagnosis"]) > 0 {
		if err := go1.Unmarshal(asMap["diagnosis"], &out.Diagnosis); err != nil {
			return err
		}

	}
	if len(asMap["unitPrice"]) > 0 {
		if err := go1.Unmarshal(asMap["unitPrice"], &out.UnitPrice); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["supportingInfoSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInfoSequence"], &out.SupportingInfoSequence); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["provider"]) > 0 {
		if err := go1.Unmarshal(asMap["provider"], &out.Provider); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["detail"]) > 0 {
		if err := go1.Unmarshal(asMap["detail"], &out.Detail); err != nil {
			return err
		}

	}
	return nil
}

type CoverageEligibilityRequestItem struct {
	ProductOrService  *CodeableConcept                         `bson:",omitempty" json:"productOrService,omitempty"` // This contains the product, service, drug or other billing code for the item.
	Modifier          []*CodeableConcept                       `bson:",omitempty" json:"modifier,omitempty"`         // Item typification or modifiers codes to convey additional context for the product or service.
	Facility          *Reference                               `bson:",omitempty" json:"facility,omitempty"`         // Facility where the services will be provided.
	Diagnosis         *CoverageEligibilityRequestItemDiagnosis `binding:"omitempty" bson:",omitempty"`
	UnitPrice         *Money                                   `bson:",omitempty" json:"unitPrice,omitempty"`         // The amount charged to the patient by the provider for a single unit.
	Id                *string                                  `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                             `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                             `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	SupportingInfoSequence []*int           `bson:",omitempty" json:"supportingInfoSequence,omitempty"` // Exceptions, special conditions and supporting information applicable for this service or product line.
	Category               *CodeableConcept `bson:",omitempty" json:"category,omitempty"`               // Code to identify the general type of benefits under which products and services are provided.
	Provider               *Reference       `bson:",omitempty" json:"provider,omitempty"`               // The practitioner who is responsible for the product or service to be rendered to the patient.
	Quantity               *Quantity        `bson:",omitempty" json:"quantity,omitempty"`               // The number of repetitions of a service or product.
	Detail                 []*Reference     `bson:",omitempty" json:"detail,omitempty"`                 // The plan/proposal/order describing the proposed service in detail.
}

func (out *CoverageEligibilityRequestItemDiagnosis) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["diagnosisCodeableConcept"], &out.DiagnosisCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["diagnosisReference"], &out.DiagnosisReference); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type CoverageEligibilityRequestItemDiagnosis struct {
	CoverageEligibilityRequestItemDiagnosisDiagnosisx
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type CoverageEligibilityRequestItemDiagnosisDiagnosisx struct {
	DiagnosisCodeableConcept CodeableConcept `bson:",omitempty" json:"diagnosisCodeableConcept,omitempty"`
	DiagnosisReference       Reference       `bson:",omitempty" json:"diagnosisReference,omitempty"`
}

func (out *CoverageEligibilityRequestEvent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["whenDateTime"], &out.WhenDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["whenPeriod"], &out.WhenPeriod); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "when[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type CoverageEligibilityRequestEvent struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // A coded event such as when a service is expected or a card printed.
	CoverageEligibilityRequestEventWhenx
	Id *string `bson:"_id,omitempty" json:"id,omitempty"` // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}
type CoverageEligibilityRequestEventWhenx struct {
	WhenDateTime DateTime `bson:",omitempty" json:"whenDateTime,omitempty"`
	WhenPeriod   Period   `bson:",omitempty" json:"whenPeriod,omitempty"`
}

func (out *CoverageEligibilityRequestInsurance) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["businessArrangement"]) > 0 {
		if err := go1.Unmarshal(asMap["businessArrangement"], &out.BusinessArrangement); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["focal"]) > 0 {
		if err := go1.Unmarshal(asMap["focal"], &out.Focal); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["coverage"], &out.Coverage); err != nil {
		return err
	}

	return nil
}

type CoverageEligibilityRequestInsurance struct {
	BusinessArrangement *string      `bson:",omitempty" json:"businessArrangement,omitempty"` // A business agreement number established between the provider and the insurer for special business processing purposes.
	Id                  *string      `bson:"_id,omitempty" json:"id,omitempty"`               // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension           []*Extension `bson:",omitempty" json:"extension,omitempty"`           // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension   []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`   /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Focal    *bool      `bson:",omitempty" json:"focal,omitempty"`                       // A flag to indicate that this Coverage is to be used for evaluation of this request when set to true.
	Coverage *Reference `binding:"required" bson:",omitempty" json:"coverage,omitempty"` // Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
}

func (out *CoverageEligibilityResponse) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"CoverageEligibilityResponse\"" {
		return fmt.Errorf("resourceType is not %s", "CoverageEligibilityResponse")
	}
	if len(asMap["error"]) > 0 {
		if err := go1.Unmarshal(asMap["error"], &out.Error); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["patient"], &out.Patient); err != nil {
		return err
	}

	if len(asMap["insurance"]) > 0 {
		if err := go1.Unmarshal(asMap["insurance"], &out.Insurance); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
		return err
	}

	if len(asMap["event"]) > 0 {
		if err := go1.Unmarshal(asMap["event"], &out.Event); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["request"], &out.Request); err != nil {
		return err
	}

	if len(asMap["form"]) > 0 {
		if err := go1.Unmarshal(asMap["form"], &out.Form); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["servicedDate"], &out.ServicedDate); err == nil {
	} else if err := go1.Unmarshal(asMap["servicedPeriod"], &out.ServicedPeriod); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["created"], &out.Created); err != nil {
		return err
	}

	if len(asMap["requestor"]) > 0 {
		if err := go1.Unmarshal(asMap["requestor"], &out.Requestor); err != nil {
			return err
		}

	}
	if len(asMap["preAuthRef"]) > 0 {
		if err := go1.Unmarshal(asMap["preAuthRef"], &out.PreAuthRef); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["outcome"], &out.Outcome); err != nil {
		return err
	}

	if len(asMap["disposition"]) > 0 {
		if err := go1.Unmarshal(asMap["disposition"], &out.Disposition); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["insurer"], &out.Insurer); err != nil {
		return err
	}

	return nil
}

type CoverageEligibilityResponse struct {
	Error             *CoverageEligibilityResponseError     `binding:"omitempty" bson:",omitempty"`
	Contained         []*Resource                           `bson:",omitempty" json:"contained,omitempty"`                  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension         []*Extension                          `bson:",omitempty" json:"extension,omitempty"`                  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Identifier        []*Identifier                         `bson:",omitempty" json:"identifier,omitempty"`                 // A unique identifier assigned to this coverage eligiblity request.
	Status            *string                               `binding:"required" bson:",omitempty" json:"status,omitempty"`  // The status of the resource instance.
	Patient           *Reference                            `binding:"required" bson:",omitempty" json:"patient,omitempty"` // The party who is the beneficiary of the supplied coverage and for whom eligibility is sought.
	Insurance         *CoverageEligibilityResponseInsurance `binding:"omitempty" bson:",omitempty"`
	Purpose           []*string                             `binding:"required" bson:",omitempty" json:"purpose,omitempty"` // Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
	Event             *CoverageEligibilityResponseEvent     `binding:"omitempty" bson:",omitempty"`
	Request           *Reference                            `binding:"required" bson:",omitempty" json:"request,omitempty"` // Reference to the original request resource.
	Form              *CodeableConcept                      `bson:",omitempty" json:"form,omitempty"`                       // A code for the form to be used for printing the content.
	Meta              *Meta                                 `bson:",omitempty" json:"meta,omitempty"`                       // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Text              *Narrative                            `bson:",omitempty" json:"text,omitempty"`                       // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ModifierExtension []*Extension                          `bson:",omitempty" json:"modifierExtension,omitempty"`          /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	CoverageEligibilityResponseServicedx
	Created       *DateTime           `binding:"required" bson:",omitempty" json:"created,omitempty"` // The date this resource was created.
	Requestor     *Reference          `bson:",omitempty" json:"requestor,omitempty"`                  // The provider which is responsible for the request.
	PreAuthRef    *string             `bson:",omitempty" json:"preAuthRef,omitempty"`                 // A reference from the Insurer to which these services pertain to be used on further communication and as proof that the request occurred.
	Id            *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ImplicitRules *string             `bson:",omitempty" json:"implicitRules,omitempty"`              // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language      *string             `bson:",omitempty" json:"language,omitempty"`                   // The base language in which the resource is written.
	Outcome       *string             `binding:"required" bson:",omitempty" json:"outcome,omitempty"` // The outcome of the request processing.
	Disposition   *string             `bson:",omitempty" json:"disposition,omitempty"`                // A human readable description of the status of the adjudication.
	Insurer       *Reference          `binding:"required" bson:",omitempty" json:"insurer,omitempty"` // The Insurer who issued the coverage in question and is the author of the response.
	ResourceType  string              `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *CoverageEligibilityResponseError) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["expression"]) > 0 {
		if err := go1.Unmarshal(asMap["expression"], &out.Expression); err != nil {
			return err
		}

	}
	return nil
}

type CoverageEligibilityResponseError struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code       *CodeableConcept `binding:"required" bson:",omitempty" json:"code,omitempty"` // An error code,from a specified code system, which details why the eligibility check could not be performed.
	Expression []*string        `bson:",omitempty" json:"expression,omitempty"`              // A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.
}

func (out *CoverageEligibilityResponseInsurance) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["coverage"], &out.Coverage); err != nil {
		return err
	}

	if len(asMap["inforce"]) > 0 {
		if err := go1.Unmarshal(asMap["inforce"], &out.Inforce); err != nil {
			return err
		}

	}
	if len(asMap["benefitPeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["benefitPeriod"], &out.BenefitPeriod); err != nil {
			return err
		}

	}
	if len(asMap["item"]) > 0 {
		if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type CoverageEligibilityResponseInsurance struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Coverage      *Reference                                `binding:"required" bson:",omitempty" json:"coverage,omitempty"` // Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
	Inforce       *bool                                     `bson:",omitempty" json:"inforce,omitempty"`                     // Flag indicating if the coverage provided is inforce currently if no service date(s) specified or for the whole duration of the service dates.
	BenefitPeriod *Period                                   `bson:",omitempty" json:"benefitPeriod,omitempty"`               // The term of the benefits documented in this response.
	Item          *CoverageEligibilityResponseInsuranceItem `binding:"omitempty" bson:",omitempty"`
	Id            *string                                   `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension     []*Extension                              `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *CoverageEligibilityResponseInsuranceItem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["authorizationRequired"]) > 0 {
		if err := go1.Unmarshal(asMap["authorizationRequired"], &out.AuthorizationRequired); err != nil {
			return err
		}

	}
	if len(asMap["authorizationSupporting"]) > 0 {
		if err := go1.Unmarshal(asMap["authorizationSupporting"], &out.AuthorizationSupporting); err != nil {
			return err
		}

	}
	if len(asMap["authorizationUrl"]) > 0 {
		if err := go1.Unmarshal(asMap["authorizationUrl"], &out.AuthorizationUrl); err != nil {
			return err
		}

	}
	if len(asMap["productOrService"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrService"], &out.ProductOrService); err != nil {
			return err
		}

	}
	if len(asMap["excluded"]) > 0 {
		if err := go1.Unmarshal(asMap["excluded"], &out.Excluded); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["unit"]) > 0 {
		if err := go1.Unmarshal(asMap["unit"], &out.Unit); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["network"]) > 0 {
		if err := go1.Unmarshal(asMap["network"], &out.Network); err != nil {
			return err
		}

	}
	if len(asMap["modifier"]) > 0 {
		if err := go1.Unmarshal(asMap["modifier"], &out.Modifier); err != nil {
			return err
		}

	}
	if len(asMap["term"]) > 0 {
		if err := go1.Unmarshal(asMap["term"], &out.Term); err != nil {
			return err
		}

	}
	if len(asMap["benefit"]) > 0 {
		if err := go1.Unmarshal(asMap["benefit"], &out.Benefit); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["provider"]) > 0 {
		if err := go1.Unmarshal(asMap["provider"], &out.Provider); err != nil {
			return err
		}

	}
	return nil
}

type CoverageEligibilityResponseInsuranceItem struct {
	AuthorizationRequired   *bool              `bson:",omitempty" json:"authorizationRequired,omitempty"`   // A boolean flag indicating whether a preauthorization is required prior to actual service delivery.
	AuthorizationSupporting []*CodeableConcept `bson:",omitempty" json:"authorizationSupporting,omitempty"` // Codes or comments regarding information or actions associated with the preauthorization.
	AuthorizationUrl        *string            `bson:",omitempty" json:"authorizationUrl,omitempty"`        // A web location for obtaining requirements or descriptive information regarding the preauthorization.
	ProductOrService        *CodeableConcept   `bson:",omitempty" json:"productOrService,omitempty"`        // This contains the product, service, drug or other billing code for the item.
	Excluded                *bool              `bson:",omitempty" json:"excluded,omitempty"`                // True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
	Name                    *string            `bson:",omitempty" json:"name,omitempty"`                    // A short name or tag for the benefit.
	Description             *string            `bson:",omitempty" json:"description,omitempty"`             // A richer description of the benefit or services covered.
	Unit                    *CodeableConcept   `bson:",omitempty" json:"unit,omitempty"`                    // Indicates if the benefits apply to an individual or to the family.
	Extension               []*Extension       `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension       []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"`       /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Network  *CodeableConcept                                 `bson:",omitempty" json:"network,omitempty"`  // Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
	Modifier []*CodeableConcept                               `bson:",omitempty" json:"modifier,omitempty"` // Item typification or modifiers codes to convey additional context for the product or service.
	Term     *CodeableConcept                                 `bson:",omitempty" json:"term,omitempty"`     // The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
	Benefit  *CoverageEligibilityResponseInsuranceItemBenefit `binding:"omitempty" bson:",omitempty"`
	Id       *string                                          `bson:"_id,omitempty" json:"id,omitempty"`    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Category *CodeableConcept                                 `bson:",omitempty" json:"category,omitempty"` // Code to identify the general type of benefits under which products and services are provided.
	Provider *Reference                                       `bson:",omitempty" json:"provider,omitempty"` // The practitioner who is eligible for the provision of the product or service.
}

func (out *CoverageEligibilityResponseInsuranceItemBenefit) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["allowedUnsignedInt"], &out.AllowedUnsignedInt); err == nil {
	} else if err := go1.Unmarshal(asMap["allowedString"], &out.AllowedString); err == nil {
	} else if err := go1.Unmarshal(asMap["allowedMoney"], &out.AllowedMoney); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["usedUnsignedInt"], &out.UsedUnsignedInt); err == nil {
	} else if err := go1.Unmarshal(asMap["usedString"], &out.UsedString); err == nil {
	} else if err := go1.Unmarshal(asMap["usedMoney"], &out.UsedMoney); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type CoverageEligibilityResponseInsuranceItemBenefit struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // Classification of benefit being provided.
	CoverageEligibilityResponseInsuranceItemBenefitAllowedx
	CoverageEligibilityResponseInsuranceItemBenefitUsedx
	Id *string `bson:"_id,omitempty" json:"id,omitempty"` // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}
type CoverageEligibilityResponseInsuranceItemBenefitAllowedx struct {
	AllowedUnsignedInt int    `bson:",omitempty" json:"allowedUnsignedInt,omitempty"`
	AllowedString      string `bson:",omitempty" json:"allowedString,omitempty"`
	AllowedMoney       Money  `bson:",omitempty" json:"allowedMoney,omitempty"`
}
type CoverageEligibilityResponseInsuranceItemBenefitUsedx struct {
	UsedUnsignedInt int    `bson:",omitempty" json:"usedUnsignedInt,omitempty"`
	UsedString      string `bson:",omitempty" json:"usedString,omitempty"`
	UsedMoney       Money  `bson:",omitempty" json:"usedMoney,omitempty"`
}

func (out *CoverageEligibilityResponseEvent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["whenDateTime"], &out.WhenDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["whenPeriod"], &out.WhenPeriod); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "when[x]")
	}
	return nil
}

type CoverageEligibilityResponseEvent struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // A coded event such as when a service is expected or a card printed.
	CoverageEligibilityResponseEventWhenx
}
type CoverageEligibilityResponseEventWhenx struct {
	WhenDateTime DateTime `bson:",omitempty" json:"whenDateTime,omitempty"`
	WhenPeriod   Period   `bson:",omitempty" json:"whenPeriod,omitempty"`
}
type CoverageEligibilityResponseServicedx struct {
	ServicedDate   Date   `bson:",omitempty" json:"servicedDate,omitempty"`
	ServicedPeriod Period `bson:",omitempty" json:"servicedPeriod,omitempty"`
}

func (out *DetectedIssue) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"DetectedIssue\"" {
		return fmt.Errorf("resourceType is not %s", "DetectedIssue")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["severity"]) > 0 {
		if err := go1.Unmarshal(asMap["severity"], &out.Severity); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["implicated"]) > 0 {
		if err := go1.Unmarshal(asMap["implicated"], &out.Implicated); err != nil {
			return err
		}

	}
	if len(asMap["detail"]) > 0 {
		if err := go1.Unmarshal(asMap["detail"], &out.Detail); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["reference"]) > 0 {
		if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
			return err
		}

	}
	if len(asMap["mitigation"]) > 0 {
		if err := go1.Unmarshal(asMap["mitigation"], &out.Mitigation); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["identifiedDateTime"], &out.IdentifiedDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["identifiedPeriod"], &out.IdentifiedPeriod); err == nil {
	} else {

	}
	if len(asMap["evidence"]) > 0 {
		if err := go1.Unmarshal(asMap["evidence"], &out.Evidence); err != nil {
			return err
		}

	}
	return nil
}

type DetectedIssue struct {
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta              *Meta               `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Severity          *string             `bson:",omitempty" json:"severity,omitempty"`          // Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
	Encounter         *Reference          `bson:",omitempty" json:"encounter,omitempty"`         // The encounter during which this issue was detected.
	Identifier        []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`        // Business identifier associated with the detected issue record.
	Category          []*CodeableConcept  `bson:",omitempty" json:"category,omitempty"`          // A code that classifies the general type of detected issue.
	Code              *CodeableConcept    `bson:",omitempty" json:"code,omitempty"`              // Identifies the specific type of issue identified.
	Implicated        []*Reference        `bson:",omitempty" json:"implicated,omitempty"`        // Indicates the resource representing the current activity or proposed activity that is potentially problematic.
	Detail            *string             `bson:",omitempty" json:"detail,omitempty"`            // A textual explanation of the detected issue.
	Language          *string             `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Contained         []*Resource         `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension         []*Extension        `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Author        *Reference               `bson:",omitempty" json:"author,omitempty"`    // Individual or device responsible for the issue being raised.  For example, a decision support application or a pharmacist conducting a medication review.
	Reference     *string                  `bson:",omitempty" json:"reference,omitempty"` // The literature, knowledge-base or similar reference that describes the propensity for the detected issue identified.
	Mitigation    *DetectedIssueMitigation `binding:"omitempty" bson:",omitempty"`
	ImplicitRules *string                  `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text          *Narrative               `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Status        *string                  `binding:"required" bson:",omitempty" json:"status,omitempty"` // Indicates the status of the detected issue.
	Subject       *Reference               `bson:",omitempty" json:"subject,omitempty"`                   // Indicates the subject whose record the detected issue is associated with.
	DetectedIssueIdentifiedx
	Evidence     *DetectedIssueEvidence `binding:"omitempty" bson:",omitempty"`
	ResourceType string                 `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *DetectedIssueMitigation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["action"], &out.Action); err != nil {
		return err
	}

	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	return nil
}

type DetectedIssueMitigation struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Action *CodeableConcept `binding:"required" bson:",omitempty" json:"action,omitempty"` // Describes the action that was taken or the observation that was made that reduces/eliminates the risk associated with the identified issue.
	Date   *DateTime        `bson:",omitempty" json:"date,omitempty"`                      // Indicates when the mitigating action was documented.
	Author *Reference       `bson:",omitempty" json:"author,omitempty"`                    // Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring.
	Note   []*Annotation    `bson:",omitempty" json:"note,omitempty"`                      // Clinicians may add additional notes or justifications about the mitigation action. For example, patient can have this drug because they have had it before without any issues. Multiple justifications may be provided.
}
type DetectedIssueIdentifiedx struct {
	IdentifiedDateTime DateTime `bson:",omitempty" json:"identifiedDateTime,omitempty"`
	IdentifiedPeriod   Period   `bson:",omitempty" json:"identifiedPeriod,omitempty"`
}

func (out *DetectedIssueEvidence) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["detail"]) > 0 {
		if err := go1.Unmarshal(asMap["detail"], &out.Detail); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	return nil
}

type DetectedIssueEvidence struct {
	Detail            []*Reference `bson:",omitempty" json:"detail,omitempty"`            // Links to resources that constitute evidence for the detected issue such as a GuidanceResponse or MeasureReport.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code []*CodeableConcept `bson:",omitempty" json:"code,omitempty"` // A manifestation that led to the recording of this detected issue.
}

func (out *Device) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Device\"" {
		return fmt.Errorf("resourceType is not %s", "Device")
	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["safety"]) > 0 {
		if err := go1.Unmarshal(asMap["safety"], &out.Safety); err != nil {
			return err
		}

	}
	if len(asMap["manufacturer"]) > 0 {
		if err := go1.Unmarshal(asMap["manufacturer"], &out.Manufacturer); err != nil {
			return err
		}

	}
	if len(asMap["manufactureDate"]) > 0 {
		if err := go1.Unmarshal(asMap["manufactureDate"], &out.ManufactureDate); err != nil {
			return err
		}

	}
	if len(asMap["partNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["partNumber"], &out.PartNumber); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["displayName"]) > 0 {
		if err := go1.Unmarshal(asMap["displayName"], &out.DisplayName); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["availabilityStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["availabilityStatus"], &out.AvailabilityStatus); err != nil {
			return err
		}

	}
	if len(asMap["biologicalSourceEvent"]) > 0 {
		if err := go1.Unmarshal(asMap["biologicalSourceEvent"], &out.BiologicalSourceEvent); err != nil {
			return err
		}

	}
	if len(asMap["mode"]) > 0 {
		if err := go1.Unmarshal(asMap["mode"], &out.Mode); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["parent"]) > 0 {
		if err := go1.Unmarshal(asMap["parent"], &out.Parent); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["owner"]) > 0 {
		if err := go1.Unmarshal(asMap["owner"], &out.Owner); err != nil {
			return err
		}

	}
	if len(asMap["endpoint"]) > 0 {
		if err := go1.Unmarshal(asMap["endpoint"], &out.Endpoint); err != nil {
			return err
		}

	}
	if len(asMap["gateway"]) > 0 {
		if err := go1.Unmarshal(asMap["gateway"], &out.Gateway); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["expirationDate"]) > 0 {
		if err := go1.Unmarshal(asMap["expirationDate"], &out.ExpirationDate); err != nil {
			return err
		}

	}
	if len(asMap["lotNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["lotNumber"], &out.LotNumber); err != nil {
			return err
		}

	}
	if len(asMap["serialNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["serialNumber"], &out.SerialNumber); err != nil {
			return err
		}

	}
	if len(asMap["cycle"]) > 0 {
		if err := go1.Unmarshal(asMap["cycle"], &out.Cycle); err != nil {
			return err
		}

	}
	if len(asMap["duration"]) > 0 {
		if err := go1.Unmarshal(asMap["duration"], &out.Duration); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["definition"]) > 0 {
		if err := go1.Unmarshal(asMap["definition"], &out.Definition); err != nil {
			return err
		}

	}
	if len(asMap["udiCarrier"]) > 0 {
		if err := go1.Unmarshal(asMap["udiCarrier"], &out.UdiCarrier); err != nil {
			return err
		}

	}
	if len(asMap["property"]) > 0 {
		if err := go1.Unmarshal(asMap["property"], &out.Property); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["modelNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["modelNumber"], &out.ModelNumber); err != nil {
			return err
		}

	}
	if len(asMap["conformsTo"]) > 0 {
		if err := go1.Unmarshal(asMap["conformsTo"], &out.ConformsTo); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	return nil
}

type Device struct {
	Text                  *Narrative           `bson:",omitempty" json:"text,omitempty"`      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained             []*Resource          `bson:",omitempty" json:"contained,omitempty"` // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Name                  *DeviceName          `binding:"omitempty" bson:",omitempty"`
	Version               *DeviceVersion       `binding:"omitempty" bson:",omitempty"`
	Safety                []*CodeableConcept   `bson:",omitempty" json:"safety,omitempty"`                // Provides additional safety characteristics about a medical device.  For example devices containing latex.
	Manufacturer          *string              `bson:",omitempty" json:"manufacturer,omitempty"`          // A name of the manufacturer or entity legally responsible for the device.
	ManufactureDate       *DateTime            `bson:",omitempty" json:"manufactureDate,omitempty"`       // The date and time when the device was manufactured.
	PartNumber            *string              `bson:",omitempty" json:"partNumber,omitempty"`            // The part number or catalog number of the device.
	Contact               []*ContactPoint      `bson:",omitempty" json:"contact,omitempty"`               // Contact details for an organization or a particular human that is responsible for the device.
	Url                   *string              `bson:",omitempty" json:"url,omitempty"`                   // A network address on which the device may be contacted directly.
	Identifier            []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`            // Unique instance identifiers assigned to a device by manufacturers other organizations or owners.
	DisplayName           *string              `bson:",omitempty" json:"displayName,omitempty"`           // The name used to display by default when the device is referenced. Based on intent of use by the resource creator, this may reflect one of the names in Device.name, or may be another simple name.
	Status                *string              `bson:",omitempty" json:"status,omitempty"`                // The Device record status. This is not the status of the device like availability.
	Category              []*CodeableConcept   `bson:",omitempty" json:"category,omitempty"`              // Devices may be associated with one or more categories.
	AvailabilityStatus    *CodeableConcept     `bson:",omitempty" json:"availabilityStatus,omitempty"`    // The availability of the device.
	BiologicalSourceEvent *Identifier          `bson:",omitempty" json:"biologicalSourceEvent,omitempty"` // An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled.
	Mode                  *CodeableConcept     `bson:",omitempty" json:"mode,omitempty"`                  // The designated condition for performing a task with the device.
	Note                  []*Annotation        `bson:",omitempty" json:"note,omitempty"`                  // Descriptive information, usage information or implantation information that is not captured in an existing element.
	Parent                *Reference           `bson:",omitempty" json:"parent,omitempty"`                // The higher level or encompassing device that this device is a logical part of.
	ImplicitRules         *string              `bson:",omitempty" json:"implicitRules,omitempty"`         // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Type                  []*CodeableConcept   `bson:",omitempty" json:"type,omitempty"`                  // The kind or type of device. A device instance may have more than one type - in which case those are the types that apply to the specific instance of the device.
	Owner                 *Reference           `bson:",omitempty" json:"owner,omitempty"`                 // An organization that is responsible for the provision and ongoing maintenance of the device.
	Endpoint              []*Reference         `bson:",omitempty" json:"endpoint,omitempty"`              // Technical endpoints providing access to services provided by the device defined at this resource.
	Gateway               []*CodeableReference `bson:",omitempty" json:"gateway,omitempty"`               // The linked device acting as a communication controller, data collector, translator, or concentrator for the current device (e.g., mobile phone application that relays a blood pressure device's data).
	Id                    *primitive.ObjectID  `bson:"_id,omitempty" json:"id,omitempty"`                 // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ExpirationDate        *DateTime            `bson:",omitempty" json:"expirationDate,omitempty"`        // The date and time beyond which this device is no longer valid or should not be used (if applicable).
	LotNumber             *string              `bson:",omitempty" json:"lotNumber,omitempty"`             // Lot number assigned by the manufacturer.
	SerialNumber          *string              `bson:",omitempty" json:"serialNumber,omitempty"`          // The serial number assigned by the organization when the device was manufactured.
	Cycle                 Count                `bson:",omitempty" json:"cycle,omitempty"`                 // The series of occurrences that repeats during the operation of the device.
	Duration              *Duration            `bson:",omitempty" json:"duration,omitempty"`              // A measurement of time during the device's operation (e.g., days, hours, mins, etc.).
	Meta                  *Meta                `bson:",omitempty" json:"meta,omitempty"`                  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language              *string              `bson:",omitempty" json:"language,omitempty"`              // The base language in which the resource is written.
	Definition            *CodeableReference   `bson:",omitempty" json:"definition,omitempty"`            // The reference to the definition for the device.
	UdiCarrier            *DeviceUdiCarrier    `binding:"omitempty" bson:",omitempty"`
	Property              *DeviceProperty      `binding:"omitempty" bson:",omitempty"`
	Extension             []*Extension         `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension     []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ModelNumber  *string           `bson:",omitempty" json:"modelNumber,omitempty"` // The manufacturer's model number for the device.
	ConformsTo   *DeviceConformsTo `binding:"omitempty" bson:",omitempty"`
	Location     *Reference        `bson:",omitempty" json:"location,omitempty"` // The place where the device can be found.
	ResourceType string            `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *DeviceName) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["display"]) > 0 {
		if err := go1.Unmarshal(asMap["display"], &out.Display); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	return nil
}

type DeviceName struct {
	Display           *bool        `bson:",omitempty" json:"display,omitempty"`           // Indicates the default or preferred name to be displayed.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Value *string `binding:"required" bson:",omitempty" json:"value,omitempty"` // The actual name that identifies the device.
	Type  *string `binding:"required" bson:",omitempty" json:"type,omitempty"`  // Indicates the kind of name. RegisteredName | UserFriendlyName | PatientReportedName.
}

func (out *DeviceVersion) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["component"]) > 0 {
		if err := go1.Unmarshal(asMap["component"], &out.Component); err != nil {
			return err
		}

	}
	if len(asMap["installDate"]) > 0 {
		if err := go1.Unmarshal(asMap["installDate"], &out.InstallDate); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type DeviceVersion struct {
	Type              *CodeableConcept `bson:",omitempty" json:"type,omitempty"`                     // The type of the device version, e.g. manufacturer, approved, internal.
	Component         *Identifier      `bson:",omitempty" json:"component,omitempty"`                // The hardware or software module of the device to which the version applies.
	InstallDate       *DateTime        `bson:",omitempty" json:"installDate,omitempty"`              // The date the version was installed on the device.
	Value             *string          `binding:"required" bson:",omitempty" json:"value,omitempty"` // The version text.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`                // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`        /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *DeviceUdiCarrier) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["issuer"], &out.Issuer); err != nil {
		return err
	}

	if len(asMap["carrierAIDC"]) > 0 {
		if err := go1.Unmarshal(asMap["carrierAIDC"], &out.CarrierAIDC); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["deviceIdentifier"], &out.DeviceIdentifier); err != nil {
		return err
	}

	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["carrierHRF"]) > 0 {
		if err := go1.Unmarshal(asMap["carrierHRF"], &out.CarrierHRF); err != nil {
			return err
		}

	}
	if len(asMap["entryType"]) > 0 {
		if err := go1.Unmarshal(asMap["entryType"], &out.EntryType); err != nil {
			return err
		}

	}
	return nil
}

type DeviceUdiCarrier struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Issuer *string `binding:"required" bson:",omitempty" json:"issuer,omitempty"` /*
	Organization that is charged with issuing UDIs for devices. For example, the US FDA issuers include:
	1) GS1: http://hl7.org/fhir/NamingSystem/gs1-di,
	2) HIBCC: http://hl7.org/fhir/NamingSystem/hibcc-diI,
	3) ICCBBA for blood containers: http://hl7.org/fhir/NamingSystem/iccbba-blood-di,
	4) ICCBA for other devices: http://hl7.org/fhir/NamingSystem/iccbba-other-di # Informationsstelle für Arzneispezialitäten (IFA GmbH) (EU only): http://hl7.org/fhir/NamingSystem/ifa-gmbh-di.
	*/
	CarrierAIDC      *Base64Binary `bson:",omitempty" json:"carrierAIDC,omitempty"`                         // The full UDI carrier of the Automatic Identification and Data Capture (AIDC) technology representation of the barcode string as printed on the packaging of the device - e.g., a barcode or RFID.   Because of limitations on character sets in XML and the need to round-trip JSON data through XML, AIDC Formats *SHALL* be base64 encoded.
	Id               *string       `bson:"_id,omitempty" json:"id,omitempty"`                               // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	DeviceIdentifier *string       `binding:"required" bson:",omitempty" json:"deviceIdentifier,omitempty"` // The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the labeler and the specific version or model of a device.
	Jurisdiction     *string       `bson:",omitempty" json:"jurisdiction,omitempty"`                        // The identity of the authoritative source for UDI generation within a jurisdiction. All UDIs are globally unique within a single namespace with the appropriate repository uri as the system. For example, UDIs of devices managed in the U.S. by the FDA, the value is http://hl7.org/fhir/NamingSystem/us-fda-udi or in the European Union by the European Commission http://hl7.org/fhir/NamingSystem/eu-ec-udi.
	CarrierHRF       *string       `bson:",omitempty" json:"carrierHRF,omitempty"`                          // The full UDI carrier as the human readable form (HRF) representation of the barcode string as printed on the packaging of the device.
	EntryType        *string       `bson:",omitempty" json:"entryType,omitempty"`                           // A coded entry to indicate how the data was entered.
}

func (out *DeviceProperty) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	return nil
}

type DeviceProperty struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // Code that specifies the property, such as resolution, color, size, being represented.
	DevicePropertyValuex
}
type DevicePropertyValuex struct {
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueString          string          `bson:",omitempty" json:"valueString,omitempty"`
	ValueBoolean         bool            `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueInteger         int             `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueRange           Range           `bson:",omitempty" json:"valueRange,omitempty"`
	ValueAttachment      Attachment      `bson:",omitempty" json:"valueAttachment,omitempty"`
}

func (out *DeviceConformsTo) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["specification"], &out.Specification); err != nil {
		return err
	}

	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	return nil
}

type DeviceConformsTo struct {
	Specification     *CodeableConcept `binding:"required" bson:",omitempty" json:"specification,omitempty"` // Code that identifies the specific standard, specification, protocol, formal guidance, regulation, legislation, or certification scheme to which the device adheres.
	Version           *string          `bson:",omitempty" json:"version,omitempty"`                          // Identifies the specific form or variant of the standard, specification, or formal guidance. This may be a 'version number', release, document edition, publication year, or other label.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`                            // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`                        // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`                /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Category *CodeableConcept `bson:",omitempty" json:"category,omitempty"` // Describes the type of the standard, specification, or formal guidance.
}

func (out *DeviceAssociation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"DeviceAssociation\"" {
		return fmt.Errorf("resourceType is not %s", "DeviceAssociation")
	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["bodyStructure"]) > 0 {
		if err := go1.Unmarshal(asMap["bodyStructure"], &out.BodyStructure); err != nil {
			return err
		}

	}
	if len(asMap["operation"]) > 0 {
		if err := go1.Unmarshal(asMap["operation"], &out.Operation); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["statusReason"]) > 0 {
		if err := go1.Unmarshal(asMap["statusReason"], &out.StatusReason); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["device"], &out.Device); err != nil {
		return err
	}

	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	return nil
}

type DeviceAssociation struct {
	Language          *string      `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Text              *Narrative   `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	BodyStructure *Reference                  `bson:",omitempty" json:"bodyStructure,omitempty"` // Current anatomical location of the device in/on subject.
	Operation     *DeviceAssociationOperation `binding:"omitempty" bson:",omitempty"`
	Id            *primitive.ObjectID         `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Status        *CodeableConcept            `binding:"required" bson:",omitempty" json:"status,omitempty"` // Indicates the state of the Device association.
	StatusReason  []*CodeableConcept          `bson:",omitempty" json:"statusReason,omitempty"`              // The reasons given for the current association status.
	Identifier    []*Identifier               `bson:",omitempty" json:"identifier,omitempty"`                // Instance identifier.
	Device        *Reference                  `binding:"required" bson:",omitempty" json:"device,omitempty"` // Reference to the devices associated with the patient or group.
	Category      []*CodeableConcept          `bson:",omitempty" json:"category,omitempty"`                  // Describes the relationship between the device and subject.
	Subject       *Reference                  `bson:",omitempty" json:"subject,omitempty"`                   // The individual, group of individuals or device that the device is on or associated with.
	Period        *Period                     `bson:",omitempty" json:"period,omitempty"`                    // Begin and end dates and times for the device association.
	Meta          *Meta                       `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Contained     []*Resource                 `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension     []*Extension                `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ImplicitRules *string                     `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ResourceType  string                      `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *DeviceAssociationOperation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["operator"]) > 0 {
		if err := go1.Unmarshal(asMap["operator"], &out.Operator); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	return nil
}

type DeviceAssociationOperation struct {
	Operator          []*Reference `bson:",omitempty" json:"operator,omitempty"`          // The individual performing the action enabled by the device.
	Period            *Period      `bson:",omitempty" json:"period,omitempty"`            // Begin and end dates and times for the device's operation.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Status *CodeableConcept `binding:"required" bson:",omitempty" json:"status,omitempty"` // Device operational condition corresponding to the association.
}

func (out *DeviceDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"DeviceDefinition\"" {
		return fmt.Errorf("resourceType is not %s", "DeviceDefinition")
	}
	if len(asMap["chargeItem"]) > 0 {
		if err := go1.Unmarshal(asMap["chargeItem"], &out.ChargeItem); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["regulatoryIdentifier"]) > 0 {
		if err := go1.Unmarshal(asMap["regulatoryIdentifier"], &out.RegulatoryIdentifier); err != nil {
			return err
		}

	}
	if len(asMap["manufacturer"]) > 0 {
		if err := go1.Unmarshal(asMap["manufacturer"], &out.Manufacturer); err != nil {
			return err
		}

	}
	if len(asMap["classification"]) > 0 {
		if err := go1.Unmarshal(asMap["classification"], &out.Classification); err != nil {
			return err
		}

	}
	if len(asMap["safety"]) > 0 {
		if err := go1.Unmarshal(asMap["safety"], &out.Safety); err != nil {
			return err
		}

	}
	if len(asMap["owner"]) > 0 {
		if err := go1.Unmarshal(asMap["owner"], &out.Owner); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["productionIdentifierInUDI"]) > 0 {
		if err := go1.Unmarshal(asMap["productionIdentifierInUDI"], &out.ProductionIdentifierInUDI); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["material"]) > 0 {
		if err := go1.Unmarshal(asMap["material"], &out.Material); err != nil {
			return err
		}

	}
	if len(asMap["languageCode"]) > 0 {
		if err := go1.Unmarshal(asMap["languageCode"], &out.LanguageCode); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["deviceName"]) > 0 {
		if err := go1.Unmarshal(asMap["deviceName"], &out.DeviceName); err != nil {
			return err
		}

	}
	if len(asMap["modelNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["modelNumber"], &out.ModelNumber); err != nil {
			return err
		}

	}
	if len(asMap["property"]) > 0 {
		if err := go1.Unmarshal(asMap["property"], &out.Property); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["hasPart"]) > 0 {
		if err := go1.Unmarshal(asMap["hasPart"], &out.HasPart); err != nil {
			return err
		}

	}
	if len(asMap["packaging"]) > 0 {
		if err := go1.Unmarshal(asMap["packaging"], &out.Packaging); err != nil {
			return err
		}

	}
	if len(asMap["link"]) > 0 {
		if err := go1.Unmarshal(asMap["link"], &out.Link); err != nil {
			return err
		}

	}
	if len(asMap["guideline"]) > 0 {
		if err := go1.Unmarshal(asMap["guideline"], &out.Guideline); err != nil {
			return err
		}

	}
	if len(asMap["correctiveAction"]) > 0 {
		if err := go1.Unmarshal(asMap["correctiveAction"], &out.CorrectiveAction); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["udiDeviceIdentifier"]) > 0 {
		if err := go1.Unmarshal(asMap["udiDeviceIdentifier"], &out.UdiDeviceIdentifier); err != nil {
			return err
		}

	}
	if len(asMap["partNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["partNumber"], &out.PartNumber); err != nil {
			return err
		}

	}
	if len(asMap["conformsTo"]) > 0 {
		if err := go1.Unmarshal(asMap["conformsTo"], &out.ConformsTo); err != nil {
			return err
		}

	}
	if len(asMap["shelfLifeStorage"]) > 0 {
		if err := go1.Unmarshal(asMap["shelfLifeStorage"], &out.ShelfLifeStorage); err != nil {
			return err
		}

	}
	return nil
}

type DeviceDefinition struct {
	ChargeItem        *DeviceDefinitionChargeItem `binding:"omitempty" bson:",omitempty"`
	ModifierExtension []*Extension                `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier                []*Identifier                         `bson:",omitempty" json:"identifier,omitempty"` // Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID. The identifier is typically valued if the udiDeviceIdentifier, partNumber or modelNumber is not valued and represents a different type of identifier.  However, it is permissible to still include those identifiers in DeviceDefinition.identifier with the appropriate identifier.type.
	RegulatoryIdentifier      *DeviceDefinitionRegulatoryIdentifier `binding:"omitempty" bson:",omitempty"`
	Manufacturer              *Reference                            `bson:",omitempty" json:"manufacturer,omitempty"` // A name of the manufacturer  or legal representative e.g. labeler. Whether this is the actual manufacturer or the labeler or responsible depends on implementation and jurisdiction.
	Classification            *DeviceDefinitionClassification       `binding:"omitempty" bson:",omitempty"`
	Safety                    []*CodeableConcept                    `bson:",omitempty" json:"safety,omitempty"`        // Safety characteristics of the device.
	Owner                     *Reference                            `bson:",omitempty" json:"owner,omitempty"`         // An organization that is responsible for the provision and ongoing maintenance of the device.
	ImplicitRules             *string                               `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Version                   *DeviceDefinitionVersion              `binding:"omitempty" bson:",omitempty"`
	Extension                 []*Extension                          `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ProductionIdentifierInUDI []*string                             `bson:",omitempty" json:"productionIdentifierInUDI,omitempty"` // Indicates the production identifier(s) that are expected to appear in the UDI carrier on the device label.
	Contact                   []*ContactPoint                       `bson:",omitempty" json:"contact,omitempty"`                   // Contact details for an organization or a particular human that is responsible for the device.
	Material                  *DeviceDefinitionMaterial             `binding:"omitempty" bson:",omitempty"`
	LanguageCode              []*CodeableConcept                    `bson:",omitempty" json:"languageCode,omitempty"` // Language code for the human-readable text strings produced by the device (all supported).
	Note                      []*Annotation                         `bson:",omitempty" json:"note,omitempty"`         // Descriptive information, usage information or implantation information that is not captured in an existing element.
	DeviceName                *DeviceDefinitionDeviceName           `binding:"omitempty" bson:",omitempty"`
	ModelNumber               *string                               `bson:",omitempty" json:"modelNumber,omitempty"` // The model number for the device for example as defined by the manufacturer or labeler, or other agency.
	Property                  *DeviceDefinitionProperty             `binding:"omitempty" bson:",omitempty"`
	Id                        *primitive.ObjectID                   `bson:"_id,omitempty" json:"id,omitempty"`     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language                  *string                               `bson:",omitempty" json:"language,omitempty"`  // The base language in which the resource is written.
	Contained                 []*Resource                           `bson:",omitempty" json:"contained,omitempty"` // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	HasPart                   *DeviceDefinitionHasPart              `binding:"omitempty" bson:",omitempty"`
	Packaging                 *DeviceDefinitionPackaging            `binding:"omitempty" bson:",omitempty"`
	Link                      *DeviceDefinitionLink                 `binding:"omitempty" bson:",omitempty"`
	Guideline                 *DeviceDefinitionGuideline            `binding:"omitempty" bson:",omitempty"`
	CorrectiveAction          *DeviceDefinitionCorrectiveAction     `binding:"omitempty" bson:",omitempty"`
	Meta                      *Meta                                 `bson:",omitempty" json:"meta,omitempty"`        // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Text                      *Narrative                            `bson:",omitempty" json:"text,omitempty"`        // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Description               *string                               `bson:",omitempty" json:"description,omitempty"` // Additional information to describe the device.
	UdiDeviceIdentifier       *DeviceDefinitionUdiDeviceIdentifier  `binding:"omitempty" bson:",omitempty"`
	PartNumber                *string                               `bson:",omitempty" json:"partNumber,omitempty"` // The part number or catalog number of the device.
	ConformsTo                *DeviceDefinitionConformsTo           `binding:"omitempty" bson:",omitempty"`
	ShelfLifeStorage          []ProductShelfLife                    `bson:",omitempty" json:"shelfLifeStorage,omitempty"` // Shelf Life and storage information.
	ResourceType              string                                `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *DeviceDefinitionChargeItem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["chargeItemCode"], &out.ChargeItemCode); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["count"], &out.Count); err != nil {
		return err
	}

	if len(asMap["effectivePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type DeviceDefinitionChargeItem struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ChargeItemCode  *CodeableReference `binding:"required" bson:",omitempty" json:"chargeItemCode,omitempty"` // The code or reference for the charge item.
	Count           *Quantity          `binding:"required" bson:",omitempty" json:"count,omitempty"`          // Coefficient applicable to the billing code.
	EffectivePeriod *Period            `bson:",omitempty" json:"effectivePeriod,omitempty"`                   // A specific time period in which this charge item applies.
	UseContext      []*UsageContext    `bson:",omitempty" json:"useContext,omitempty"`                        // The context to which this charge item applies.
	Id              *string            `bson:"_id,omitempty" json:"id,omitempty"`                             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *DeviceDefinitionRegulatoryIdentifier) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["deviceIdentifier"], &out.DeviceIdentifier); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["issuer"], &out.Issuer); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
		return err
	}

	return nil
}

type DeviceDefinitionRegulatoryIdentifier struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type             *string `binding:"required" bson:",omitempty" json:"type,omitempty"`             // The type of identifier itself.
	DeviceIdentifier *string `binding:"required" bson:",omitempty" json:"deviceIdentifier,omitempty"` // The identifier itself.
	Issuer           *string `binding:"required" bson:",omitempty" json:"issuer,omitempty"`           // The organization that issued this identifier.
	Jurisdiction     *string `binding:"required" bson:",omitempty" json:"jurisdiction,omitempty"`     // The jurisdiction to which the deviceIdentifier applies.
}

func (out *DeviceDefinitionClassification) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["justification"]) > 0 {
		if err := go1.Unmarshal(asMap["justification"], &out.Justification); err != nil {
			return err
		}

	}
	return nil
}

type DeviceDefinitionClassification struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type          *CodeableConcept   `binding:"required" bson:",omitempty" json:"type,omitempty"` // A classification or risk class of the device model.
	Justification []*RelatedArtifact `bson:",omitempty" json:"justification,omitempty"`           // Further information qualifying this classification of the device model.
}

func (out *DeviceDefinitionVersion) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["component"]) > 0 {
		if err := go1.Unmarshal(asMap["component"], &out.Component); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	return nil
}

type DeviceDefinitionVersion struct {
	Component         *Identifier  `bson:",omitempty" json:"component,omitempty"`                // The hardware or software module of the device to which the version applies.
	Value             *string      `binding:"required" bson:",omitempty" json:"value,omitempty"` // The version text.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`        /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `bson:",omitempty" json:"type,omitempty"` // The type of the device version, e.g. manufacturer, approved, internal.
}

func (out *DeviceDefinitionMaterial) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["alternate"]) > 0 {
		if err := go1.Unmarshal(asMap["alternate"], &out.Alternate); err != nil {
			return err
		}

	}
	if len(asMap["allergenicIndicator"]) > 0 {
		if err := go1.Unmarshal(asMap["allergenicIndicator"], &out.AllergenicIndicator); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["substance"], &out.Substance); err != nil {
		return err
	}

	return nil
}

type DeviceDefinitionMaterial struct {
	Alternate           *bool        `bson:",omitempty" json:"alternate,omitempty"`           // Indicates an alternative material of the device.
	AllergenicIndicator *bool        `bson:",omitempty" json:"allergenicIndicator,omitempty"` // Whether the substance is a known or suspected allergen.
	Id                  *string      `bson:"_id,omitempty" json:"id,omitempty"`               // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension           []*Extension `bson:",omitempty" json:"extension,omitempty"`           // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension   []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`   /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Substance *CodeableConcept `binding:"required" bson:",omitempty" json:"substance,omitempty"` // A substance that the device contains, may contain, or is made of - for example latex - to be used to determine patient compatibility. This is not intended to represent the composition of the device, only the clinically relevant materials.
}

func (out *DeviceDefinitionDeviceName) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	return nil
}

type DeviceDefinitionDeviceName struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name *string `binding:"required" bson:",omitempty" json:"name,omitempty"` // A human-friendly name that is used to refer to the device - depending on the type, it can be the brand name, the common name or alias, or other.
	Type *string `binding:"required" bson:",omitempty" json:"type,omitempty"` /*
	The type of deviceName.
	RegisteredName | UserFriendlyName | PatientReportedName.
	*/
}

func (out *DeviceDefinitionProperty) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	return nil
}

type DeviceDefinitionProperty struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // Code that specifies the property such as a resolution or color being represented.
	DeviceDefinitionPropertyValuex
}
type DeviceDefinitionPropertyValuex struct {
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueString          string          `bson:",omitempty" json:"valueString,omitempty"`
	ValueBoolean         bool            `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueInteger         int             `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueRange           Range           `bson:",omitempty" json:"valueRange,omitempty"`
	ValueAttachment      Attachment      `bson:",omitempty" json:"valueAttachment,omitempty"`
}

func (out *DeviceDefinitionHasPart) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
		return err
	}

	if len(asMap["count"]) > 0 {
		if err := go1.Unmarshal(asMap["count"], &out.Count); err != nil {
			return err
		}

	}
	return nil
}

type DeviceDefinitionHasPart struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Reference *Reference `binding:"required" bson:",omitempty" json:"reference,omitempty"` // Reference to the device that is part of the current device.
	Count     *int       `bson:",omitempty" json:"count,omitempty"`                        // Number of instances of the component device in the current device.
}

func (out *DeviceDefinitionPackaging) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["udiDeviceIdentifier"]) > 0 {
		if err := go1.Unmarshal(asMap["udiDeviceIdentifier"], &out.UdiDeviceIdentifier); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["count"]) > 0 {
		if err := go1.Unmarshal(asMap["count"], &out.Count); err != nil {
			return err
		}

	}
	if len(asMap["distributor"]) > 0 {
		if err := go1.Unmarshal(asMap["distributor"], &out.Distributor); err != nil {
			return err
		}

	}
	if len(asMap["packaging"]) > 0 {
		if err := go1.Unmarshal(asMap["packaging"], &out.Packaging); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	return nil
}

type DeviceDefinitionPackaging struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	UdiDeviceIdentifier interface{}
	Id                  *string                               `bson:"_id,omitempty" json:"id,omitempty"` // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Type                *CodeableConcept                      `bson:",omitempty" json:"type,omitempty"`  // A code that defines the specific type of packaging.
	Count               *int                                  `bson:",omitempty" json:"count,omitempty"` // The number of items contained in the package (devices or sub-packages).
	Distributor         *DeviceDefinitionPackagingDistributor `binding:"omitempty" bson:",omitempty"`
	Packaging           interface{}
	Identifier          *Identifier `bson:",omitempty" json:"identifier,omitempty"` // The business identifier of the packaged medication.
}

func (out *DeviceDefinitionPackagingDistributor) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["organizationReference"]) > 0 {
		if err := go1.Unmarshal(asMap["organizationReference"], &out.OrganizationReference); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type DeviceDefinitionPackagingDistributor struct {
	Name                  *string      `bson:",omitempty" json:"name,omitempty"`                  // Distributor's human-readable name.
	OrganizationReference []*Reference `bson:",omitempty" json:"organizationReference,omitempty"` // Distributor as an Organization resource.
	Id                    *string      `bson:"_id,omitempty" json:"id,omitempty"`                 // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension             []*Extension `bson:",omitempty" json:"extension,omitempty"`             // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension     []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`     /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *DeviceDefinitionLink) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["relation"], &out.Relation); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["relatedDevice"], &out.RelatedDevice); err != nil {
		return err
	}

	return nil
}

type DeviceDefinitionLink struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Relation      *Coding            `binding:"required" bson:",omitempty" json:"relation,omitempty"`      // The type indicates the relationship of the related device to the device instance.
	RelatedDevice *CodeableReference `binding:"required" bson:",omitempty" json:"relatedDevice,omitempty"` // A reference to the linked device.
}

func (out *DeviceDefinitionGuideline) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["warning"]) > 0 {
		if err := go1.Unmarshal(asMap["warning"], &out.Warning); err != nil {
			return err
		}

	}
	if len(asMap["intendedUse"]) > 0 {
		if err := go1.Unmarshal(asMap["intendedUse"], &out.IntendedUse); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["usageInstruction"]) > 0 {
		if err := go1.Unmarshal(asMap["usageInstruction"], &out.UsageInstruction); err != nil {
			return err
		}

	}
	if len(asMap["relatedArtifact"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedArtifact"], &out.RelatedArtifact); err != nil {
			return err
		}

	}
	if len(asMap["indication"]) > 0 {
		if err := go1.Unmarshal(asMap["indication"], &out.Indication); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["contraindication"]) > 0 {
		if err := go1.Unmarshal(asMap["contraindication"], &out.Contraindication); err != nil {
			return err
		}

	}
	return nil
}

type DeviceDefinitionGuideline struct {
	Warning           []*CodeableConcept `bson:",omitempty" json:"warning,omitempty"`           // Specific hazard alert information that a user needs to know before using the device.
	IntendedUse       *string            `bson:",omitempty" json:"intendedUse,omitempty"`       // A description of the general purpose or medical use of the device or its function.
	Extension         []*Extension       `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	UsageInstruction *string            `bson:",omitempty" json:"usageInstruction,omitempty"` // Detailed written and visual directions for the user on how to use the device.
	RelatedArtifact  []*RelatedArtifact `bson:",omitempty" json:"relatedArtifact,omitempty"`  // A source of information or reference for this guideline.
	Indication       []*CodeableConcept `bson:",omitempty" json:"indication,omitempty"`       // A clinical condition for which the device was designed to be used.
	Id               *string            `bson:"_id,omitempty" json:"id,omitempty"`            // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	UseContext       []*UsageContext    `bson:",omitempty" json:"useContext,omitempty"`       // The circumstances that form the setting for using the device.
	Contraindication []*CodeableConcept `bson:",omitempty" json:"contraindication,omitempty"` // A specific situation when a device should not be used because it may cause harm.
}

func (out *DeviceDefinitionCorrectiveAction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["recall"], &out.Recall); err != nil {
		return err
	}

	if len(asMap["scope"]) > 0 {
		if err := go1.Unmarshal(asMap["scope"], &out.Scope); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
		return err
	}

	return nil
}

type DeviceDefinitionCorrectiveAction struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Recall *bool   `binding:"required" bson:",omitempty" json:"recall,omitempty"` // Whether the last corrective action known for this device was a recall.
	Scope  *string `bson:",omitempty" json:"scope,omitempty"`                     // The scope of the corrective action - whether the action targeted all units of a given device model, or only a specific set of batches identified by lot numbers, or individually identified devices identified by the serial name.
	Period *Period `binding:"required" bson:",omitempty" json:"period,omitempty"` // Start and end dates of the  corrective action.
}

func (out *DeviceDefinitionUdiDeviceIdentifier) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["deviceIdentifier"], &out.DeviceIdentifier); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["issuer"], &out.Issuer); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
		return err
	}

	if len(asMap["marketDistribution"]) > 0 {
		if err := go1.Unmarshal(asMap["marketDistribution"], &out.MarketDistribution); err != nil {
			return err
		}

	}
	return nil
}

type DeviceDefinitionUdiDeviceIdentifier struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	DeviceIdentifier   *string                                                `binding:"required" bson:",omitempty" json:"deviceIdentifier,omitempty"` // The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdiction provided in the DeviceDefinition.udiDeviceIdentifier.
	Issuer             *string                                                `binding:"required" bson:",omitempty" json:"issuer,omitempty"`           // The organization that assigns the identifier algorithm.
	Jurisdiction       *string                                                `binding:"required" bson:",omitempty" json:"jurisdiction,omitempty"`     // The jurisdiction to which the deviceIdentifier applies.
	MarketDistribution *DeviceDefinitionUdiDeviceIdentifierMarketDistribution `binding:"omitempty" bson:",omitempty"`
}

func (out *DeviceDefinitionUdiDeviceIdentifierMarketDistribution) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["marketPeriod"], &out.MarketPeriod); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["subJurisdiction"], &out.SubJurisdiction); err != nil {
		return err
	}

	return nil
}

type DeviceDefinitionUdiDeviceIdentifierMarketDistribution struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	MarketPeriod    *Period `binding:"required" bson:",omitempty" json:"marketPeriod,omitempty"`    // Begin and end dates for the commercial distribution of the device.
	SubJurisdiction *string `binding:"required" bson:",omitempty" json:"subJurisdiction,omitempty"` // National state or territory to which the marketDistribution recers, typically where the device is commercialized.
}

func (out *DeviceDefinitionConformsTo) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["source"]) > 0 {
		if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["specification"], &out.Specification); err != nil {
		return err
	}

	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	return nil
}

type DeviceDefinitionConformsTo struct {
	Source            []*RelatedArtifact `bson:",omitempty" json:"source,omitempty"`            // Standard, regulation, certification, or guidance website, document, or other publication, or similar, supporting the conformance.
	Id                *string            `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension       `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Category      *CodeableConcept `bson:",omitempty" json:"category,omitempty"`                         // Describes the type of the standard, specification, or formal guidance.
	Specification *CodeableConcept `binding:"required" bson:",omitempty" json:"specification,omitempty"` // Code that identifies the specific standard, specification, protocol, formal guidance, regulation, legislation, or certification scheme to which the device adheres.
	Version       []*string        `bson:",omitempty" json:"version,omitempty"`                          // Identifies the specific form or variant of the standard, specification, or formal guidance. This may be a 'version number', release, document edition, publication year, or other label.
}

func (out *DeviceDispense) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"DeviceDispense\"" {
		return fmt.Errorf("resourceType is not %s", "DeviceDispense")
	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["whenHandedOver"]) > 0 {
		if err := go1.Unmarshal(asMap["whenHandedOver"], &out.WhenHandedOver); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["supportingInformation"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInformation"], &out.SupportingInformation); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["statusReason"]) > 0 {
		if err := go1.Unmarshal(asMap["statusReason"], &out.StatusReason); err != nil {
			return err
		}

	}
	if len(asMap["destination"]) > 0 {
		if err := go1.Unmarshal(asMap["destination"], &out.Destination); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["eventHistory"]) > 0 {
		if err := go1.Unmarshal(asMap["eventHistory"], &out.EventHistory); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["device"], &out.Device); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if len(asMap["receiver"]) > 0 {
		if err := go1.Unmarshal(asMap["receiver"], &out.Receiver); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["preparedDate"]) > 0 {
		if err := go1.Unmarshal(asMap["preparedDate"], &out.PreparedDate); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["usageInstruction"]) > 0 {
		if err := go1.Unmarshal(asMap["usageInstruction"], &out.UsageInstruction); err != nil {
			return err
		}

	}
	return nil
}

type DeviceDispense struct {
	Contained             []*Resource              `bson:",omitempty" json:"contained,omitempty"`      // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	BasedOn               []*Reference             `bson:",omitempty" json:"basedOn,omitempty"`        // The order or request that this dispense is fulfilling.
	PartOf                []*Reference             `bson:",omitempty" json:"partOf,omitempty"`         // The bigger event that this dispense is a part of.
	Encounter             *Reference               `bson:",omitempty" json:"encounter,omitempty"`      // The encounter that establishes the context for this event.
	Location              *Reference               `bson:",omitempty" json:"location,omitempty"`       // The principal physical location where the dispense was performed.
	WhenHandedOver        *DateTime                `bson:",omitempty" json:"whenHandedOver,omitempty"` // The time the dispensed product was made available to the patient or their representative.
	Identifier            []*Identifier            `bson:",omitempty" json:"identifier,omitempty"`     // Business identifier for this dispensation.
	Category              []*CodeableConcept       `bson:",omitempty" json:"category,omitempty"`       // Indicates the type of device dispense.
	Meta                  *Meta                    `bson:",omitempty" json:"meta,omitempty"`           // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Performer             *DeviceDispensePerformer `binding:"omitempty" bson:",omitempty"`
	Language              *string                  `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	SupportingInformation []*Reference             `bson:",omitempty" json:"supportingInformation,omitempty"`     // Additional information that supports the device being dispensed.
	Quantity              *Quantity                `bson:",omitempty" json:"quantity,omitempty"`                  // The number of devices that have been dispensed.
	Text                  *Narrative               `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Status                *string                  `binding:"required" bson:",omitempty" json:"status,omitempty"` // A code specifying the state of the set of dispense events.
	StatusReason          *CodeableReference       `bson:",omitempty" json:"statusReason,omitempty"`              // Indicates the reason why a dispense was or was not performed.
	Destination           *Reference               `bson:",omitempty" json:"destination,omitempty"`               // Identification of the facility/location where the device was /should be shipped to, as part of the dispense process.
	Note                  []*Annotation            `bson:",omitempty" json:"note,omitempty"`                      // Extra information about the dispense that could not be conveyed in the other attributes.
	EventHistory          []*Reference             `bson:",omitempty" json:"eventHistory,omitempty"`              // A summary of the events of interest that have occurred, such as when the dispense was verified.
	Extension             []*Extension             `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ImplicitRules         *string                  `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ModifierExtension     []*Extension             `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Device           *CodeableReference  `binding:"required" bson:",omitempty" json:"device,omitempty"`  // Identifies the device being dispensed. This is either a link to a resource representing the details of the device or a simple attribute carrying a code that identifies the device from a known list of devices.
	Subject          *Reference          `binding:"required" bson:",omitempty" json:"subject,omitempty"` // A link to a resource representing the person to whom the device is intended.
	Receiver         *Reference          `bson:",omitempty" json:"receiver,omitempty"`                   // Identifies the person who picked up the device or the person or location where the device was delivered.  This may be a patient or their caregiver, but some cases exist where it can be a healthcare professional or a location.
	Type             *CodeableConcept    `bson:",omitempty" json:"type,omitempty"`                       // Indicates the type of dispensing event that is performed.
	PreparedDate     *DateTime           `bson:",omitempty" json:"preparedDate,omitempty"`               // The time when the dispensed product was packaged and reviewed.
	Id               *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	UsageInstruction *string             `bson:",omitempty" json:"usageInstruction,omitempty"`           // The full representation of the instructions.
	ResourceType     string              `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *DeviceDispensePerformer) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
		return err
	}

	return nil
}

type DeviceDispensePerformer struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Function *CodeableConcept `bson:",omitempty" json:"function,omitempty"`                 // Distinguishes the type of performer in the dispense.  For example, date enterer, packager, final checker.
	Actor    *Reference       `binding:"required" bson:",omitempty" json:"actor,omitempty"` // The device, practitioner, etc. who performed the action.  It should be assumed that the actor is the dispenser of the device.
}

func (out *DeviceMetric) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"DeviceMetric\"" {
		return fmt.Errorf("resourceType is not %s", "DeviceMetric")
	}
	if len(asMap["operationalStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["operationalStatus"], &out.OperationalStatus); err != nil {
			return err
		}

	}
	if len(asMap["calibration"]) > 0 {
		if err := go1.Unmarshal(asMap["calibration"], &out.Calibration); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["unit"]) > 0 {
		if err := go1.Unmarshal(asMap["unit"], &out.Unit); err != nil {
			return err
		}

	}
	if len(asMap["color"]) > 0 {
		if err := go1.Unmarshal(asMap["color"], &out.Color); err != nil {
			return err
		}

	}
	if len(asMap["measurementFrequency"]) > 0 {
		if err := go1.Unmarshal(asMap["measurementFrequency"], &out.MeasurementFrequency); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["device"], &out.Device); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
		return err
	}

	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	return nil
}

type DeviceMetric struct {
	OperationalStatus *string                  `bson:",omitempty" json:"operationalStatus,omitempty"` // Indicates current operational state of the device. For example: On, Off, Standby, etc.
	Calibration       *DeviceMetricCalibration `binding:"omitempty" bson:",omitempty"`
	ModifierExtension []*Extension             `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Unit                 *CodeableConcept    `bson:",omitempty" json:"unit,omitempty"`                        // Describes the unit that an observed value determined for this metric will have. For example: Percent, Seconds, etc.
	Color                *string             `bson:",omitempty" json:"color,omitempty"`                       // The preferred color associated with the metric (e.g., display color). This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth; the metrics are displayed in different characteristic colors, such as HR in blue, BP in green, and PR and SpO2 in magenta.
	MeasurementFrequency *Quantity           `bson:",omitempty" json:"measurementFrequency,omitempty"`        // The frequency at which the metric is taken or recorded. Devices measure metrics at a wide range of frequencies; for example, an ECG might sample measurements in the millisecond range, while an NIBP might trigger only once an hour. Less often, the measurementFrequency may be based on a unit other than time, such as distance (e.g. for a measuring wheel). The update period may be different than the measurement frequency, if the device does not update the published observed value with the same frequency as it was measured.
	ImplicitRules        *string             `bson:",omitempty" json:"implicitRules,omitempty"`               // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained            []*Resource         `bson:",omitempty" json:"contained,omitempty"`                   // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension            []*Extension        `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Identifier           []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`                  // Instance identifiers assigned to a device, by the device or gateway software, manufacturers, other organizations or owners. For example, handle ID.
	Type                 *CodeableConcept    `binding:"required" bson:",omitempty" json:"type,omitempty"`     // Describes the type of the metric. For example: Heart Rate, PEEP Setting, etc.
	Device               *Reference          `binding:"required" bson:",omitempty" json:"device,omitempty"`   // Describes the link to the Device.  This is also known as a channel device.
	Id                   *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                       // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language             *string             `bson:",omitempty" json:"language,omitempty"`                    // The base language in which the resource is written.
	Text                 *Narrative          `bson:",omitempty" json:"text,omitempty"`                        // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Category             *string             `binding:"required" bson:",omitempty" json:"category,omitempty"` // Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation.
	Meta                 *Meta               `bson:",omitempty" json:"meta,omitempty"`                        // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ResourceType         string              `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *DeviceMetricCalibration) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["state"]) > 0 {
		if err := go1.Unmarshal(asMap["state"], &out.State); err != nil {
			return err
		}

	}
	if len(asMap["time"]) > 0 {
		if err := go1.Unmarshal(asMap["time"], &out.Time); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type DeviceMetricCalibration struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type      *string      `bson:",omitempty" json:"type,omitempty"`      // Describes the type of the calibration method.
	State     *string      `bson:",omitempty" json:"state,omitempty"`     // Describes the state of the calibration.
	Time      *time.Time   `bson:",omitempty" json:"time,omitempty"`      // Describes the time last calibration has been performed.
	Id        *string      `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *DeviceRequest) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"DeviceRequest\"" {
		return fmt.Errorf("resourceType is not %s", "DeviceRequest")
	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["authoredOn"]) > 0 {
		if err := go1.Unmarshal(asMap["authoredOn"], &out.AuthoredOn); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["occurrenceDateTime"], &out.OccurrenceDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrencePeriod"], &out.OccurrencePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrenceTiming"], &out.OccurrenceTiming); err == nil {
	} else {

	}
	if len(asMap["requester"]) > 0 {
		if err := go1.Unmarshal(asMap["requester"], &out.Requester); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["intent"], &out.Intent); err != nil {
		return err
	}

	if len(asMap["doNotPerform"]) > 0 {
		if err := go1.Unmarshal(asMap["doNotPerform"], &out.DoNotPerform); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["asNeededFor"]) > 0 {
		if err := go1.Unmarshal(asMap["asNeededFor"], &out.AsNeededFor); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["groupIdentifier"]) > 0 {
		if err := go1.Unmarshal(asMap["groupIdentifier"], &out.GroupIdentifier); err != nil {
			return err
		}

	}
	if len(asMap["parameter"]) > 0 {
		if err := go1.Unmarshal(asMap["parameter"], &out.Parameter); err != nil {
			return err
		}

	}
	if len(asMap["supportingInfo"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInfo"], &out.SupportingInfo); err != nil {
			return err
		}

	}
	if len(asMap["relevantHistory"]) > 0 {
		if err := go1.Unmarshal(asMap["relevantHistory"], &out.RelevantHistory); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["insurance"]) > 0 {
		if err := go1.Unmarshal(asMap["insurance"], &out.Insurance); err != nil {
			return err
		}

	}
	if len(asMap["replaces"]) > 0 {
		if err := go1.Unmarshal(asMap["replaces"], &out.Replaces); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesCanonical"], &out.InstantiatesCanonical); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesUri"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesUri"], &out.InstantiatesUri); err != nil {
			return err
		}

	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["asNeeded"]) > 0 {
		if err := go1.Unmarshal(asMap["asNeeded"], &out.AsNeeded); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	return nil
}

type DeviceRequest struct {
	Status        *string            `bson:",omitempty" json:"status,omitempty"`                     // The status of the request.
	Priority      *string            `bson:",omitempty" json:"priority,omitempty"`                   // Indicates how quickly the request should be addressed with respect to other requests.
	Code          *CodeableReference `binding:"required" bson:",omitempty" json:"code,omitempty"`    // The details of the device to be used.
	AuthoredOn    *DateTime          `bson:",omitempty" json:"authoredOn,omitempty"`                 // When the request transitioned to being actionable.
	ImplicitRules *string            `bson:",omitempty" json:"implicitRules,omitempty"`              // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Quantity      *int               `bson:",omitempty" json:"quantity,omitempty"`                   // The number of devices to be provided.
	Subject       *Reference         `binding:"required" bson:",omitempty" json:"subject,omitempty"` // The patient who will use the device.
	DeviceRequestOccurrencex
	Requester         *Reference           `bson:",omitempty" json:"requester,omitempty"`                 // The individual or entity who initiated the request and has responsibility for its activation.
	Identifier        []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`                // Identifiers assigned to this order by the orderer or by the receiver.
	Language          *string              `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Id                *primitive.ObjectID  `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Encounter         *Reference           `bson:",omitempty" json:"encounter,omitempty"`                 // An encounter that provides additional context in which this request is made.
	BasedOn           []*Reference         `bson:",omitempty" json:"basedOn,omitempty"`                   // Plan/proposal/order fulfilled by this request.
	Intent            *string              `binding:"required" bson:",omitempty" json:"intent,omitempty"` // Whether the request is a proposal, plan, an original order or a reflex order.
	DoNotPerform      *bool                `bson:",omitempty" json:"doNotPerform,omitempty"`              // If true, indicates that the provider is asking for the patient to either stop using or to not start using the specified device or category of devices. For example, the patient has undergone surgery and the provider is indicating that the patient should not wear contact lenses.
	Reason            []*CodeableReference `bson:",omitempty" json:"reason,omitempty"`                    // Reason or justification for the use of this device.
	AsNeededFor       *CodeableConcept     `bson:",omitempty" json:"asNeededFor,omitempty"`               // The reason for using the device.
	Note              []*Annotation        `bson:",omitempty" json:"note,omitempty"`                      // Details about this request that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	GroupIdentifier       *Identifier             `bson:",omitempty" json:"groupIdentifier,omitempty"` // A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.
	Parameter             *DeviceRequestParameter `binding:"omitempty" bson:",omitempty"`
	SupportingInfo        []*Reference            `bson:",omitempty" json:"supportingInfo,omitempty"`        // Additional clinical information about the patient that may influence the request fulfilment.  For example, this may include where on the subject's body the device will be used (i.e. the target site).
	RelevantHistory       []*Reference            `bson:",omitempty" json:"relevantHistory,omitempty"`       // Key events in the history of the request.
	Extension             []*Extension            `bson:",omitempty" json:"extension,omitempty"`             // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Insurance             []*Reference            `bson:",omitempty" json:"insurance,omitempty"`             // Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
	Replaces              []*Reference            `bson:",omitempty" json:"replaces,omitempty"`              // The request takes the place of the referenced completed or terminated request(s).
	Text                  *Narrative              `bson:",omitempty" json:"text,omitempty"`                  // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained             []*Resource             `bson:",omitempty" json:"contained,omitempty"`             // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	InstantiatesCanonical []*string               `bson:",omitempty" json:"instantiatesCanonical,omitempty"` // The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this DeviceRequest.
	InstantiatesUri       []*string               `bson:",omitempty" json:"instantiatesUri,omitempty"`       // The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this DeviceRequest.
	Performer             *CodeableReference      `bson:",omitempty" json:"performer,omitempty"`             // The desired individual or entity to provide the device to the subject of the request (e.g., patient, location).
	AsNeeded              *bool                   `bson:",omitempty" json:"asNeeded,omitempty"`              // This status is to indicate whether the request is a PRN or may be given as needed.
	Meta                  *Meta                   `bson:",omitempty" json:"meta,omitempty"`                  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ResourceType          string                  `binding:"omitempty" bson:"-" json:"resourceType"`
}
type DeviceRequestOccurrencex struct {
	OccurrenceDateTime DateTime `bson:",omitempty" json:"occurrenceDateTime,omitempty"`
	OccurrencePeriod   Period   `bson:",omitempty" json:"occurrencePeriod,omitempty"`
	OccurrenceTiming   Timing   `bson:",omitempty" json:"occurrenceTiming,omitempty"`
}

func (out *DeviceRequestParameter) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else {

	}
	return nil
}

type DeviceRequestParameter struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code *CodeableConcept `bson:",omitempty" json:"code,omitempty"` // A code or string that identifies the device detail being asserted.
	DeviceRequestParameterValuex
}
type DeviceRequestParameterValuex struct {
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueRange           Range           `bson:",omitempty" json:"valueRange,omitempty"`
	ValueBoolean         bool            `bson:",omitempty" json:"valueBoolean,omitempty"`
}

func (out *DeviceUsage) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"DeviceUsage\"" {
		return fmt.Errorf("resourceType is not %s", "DeviceUsage")
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["derivedFrom"]) > 0 {
		if err := go1.Unmarshal(asMap["derivedFrom"], &out.DerivedFrom); err != nil {
			return err
		}

	}
	if len(asMap["dateAsserted"]) > 0 {
		if err := go1.Unmarshal(asMap["dateAsserted"], &out.DateAsserted); err != nil {
			return err
		}

	}
	if len(asMap["usageReason"]) > 0 {
		if err := go1.Unmarshal(asMap["usageReason"], &out.UsageReason); err != nil {
			return err
		}

	}
	if len(asMap["adherence"]) > 0 {
		if err := go1.Unmarshal(asMap["adherence"], &out.Adherence); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["device"], &out.Device); err != nil {
		return err
	}

	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["context"]) > 0 {
		if err := go1.Unmarshal(asMap["context"], &out.Context); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["timingTiming"], &out.TimingTiming); err == nil {
	} else if err := go1.Unmarshal(asMap["timingPeriod"], &out.TimingPeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["timingDateTime"], &out.TimingDateTime); err == nil {
	} else {

	}
	if len(asMap["usageStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["usageStatus"], &out.UsageStatus); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["patient"], &out.Patient); err != nil {
		return err
	}

	if len(asMap["informationSource"]) > 0 {
		if err := go1.Unmarshal(asMap["informationSource"], &out.InformationSource); err != nil {
			return err
		}

	}
	if len(asMap["bodySite"]) > 0 {
		if err := go1.Unmarshal(asMap["bodySite"], &out.BodySite); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	return nil
}

type DeviceUsage struct {
	Extension    []*Extension          `bson:",omitempty" json:"extension,omitempty"`    // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	BasedOn      []*Reference          `bson:",omitempty" json:"basedOn,omitempty"`      // A plan, proposal or order that is fulfilled in whole or in part by this DeviceUsage.
	Category     []*CodeableConcept    `bson:",omitempty" json:"category,omitempty"`     // This attribute indicates a category for the statement - The device statement may be made in an inpatient or outpatient settting (inpatient | outpatient | community | patientspecified).
	DerivedFrom  []*Reference          `bson:",omitempty" json:"derivedFrom,omitempty"`  // Allows linking the DeviceUsage to the underlying Request, or to other information that supports or is used to derive the DeviceUsage.
	DateAsserted *DateTime             `bson:",omitempty" json:"dateAsserted,omitempty"` // The time at which the statement was recorded by informationSource.
	UsageReason  []*CodeableConcept    `bson:",omitempty" json:"usageReason,omitempty"`  // The reason for asserting the usage status - for example forgot, lost, stolen, broken.
	Adherence    *DeviceUsageAdherence `binding:"omitempty" bson:",omitempty"`
	Meta         *Meta                 `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Reason       []*CodeableReference  `bson:",omitempty" json:"reason,omitempty"`                    // Reason or justification for the use of the device. A coded concept, or another resource whose existence justifies this DeviceUsage.
	Note         []*Annotation         `bson:",omitempty" json:"note,omitempty"`                      // Details about the device statement that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
	Device       *CodeableReference    `binding:"required" bson:",omitempty" json:"device,omitempty"` // Code or Reference to device used.
	Contained    []*Resource           `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Status       *string               `binding:"required" bson:",omitempty" json:"status,omitempty"` // A code representing the patient or other source's judgment about the state of the device used that this statement is about.  Generally this will be active or completed.
	Context      *Reference            `bson:",omitempty" json:"context,omitempty"`                   // The encounter or episode of care that establishes the context for this device use statement.
	DeviceUsageTimingx
	UsageStatus       *CodeableConcept    `bson:",omitempty" json:"usageStatus,omitempty"`                // The status of the device usage, for example always, sometimes, never. This is not the same as the status of the statement.
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language          *string             `bson:",omitempty" json:"language,omitempty"`                   // The base language in which the resource is written.
	Patient           *Reference          `binding:"required" bson:",omitempty" json:"patient,omitempty"` // The patient who used the device.
	InformationSource *Reference          `bson:",omitempty" json:"informationSource,omitempty"`          // Who reported the device was being used by the patient.
	BodySite          *CodeableReference  `bson:",omitempty" json:"bodySite,omitempty"`                   // Indicates the anotomic location on the subject's body where the device was used ( i.e. the target).
	ImplicitRules     *string             `bson:",omitempty" json:"implicitRules,omitempty"`              // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"`          /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier   []*Identifier `bson:",omitempty" json:"identifier,omitempty"` // An external identifier for this statement such as an IRI.
	Text         *Narrative    `bson:",omitempty" json:"text,omitempty"`       // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ResourceType string        `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *DeviceUsageAdherence) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	return nil
}

type DeviceUsageAdherence struct {
	Reason            []*CodeableConcept `binding:"required" bson:",omitempty" json:"reason,omitempty"` // Reason for adherence type.
	Id                *string            `bson:"_id,omitempty" json:"id,omitempty"`                     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension       `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code *CodeableConcept `binding:"required" bson:",omitempty" json:"code,omitempty"` // Type of adherence.
}
type DeviceUsageTimingx struct {
	TimingTiming   Timing   `bson:",omitempty" json:"timingTiming,omitempty"`
	TimingPeriod   Period   `bson:",omitempty" json:"timingPeriod,omitempty"`
	TimingDateTime DateTime `bson:",omitempty" json:"timingDateTime,omitempty"`
}

func (out *DiagnosticReport) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"DiagnosticReport\"" {
		return fmt.Errorf("resourceType is not %s", "DiagnosticReport")
	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["conclusion"]) > 0 {
		if err := go1.Unmarshal(asMap["conclusion"], &out.Conclusion); err != nil {
			return err
		}

	}
	if len(asMap["study"]) > 0 {
		if err := go1.Unmarshal(asMap["study"], &out.Study); err != nil {
			return err
		}

	}
	if len(asMap["composition"]) > 0 {
		if err := go1.Unmarshal(asMap["composition"], &out.Composition); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["issued"]) > 0 {
		if err := go1.Unmarshal(asMap["issued"], &out.Issued); err != nil {
			return err
		}

	}
	if len(asMap["specimen"]) > 0 {
		if err := go1.Unmarshal(asMap["specimen"], &out.Specimen); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["effectiveDateTime"], &out.EffectiveDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err == nil {
	} else {

	}
	if len(asMap["supportingInfo"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInfo"], &out.SupportingInfo); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["conclusionCode"]) > 0 {
		if err := go1.Unmarshal(asMap["conclusionCode"], &out.ConclusionCode); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["presentedForm"]) > 0 {
		if err := go1.Unmarshal(asMap["presentedForm"], &out.PresentedForm); err != nil {
			return err
		}

	}
	if len(asMap["resultsInterpreter"]) > 0 {
		if err := go1.Unmarshal(asMap["resultsInterpreter"], &out.ResultsInterpreter); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["result"]) > 0 {
		if err := go1.Unmarshal(asMap["result"], &out.Result); err != nil {
			return err
		}

	}
	if len(asMap["media"]) > 0 {
		if err := go1.Unmarshal(asMap["media"], &out.Media); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	return nil
}

type DiagnosticReport struct {
	Category    []*CodeableConcept `bson:",omitempty" json:"category,omitempty"`                  // A code that classifies the clinical discipline, department or diagnostic service that created the report (e.g. cardiology, biochemistry, hematology, MRI). This is used for searching, sorting and display purposes.
	Encounter   *Reference         `bson:",omitempty" json:"encounter,omitempty"`                 // The healthcare event  (e.g. a patient and healthcare provider interaction) which this DiagnosticReport is about.
	Performer   []*Reference       `bson:",omitempty" json:"performer,omitempty"`                 // The diagnostic service that is responsible for issuing the report.
	Note        []*Annotation      `bson:",omitempty" json:"note,omitempty"`                      // Comments about the diagnostic report.
	BasedOn     []*Reference       `bson:",omitempty" json:"basedOn,omitempty"`                   // Details concerning a service requested.
	Conclusion  *string            `bson:",omitempty" json:"conclusion,omitempty"`                // Concise and clinically contextualized summary conclusion (interpretation/impression) of the diagnostic report.
	Study       []*Reference       `bson:",omitempty" json:"study,omitempty"`                     // One or more links to full details of any study performed during the diagnostic investigation. An ImagingStudy might comprise a set of radiologic images obtained via a procedure that are analyzed as a group. Typically, this is imaging performed by DICOM enabled modalities, but this is not required. A fully enabled PACS viewer can use this information to provide views of the source images. A GenomicStudy might comprise one or more analyses, each serving a specific purpose. These analyses may vary in method (e.g., karyotyping, CNV, or SNV detection), performer, software, devices used, or regions targeted.
	Composition *Reference         `bson:",omitempty" json:"composition,omitempty"`               // Reference to a Composition resource instance that provides structure for organizing the contents of the DiagnosticReport.
	Status      *string            `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of the diagnostic report.
	Identifier  []*Identifier      `bson:",omitempty" json:"identifier,omitempty"`                // Identifiers assigned to this report by the performer or other systems.
	Code        *CodeableConcept   `binding:"required" bson:",omitempty" json:"code,omitempty"`   // A code or name that describes this diagnostic report.
	Issued      *time.Time         `bson:",omitempty" json:"issued,omitempty"`                    // The date and time that this version of the report was made available to providers, typically after the report was reviewed and verified.
	Specimen    []*Reference       `bson:",omitempty" json:"specimen,omitempty"`                  // Details about the specimens on which this diagnostic report is based.
	Text        *Narrative         `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	DiagnosticReportEffectivex
	SupportingInfo     *DiagnosticReportSupportingInfo `binding:"omitempty" bson:",omitempty"`
	Language           *string                         `bson:",omitempty" json:"language,omitempty"`           // The base language in which the resource is written.
	ImplicitRules      *string                         `bson:",omitempty" json:"implicitRules,omitempty"`      // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained          []*Resource                     `bson:",omitempty" json:"contained,omitempty"`          // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Subject            *Reference                      `bson:",omitempty" json:"subject,omitempty"`            // The subject of the report. Usually, but not always, this is a patient. However, diagnostic services also perform analyses on specimens collected from a variety of other sources.
	ConclusionCode     []*CodeableConcept              `bson:",omitempty" json:"conclusionCode,omitempty"`     // One or more codes that represent the summary conclusion (interpretation/impression) of the diagnostic report.
	Id                 *primitive.ObjectID             `bson:"_id,omitempty" json:"id,omitempty"`              // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	PresentedForm      []*Attachment                   `bson:",omitempty" json:"presentedForm,omitempty"`      // Rich text representation of the entire result as issued by the diagnostic service. Multiple formats are allowed but they SHALL be semantically equivalent.
	ResultsInterpreter []*Reference                    `bson:",omitempty" json:"resultsInterpreter,omitempty"` // The practitioner or organization that is responsible for the report's conclusions and interpretations.
	Extension          []*Extension                    `bson:",omitempty" json:"extension,omitempty"`          // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension  []*Extension                    `bson:",omitempty" json:"modifierExtension,omitempty"`  /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Result       []*Reference           `bson:",omitempty" json:"result,omitempty"` // [Observations](observation.html)  that are part of this diagnostic report.
	Media        *DiagnosticReportMedia `binding:"omitempty" bson:",omitempty"`
	Meta         *Meta                  `bson:",omitempty" json:"meta,omitempty"` // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ResourceType string                 `binding:"omitempty" bson:"-" json:"resourceType"`
}
type DiagnosticReportEffectivex struct {
	EffectiveDateTime DateTime `bson:",omitempty" json:"effectiveDateTime,omitempty"`
	EffectivePeriod   Period   `bson:",omitempty" json:"effectivePeriod,omitempty"`
}

func (out *DiagnosticReportSupportingInfo) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type DiagnosticReportSupportingInfo struct {
	Type              *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"`      // The code value for the role of the supporting information in the diagnostic report.
	Reference         *Reference       `binding:"required" bson:",omitempty" json:"reference,omitempty"` // The reference for the supporting information in the diagnostic report.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`                        // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`                    // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`            /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *DiagnosticReportMedia) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["comment"]) > 0 {
		if err := go1.Unmarshal(asMap["comment"], &out.Comment); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["link"], &out.Link); err != nil {
		return err
	}

	return nil
}

type DiagnosticReportMedia struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Comment *string    `bson:",omitempty" json:"comment,omitempty"`                 // A comment about the image or data. Typically, this is used to provide an explanation for why the image or data is included, or to draw the viewer's attention to important features.
	Link    *Reference `binding:"required" bson:",omitempty" json:"link,omitempty"` // Reference to the image or data source.
}

func (out *DocumentReference) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"DocumentReference\"" {
		return fmt.Errorf("resourceType is not %s", "DocumentReference")
	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["context"]) > 0 {
		if err := go1.Unmarshal(asMap["context"], &out.Context); err != nil {
			return err
		}

	}
	if len(asMap["bodySite"]) > 0 {
		if err := go1.Unmarshal(asMap["bodySite"], &out.BodySite); err != nil {
			return err
		}

	}
	if len(asMap["facilityType"]) > 0 {
		if err := go1.Unmarshal(asMap["facilityType"], &out.FacilityType); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["securityLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["securityLabel"], &out.SecurityLabel); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["content"], &out.Content); err != nil {
		return err
	}

	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["custodian"]) > 0 {
		if err := go1.Unmarshal(asMap["custodian"], &out.Custodian); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["docStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["docStatus"], &out.DocStatus); err != nil {
			return err
		}

	}
	if len(asMap["modality"]) > 0 {
		if err := go1.Unmarshal(asMap["modality"], &out.Modality); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["practiceSetting"]) > 0 {
		if err := go1.Unmarshal(asMap["practiceSetting"], &out.PracticeSetting); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["event"]) > 0 {
		if err := go1.Unmarshal(asMap["event"], &out.Event); err != nil {
			return err
		}

	}
	if len(asMap["attester"]) > 0 {
		if err := go1.Unmarshal(asMap["attester"], &out.Attester); err != nil {
			return err
		}

	}
	if len(asMap["relatesTo"]) > 0 {
		if err := go1.Unmarshal(asMap["relatesTo"], &out.RelatesTo); err != nil {
			return err
		}

	}
	return nil
}

type DocumentReference struct {
	Language          *string              `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Context           []*Reference         `bson:",omitempty" json:"context,omitempty"`           // Describes the clinical encounter or type of care that the document content is associated with.
	BodySite          []*CodeableReference `bson:",omitempty" json:"bodySite,omitempty"`          // The anatomic structures included in the document.
	FacilityType      *CodeableConcept     `bson:",omitempty" json:"facilityType,omitempty"`      // The kind of facility where the patient was seen.
	Period            *Period              `bson:",omitempty" json:"period,omitempty"`            // The time period over which the service that is described by the document was provided.
	SecurityLabel     []*CodeableConcept   `bson:",omitempty" json:"securityLabel,omitempty"`     // A set of Security-Tag codes specifying the level of privacy/security of the Document found at DocumentReference.content.attachment.url. Note that DocumentReference.meta.security contains the security labels of the data elements in DocumentReference, while DocumentReference.securityLabel contains the security labels for the document the reference refers to. The distinction recognizes that the document may contain sensitive information, while the DocumentReference is metadata about the document and thus might not be as sensitive as the document. For example: a psychotherapy episode may contain highly sensitive information, while the metadata may simply indicate that some episode happened.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Status          *string                     `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this document reference.
	Category        []*CodeableConcept          `bson:",omitempty" json:"category,omitempty"`                  // A categorization for the type of document referenced - helps for indexing and searching. This may be implied by or derived from the code specified in the DocumentReference.type.
	Description     *string                     `bson:",omitempty" json:"description,omitempty"`               // Human-readable description of the source document.
	Contained       []*Resource                 `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension       []*Extension                `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Id              *primitive.ObjectID         `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	BasedOn         []*Reference                `bson:",omitempty" json:"basedOn,omitempty"`                   // A procedure that is fulfilled in whole or in part by the creation of this media.
	Author          []*Reference                `bson:",omitempty" json:"author,omitempty"`                    // Identifies who is responsible for adding the information to the document.
	Content         *DocumentReferenceContent   `binding:"omitempty" bson:",omitempty"`
	Text            *Narrative                  `bson:",omitempty" json:"text,omitempty"`            // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Custodian       *Reference                  `bson:",omitempty" json:"custodian,omitempty"`       // Identifies the organization or group who is responsible for ongoing maintenance of and access to the document.
	Version         *string                     `bson:",omitempty" json:"version,omitempty"`         // An explicitly assigned identifer of a variation of the content in the DocumentReference.
	DocStatus       *string                     `bson:",omitempty" json:"docStatus,omitempty"`       // The status of the underlying document.
	Modality        []*CodeableConcept          `bson:",omitempty" json:"modality,omitempty"`        // Imaging modality used. This may include both acquisition and non-acquisition modalities.
	Subject         *Reference                  `bson:",omitempty" json:"subject,omitempty"`         // Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure).
	PracticeSetting *CodeableConcept            `bson:",omitempty" json:"practiceSetting,omitempty"` // This property may convey specifics about the practice setting where the content was created, often reflecting the clinical specialty.
	Date            *time.Time                  `bson:",omitempty" json:"date,omitempty"`            // When the document reference was created.
	Identifier      []*Identifier               `bson:",omitempty" json:"identifier,omitempty"`      // Other business identifiers associated with the document, including version independent identifiers.
	Type            *CodeableConcept            `bson:",omitempty" json:"type,omitempty"`            // Specifies the particular kind of document referenced  (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the document referenced.
	Meta            *Meta                       `bson:",omitempty" json:"meta,omitempty"`            // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules   *string                     `bson:",omitempty" json:"implicitRules,omitempty"`   // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Event           []*CodeableReference        `bson:",omitempty" json:"event,omitempty"`           // This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the type Code, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
	Attester        *DocumentReferenceAttester  `binding:"omitempty" bson:",omitempty"`
	RelatesTo       *DocumentReferenceRelatesTo `binding:"omitempty" bson:",omitempty"`
	ResourceType    string                      `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *DocumentReferenceContent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["attachment"], &out.Attachment); err != nil {
		return err
	}

	if len(asMap["profile"]) > 0 {
		if err := go1.Unmarshal(asMap["profile"], &out.Profile); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type DocumentReferenceContent struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Attachment *Attachment                      `binding:"required" bson:",omitempty" json:"attachment,omitempty"` // The document or URL of the document along with critical metadata to prove content has integrity.
	Profile    *DocumentReferenceContentProfile `binding:"omitempty" bson:",omitempty"`
	Id         *string                          `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension  []*Extension                     `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *DocumentReferenceContentProfile) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["valueCoding"], &out.ValueCoding); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUri"], &out.ValueUri); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCanonical"], &out.ValueCanonical); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type DocumentReferenceContentProfile struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	DocumentReferenceContentProfileValuex
	Id        *string      `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}
type DocumentReferenceContentProfileValuex struct {
	ValueCoding    Coding `bson:",omitempty" json:"valueCoding,omitempty"`
	ValueUri       string `bson:",omitempty" json:"valueUri,omitempty"`
	ValueCanonical string `bson:",omitempty" json:"valueCanonical,omitempty"`
}

func (out *DocumentReferenceAttester) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["mode"], &out.Mode); err != nil {
		return err
	}

	if len(asMap["time"]) > 0 {
		if err := go1.Unmarshal(asMap["time"], &out.Time); err != nil {
			return err
		}

	}
	if len(asMap["party"]) > 0 {
		if err := go1.Unmarshal(asMap["party"], &out.Party); err != nil {
			return err
		}

	}
	return nil
}

type DocumentReferenceAttester struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Mode  *CodeableConcept `binding:"required" bson:",omitempty" json:"mode,omitempty"` // The type of attestation the authenticator offers.
	Time  *DateTime        `bson:",omitempty" json:"time,omitempty"`                    // When the document was attested by the party.
	Party *Reference       `bson:",omitempty" json:"party,omitempty"`                   // Who attested the document in the specified way.
}

func (out *DocumentReferenceRelatesTo) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["target"], &out.Target); err != nil {
		return err
	}

	return nil
}

type DocumentReferenceRelatesTo struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code   *CodeableConcept `binding:"required" bson:",omitempty" json:"code,omitempty"`   // The type of relationship that this document has with anther document.
	Target *Reference       `binding:"required" bson:",omitempty" json:"target,omitempty"` // The target document of this relationship.
}

func (out *DomainResource) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"DomainResource\"" {
		return fmt.Errorf("resourceType is not %s", "DomainResource")
	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	return nil
}

type DomainResource struct {
	Contained         []*Resource  `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Id            *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`         // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta          *Meta               `bson:",omitempty" json:"meta,omitempty"`          // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules *string             `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language      *string             `bson:",omitempty" json:"language,omitempty"`      // The base language in which the resource is written.
	Text          *Narrative          `bson:",omitempty" json:"text,omitempty"`          // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ResourceType  string              `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *Encounter) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Encounter\"" {
		return fmt.Errorf("resourceType is not %s", "Encounter")
	}
	if len(asMap["plannedEndDate"]) > 0 {
		if err := go1.Unmarshal(asMap["plannedEndDate"], &out.PlannedEndDate); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["actualPeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["actualPeriod"], &out.ActualPeriod); err != nil {
			return err
		}

	}
	if len(asMap["diagnosis"]) > 0 {
		if err := go1.Unmarshal(asMap["diagnosis"], &out.Diagnosis); err != nil {
			return err
		}

	}
	if len(asMap["account"]) > 0 {
		if err := go1.Unmarshal(asMap["account"], &out.Account); err != nil {
			return err
		}

	}
	if len(asMap["dietPreference"]) > 0 {
		if err := go1.Unmarshal(asMap["dietPreference"], &out.DietPreference); err != nil {
			return err
		}

	}
	if len(asMap["specialCourtesy"]) > 0 {
		if err := go1.Unmarshal(asMap["specialCourtesy"], &out.SpecialCourtesy); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["episodeOfCare"]) > 0 {
		if err := go1.Unmarshal(asMap["episodeOfCare"], &out.EpisodeOfCare); err != nil {
			return err
		}

	}
	if len(asMap["serviceProvider"]) > 0 {
		if err := go1.Unmarshal(asMap["serviceProvider"], &out.ServiceProvider); err != nil {
			return err
		}

	}
	if len(asMap["participant"]) > 0 {
		if err := go1.Unmarshal(asMap["participant"], &out.Participant); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if len(asMap["plannedStartDate"]) > 0 {
		if err := go1.Unmarshal(asMap["plannedStartDate"], &out.PlannedStartDate); err != nil {
			return err
		}

	}
	if len(asMap["subjectStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["subjectStatus"], &out.SubjectStatus); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["class"]) > 0 {
		if err := go1.Unmarshal(asMap["class"], &out.Class); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["serviceType"]) > 0 {
		if err := go1.Unmarshal(asMap["serviceType"], &out.ServiceType); err != nil {
			return err
		}

	}
	if len(asMap["appointment"]) > 0 {
		if err := go1.Unmarshal(asMap["appointment"], &out.Appointment); err != nil {
			return err
		}

	}
	if len(asMap["length"]) > 0 {
		if err := go1.Unmarshal(asMap["length"], &out.Length); err != nil {
			return err
		}

	}
	if len(asMap["specialArrangement"]) > 0 {
		if err := go1.Unmarshal(asMap["specialArrangement"], &out.SpecialArrangement); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["virtualService"]) > 0 {
		if err := go1.Unmarshal(asMap["virtualService"], &out.VirtualService); err != nil {
			return err
		}

	}
	if len(asMap["admission"]) > 0 {
		if err := go1.Unmarshal(asMap["admission"], &out.Admission); err != nil {
			return err
		}

	}
	if len(asMap["careTeam"]) > 0 {
		if err := go1.Unmarshal(asMap["careTeam"], &out.CareTeam); err != nil {
			return err
		}

	}
	return nil
}

type Encounter struct {
	PlannedEndDate    *DateTime             `bson:",omitempty" json:"plannedEndDate,omitempty"` // The planned end date/time (or discharge date) of the encounter.
	Identifier        []*Identifier         `bson:",omitempty" json:"identifier,omitempty"`     // Identifier(s) by which this encounter is known.
	Subject           *Reference            `bson:",omitempty" json:"subject,omitempty"`        // The patient or group related to this encounter. In some use-cases the patient MAY not be present, such as a case meeting about a patient between several practitioners or a careteam.
	BasedOn           []*Reference          `bson:",omitempty" json:"basedOn,omitempty"`        // The request this encounter satisfies (e.g. incoming referral or procedure request).
	Reason            *EncounterReason      `binding:"omitempty" bson:",omitempty"`
	Priority          *CodeableConcept      `bson:",omitempty" json:"priority,omitempty"`     // Indicates the urgency of the encounter.
	Extension         []*Extension          `bson:",omitempty" json:"extension,omitempty"`    // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ActualPeriod      *Period               `bson:",omitempty" json:"actualPeriod,omitempty"` // The actual start and end time of the encounter.
	Diagnosis         *EncounterDiagnosis   `binding:"omitempty" bson:",omitempty"`
	Account           []*Reference          `bson:",omitempty" json:"account,omitempty"`         // The set of accounts that may be used for billing for this Encounter.
	DietPreference    []*CodeableConcept    `bson:",omitempty" json:"dietPreference,omitempty"`  // Diet preferences reported by the patient.
	SpecialCourtesy   []*CodeableConcept    `bson:",omitempty" json:"specialCourtesy,omitempty"` // Special courtesies that may be provided to the patient during the encounter (VIP, board member, professional courtesy).
	Location          *EncounterLocation    `binding:"omitempty" bson:",omitempty"`
	Text              *Narrative            `bson:",omitempty" json:"text,omitempty"`            // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained         []*Resource           `bson:",omitempty" json:"contained,omitempty"`       // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	EpisodeOfCare     []*Reference          `bson:",omitempty" json:"episodeOfCare,omitempty"`   // Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).
	ServiceProvider   *Reference            `bson:",omitempty" json:"serviceProvider,omitempty"` // The organization that is primarily responsible for this Encounter's services. This MAY be the same as the organization on the Patient record, however it could be different, such as if the actor performing the services was from an external organization (which may be billed seperately) for an external consultation.  Refer to the colonoscopy example on the Encounter examples tab.
	Participant       *EncounterParticipant `binding:"omitempty" bson:",omitempty"`
	ImplicitRules     *string               `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	PartOf            *Reference            `bson:",omitempty" json:"partOf,omitempty"`            // Another Encounter of which this encounter is a part of (administratively or in time).
	PlannedStartDate  *DateTime             `bson:",omitempty" json:"plannedStartDate,omitempty"`  // The planned start date/time (or admission date) of the encounter.
	SubjectStatus     *CodeableConcept      `bson:",omitempty" json:"subjectStatus,omitempty"`     // The subjectStatus value can be used to track the patient's status within the encounter. It details whether the patient has arrived or departed, has been triaged or is currently in a waiting status.
	ModifierExtension []*Extension          `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Class              []*CodeableConcept      `bson:",omitempty" json:"class,omitempty"`                     // Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.
	Type               []*CodeableConcept      `bson:",omitempty" json:"type,omitempty"`                      // Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
	Id                 *primitive.ObjectID     `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language           *string                 `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Status             *string                 `binding:"required" bson:",omitempty" json:"status,omitempty"` // The current state of the encounter (not the state of the patient within the encounter - that is subjectState).
	ServiceType        []*CodeableReference    `bson:",omitempty" json:"serviceType,omitempty"`               // Broad categorization of the service that is to be provided (e.g. cardiology).
	Appointment        []*Reference            `bson:",omitempty" json:"appointment,omitempty"`               // The appointment that scheduled this encounter.
	Length             *Duration               `bson:",omitempty" json:"length,omitempty"`                    // Actual quantity of time the encounter lasted. This excludes the time during leaves of absence.When missing it is the time in between the start and end values.
	SpecialArrangement []*CodeableConcept      `bson:",omitempty" json:"specialArrangement,omitempty"`        // Any special requests that have been made for this encounter, such as the provision of specific equipment or other things.
	Meta               *Meta                   `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	VirtualService     []*VirtualServiceDetail `bson:",omitempty" json:"virtualService,omitempty"`            // Connection details of a virtual service (e.g. conference call).
	Admission          *EncounterAdmission     `binding:"omitempty" bson:",omitempty"`
	CareTeam           []*Reference            `bson:",omitempty" json:"careTeam,omitempty"` // The group(s) of individuals, organizations that are allocated to participate in this encounter. The participants backbone will record the actuals of when these individuals participated during the encounter.
	ResourceType       string                  `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *EncounterReason) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["use"]) > 0 {
		if err := go1.Unmarshal(asMap["use"], &out.Use); err != nil {
			return err
		}

	}
	if len(asMap["value"]) > 0 {
		if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type EncounterReason struct {
	Use               []*CodeableConcept   `bson:",omitempty" json:"use,omitempty"`               // What the reason value should be used as e.g. Chief Complaint, Health Concern, Health Maintenance (including screening).
	Value             []*CodeableReference `bson:",omitempty" json:"value,omitempty"`             // Reason the encounter takes place, expressed as a code or a reference to another resource. For admissions, this can be used for a coded admission diagnosis.
	Id                *string              `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension         `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *EncounterDiagnosis) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["use"]) > 0 {
		if err := go1.Unmarshal(asMap["use"], &out.Use); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["condition"]) > 0 {
		if err := go1.Unmarshal(asMap["condition"], &out.Condition); err != nil {
			return err
		}

	}
	return nil
}

type EncounterDiagnosis struct {
	Use               []*CodeableConcept `bson:",omitempty" json:"use,omitempty"`               // Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …).
	Id                *string            `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension       `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Condition []*CodeableReference `bson:",omitempty" json:"condition,omitempty"` // The coded diagnosis or a reference to a Condition (with other resources referenced in the evidence.detail), the use property will indicate the purpose of this specific diagnosis.
}

func (out *EncounterLocation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["form"]) > 0 {
		if err := go1.Unmarshal(asMap["form"], &out.Form); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
		return err
	}

	return nil
}

type EncounterLocation struct {
	Status            *string          `bson:",omitempty" json:"status,omitempty"`            // The status of the participants' presence at the specified location during the period specified. If the participant is no longer at the location, then the period will have an end date/time.
	Form              *CodeableConcept `bson:",omitempty" json:"form,omitempty"`              // This will be used to specify the required levels (bed/ward/room/etc.) desired to be recorded to simplify either messaging or query.
	Period            *Period          `bson:",omitempty" json:"period,omitempty"`            // Time period during which the patient was present at the location.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Location *Reference `binding:"required" bson:",omitempty" json:"location,omitempty"` // The location where the encounter takes place.
}

func (out *EncounterParticipant) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["actor"]) > 0 {
		if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type EncounterParticipant struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type      []*CodeableConcept `bson:",omitempty" json:"type,omitempty"`      // Role of participant in encounter.
	Period    *Period            `bson:",omitempty" json:"period,omitempty"`    // The period of time that the specified participant participated in the encounter. These can overlap or be sub-sets of the overall encounter's period.
	Actor     *Reference         `bson:",omitempty" json:"actor,omitempty"`     // Person involved in the encounter, the patient/group is also included here to indicate that the patient was actually participating in the encounter. Not including the patient here covers use cases such as a case meeting between practitioners about a patient - non contact times.
	Id        *string            `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension       `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *EncounterAdmission) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["preAdmissionIdentifier"]) > 0 {
		if err := go1.Unmarshal(asMap["preAdmissionIdentifier"], &out.PreAdmissionIdentifier); err != nil {
			return err
		}

	}
	if len(asMap["destination"]) > 0 {
		if err := go1.Unmarshal(asMap["destination"], &out.Destination); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["admitSource"]) > 0 {
		if err := go1.Unmarshal(asMap["admitSource"], &out.AdmitSource); err != nil {
			return err
		}

	}
	if len(asMap["reAdmission"]) > 0 {
		if err := go1.Unmarshal(asMap["reAdmission"], &out.ReAdmission); err != nil {
			return err
		}

	}
	if len(asMap["dischargeDisposition"]) > 0 {
		if err := go1.Unmarshal(asMap["dischargeDisposition"], &out.DischargeDisposition); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["origin"]) > 0 {
		if err := go1.Unmarshal(asMap["origin"], &out.Origin); err != nil {
			return err
		}

	}
	return nil
}

type EncounterAdmission struct {
	PreAdmissionIdentifier *Identifier      `bson:",omitempty" json:"preAdmissionIdentifier,omitempty"` // Pre-admission identifier.
	Destination            *Reference       `bson:",omitempty" json:"destination,omitempty"`            // Location/organization to which the patient is discharged.
	Id                     *string          `bson:"_id,omitempty" json:"id,omitempty"`                  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension              []*Extension     `bson:",omitempty" json:"extension,omitempty"`              // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	AdmitSource            *CodeableConcept `bson:",omitempty" json:"admitSource,omitempty"`            // From where patient was admitted (physician referral, transfer).
	ReAdmission            *CodeableConcept `bson:",omitempty" json:"reAdmission,omitempty"`            // Indicates that this encounter is directly related to a prior admission, often because the conditions addressed in the prior admission were not fully addressed.
	DischargeDisposition   *CodeableConcept `bson:",omitempty" json:"dischargeDisposition,omitempty"`   // Category or kind of location after discharge.
	ModifierExtension      []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`      /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Origin *Reference `bson:",omitempty" json:"origin,omitempty"` // The location/organization from which the patient came before admission.
}

func (out *EncounterHistory) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"EncounterHistory\"" {
		return fmt.Errorf("resourceType is not %s", "EncounterHistory")
	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["plannedEndDate"]) > 0 {
		if err := go1.Unmarshal(asMap["plannedEndDate"], &out.PlannedEndDate); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["serviceType"]) > 0 {
		if err := go1.Unmarshal(asMap["serviceType"], &out.ServiceType); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["subjectStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["subjectStatus"], &out.SubjectStatus); err != nil {
			return err
		}

	}
	if len(asMap["length"]) > 0 {
		if err := go1.Unmarshal(asMap["length"], &out.Length); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["class"], &out.Class); err != nil {
		return err
	}

	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["actualPeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["actualPeriod"], &out.ActualPeriod); err != nil {
			return err
		}

	}
	if len(asMap["plannedStartDate"]) > 0 {
		if err := go1.Unmarshal(asMap["plannedStartDate"], &out.PlannedStartDate); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	return nil
}

type EncounterHistory struct {
	Contained         []*Resource               `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Encounter         *Reference                `bson:",omitempty" json:"encounter,omitempty"`                 // The Encounter associated with this set of historic values.
	PlannedEndDate    *DateTime                 `bson:",omitempty" json:"plannedEndDate,omitempty"`            // The planned end date/time (or discharge date) of the encounter.
	ImplicitRules     *string                   `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language          *string                   `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Status            *string                   `binding:"required" bson:",omitempty" json:"status,omitempty"` // planned | in-progress | on-hold | discharged | completed | cancelled | discontinued | entered-in-error | unknown.
	ServiceType       []*CodeableReference      `bson:",omitempty" json:"serviceType,omitempty"`               // Broad categorization of the service that is to be provided (e.g. cardiology).
	Subject           *Reference                `bson:",omitempty" json:"subject,omitempty"`                   // The patient or group related to this encounter. In some use-cases the patient MAY not be present, such as a case meeting about a patient between several practitioners or a careteam.
	SubjectStatus     *CodeableConcept          `bson:",omitempty" json:"subjectStatus,omitempty"`             // The subjectStatus value can be used to track the patient's status within the encounter. It details whether the patient has arrived or departed, has been triaged or is currently in a waiting status.
	Length            *Duration                 `bson:",omitempty" json:"length,omitempty"`                    // Actual quantity of time the encounter lasted. This excludes the time during leaves of absence.When missing it is the time in between the start and end values.
	Location          *EncounterHistoryLocation `binding:"omitempty" bson:",omitempty"`
	Text              *Narrative                `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension         []*Extension              `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension              `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier       []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`               // Identifier(s) by which this encounter is known.
	Class            *CodeableConcept    `binding:"required" bson:",omitempty" json:"class,omitempty"` // Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.
	Type             []*CodeableConcept  `bson:",omitempty" json:"type,omitempty"`                     // Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
	ActualPeriod     *Period             `bson:",omitempty" json:"actualPeriod,omitempty"`             // The start and end time associated with this set of values associated with the encounter, may be different to the planned times for various reasons.
	PlannedStartDate *DateTime           `bson:",omitempty" json:"plannedStartDate,omitempty"`         // The planned start date/time (or admission date) of the encounter.
	Id               *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                    // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta             *Meta               `bson:",omitempty" json:"meta,omitempty"`                     // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ResourceType     string              `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *EncounterHistoryLocation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
		return err
	}

	if len(asMap["form"]) > 0 {
		if err := go1.Unmarshal(asMap["form"], &out.Form); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type EncounterHistoryLocation struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Location  *Reference       `binding:"required" bson:",omitempty" json:"location,omitempty"` // The location where the encounter takes place.
	Form      *CodeableConcept `bson:",omitempty" json:"form,omitempty"`                        // This will be used to specify the required levels (bed/ward/room/etc.) desired to be recorded to simplify either messaging or query.
	Id        *string          `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension     `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *Endpoint) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Endpoint\"" {
		return fmt.Errorf("resourceType is not %s", "Endpoint")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["environmentType"]) > 0 {
		if err := go1.Unmarshal(asMap["environmentType"], &out.EnvironmentType); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["address"], &out.Address); err != nil {
		return err
	}

	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["managingOrganization"]) > 0 {
		if err := go1.Unmarshal(asMap["managingOrganization"], &out.ManagingOrganization); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["connectionType"], &out.ConnectionType); err != nil {
		return err
	}

	if len(asMap["payload"]) > 0 {
		if err := go1.Unmarshal(asMap["payload"], &out.Payload); err != nil {
			return err
		}

	}
	if len(asMap["header"]) > 0 {
		if err := go1.Unmarshal(asMap["header"], &out.Header); err != nil {
			return err
		}

	}
	return nil
}

type Endpoint struct {
	Id                   *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ImplicitRules        *string             `bson:",omitempty" json:"implicitRules,omitempty"`              // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language             *string             `bson:",omitempty" json:"language,omitempty"`                   // The base language in which the resource is written.
	Name                 *string             `bson:",omitempty" json:"name,omitempty"`                       // A friendly name that this endpoint can be referred to with.
	Description          *string             `bson:",omitempty" json:"description,omitempty"`                // The description of the endpoint and what it is for (typically used as supplemental information in an endpoint directory describing its usage/purpose).
	EnvironmentType      []*CodeableConcept  `bson:",omitempty" json:"environmentType,omitempty"`            // The type of environment(s) exposed at this endpoint (dev, prod, test, etc.).
	Contact              []*ContactPoint     `bson:",omitempty" json:"contact,omitempty"`                    // Contact details for a human to contact about the endpoint. The primary use of this for system administrator troubleshooting.
	Period               *Period             `bson:",omitempty" json:"period,omitempty"`                     // The interval during which the endpoint is expected to be operational.
	Address              *url.URL            `binding:"required" bson:",omitempty" json:"address,omitempty"` // The uri that describes the actual end-point to connect to.
	Text                 *Narrative          `bson:",omitempty" json:"text,omitempty"`                       // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained            []*Resource         `bson:",omitempty" json:"contained,omitempty"`                  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Identifier           []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`                 // Identifier for the organization that is used to identify the endpoint across multiple disparate systems.
	ManagingOrganization *Reference          `bson:",omitempty" json:"managingOrganization,omitempty"`       // The organization that manages this endpoint (even if technically another organization is hosting this in the cloud, it is the organization associated with the data).
	Extension            []*Extension        `bson:",omitempty" json:"extension,omitempty"`                  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension    []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"`          /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Status         *string            `binding:"required" bson:",omitempty" json:"status,omitempty"`         // The endpoint status represents the general expected availability of an endpoint.
	Meta           *Meta              `bson:",omitempty" json:"meta,omitempty"`                              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ConnectionType []*CodeableConcept `binding:"required" bson:",omitempty" json:"connectionType,omitempty"` // A coded value that represents the technical details of the usage of this endpoint, such as what WSDLs should be used in what way. (e.g. XDS.b/DICOM/cds-hook).
	Payload        *EndpointPayload   `binding:"omitempty" bson:",omitempty"`
	Header         []*string          `bson:",omitempty" json:"header,omitempty"` // Additional headers / information to send as part of the notification.
	ResourceType   string             `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *EndpointPayload) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["mimeType"]) > 0 {
		if err := go1.Unmarshal(asMap["mimeType"], &out.MimeType); err != nil {
			return err
		}

	}
	return nil
}

type EndpointPayload struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type     []*CodeableConcept `bson:",omitempty" json:"type,omitempty"`     // The payload type describes the acceptable content that can be communicated on the endpoint.
	MimeType []*string          `bson:",omitempty" json:"mimeType,omitempty"` // The mime type to send the payload in - e.g. application/fhir+xml, application/fhir+json. If the mime type is not specified, then the sender could send any content (including no content depending on the connectionType).
}

func (out *EnrollmentRequest) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"EnrollmentRequest\"" {
		return fmt.Errorf("resourceType is not %s", "EnrollmentRequest")
	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["insurer"]) > 0 {
		if err := go1.Unmarshal(asMap["insurer"], &out.Insurer); err != nil {
			return err
		}

	}
	if len(asMap["provider"]) > 0 {
		if err := go1.Unmarshal(asMap["provider"], &out.Provider); err != nil {
			return err
		}

	}
	if len(asMap["coverage"]) > 0 {
		if err := go1.Unmarshal(asMap["coverage"], &out.Coverage); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["candidate"]) > 0 {
		if err := go1.Unmarshal(asMap["candidate"], &out.Candidate); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["created"]) > 0 {
		if err := go1.Unmarshal(asMap["created"], &out.Created); err != nil {
			return err
		}

	}
	return nil
}

type EnrollmentRequest struct {
	ImplicitRules     *string             `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Status            *string             `bson:",omitempty" json:"status,omitempty"`            // The status of the resource instance.
	Language          *string             `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Contained         []*Resource         `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension         []*Extension        `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Insurer           *Reference          `bson:",omitempty" json:"insurer,omitempty"`           // The Insurer who is target  of the request.
	Provider          *Reference          `bson:",omitempty" json:"provider,omitempty"`          // The practitioner who is responsible for the services rendered to the patient.
	Coverage          *Reference          `bson:",omitempty" json:"coverage,omitempty"`          // Reference to the program or plan identification, underwriter or payor.
	Meta              *Meta               `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Text              *Narrative          `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Identifier        []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`        // The Response business identifier.
	Candidate         *Reference          `bson:",omitempty" json:"candidate,omitempty"`         // Patient Resource.
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Created      *DateTime `bson:",omitempty" json:"created,omitempty"` // The date when this resource was created.
	ResourceType string    `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *EnrollmentResponse) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"EnrollmentResponse\"" {
		return fmt.Errorf("resourceType is not %s", "EnrollmentResponse")
	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["outcome"]) > 0 {
		if err := go1.Unmarshal(asMap["outcome"], &out.Outcome); err != nil {
			return err
		}

	}
	if len(asMap["requestProvider"]) > 0 {
		if err := go1.Unmarshal(asMap["requestProvider"], &out.RequestProvider); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["request"]) > 0 {
		if err := go1.Unmarshal(asMap["request"], &out.Request); err != nil {
			return err
		}

	}
	if len(asMap["created"]) > 0 {
		if err := go1.Unmarshal(asMap["created"], &out.Created); err != nil {
			return err
		}

	}
	if len(asMap["organization"]) > 0 {
		if err := go1.Unmarshal(asMap["organization"], &out.Organization); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["disposition"]) > 0 {
		if err := go1.Unmarshal(asMap["disposition"], &out.Disposition); err != nil {
			return err
		}

	}
	return nil
}

type EnrollmentResponse struct {
	Meta              *Meta               `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Identifier        []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`        // The Response business identifier.
	Status            *string             `bson:",omitempty" json:"status,omitempty"`            // The status of the resource instance.
	Outcome           *string             `bson:",omitempty" json:"outcome,omitempty"`           // Processing status: error, complete.
	RequestProvider   *Reference          `bson:",omitempty" json:"requestProvider,omitempty"`   // The practitioner who is responsible for the services rendered to the patient.
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language          *string             `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Text              *Narrative          `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Request       *Reference   `bson:",omitempty" json:"request,omitempty"`       // Original request resource reference.
	Created       *DateTime    `bson:",omitempty" json:"created,omitempty"`       // The date when the enclosed suite of services were performed or completed.
	Organization  *Reference   `bson:",omitempty" json:"organization,omitempty"`  // The Insurer who produced this adjudicated response.
	Contained     []*Resource  `bson:",omitempty" json:"contained,omitempty"`     // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension     []*Extension `bson:",omitempty" json:"extension,omitempty"`     // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ImplicitRules *string      `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Disposition   *string      `bson:",omitempty" json:"disposition,omitempty"`   // A description of the status of the adjudication.
	ResourceType  string       `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *EpisodeOfCare) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"EpisodeOfCare\"" {
		return fmt.Errorf("resourceType is not %s", "EpisodeOfCare")
	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["statusHistory"]) > 0 {
		if err := go1.Unmarshal(asMap["statusHistory"], &out.StatusHistory); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["managingOrganization"]) > 0 {
		if err := go1.Unmarshal(asMap["managingOrganization"], &out.ManagingOrganization); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["account"]) > 0 {
		if err := go1.Unmarshal(asMap["account"], &out.Account); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["diagnosis"]) > 0 {
		if err := go1.Unmarshal(asMap["diagnosis"], &out.Diagnosis); err != nil {
			return err
		}

	}
	if len(asMap["careManager"]) > 0 {
		if err := go1.Unmarshal(asMap["careManager"], &out.CareManager); err != nil {
			return err
		}

	}
	if len(asMap["careTeam"]) > 0 {
		if err := go1.Unmarshal(asMap["careTeam"], &out.CareTeam); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["patient"], &out.Patient); err != nil {
		return err
	}

	if len(asMap["referralRequest"]) > 0 {
		if err := go1.Unmarshal(asMap["referralRequest"], &out.ReferralRequest); err != nil {
			return err
		}

	}
	return nil
}

type EpisodeOfCare struct {
	Meta                 *Meta                       `bson:",omitempty" json:"meta,omitempty"`          // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules        *string                     `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Extension            []*Extension                `bson:",omitempty" json:"extension,omitempty"`     // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	StatusHistory        *EpisodeOfCareStatusHistory `binding:"omitempty" bson:",omitempty"`
	Reason               *EpisodeOfCareReason        `binding:"omitempty" bson:",omitempty"`
	ManagingOrganization *Reference                  `bson:",omitempty" json:"managingOrganization,omitempty"`      // The organization that has assumed the specific responsibilities for care coordination, care delivery, or other services for the specified duration.
	Id                   *primitive.ObjectID         `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language             *string                     `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Identifier           []*Identifier               `bson:",omitempty" json:"identifier,omitempty"`                // The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
	Status               *string                     `binding:"required" bson:",omitempty" json:"status,omitempty"` // planned | waitlist | active | onhold | finished | cancelled.
	Period               *Period                     `bson:",omitempty" json:"period,omitempty"`                    // The interval during which the managing organization assumes the defined responsibility.
	Account              []*Reference                `bson:",omitempty" json:"account,omitempty"`                   // The set of accounts that may be used for billing for this EpisodeOfCare.
	Text                 *Narrative                  `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained            []*Resource                 `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Type                 []*CodeableConcept          `bson:",omitempty" json:"type,omitempty"`                      // A classification of the type of episode of care; e.g. specialist referral, disease management, type of funded care.
	Diagnosis            *EpisodeOfCareDiagnosis     `binding:"omitempty" bson:",omitempty"`
	CareManager          *Reference                  `bson:",omitempty" json:"careManager,omitempty"`       // The practitioner that is the care manager/care coordinator for this patient.
	CareTeam             []*Reference                `bson:",omitempty" json:"careTeam,omitempty"`          // The list of practitioners that may be facilitating this episode of care for specific purposes.
	ModifierExtension    []*Extension                `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Patient         *Reference   `binding:"required" bson:",omitempty" json:"patient,omitempty"` // The patient who is the focus of this episode of care.
	ReferralRequest []*Reference `bson:",omitempty" json:"referralRequest,omitempty"`            // Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
	ResourceType    string       `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *EpisodeOfCareStatusHistory) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
		return err
	}

	return nil
}

type EpisodeOfCareStatusHistory struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Status *string `binding:"required" bson:",omitempty" json:"status,omitempty"` // planned | waitlist | active | onhold | finished | cancelled.
	Period *Period `binding:"required" bson:",omitempty" json:"period,omitempty"` // The period during this EpisodeOfCare that the specific status applied.
}

func (out *EpisodeOfCareReason) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["use"]) > 0 {
		if err := go1.Unmarshal(asMap["use"], &out.Use); err != nil {
			return err
		}

	}
	if len(asMap["value"]) > 0 {
		if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
			return err
		}

	}
	return nil
}

type EpisodeOfCareReason struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Use   *CodeableConcept     `bson:",omitempty" json:"use,omitempty"`   // What the reason value should be used as e.g. Chief Complaint, Health Concern, Health Maintenance (including screening).
	Value []*CodeableReference `bson:",omitempty" json:"value,omitempty"` // The medical reason that is expected to be addressed during the episode of care, expressed as a text, code or a reference to another resource.
}

func (out *EpisodeOfCareDiagnosis) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["condition"]) > 0 {
		if err := go1.Unmarshal(asMap["condition"], &out.Condition); err != nil {
			return err
		}

	}
	if len(asMap["use"]) > 0 {
		if err := go1.Unmarshal(asMap["use"], &out.Use); err != nil {
			return err
		}

	}
	return nil
}

type EpisodeOfCareDiagnosis struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Condition []*CodeableReference `bson:",omitempty" json:"condition,omitempty"` // The medical condition that was addressed during the episode of care, expressed as a text, code or a reference to another resource.
	Use       *CodeableConcept     `bson:",omitempty" json:"use,omitempty"`       // Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …).
}

func (out *EventDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"EventDefinition\"" {
		return fmt.Errorf("resourceType is not %s", "EventDefinition")
	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subjectCodeableConcept"], &out.SubjectCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["subjectReference"], &out.SubjectReference); err == nil {
	} else {

	}
	if len(asMap["approvalDate"]) > 0 {
		if err := go1.Unmarshal(asMap["approvalDate"], &out.ApprovalDate); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["trigger"], &out.Trigger); err != nil {
		return err
	}

	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["subtitle"]) > 0 {
		if err := go1.Unmarshal(asMap["subtitle"], &out.Subtitle); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["effectivePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["lastReviewDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastReviewDate"], &out.LastReviewDate); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["usage"]) > 0 {
		if err := go1.Unmarshal(asMap["usage"], &out.Usage); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["relatedArtifact"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedArtifact"], &out.RelatedArtifact); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["reviewer"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewer"], &out.Reviewer); err != nil {
			return err
		}

	}
	if len(asMap["endorser"]) > 0 {
		if err := go1.Unmarshal(asMap["endorser"], &out.Endorser); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["topic"]) > 0 {
		if err := go1.Unmarshal(asMap["topic"], &out.Topic); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["editor"]) > 0 {
		if err := go1.Unmarshal(asMap["editor"], &out.Editor); err != nil {
			return err
		}

	}
	return nil
}

type EventDefinition struct {
	ImplicitRules *string            `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	UseContext    []*UsageContext    `bson:",omitempty" json:"useContext,omitempty"`                // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate event definition instances.
	Jurisdiction  []*CodeableConcept `bson:",omitempty" json:"jurisdiction,omitempty"`              // A legal or geographic region in which the event definition is intended to be used.
	Purpose       *string            `bson:",omitempty" json:"purpose,omitempty"`                   // Explanation of why this event definition is needed and why it has been designed as it has.
	Text          *Narrative         `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Status        *string            `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this event definition. Enables tracking the life-cycle of the content.
	Publisher     *string            `bson:",omitempty" json:"publisher,omitempty"`                 // The name of the organization or individual responsible for the release and ongoing maintenance of the event definition.
	Extension     []*Extension       `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	EventDefinitionSubjectx
	ApprovalDate      *Date               `bson:",omitempty" json:"approvalDate,omitempty"`               // The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
	Trigger           []TriggerDefinition `binding:"required" bson:",omitempty" json:"trigger,omitempty"` // The trigger element defines when the event occurs. If more than one trigger condition is specified, the event fires whenever any one of the trigger conditions is met.
	Name              *string             `bson:",omitempty" json:"name,omitempty"`                       // A natural language name identifying the event definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Subtitle          *string             `bson:",omitempty" json:"subtitle,omitempty"`                   // An explanatory or alternate title for the event definition giving additional information about its content.
	Copyright         *string             `bson:",omitempty" json:"copyright,omitempty"`                  // A copyright statement relating to the event definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the event definition.
	EffectivePeriod   *Period             `bson:",omitempty" json:"effectivePeriod,omitempty"`            // The period during which the event definition content was or is planned to be in active use.
	Contained         []*Resource         `bson:",omitempty" json:"contained,omitempty"`                  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Identifier        []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`                 // A formal identifier that is used to identify this event definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Contact           []*ContactDetail    `bson:",omitempty" json:"contact,omitempty"`                    // Contact details to assist a user in finding and communicating with the publisher.
	LastReviewDate    *Date               `bson:",omitempty" json:"lastReviewDate,omitempty"`             // The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Experimental      *bool               `bson:",omitempty" json:"experimental,omitempty"`               // A Boolean value to indicate that this event definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Date              *DateTime           `bson:",omitempty" json:"date,omitempty"`                       // The date  (and optionally time) when the event definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the event definition changes.
	Usage             *string             `bson:",omitempty" json:"usage,omitempty"`                      // A detailed description of how the event definition is used from a clinical perspective.
	CopyrightLabel    *string             `bson:",omitempty" json:"copyrightLabel,omitempty"`             // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	RelatedArtifact   []*RelatedArtifact  `bson:",omitempty" json:"relatedArtifact,omitempty"`            // Related resources such as additional documentation, justification, or bibliographic references.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"`          /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Url *string `bson:",omitempty" json:"url,omitempty"` // An absolute URI that is used to identify this event definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this event definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the event definition is stored on different servers.
	EventDefinitionVersionAlgorithmx
	Title        *string            `bson:",omitempty" json:"title,omitempty"`       // A short, descriptive, user-friendly title for the event definition.
	Description  *string            `bson:",omitempty" json:"description,omitempty"` // A free text natural language description of the event definition from a consumer's perspective.
	Reviewer     []*ContactDetail   `bson:",omitempty" json:"reviewer,omitempty"`    // An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.
	Endorser     []*ContactDetail   `bson:",omitempty" json:"endorser,omitempty"`    // An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.
	Meta         *Meta              `bson:",omitempty" json:"meta,omitempty"`        // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language     *string            `bson:",omitempty" json:"language,omitempty"`    // The base language in which the resource is written.
	Version      *string            `bson:",omitempty" json:"version,omitempty"`     // The identifier that is used to identify this version of the event definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the event definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Topic        []*CodeableConcept `bson:",omitempty" json:"topic,omitempty"`       // Descriptive topics related to the module. Topics provide a high-level categorization of the module that can be useful for filtering and searching.
	Author       []*ContactDetail   `bson:",omitempty" json:"author,omitempty"`      // An individiual or organization primarily involved in the creation and maintenance of the content.
	Editor       []*ContactDetail   `bson:",omitempty" json:"editor,omitempty"`      // An individual or organization primarily responsible for internal coherence of the content.
	ResourceType string             `binding:"omitempty" bson:"-" json:"resourceType"`
}
type EventDefinitionSubjectx struct {
	SubjectCodeableConcept CodeableConcept `bson:",omitempty" json:"subjectCodeableConcept,omitempty"`
	SubjectReference       Reference       `bson:",omitempty" json:"subjectReference,omitempty"`
}
type EventDefinitionVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *Evidence) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Evidence\"" {
		return fmt.Errorf("resourceType is not %s", "Evidence")
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["lastReviewDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastReviewDate"], &out.LastReviewDate); err != nil {
			return err
		}

	}
	if len(asMap["editor"]) > 0 {
		if err := go1.Unmarshal(asMap["editor"], &out.Editor); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["relatedArtifact"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedArtifact"], &out.RelatedArtifact); err != nil {
			return err
		}

	}
	if len(asMap["synthesisType"]) > 0 {
		if err := go1.Unmarshal(asMap["synthesisType"], &out.SynthesisType); err != nil {
			return err
		}

	}
	if len(asMap["statistic"]) > 0 {
		if err := go1.Unmarshal(asMap["statistic"], &out.Statistic); err != nil {
			return err
		}

	}
	if len(asMap["certainty"]) > 0 {
		if err := go1.Unmarshal(asMap["certainty"], &out.Certainty); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["reviewer"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewer"], &out.Reviewer); err != nil {
			return err
		}

	}
	if len(asMap["endorser"]) > 0 {
		if err := go1.Unmarshal(asMap["endorser"], &out.Endorser); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["citeAsReference"], &out.CiteAsReference); err == nil {
	} else if err := go1.Unmarshal(asMap["citeAsMarkdown"], &out.CiteAsMarkdown); err == nil {
	} else {

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["variableDefinition"], &out.VariableDefinition); err != nil {
		return err
	}

	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["assertion"]) > 0 {
		if err := go1.Unmarshal(asMap["assertion"], &out.Assertion); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["studyDesign"]) > 0 {
		if err := go1.Unmarshal(asMap["studyDesign"], &out.StudyDesign); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["approvalDate"]) > 0 {
		if err := go1.Unmarshal(asMap["approvalDate"], &out.ApprovalDate); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	return nil
}

type Evidence struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	LastReviewDate  *Date              `bson:",omitempty" json:"lastReviewDate,omitempty"`  // The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
	Editor          []*ContactDetail   `bson:",omitempty" json:"editor,omitempty"`          // An individiual, organization, or device primarily responsible for internal coherence of the content.
	Purpose         *string            `bson:",omitempty" json:"purpose,omitempty"`         // Explanation of why this Evidence is needed and why it has been designed as it has.
	Author          []*ContactDetail   `bson:",omitempty" json:"author,omitempty"`          // An individiual, organization, or device primarily involved in the creation and maintenance of the content.
	RelatedArtifact []*RelatedArtifact `bson:",omitempty" json:"relatedArtifact,omitempty"` // Link or citation to artifact associated with the summary.
	SynthesisType   *CodeableConcept   `bson:",omitempty" json:"synthesisType,omitempty"`   // The method to combine studies.
	Statistic       *EvidenceStatistic `binding:"omitempty" bson:",omitempty"`
	Certainty       *EvidenceCertainty `binding:"omitempty" bson:",omitempty"`
	CopyrightLabel  *string            `bson:",omitempty" json:"copyrightLabel,omitempty"` // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Url             *string            `bson:",omitempty" json:"url,omitempty"`            // An absolute URI that is used to identify this evidence when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this summary is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the summary is stored on different servers.
	Identifier      []*Identifier      `bson:",omitempty" json:"identifier,omitempty"`     // A formal identifier that is used to identify this summary when it is represented in other formats, or referenced in a specification, model, design or an instance.
	EvidenceVersionAlgorithmx
	Date       *DateTime           `bson:",omitempty" json:"date,omitempty"`       // The date  (and optionally time) when the summary was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the summary changes.
	Reviewer   []*ContactDetail    `bson:",omitempty" json:"reviewer,omitempty"`   // An individiual, organization, or device primarily responsible for review of some aspect of the content.
	Endorser   []*ContactDetail    `bson:",omitempty" json:"endorser,omitempty"`   // An individiual, organization, or device responsible for officially endorsing the content for use in some setting.
	UseContext []*UsageContext     `bson:",omitempty" json:"useContext,omitempty"` // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence instances.
	Id         *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language   *string             `bson:",omitempty" json:"language,omitempty"`   // The base language in which the resource is written.
	Title      *string             `bson:",omitempty" json:"title,omitempty"`      // A short, descriptive, user-friendly title for the summary.
	EvidenceCiteAsx
	Experimental       *bool                       `bson:",omitempty" json:"experimental,omitempty"` // A Boolean value to indicate that this resource is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Publisher          *string                     `bson:",omitempty" json:"publisher,omitempty"`    // The name of the organization or individual responsible for the release and ongoing maintenance of the evidence.
	Meta               *Meta                       `bson:",omitempty" json:"meta,omitempty"`         // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Name               *string                     `bson:",omitempty" json:"name,omitempty"`         // A natural language name identifying the evidence. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Copyright          *string                     `bson:",omitempty" json:"copyright,omitempty"`    // A copyright statement relating to the Evidence and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the Evidence.
	VariableDefinition *EvidenceVariableDefinition `binding:"omitempty" bson:",omitempty"`
	ImplicitRules      *string                     `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text               *Narrative                  `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension          []*Extension                `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Assertion          *string                     `bson:",omitempty" json:"assertion,omitempty"`                 // Declarative description of the Evidence.
	Note               []*Annotation               `bson:",omitempty" json:"note,omitempty"`                      // Footnotes and/or explanatory notes.
	StudyDesign        []*CodeableConcept          `bson:",omitempty" json:"studyDesign,omitempty"`               // The design of the study that produced this evidence. The design is described with any number of study design characteristics.
	Contained          []*Resource                 `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Version            *string                     `bson:",omitempty" json:"version,omitempty"`                   // The identifier that is used to identify this version of the summary when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the summary author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Status             *string                     `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this summary. Enables tracking the life-cycle of the content.
	Description        *string                     `bson:",omitempty" json:"description,omitempty"`               // A free text natural language description of the evidence from a consumer's perspective.
	ApprovalDate       *Date                       `bson:",omitempty" json:"approvalDate,omitempty"`              // The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
	Contact            []*ContactDetail            `bson:",omitempty" json:"contact,omitempty"`                   // Contact details to assist a user in finding and communicating with the publisher.
	ResourceType       string                      `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *EvidenceStatistic) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modelCharacteristic"]) > 0 {
		if err := go1.Unmarshal(asMap["modelCharacteristic"], &out.ModelCharacteristic); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["statisticType"]) > 0 {
		if err := go1.Unmarshal(asMap["statisticType"], &out.StatisticType); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["sampleSize"]) > 0 {
		if err := go1.Unmarshal(asMap["sampleSize"], &out.SampleSize); err != nil {
			return err
		}

	}
	if len(asMap["attributeEstimate"]) > 0 {
		if err := go1.Unmarshal(asMap["attributeEstimate"], &out.AttributeEstimate); err != nil {
			return err
		}

	}
	if len(asMap["numberOfEvents"]) > 0 {
		if err := go1.Unmarshal(asMap["numberOfEvents"], &out.NumberOfEvents); err != nil {
			return err
		}

	}
	if len(asMap["numberAffected"]) > 0 {
		if err := go1.Unmarshal(asMap["numberAffected"], &out.NumberAffected); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	return nil
}

type EvidenceStatistic struct {
	ModelCharacteristic *EvidenceStatisticModelCharacteristic `binding:"omitempty" bson:",omitempty"`
	ModifierExtension   []*Extension                          `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	StatisticType     *CodeableConcept                    `bson:",omitempty" json:"statisticType,omitempty"` // Type of statistic, e.g., relative risk.
	Category          *CodeableConcept                    `bson:",omitempty" json:"category,omitempty"`      // When the measured variable is handled categorically, the category element is used to define which category the statistic is reporting.
	SampleSize        *EvidenceStatisticSampleSize        `binding:"omitempty" bson:",omitempty"`
	AttributeEstimate *EvidenceStatisticAttributeEstimate `binding:"omitempty" bson:",omitempty"`
	NumberOfEvents    *int                                `bson:",omitempty" json:"numberOfEvents,omitempty"` // The number of events associated with the statistic, where the unit of analysis is different from numberAffected, sampleSize.knownDataCount and sampleSize.numberOfParticipants.
	NumberAffected    *int                                `bson:",omitempty" json:"numberAffected,omitempty"` // The number of participants affected where the unit of analysis is the same as sampleSize.knownDataCount and sampleSize.numberOfParticipants.
	Id                *string                             `bson:"_id,omitempty" json:"id,omitempty"`          // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                        `bson:",omitempty" json:"extension,omitempty"`      // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Description       *string                             `bson:",omitempty" json:"description,omitempty"`    // A description of the content value of the statistic.
	Note              []*Annotation                       `bson:",omitempty" json:"note,omitempty"`           // Footnotes and/or explanatory notes.
	Quantity          *Quantity                           `bson:",omitempty" json:"quantity,omitempty"`       // Statistic value.
}

func (out *EvidenceStatisticModelCharacteristic) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["value"]) > 0 {
		if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
			return err
		}

	}
	if len(asMap["variable"]) > 0 {
		if err := go1.Unmarshal(asMap["variable"], &out.Variable); err != nil {
			return err
		}

	}
	if len(asMap["attributeEstimate"]) > 0 {
		if err := go1.Unmarshal(asMap["attributeEstimate"], &out.AttributeEstimate); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type EvidenceStatisticModelCharacteristic struct {
	Code              *CodeableConcept                              `binding:"required" bson:",omitempty" json:"code,omitempty"` // Description of a component of the method to generate the statistic.
	Value             *Quantity                                     `bson:",omitempty" json:"value,omitempty"`                   // Further specification of the quantified value of the component of the method to generate the statistic.
	Variable          *EvidenceStatisticModelCharacteristicVariable `binding:"omitempty" bson:",omitempty"`
	AttributeEstimate interface{}
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *EvidenceStatisticModelCharacteristicVariable) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["valueQuantity"]) > 0 {
		if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err != nil {
			return err
		}

	}
	if len(asMap["valueRange"]) > 0 {
		if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["variableDefinition"], &out.VariableDefinition); err != nil {
		return err
	}

	if len(asMap["handling"]) > 0 {
		if err := go1.Unmarshal(asMap["handling"], &out.Handling); err != nil {
			return err
		}

	}
	if len(asMap["valueCategory"]) > 0 {
		if err := go1.Unmarshal(asMap["valueCategory"], &out.ValueCategory); err != nil {
			return err
		}

	}
	return nil
}

type EvidenceStatisticModelCharacteristicVariable struct {
	ValueQuantity     []*Quantity  `bson:",omitempty" json:"valueQuantity,omitempty"`     // Discrete value for grouping of ordinal or polychotomous variables.
	ValueRange        []*Range     `bson:",omitempty" json:"valueRange,omitempty"`        // Range of values for grouping of ordinal or polychotomous variables.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	VariableDefinition *Reference         `binding:"required" bson:",omitempty" json:"variableDefinition,omitempty"` // Description of the variable.
	Handling           *string            `bson:",omitempty" json:"handling,omitempty"`                              // How the variable is classified for use in adjusted analysis.
	ValueCategory      []*CodeableConcept `bson:",omitempty" json:"valueCategory,omitempty"`                         // Description for grouping of ordinal or polychotomous variables.
}

func (out *EvidenceStatisticSampleSize) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["knownDataCount"]) > 0 {
		if err := go1.Unmarshal(asMap["knownDataCount"], &out.KnownDataCount); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["numberOfStudies"]) > 0 {
		if err := go1.Unmarshal(asMap["numberOfStudies"], &out.NumberOfStudies); err != nil {
			return err
		}

	}
	if len(asMap["numberOfParticipants"]) > 0 {
		if err := go1.Unmarshal(asMap["numberOfParticipants"], &out.NumberOfParticipants); err != nil {
			return err
		}

	}
	return nil
}

type EvidenceStatisticSampleSize struct {
	KnownDataCount    *int         `bson:",omitempty" json:"knownDataCount,omitempty"`    // Number of participants with known results for measured variables.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Description          *string       `bson:",omitempty" json:"description,omitempty"`          // Human-readable summary of population sample size.
	Note                 []*Annotation `bson:",omitempty" json:"note,omitempty"`                 // Footnote or explanatory note about the sample size.
	NumberOfStudies      *int          `bson:",omitempty" json:"numberOfStudies,omitempty"`      // Number of participants in the population.
	NumberOfParticipants *int          `bson:",omitempty" json:"numberOfParticipants,omitempty"` // A human-readable string to clarify or explain concepts about the sample size.
}

func (out *EvidenceStatisticAttributeEstimate) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["attributeEstimate"]) > 0 {
		if err := go1.Unmarshal(asMap["attributeEstimate"], &out.AttributeEstimate); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["level"]) > 0 {
		if err := go1.Unmarshal(asMap["level"], &out.Level); err != nil {
			return err
		}

	}
	if len(asMap["range"]) > 0 {
		if err := go1.Unmarshal(asMap["range"], &out.Range); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	return nil
}

type EvidenceStatisticAttributeEstimate struct {
	Type              *CodeableConcept `bson:",omitempty" json:"type,omitempty"` // The type of attribute estimate, e.g., confidence interval or p value.
	AttributeEstimate interface{}
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Level       *float64      `bson:",omitempty" json:"level,omitempty"`       // Use 95 for a 95% confidence interval.
	Range       *Range        `bson:",omitempty" json:"range,omitempty"`       // Lower bound of confidence interval.
	Description *string       `bson:",omitempty" json:"description,omitempty"` // Human-readable summary of the estimate.
	Note        []*Annotation `bson:",omitempty" json:"note,omitempty"`        // Footnote or explanatory note about the estimate.
	Quantity    *Quantity     `bson:",omitempty" json:"quantity,omitempty"`    // The singular quantity of the attribute estimate, for attribute estimates represented as single values; also used to report unit of measure.
}

func (out *EvidenceCertainty) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["rating"]) > 0 {
		if err := go1.Unmarshal(asMap["rating"], &out.Rating); err != nil {
			return err
		}

	}
	if len(asMap["rater"]) > 0 {
		if err := go1.Unmarshal(asMap["rater"], &out.Rater); err != nil {
			return err
		}

	}
	if len(asMap["subcomponent"]) > 0 {
		if err := go1.Unmarshal(asMap["subcomponent"], &out.Subcomponent); err != nil {
			return err
		}

	}
	return nil
}

type EvidenceCertainty struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Id           *string          `bson:"_id,omitempty" json:"id,omitempty"`       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension    []*Extension     `bson:",omitempty" json:"extension,omitempty"`   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Description  *string          `bson:",omitempty" json:"description,omitempty"` // Textual description of certainty.
	Note         []*Annotation    `bson:",omitempty" json:"note,omitempty"`        // Footnotes and/or explanatory notes.
	Type         *CodeableConcept `bson:",omitempty" json:"type,omitempty"`        // Aspect of certainty being rated.
	Rating       *CodeableConcept `bson:",omitempty" json:"rating,omitempty"`      // Assessment or judgement of the aspect.
	Rater        *string          `bson:",omitempty" json:"rater,omitempty"`       // Individual or group who did the rating.
	Subcomponent interface{}
}
type EvidenceVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}
type EvidenceCiteAsx struct {
	CiteAsReference Reference `bson:",omitempty" json:"citeAsReference,omitempty"`
	CiteAsMarkdown  string    `bson:",omitempty" json:"citeAsMarkdown,omitempty"`
}

func (out *EvidenceVariableDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["observed"]) > 0 {
		if err := go1.Unmarshal(asMap["observed"], &out.Observed); err != nil {
			return err
		}

	}
	if len(asMap["intended"]) > 0 {
		if err := go1.Unmarshal(asMap["intended"], &out.Intended); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["variableRole"], &out.VariableRole); err != nil {
		return err
	}

	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["directnessMatch"]) > 0 {
		if err := go1.Unmarshal(asMap["directnessMatch"], &out.DirectnessMatch); err != nil {
			return err
		}

	}
	return nil
}

type EvidenceVariableDefinition struct {
	Observed          *Reference   `bson:",omitempty" json:"observed,omitempty"`          // Definition of the actual variable related to the statistic(s).
	Intended          *Reference   `bson:",omitempty" json:"intended,omitempty"`          // Definition of the intended variable related to the Evidence.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Description     *string          `bson:",omitempty" json:"description,omitempty"`                     // A text description or summary of the variable.
	VariableRole    *CodeableConcept `binding:"required" bson:",omitempty" json:"variableRole,omitempty"` // population | subpopulation | exposure | referenceExposure | measuredVariable | confounder.
	Note            []*Annotation    `bson:",omitempty" json:"note,omitempty"`                            // Footnotes and/or explanatory notes.
	DirectnessMatch *CodeableConcept `bson:",omitempty" json:"directnessMatch,omitempty"`                 // Indication of quality of match between intended variable to actual variable.
}

func (out *EvidenceReport) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"EvidenceReport\"" {
		return fmt.Errorf("resourceType is not %s", "EvidenceReport")
	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["relatedIdentifier"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedIdentifier"], &out.RelatedIdentifier); err != nil {
			return err
		}

	}
	if len(asMap["endorser"]) > 0 {
		if err := go1.Unmarshal(asMap["endorser"], &out.Endorser); err != nil {
			return err
		}

	}
	if len(asMap["section"]) > 0 {
		if err := go1.Unmarshal(asMap["section"], &out.Section); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["relatedArtifact"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedArtifact"], &out.RelatedArtifact); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["reviewer"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewer"], &out.Reviewer); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["relatesTo"]) > 0 {
		if err := go1.Unmarshal(asMap["relatesTo"], &out.RelatesTo); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["citeAsReference"], &out.CiteAsReference); err == nil {
	} else if err := go1.Unmarshal(asMap["citeAsMarkdown"], &out.CiteAsMarkdown); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["editor"]) > 0 {
		if err := go1.Unmarshal(asMap["editor"], &out.Editor); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	return nil
}

type EvidenceReport struct {
	Status            *string                  `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this summary. Enables tracking the life-cycle of the content.
	Identifier        []*Identifier            `bson:",omitempty" json:"identifier,omitempty"`                // A formal identifier that is used to identify this EvidenceReport when it is represented in other formats, or referenced in a specification, model, design or an instance.
	RelatedIdentifier []*Identifier            `bson:",omitempty" json:"relatedIdentifier,omitempty"`         // A formal identifier that is used to identify things closely related to this EvidenceReport.
	Endorser          []*ContactDetail         `bson:",omitempty" json:"endorser,omitempty"`                  // An individiual, organization, or device responsible for officially endorsing the content for use in some setting.
	Section           *EvidenceReportSection   `binding:"omitempty" bson:",omitempty"`
	Meta              *Meta                    `bson:",omitempty" json:"meta,omitempty"`            // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules     *string                  `bson:",omitempty" json:"implicitRules,omitempty"`   // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained         []*Resource              `bson:",omitempty" json:"contained,omitempty"`       // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	UseContext        []*UsageContext          `bson:",omitempty" json:"useContext,omitempty"`      // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence report instances.
	Type              *CodeableConcept         `bson:",omitempty" json:"type,omitempty"`            // Specifies the kind of report, such as grouping of classifiers, search results, or human-compiled expression.
	RelatedArtifact   []*RelatedArtifact       `bson:",omitempty" json:"relatedArtifact,omitempty"` // Link, description or reference to artifact associated with the report.
	Contact           []*ContactDetail         `bson:",omitempty" json:"contact,omitempty"`         // Contact details to assist a user in finding and communicating with the publisher.
	Reviewer          []*ContactDetail         `bson:",omitempty" json:"reviewer,omitempty"`        // An individiual, organization, or device primarily responsible for review of some aspect of the content.
	Id                *primitive.ObjectID      `bson:"_id,omitempty" json:"id,omitempty"`           // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Text              *Narrative               `bson:",omitempty" json:"text,omitempty"`            // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension         []*Extension             `bson:",omitempty" json:"extension,omitempty"`       // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	RelatesTo         *EvidenceReportRelatesTo `binding:"omitempty" bson:",omitempty"`
	EvidenceReportCiteAsx
	Subject           *EvidenceReportSubject `binding:"omitempty" bson:",omitempty"`
	Author            []*ContactDetail       `bson:",omitempty" json:"author,omitempty"`            // An individiual, organization, or device primarily involved in the creation and maintenance of the content.
	Note              []*Annotation          `bson:",omitempty" json:"note,omitempty"`              // Used for footnotes and annotations.
	Publisher         *string                `bson:",omitempty" json:"publisher,omitempty"`         // The name of the organization or individual responsible for the release and ongoing maintenance of the evidence report.
	Editor            []*ContactDetail       `bson:",omitempty" json:"editor,omitempty"`            // An individiual, organization, or device primarily responsible for internal coherence of the content.
	Language          *string                `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	ModifierExtension []*Extension           `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Url          *string `bson:",omitempty" json:"url,omitempty"` // An absolute URI that is used to identify this EvidenceReport when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this summary is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the summary is stored on different servers.
	ResourceType string  `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *EvidenceReportSection) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["entryClassifier"]) > 0 {
		if err := go1.Unmarshal(asMap["entryClassifier"], &out.EntryClassifier); err != nil {
			return err
		}

	}
	if len(asMap["section"]) > 0 {
		if err := go1.Unmarshal(asMap["section"], &out.Section); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["mode"]) > 0 {
		if err := go1.Unmarshal(asMap["mode"], &out.Mode); err != nil {
			return err
		}

	}
	if len(asMap["orderedBy"]) > 0 {
		if err := go1.Unmarshal(asMap["orderedBy"], &out.OrderedBy); err != nil {
			return err
		}

	}
	if len(asMap["entryReference"]) > 0 {
		if err := go1.Unmarshal(asMap["entryReference"], &out.EntryReference); err != nil {
			return err
		}

	}
	if len(asMap["entryQuantity"]) > 0 {
		if err := go1.Unmarshal(asMap["entryQuantity"], &out.EntryQuantity); err != nil {
			return err
		}

	}
	if len(asMap["focus"]) > 0 {
		if err := go1.Unmarshal(asMap["focus"], &out.Focus); err != nil {
			return err
		}

	}
	if len(asMap["focusReference"]) > 0 {
		if err := go1.Unmarshal(asMap["focusReference"], &out.FocusReference); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["emptyReason"]) > 0 {
		if err := go1.Unmarshal(asMap["emptyReason"], &out.EmptyReason); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type EvidenceReportSection struct {
	Title             *string            `bson:",omitempty" json:"title,omitempty"`           // The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents.
	EntryClassifier   []*CodeableConcept `bson:",omitempty" json:"entryClassifier,omitempty"` // Specifies any type of classification of the evidence report.
	Section           interface{}
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Mode              *string          `bson:",omitempty" json:"mode,omitempty"`              // How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
	OrderedBy         *CodeableConcept `bson:",omitempty" json:"orderedBy,omitempty"`         // Specifies the order applied to the items in the section entries.
	EntryReference    []*Reference     `bson:",omitempty" json:"entryReference,omitempty"`    // A reference to the actual resource from which the narrative in the section is derived.
	EntryQuantity     []*Quantity      `bson:",omitempty" json:"entryQuantity,omitempty"`     // Quantity as content.
	Focus             *CodeableConcept `bson:",omitempty" json:"focus,omitempty"`             // A code identifying the kind of content contained within the section. This should be consistent with the section title.
	FocusReference    *Reference       `bson:",omitempty" json:"focusReference,omitempty"`    // A definitional Resource identifying the kind of content contained within the section. This should be consistent with the section title.
	Author            []*Reference     `bson:",omitempty" json:"author,omitempty"`            // Identifies who is responsible for the information in this section, not necessarily who typed it in.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Text              *Narrative       `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is peferred to contain sufficient detail to make it acceptable for a human to just read the narrative.
	EmptyReason       *CodeableConcept `bson:",omitempty" json:"emptyReason,omitempty"`       // If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *EvidenceReportRelatesTo) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["target"], &out.Target); err != nil {
		return err
	}

	return nil
}

type EvidenceReportRelatesTo struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code   *string                        `binding:"required" bson:",omitempty" json:"code,omitempty"` // The type of relationship that this composition has with anther composition or document.
	Target *EvidenceReportRelatesToTarget `binding:"omitempty" bson:",omitempty"`
}

func (out *EvidenceReportRelatesToTarget) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["resource"]) > 0 {
		if err := go1.Unmarshal(asMap["resource"], &out.Resource); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["display"]) > 0 {
		if err := go1.Unmarshal(asMap["display"], &out.Display); err != nil {
			return err
		}

	}
	return nil
}

type EvidenceReportRelatesToTarget struct {
	Resource          *Reference   `bson:",omitempty" json:"resource,omitempty"`          // Target of the relationship Resource reference.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Url        *string     `bson:",omitempty" json:"url,omitempty"`        // Target of the relationship URL.
	Identifier *Identifier `bson:",omitempty" json:"identifier,omitempty"` // Target of the relationship Identifier.
	Display    *string     `bson:",omitempty" json:"display,omitempty"`    // Target of the relationship Display.
}
type EvidenceReportCiteAsx struct {
	CiteAsReference Reference `bson:",omitempty" json:"citeAsReference,omitempty"`
	CiteAsMarkdown  string    `bson:",omitempty" json:"citeAsMarkdown,omitempty"`
}

func (out *EvidenceReportSubject) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["characteristic"]) > 0 {
		if err := go1.Unmarshal(asMap["characteristic"], &out.Characteristic); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	return nil
}

type EvidenceReportSubject struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Characteristic *EvidenceReportSubjectCharacteristic `binding:"omitempty" bson:",omitempty"`
	Note           []*Annotation                        `bson:",omitempty" json:"note,omitempty"` // Used for general notes and annotations not coded elsewhere.
}

func (out *EvidenceReportSubjectCharacteristic) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueReference"], &out.ValueReference); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	if len(asMap["exclude"]) > 0 {
		if err := go1.Unmarshal(asMap["exclude"], &out.Exclude); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	return nil
}

type EvidenceReportSubjectCharacteristic struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code *CodeableConcept `binding:"required" bson:",omitempty" json:"code,omitempty"` // Characteristic code.
	EvidenceReportSubjectCharacteristicValuex
	Exclude *bool   `bson:",omitempty" json:"exclude,omitempty"` // Is used to express not the characteristic.
	Period  *Period `bson:",omitempty" json:"period,omitempty"`  // Timeframe for the characteristic.
}
type EvidenceReportSubjectCharacteristicValuex struct {
	ValueReference       Reference       `bson:",omitempty" json:"valueReference,omitempty"`
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueBoolean         bool            `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueRange           Range           `bson:",omitempty" json:"valueRange,omitempty"`
}

func (out *EvidenceVariable) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"EvidenceVariable\"" {
		return fmt.Errorf("resourceType is not %s", "EvidenceVariable")
	}
	if len(asMap["characteristic"]) > 0 {
		if err := go1.Unmarshal(asMap["characteristic"], &out.Characteristic); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["reviewer"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewer"], &out.Reviewer); err != nil {
			return err
		}

	}
	if len(asMap["actual"]) > 0 {
		if err := go1.Unmarshal(asMap["actual"], &out.Actual); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["relatedArtifact"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedArtifact"], &out.RelatedArtifact); err != nil {
			return err
		}

	}
	if len(asMap["lastReviewDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastReviewDate"], &out.LastReviewDate); err != nil {
			return err
		}

	}
	if len(asMap["endorser"]) > 0 {
		if err := go1.Unmarshal(asMap["endorser"], &out.Endorser); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["approvalDate"]) > 0 {
		if err := go1.Unmarshal(asMap["approvalDate"], &out.ApprovalDate); err != nil {
			return err
		}

	}
	if len(asMap["shortTitle"]) > 0 {
		if err := go1.Unmarshal(asMap["shortTitle"], &out.ShortTitle); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["editor"]) > 0 {
		if err := go1.Unmarshal(asMap["editor"], &out.Editor); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["handling"]) > 0 {
		if err := go1.Unmarshal(asMap["handling"], &out.Handling); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["effectivePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err != nil {
			return err
		}

	}
	return nil
}

type EvidenceVariable struct {
	Characteristic    *EvidenceVariableCharacteristic `binding:"omitempty" bson:",omitempty"`
	ImplicitRules     *string                         `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Experimental      *bool                           `bson:",omitempty" json:"experimental,omitempty"`      // A Boolean value to indicate that this resource is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Contact           []*ContactDetail                `bson:",omitempty" json:"contact,omitempty"`           // Contact details to assist a user in finding and communicating with the publisher.
	Reviewer          []*ContactDetail                `bson:",omitempty" json:"reviewer,omitempty"`          // An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.
	Actual            *bool                           `bson:",omitempty" json:"actual,omitempty"`            // True if the actual variable measured, false if a conceptual representation of the intended variable.
	Purpose           *string                         `bson:",omitempty" json:"purpose,omitempty"`           // Explanation of why this EvidenceVariable is needed and why it has been designed as it has.
	Copyright         *string                         `bson:",omitempty" json:"copyright,omitempty"`         // A copyright statement relating to the resource and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the resource.
	Language          *string                         `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Extension         []*Extension                    `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                    `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Url *string `bson:",omitempty" json:"url,omitempty"` // An absolute URI that is used to identify this evidence variable when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this evidence variable is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the evidence variable is stored on different servers.
	EvidenceVariableVersionAlgorithmx
	Id              *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`           // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	CopyrightLabel  *string             `bson:",omitempty" json:"copyrightLabel,omitempty"`  // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	RelatedArtifact []*RelatedArtifact  `bson:",omitempty" json:"relatedArtifact,omitempty"` // Related artifacts such as additional documentation, justification, or bibliographic references.
	LastReviewDate  *Date               `bson:",omitempty" json:"lastReviewDate,omitempty"`  // The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
	Endorser        []*ContactDetail    `bson:",omitempty" json:"endorser,omitempty"`        // An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.
	Contained       []*Resource         `bson:",omitempty" json:"contained,omitempty"`       // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Name            *string             `bson:",omitempty" json:"name,omitempty"`            // A natural language name identifying the evidence variable. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Title           *string             `bson:",omitempty" json:"title,omitempty"`           // A short, descriptive, user-friendly title for the evidence variable.
	Description     *string             `bson:",omitempty" json:"description,omitempty"`     // A free text natural language description of the evidence variable from a consumer's perspective.
	ApprovalDate    *Date               `bson:",omitempty" json:"approvalDate,omitempty"`    /*
	The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.

	See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
	*/
	ShortTitle      *string                   `bson:",omitempty" json:"shortTitle,omitempty"`                // The short title provides an alternate title for use in informal descriptive contexts where the full, formal title is not necessary.
	Status          *string                   `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this evidence variable. Enables tracking the life-cycle of the content.
	Author          []*ContactDetail          `bson:",omitempty" json:"author,omitempty"`                    // An individiual or organization primarily involved in the creation and maintenance of the content.
	Editor          []*ContactDetail          `bson:",omitempty" json:"editor,omitempty"`                    // An individual or organization primarily responsible for internal coherence of the content.
	Category        *EvidenceVariableCategory `binding:"omitempty" bson:",omitempty"`
	Note            []*Annotation             `bson:",omitempty" json:"note,omitempty"`            // A human-readable string to clarify or explain concepts about the resource.
	Handling        *string                   `bson:",omitempty" json:"handling,omitempty"`        // The method of handling in statistical analysis.
	Text            *Narrative                `bson:",omitempty" json:"text,omitempty"`            // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Identifier      []*Identifier             `bson:",omitempty" json:"identifier,omitempty"`      // A formal identifier that is used to identify this evidence variable when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Version         *string                   `bson:",omitempty" json:"version,omitempty"`         // The identifier that is used to identify this version of the evidence variable when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the evidence variable author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
	Publisher       *string                   `bson:",omitempty" json:"publisher,omitempty"`       // The name of the organization or individual responsible for the release and ongoing maintenance of the evidence variable.
	Meta            *Meta                     `bson:",omitempty" json:"meta,omitempty"`            // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Date            *DateTime                 `bson:",omitempty" json:"date,omitempty"`            // The date  (and optionally time) when the evidence variable was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the evidence variable changes.
	UseContext      []*UsageContext           `bson:",omitempty" json:"useContext,omitempty"`      // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence variable instances.
	EffectivePeriod *Period                   `bson:",omitempty" json:"effectivePeriod,omitempty"` // The period during which the resource content was or is planned to be in active use.
	ResourceType    string                    `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *EvidenceVariableCharacteristic) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["timeFromEvent"]) > 0 {
		if err := go1.Unmarshal(asMap["timeFromEvent"], &out.TimeFromEvent); err != nil {
			return err
		}

	}
	if len(asMap["definitionCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["definitionCanonical"], &out.DefinitionCanonical); err != nil {
			return err
		}

	}
	if len(asMap["definitionId"]) > 0 {
		if err := go1.Unmarshal(asMap["definitionId"], &out.DefinitionId); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["durationQuantity"], &out.DurationQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["durationRange"], &out.DurationRange); err == nil {
	} else {

	}
	if len(asMap["definitionExpression"]) > 0 {
		if err := go1.Unmarshal(asMap["definitionExpression"], &out.DefinitionExpression); err != nil {
			return err
		}

	}
	if len(asMap["definitionByTypeAndValue"]) > 0 {
		if err := go1.Unmarshal(asMap["definitionByTypeAndValue"], &out.DefinitionByTypeAndValue); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["definitionReference"]) > 0 {
		if err := go1.Unmarshal(asMap["definitionReference"], &out.DefinitionReference); err != nil {
			return err
		}

	}
	if len(asMap["definitionCodeableConcept"]) > 0 {
		if err := go1.Unmarshal(asMap["definitionCodeableConcept"], &out.DefinitionCodeableConcept); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["instancesQuantity"], &out.InstancesQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["instancesRange"], &out.InstancesRange); err == nil {
	} else {

	}
	if len(asMap["linkId"]) > 0 {
		if err := go1.Unmarshal(asMap["linkId"], &out.LinkId); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["definitionByCombination"]) > 0 {
		if err := go1.Unmarshal(asMap["definitionByCombination"], &out.DefinitionByCombination); err != nil {
			return err
		}

	}
	if len(asMap["exclude"]) > 0 {
		if err := go1.Unmarshal(asMap["exclude"], &out.Exclude); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type EvidenceVariableCharacteristic struct {
	TimeFromEvent       *EvidenceVariableCharacteristicTimeFromEvent `binding:"omitempty" bson:",omitempty"`
	DefinitionCanonical *string                                      `bson:",omitempty" json:"definitionCanonical,omitempty"` // Defines the characteristic using Canonical.
	DefinitionId        **primitive.ObjectID                         `bson:",omitempty" json:"definitionId,omitempty"`        // Defines the characteristic using id.
	EvidenceVariableCharacteristicDurationx
	DefinitionExpression      *Expression                                             `bson:",omitempty" json:"definitionExpression,omitempty"` // Defines the characteristic using Expression.
	DefinitionByTypeAndValue  *EvidenceVariableCharacteristicDefinitionByTypeAndValue `binding:"omitempty" bson:",omitempty"`
	Note                      []*Annotation                                           `bson:",omitempty" json:"note,omitempty"`                      // A human-readable string to clarify or explain concepts about the characteristic.
	DefinitionReference       *Reference                                              `bson:",omitempty" json:"definitionReference,omitempty"`       // Defines the characteristic using a Reference.
	DefinitionCodeableConcept *CodeableConcept                                        `bson:",omitempty" json:"definitionCodeableConcept,omitempty"` // Defines the characteristic using CodeableConcept.
	EvidenceVariableCharacteristicInstancesx
	LinkId                  *primitive.ObjectID                                    `bson:",omitempty" json:"linkId,omitempty"`      // Label used for when a characteristic refers to another characteristic.
	Description             *string                                                `bson:",omitempty" json:"description,omitempty"` // A short, natural language description of the characteristic that could be used to communicate the criteria to an end-user.
	DefinitionByCombination *EvidenceVariableCharacteristicDefinitionByCombination `binding:"omitempty" bson:",omitempty"`
	Exclude                 *bool                                                  `bson:",omitempty" json:"exclude,omitempty"`           // When true, this characteristic is an exclusion criterion. In other words, not matching this characteristic definition is equivalent to meeting this criterion.
	Id                      *string                                                `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension               []*Extension                                           `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension       []*Extension                                           `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *EvidenceVariableCharacteristicTimeFromEvent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["eventCodeableConcept"], &out.EventCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["eventReference"], &out.EventReference); err == nil {
	} else if err := go1.Unmarshal(asMap["eventDateTime"], &out.EventDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["eventId"], &out.EventId); err == nil {
	} else {

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["range"]) > 0 {
		if err := go1.Unmarshal(asMap["range"], &out.Range); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type EvidenceVariableCharacteristicTimeFromEvent struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Description *string       `bson:",omitempty" json:"description,omitempty"` // Human readable description.
	Note        []*Annotation `bson:",omitempty" json:"note,omitempty"`        // A human-readable string to clarify or explain concepts about the timeFromEvent.
	EvidenceVariableCharacteristicTimeFromEventEventx
	Quantity *Quantity `bson:",omitempty" json:"quantity,omitempty"` // Used to express the observation at a defined amount of time before or after the event.
	Range    *Range    `bson:",omitempty" json:"range,omitempty"`    // Used to express the observation within a period before and/or after the event.
	Id       *string   `bson:"_id,omitempty" json:"id,omitempty"`    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}
type EvidenceVariableCharacteristicTimeFromEventEventx struct {
	EventCodeableConcept CodeableConcept     `bson:",omitempty" json:"eventCodeableConcept,omitempty"`
	EventReference       Reference           `bson:",omitempty" json:"eventReference,omitempty"`
	EventDateTime        DateTime            `bson:",omitempty" json:"eventDateTime,omitempty"`
	EventId              *primitive.ObjectID `bson:",omitempty" json:"eventId,omitempty"`
}
type EvidenceVariableCharacteristicDurationx struct {
	DurationQuantity Quantity `bson:",omitempty" json:"durationQuantity,omitempty"`
	DurationRange    Range    `bson:",omitempty" json:"durationRange,omitempty"`
}

func (out *EvidenceVariableCharacteristicDefinitionByTypeAndValue) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["method"]) > 0 {
		if err := go1.Unmarshal(asMap["method"], &out.Method); err != nil {
			return err
		}

	}
	if len(asMap["device"]) > 0 {
		if err := go1.Unmarshal(asMap["device"], &out.Device); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueReference"], &out.ValueReference); err == nil {
	} else if err := go1.Unmarshal(asMap["valueId"], &out.ValueId); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	if len(asMap["offset"]) > 0 {
		if err := go1.Unmarshal(asMap["offset"], &out.Offset); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type EvidenceVariableCharacteristicDefinitionByTypeAndValue struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type   *CodeableConcept   `binding:"required" bson:",omitempty" json:"type,omitempty"` // Used to express the type of characteristic.
	Method []*CodeableConcept `bson:",omitempty" json:"method,omitempty"`                  // Method for how the characteristic value was determined.
	Device *Reference         `bson:",omitempty" json:"device,omitempty"`                  // Device used for determining characteristic.
	EvidenceVariableCharacteristicDefinitionByTypeAndValueValuex
	Offset *CodeableConcept `bson:",omitempty" json:"offset,omitempty"` // Defines the reference point for comparison when valueQuantity or valueRange is not compared to zero.
	Id     *string          `bson:"_id,omitempty" json:"id,omitempty"`  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}
type EvidenceVariableCharacteristicDefinitionByTypeAndValueValuex struct {
	ValueCodeableConcept CodeableConcept     `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueBoolean         bool                `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueQuantity        Quantity            `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueRange           Range               `bson:",omitempty" json:"valueRange,omitempty"`
	ValueReference       Reference           `bson:",omitempty" json:"valueReference,omitempty"`
	ValueId              *primitive.ObjectID `bson:",omitempty" json:"valueId,omitempty"`
}
type EvidenceVariableCharacteristicInstancesx struct {
	InstancesQuantity Quantity `bson:",omitempty" json:"instancesQuantity,omitempty"`
	InstancesRange    Range    `bson:",omitempty" json:"instancesRange,omitempty"`
}

func (out *EvidenceVariableCharacteristicDefinitionByCombination) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["threshold"]) > 0 {
		if err := go1.Unmarshal(asMap["threshold"], &out.Threshold); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["characteristic"], &out.Characteristic); err != nil {
		return err
	}

	return nil
}

type EvidenceVariableCharacteristicDefinitionByCombination struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code           *string `binding:"required" bson:",omitempty" json:"code,omitempty"` // Used to specify if two or more characteristics are combined with OR or AND.
	Threshold      *int    `bson:",omitempty" json:"threshold,omitempty"`               // Provides the value of "n" when "at-least" or "at-most" codes are used.
	Characteristic interface{}
}
type EvidenceVariableVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *EvidenceVariableCategory) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else {

	}
	return nil
}

type EvidenceVariableCategory struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name *string `bson:",omitempty" json:"name,omitempty"` // Description of the grouping.
	EvidenceVariableCategoryValuex
}
type EvidenceVariableCategoryValuex struct {
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueRange           Range           `bson:",omitempty" json:"valueRange,omitempty"`
}

func (out *ExampleScenario) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ExampleScenario\"" {
		return fmt.Errorf("resourceType is not %s", "ExampleScenario")
	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["actor"]) > 0 {
		if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["instance"]) > 0 {
		if err := go1.Unmarshal(asMap["instance"], &out.Instance); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["process"]) > 0 {
		if err := go1.Unmarshal(asMap["process"], &out.Process); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	return nil
}

type ExampleScenario struct {
	ImplicitRules *string                  `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text          *Narrative               `bson:",omitempty" json:"text,omitempty"`          // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Name          *string                  `bson:",omitempty" json:"name,omitempty"`          // Temporarily retained for tooling purposes.
	Experimental  *bool                    `bson:",omitempty" json:"experimental,omitempty"`  // A Boolean value to indicate that this example scenario is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Date          *DateTime                `bson:",omitempty" json:"date,omitempty"`          // The date  (and optionally time) when the example scenario was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the example scenario changes. (e.g. the 'content logical definition').
	Actor         *ExampleScenarioActor    `binding:"omitempty" bson:",omitempty"`
	Meta          *Meta                    `bson:",omitempty" json:"meta,omitempty"`      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Copyright     *string                  `bson:",omitempty" json:"copyright,omitempty"` // A copyright statement relating to the example scenario and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the example scenario.
	Contact       []*ContactDetail         `bson:",omitempty" json:"contact,omitempty"`   // Contact details to assist a user in finding and communicating with the publisher.
	Contained     []*Resource              `bson:",omitempty" json:"contained,omitempty"` // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension     []*Extension             `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Instance      *ExampleScenarioInstance `binding:"omitempty" bson:",omitempty"`
	Id            *primitive.ObjectID      `bson:"_id,omitempty" json:"id,omitempty"` // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ExampleScenarioVersionAlgorithmx
	Status            *string            `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this example scenario. Enables tracking the life-cycle of the content.
	Jurisdiction      []*CodeableConcept `bson:",omitempty" json:"jurisdiction,omitempty"`              // A legal or geographic region in which the example scenario is intended to be used.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Description    *string                 `bson:",omitempty" json:"description,omitempty"`    // A free text natural language description of the ExampleScenario from a consumer's perspective.
	Purpose        *string                 `bson:",omitempty" json:"purpose,omitempty"`        // What the example scenario resource is created for. This should not be used to show the business purpose of the scenario itself, but the purpose of documenting a scenario.
	Title          *string                 `bson:",omitempty" json:"title,omitempty"`          // A short, descriptive, user-friendly title for the ExampleScenario.
	Publisher      *string                 `bson:",omitempty" json:"publisher,omitempty"`      // The name of the organization or individual responsible for the release and ongoing maintenance of the example scenario.
	Url            *string                 `bson:",omitempty" json:"url,omitempty"`            // An absolute URI that is used to identify this example scenario when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this example scenario is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the example scenario is stored on different servers.
	Identifier     []*Identifier           `bson:",omitempty" json:"identifier,omitempty"`     // A formal identifier that is used to identify this example scenario when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Version        *string                 `bson:",omitempty" json:"version,omitempty"`        // The identifier that is used to identify this version of the example scenario when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the example scenario author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	UseContext     []*UsageContext         `bson:",omitempty" json:"useContext,omitempty"`     // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate example scenario instances.
	CopyrightLabel *string                 `bson:",omitempty" json:"copyrightLabel,omitempty"` // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Process        *ExampleScenarioProcess `binding:"omitempty" bson:",omitempty"`
	Language       *string                 `bson:",omitempty" json:"language,omitempty"` // The base language in which the resource is written.
	ResourceType   string                  `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ExampleScenarioActor) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["key"], &out.Key); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
		return err
	}

	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ExampleScenarioActor struct {
	Key               *string      `binding:"required" bson:",omitempty" json:"key,omitempty"`   // A unique string within the scenario that is used to reference the actor.
	Type              *string      `binding:"required" bson:",omitempty" json:"type,omitempty"`  // The category of actor - person or system.
	Title             *string      `binding:"required" bson:",omitempty" json:"title,omitempty"` // The human-readable name for the actor used when rendering the scenario.
	Description       *string      `bson:",omitempty" json:"description,omitempty"`              // An explanation of who/what the actor is and its role in the scenario.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`        /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *ExampleScenarioInstance) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["structureType"], &out.StructureType); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["structureProfileCanonical"], &out.StructureProfileCanonical); err == nil {
	} else if err := go1.Unmarshal(asMap["structureProfileUri"], &out.StructureProfileUri); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
		return err
	}

	if len(asMap["content"]) > 0 {
		if err := go1.Unmarshal(asMap["content"], &out.Content); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["key"], &out.Key); err != nil {
		return err
	}

	if len(asMap["structureVersion"]) > 0 {
		if err := go1.Unmarshal(asMap["structureVersion"], &out.StructureVersion); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["containedInstance"]) > 0 {
		if err := go1.Unmarshal(asMap["containedInstance"], &out.ContainedInstance); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type ExampleScenarioInstance struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	StructureType *Coding `binding:"required" bson:",omitempty" json:"structureType,omitempty"` // A code indicating the kind of data structure (FHIR resource or some other standard) this is an instance of.
	ExampleScenarioInstanceStructureProfilex
	Title             *string                                   `binding:"required" bson:",omitempty" json:"title,omitempty"` // A short descriptive label the instance to be used in tables or diagrams.
	Content           *Reference                                `bson:",omitempty" json:"content,omitempty"`                  // Points to an instance (typically an example) that shows the data that would corespond to this instance.
	Id                *string                                   `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Key               *string                                   `binding:"required" bson:",omitempty" json:"key,omitempty"`   // A unique string within the scenario that is used to reference the instance.
	StructureVersion  *string                                   `bson:",omitempty" json:"structureVersion,omitempty"`         // Conveys the version of the data structure instantiated.  I.e. what release of FHIR, X12, OpenEHR, etc. is instance compliant with.
	Description       *string                                   `bson:",omitempty" json:"description,omitempty"`              // An explanation of what the instance contains and what it's for.
	Version           *ExampleScenarioInstanceVersion           `binding:"omitempty" bson:",omitempty"`
	ContainedInstance *ExampleScenarioInstanceContainedInstance `binding:"omitempty" bson:",omitempty"`
	Extension         []*Extension                              `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}
type ExampleScenarioInstanceStructureProfilex struct {
	StructureProfileCanonical string `bson:",omitempty" json:"structureProfileCanonical,omitempty"`
	StructureProfileUri       string `bson:",omitempty" json:"structureProfileUri,omitempty"`
}

func (out *ExampleScenarioInstanceVersion) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["key"], &out.Key); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
		return err
	}

	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["content"]) > 0 {
		if err := go1.Unmarshal(asMap["content"], &out.Content); err != nil {
			return err
		}

	}
	return nil
}

type ExampleScenarioInstanceVersion struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Key         *string    `binding:"required" bson:",omitempty" json:"key,omitempty"`   // A unique string within the instance that is used to reference the version of the instance.
	Title       *string    `binding:"required" bson:",omitempty" json:"title,omitempty"` // A short descriptive label the version to be used in tables or diagrams.
	Description *string    `bson:",omitempty" json:"description,omitempty"`              // An explanation of what this specific version of the instance contains and represents.
	Content     *Reference `bson:",omitempty" json:"content,omitempty"`                  // Points to an instance (typically an example) that shows the data that would flow at this point in the scenario.
}

func (out *ExampleScenarioInstanceContainedInstance) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["instanceReference"], &out.InstanceReference); err != nil {
		return err
	}

	if len(asMap["versionReference"]) > 0 {
		if err := go1.Unmarshal(asMap["versionReference"], &out.VersionReference); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ExampleScenarioInstanceContainedInstance struct {
	InstanceReference *string      `binding:"required" bson:",omitempty" json:"instanceReference,omitempty"` // A reference to the key of an instance found within this one.
	VersionReference  *string      `bson:",omitempty" json:"versionReference,omitempty"`                     // A reference to the key of a specific version of an instance in this instance.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                                // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                            // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`                    /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type ExampleScenarioVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *ExampleScenarioProcess) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
		return err
	}

	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["preConditions"]) > 0 {
		if err := go1.Unmarshal(asMap["preConditions"], &out.PreConditions); err != nil {
			return err
		}

	}
	if len(asMap["postConditions"]) > 0 {
		if err := go1.Unmarshal(asMap["postConditions"], &out.PostConditions); err != nil {
			return err
		}

	}
	if len(asMap["step"]) > 0 {
		if err := go1.Unmarshal(asMap["step"], &out.Step); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ExampleScenarioProcess struct {
	Title             *string                     `binding:"required" bson:",omitempty" json:"title,omitempty"` // A short descriptive label the process to be used in tables or diagrams.
	Description       *string                     `bson:",omitempty" json:"description,omitempty"`              // An explanation of what the process represents and what it does.
	PreConditions     *string                     `bson:",omitempty" json:"preConditions,omitempty"`            // Description of the initial state of the actors, environment and data before the process starts.
	PostConditions    *string                     `bson:",omitempty" json:"postConditions,omitempty"`           // Description of the final state of the actors, environment and data after the process has been successfully completed.
	Step              *ExampleScenarioProcessStep `binding:"omitempty" bson:",omitempty"`
	Id                *string                     `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *ExampleScenarioProcessStep) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["process"]) > 0 {
		if err := go1.Unmarshal(asMap["process"], &out.Process); err != nil {
			return err
		}

	}
	if len(asMap["operation"]) > 0 {
		if err := go1.Unmarshal(asMap["operation"], &out.Operation); err != nil {
			return err
		}

	}
	if len(asMap["alternative"]) > 0 {
		if err := go1.Unmarshal(asMap["alternative"], &out.Alternative); err != nil {
			return err
		}

	}
	if len(asMap["pause"]) > 0 {
		if err := go1.Unmarshal(asMap["pause"], &out.Pause); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["number"]) > 0 {
		if err := go1.Unmarshal(asMap["number"], &out.Number); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["workflow"]) > 0 {
		if err := go1.Unmarshal(asMap["workflow"], &out.Workflow); err != nil {
			return err
		}

	}
	return nil
}

type ExampleScenarioProcessStep struct {
	Process           interface{}
	Operation         *ExampleScenarioProcessStepOperation   `binding:"omitempty" bson:",omitempty"`
	Alternative       *ExampleScenarioProcessStepAlternative `binding:"omitempty" bson:",omitempty"`
	Pause             *bool                                  `bson:",omitempty" json:"pause,omitempty"`             // If true, indicates that, following this step, there is a pause in the flow and the subsequent step will occur at some later time (triggered by some event).
	Id                *string                                `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension []*Extension                           `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Number    *string      `bson:",omitempty" json:"number,omitempty"`    // The sequential number of the step, e.g. 1.2.5.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Workflow  *string      `bson:",omitempty" json:"workflow,omitempty"`  // Indicates that the step is defined by a seaparate scenario instance.
}

func (out *ExampleScenarioProcessStepOperation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["initiator"]) > 0 {
		if err := go1.Unmarshal(asMap["initiator"], &out.Initiator); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["initiatorActive"]) > 0 {
		if err := go1.Unmarshal(asMap["initiatorActive"], &out.InitiatorActive); err != nil {
			return err
		}

	}
	if len(asMap["receiverActive"]) > 0 {
		if err := go1.Unmarshal(asMap["receiverActive"], &out.ReceiverActive); err != nil {
			return err
		}

	}
	if len(asMap["response"]) > 0 {
		if err := go1.Unmarshal(asMap["response"], &out.Response); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
		return err
	}

	if len(asMap["receiver"]) > 0 {
		if err := go1.Unmarshal(asMap["receiver"], &out.Receiver); err != nil {
			return err
		}

	}
	if len(asMap["request"]) > 0 {
		if err := go1.Unmarshal(asMap["request"], &out.Request); err != nil {
			return err
		}

	}
	return nil
}

type ExampleScenarioProcessStepOperation struct {
	Initiator         *string `bson:",omitempty" json:"initiator,omitempty"`       // The system that invokes the action/transmits the data.
	Description       *string `bson:",omitempty" json:"description,omitempty"`     // An explanation of what the operation represents and what it does.
	InitiatorActive   *bool   `bson:",omitempty" json:"initiatorActive,omitempty"` // If false, the initiator is deactivated right after the operation.
	ReceiverActive    *bool   `bson:",omitempty" json:"receiverActive,omitempty"`  // If false, the receiver is deactivated right after the operation.
	Response          interface{}
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type     *Coding `bson:",omitempty" json:"type,omitempty"`                     // The standardized type of action (FHIR or otherwise).
	Title    *string `binding:"required" bson:",omitempty" json:"title,omitempty"` // A short descriptive label the step to be used in tables or diagrams.
	Receiver *string `bson:",omitempty" json:"receiver,omitempty"`                 // The system on which the action is invoked/receives the data.
	Request  interface{}
}

func (out *ExampleScenarioProcessStepAlternative) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
		return err
	}

	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["step"]) > 0 {
		if err := go1.Unmarshal(asMap["step"], &out.Step); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ExampleScenarioProcessStepAlternative struct {
	Title             *string `binding:"required" bson:",omitempty" json:"title,omitempty"` // The label to display for the alternative that gives a sense of the circumstance in which the alternative should be invoked.
	Description       *string `bson:",omitempty" json:"description,omitempty"`              // A human-readable description of the alternative explaining when the alternative should occur rather than the base step.
	Step              interface{}
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *ExplanationOfBenefit) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ExplanationOfBenefit\"" {
		return fmt.Errorf("resourceType is not %s", "ExplanationOfBenefit")
	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["enterer"]) > 0 {
		if err := go1.Unmarshal(asMap["enterer"], &out.Enterer); err != nil {
			return err
		}

	}
	if len(asMap["supportingInfo"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInfo"], &out.SupportingInfo); err != nil {
			return err
		}

	}
	if len(asMap["adjudication"]) > 0 {
		if err := go1.Unmarshal(asMap["adjudication"], &out.Adjudication); err != nil {
			return err
		}

	}
	if len(asMap["traceNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["traceNumber"], &out.TraceNumber); err != nil {
			return err
		}

	}
	if len(asMap["insurance"]) > 0 {
		if err := go1.Unmarshal(asMap["insurance"], &out.Insurance); err != nil {
			return err
		}

	}
	if len(asMap["formCode"]) > 0 {
		if err := go1.Unmarshal(asMap["formCode"], &out.FormCode); err != nil {
			return err
		}

	}
	if len(asMap["prescription"]) > 0 {
		if err := go1.Unmarshal(asMap["prescription"], &out.Prescription); err != nil {
			return err
		}

	}
	if len(asMap["originalPrescription"]) > 0 {
		if err := go1.Unmarshal(asMap["originalPrescription"], &out.OriginalPrescription); err != nil {
			return err
		}

	}
	if len(asMap["claim"]) > 0 {
		if err := go1.Unmarshal(asMap["claim"], &out.Claim); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["billablePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["billablePeriod"], &out.BillablePeriod); err != nil {
			return err
		}

	}
	if len(asMap["disposition"]) > 0 {
		if err := go1.Unmarshal(asMap["disposition"], &out.Disposition); err != nil {
			return err
		}

	}
	if len(asMap["preAuthRef"]) > 0 {
		if err := go1.Unmarshal(asMap["preAuthRef"], &out.PreAuthRef); err != nil {
			return err
		}

	}
	if len(asMap["benefitBalance"]) > 0 {
		if err := go1.Unmarshal(asMap["benefitBalance"], &out.BenefitBalance); err != nil {
			return err
		}

	}
	if len(asMap["insurer"]) > 0 {
		if err := go1.Unmarshal(asMap["insurer"], &out.Insurer); err != nil {
			return err
		}

	}
	if len(asMap["provider"]) > 0 {
		if err := go1.Unmarshal(asMap["provider"], &out.Provider); err != nil {
			return err
		}

	}
	if len(asMap["event"]) > 0 {
		if err := go1.Unmarshal(asMap["event"], &out.Event); err != nil {
			return err
		}

	}
	if len(asMap["facility"]) > 0 {
		if err := go1.Unmarshal(asMap["facility"], &out.Facility); err != nil {
			return err
		}

	}
	if len(asMap["diagnosis"]) > 0 {
		if err := go1.Unmarshal(asMap["diagnosis"], &out.Diagnosis); err != nil {
			return err
		}

	}
	if len(asMap["diagnosisRelatedGroup"]) > 0 {
		if err := go1.Unmarshal(asMap["diagnosisRelatedGroup"], &out.DiagnosisRelatedGroup); err != nil {
			return err
		}

	}
	if len(asMap["total"]) > 0 {
		if err := go1.Unmarshal(asMap["total"], &out.Total); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["patient"], &out.Patient); err != nil {
		return err
	}

	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["procedure"]) > 0 {
		if err := go1.Unmarshal(asMap["procedure"], &out.Procedure); err != nil {
			return err
		}

	}
	if len(asMap["payment"]) > 0 {
		if err := go1.Unmarshal(asMap["payment"], &out.Payment); err != nil {
			return err
		}

	}
	if len(asMap["item"]) > 0 {
		if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["created"], &out.Created); err != nil {
		return err
	}

	if len(asMap["fundsReserveRequested"]) > 0 {
		if err := go1.Unmarshal(asMap["fundsReserveRequested"], &out.FundsReserveRequested); err != nil {
			return err
		}

	}
	if len(asMap["fundsReserve"]) > 0 {
		if err := go1.Unmarshal(asMap["fundsReserve"], &out.FundsReserve); err != nil {
			return err
		}

	}
	if len(asMap["related"]) > 0 {
		if err := go1.Unmarshal(asMap["related"], &out.Related); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["outcome"], &out.Outcome); err != nil {
		return err
	}

	if len(asMap["decision"]) > 0 {
		if err := go1.Unmarshal(asMap["decision"], &out.Decision); err != nil {
			return err
		}

	}
	if len(asMap["accident"]) > 0 {
		if err := go1.Unmarshal(asMap["accident"], &out.Accident); err != nil {
			return err
		}

	}
	if len(asMap["processNote"]) > 0 {
		if err := go1.Unmarshal(asMap["processNote"], &out.ProcessNote); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["patientPaid"]) > 0 {
		if err := go1.Unmarshal(asMap["patientPaid"], &out.PatientPaid); err != nil {
			return err
		}

	}
	if len(asMap["addItem"]) > 0 {
		if err := go1.Unmarshal(asMap["addItem"], &out.AddItem); err != nil {
			return err
		}

	}
	if len(asMap["benefitPeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["benefitPeriod"], &out.BenefitPeriod); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["subType"]) > 0 {
		if err := go1.Unmarshal(asMap["subType"], &out.SubType); err != nil {
			return err
		}

	}
	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	if len(asMap["referral"]) > 0 {
		if err := go1.Unmarshal(asMap["referral"], &out.Referral); err != nil {
			return err
		}

	}
	if len(asMap["careTeam"]) > 0 {
		if err := go1.Unmarshal(asMap["careTeam"], &out.CareTeam); err != nil {
			return err
		}

	}
	if len(asMap["form"]) > 0 {
		if err := go1.Unmarshal(asMap["form"], &out.Form); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["use"], &out.Use); err != nil {
		return err
	}

	if len(asMap["payee"]) > 0 {
		if err := go1.Unmarshal(asMap["payee"], &out.Payee); err != nil {
			return err
		}

	}
	if len(asMap["claimResponse"]) > 0 {
		if err := go1.Unmarshal(asMap["claimResponse"], &out.ClaimResponse); err != nil {
			return err
		}

	}
	if len(asMap["preAuthRefPeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["preAuthRefPeriod"], &out.PreAuthRefPeriod); err != nil {
			return err
		}

	}
	if len(asMap["precedence"]) > 0 {
		if err := go1.Unmarshal(asMap["precedence"], &out.Precedence); err != nil {
			return err
		}

	}
	return nil
}

type ExplanationOfBenefit struct {
	Status                *string                             `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of the resource instance.
	Enterer               *Reference                          `bson:",omitempty" json:"enterer,omitempty"`                   // Individual who created the claim, predetermination or preauthorization.
	SupportingInfo        *ExplanationOfBenefitSupportingInfo `binding:"omitempty" bson:",omitempty"`
	Adjudication          interface{}
	TraceNumber           []*Identifier                       `bson:",omitempty" json:"traceNumber,omitempty"` // Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
	Insurance             *ExplanationOfBenefitInsurance      `binding:"omitempty" bson:",omitempty"`
	FormCode              *CodeableConcept                    `bson:",omitempty" json:"formCode,omitempty"`             // A code for the form to be used for printing the content.
	Prescription          *Reference                          `bson:",omitempty" json:"prescription,omitempty"`         // Prescription is the document/authorization given to the claim author for them to provide products and services for which consideration (reimbursement) is sought. Could be a RX for medications, an 'order' for oxygen or wheelchair or physiotherapy treatments.
	OriginalPrescription  *Reference                          `bson:",omitempty" json:"originalPrescription,omitempty"` // Original prescription which has been superseded by this prescription to support the dispensing of pharmacy services, medications or products.
	Claim                 *Reference                          `bson:",omitempty" json:"claim,omitempty"`                // The business identifier for the instance of the adjudication request: claim predetermination or preauthorization.
	ImplicitRules         *string                             `bson:",omitempty" json:"implicitRules,omitempty"`        // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	BillablePeriod        *Period                             `bson:",omitempty" json:"billablePeriod,omitempty"`       // The period for which charges are being submitted.
	Disposition           *string                             `bson:",omitempty" json:"disposition,omitempty"`          // A human readable description of the status of the adjudication.
	PreAuthRef            []*string                           `bson:",omitempty" json:"preAuthRef,omitempty"`           // Reference from the Insurer which is used in later communications which refers to this adjudication.
	BenefitBalance        *ExplanationOfBenefitBenefitBalance `binding:"omitempty" bson:",omitempty"`
	Insurer               *Reference                          `bson:",omitempty" json:"insurer,omitempty"`  // The party responsible for authorization, adjudication and reimbursement.
	Provider              *Reference                          `bson:",omitempty" json:"provider,omitempty"` // The provider which is responsible for the claim, predetermination or preauthorization.
	Event                 *ExplanationOfBenefitEvent          `binding:"omitempty" bson:",omitempty"`
	Facility              *Reference                          `bson:",omitempty" json:"facility,omitempty"` // Facility where the services were provided.
	Diagnosis             *ExplanationOfBenefitDiagnosis      `binding:"omitempty" bson:",omitempty"`
	DiagnosisRelatedGroup *CodeableConcept                    `bson:",omitempty" json:"diagnosisRelatedGroup,omitempty"` // A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system.
	Total                 *ExplanationOfBenefitTotal          `binding:"omitempty" bson:",omitempty"`
	Id                    *primitive.ObjectID                 `bson:"_id,omitempty" json:"id,omitempty"`                      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta                  *Meta                               `bson:",omitempty" json:"meta,omitempty"`                       // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Contained             []*Resource                         `bson:",omitempty" json:"contained,omitempty"`                  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension             []*Extension                        `bson:",omitempty" json:"extension,omitempty"`                  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Type                  *CodeableConcept                    `binding:"required" bson:",omitempty" json:"type,omitempty"`    // The category of claim, e.g. oral, pharmacy, vision, institutional, professional.
	Patient               *Reference                          `binding:"required" bson:",omitempty" json:"patient,omitempty"` // The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for forecast reimbursement is sought.
	ModifierExtension     []*Extension                        `bson:",omitempty" json:"modifierExtension,omitempty"`          /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Procedure             *ExplanationOfBenefitProcedure   `binding:"omitempty" bson:",omitempty"`
	Payment               *ExplanationOfBenefitPayment     `binding:"omitempty" bson:",omitempty"`
	Item                  *ExplanationOfBenefitItem        `binding:"omitempty" bson:",omitempty"`
	Language              *string                          `bson:",omitempty" json:"language,omitempty"`                   // The base language in which the resource is written.
	Created               *DateTime                        `binding:"required" bson:",omitempty" json:"created,omitempty"` // The date this resource was created.
	FundsReserveRequested *CodeableConcept                 `bson:",omitempty" json:"fundsReserveRequested,omitempty"`      // A code to indicate whether and for whom funds are to be reserved for future claims.
	FundsReserve          *CodeableConcept                 `bson:",omitempty" json:"fundsReserve,omitempty"`               // A code, used only on a response to a preauthorization, to indicate whether the benefits payable have been reserved and for whom.
	Related               *ExplanationOfBenefitRelated     `binding:"omitempty" bson:",omitempty"`
	Identifier            []*Identifier                    `bson:",omitempty" json:"identifier,omitempty"`                 // A unique identifier assigned to this explanation of benefit.
	Outcome               *string                          `binding:"required" bson:",omitempty" json:"outcome,omitempty"` // The outcome of the claim, predetermination, or preauthorization processing.
	Decision              *CodeableConcept                 `bson:",omitempty" json:"decision,omitempty"`                   // The result of the claim, predetermination, or preauthorization adjudication.
	Accident              *ExplanationOfBenefitAccident    `binding:"omitempty" bson:",omitempty"`
	ProcessNote           *ExplanationOfBenefitProcessNote `binding:"omitempty" bson:",omitempty"`
	Encounter             []*Reference                     `bson:",omitempty" json:"encounter,omitempty"`   // Healthcare encounters related to this claim.
	PatientPaid           *Money                           `bson:",omitempty" json:"patientPaid,omitempty"` // The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
	AddItem               *ExplanationOfBenefitAddItem     `binding:"omitempty" bson:",omitempty"`
	BenefitPeriod         *Period                          `bson:",omitempty" json:"benefitPeriod,omitempty"` // The term of the benefits documented in this response.
	Text                  *Narrative                       `bson:",omitempty" json:"text,omitempty"`          // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	SubType               *CodeableConcept                 `bson:",omitempty" json:"subType,omitempty"`       // A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
	Priority              *CodeableConcept                 `bson:",omitempty" json:"priority,omitempty"`      // The provider-required urgency of processing the request. Typical values include: stat, normal deferred.
	Referral              *Reference                       `bson:",omitempty" json:"referral,omitempty"`      // The referral information received by the claim author, it is not to be used when the author generates a referral for a patient. A copy of that referral may be provided as supporting information. Some insurers require proof of referral to pay for services or to pay specialist rates for services.
	CareTeam              *ExplanationOfBenefitCareTeam    `binding:"omitempty" bson:",omitempty"`
	Form                  *Attachment                      `bson:",omitempty" json:"form,omitempty"`                   // The actual form, by reference or inclusion, for printing the content or an EOB.
	Use                   *string                          `binding:"required" bson:",omitempty" json:"use,omitempty"` // A code to indicate whether the nature of the request is: Claim - A request to an Insurer to adjudicate the supplied charges for health care goods and services under the identified policy and to pay the determined Benefit amount, if any; Preauthorization - A request to an Insurer to adjudicate the supplied proposed future charges for health care goods and services under the identified policy and to approve the services and provide the expected benefit amounts and potentially to reserve funds to pay the benefits when Claims for the indicated services are later submitted; or, Pre-determination - A request to an Insurer to adjudicate the supplied 'what if' charges for health care goods and services under the identified policy and report back what the Benefit payable would be had the services actually been provided.
	Payee                 *ExplanationOfBenefitPayee       `binding:"omitempty" bson:",omitempty"`
	ClaimResponse         *Reference                       `bson:",omitempty" json:"claimResponse,omitempty"`    // The business identifier for the instance of the adjudication response: claim, predetermination or preauthorization response.
	PreAuthRefPeriod      []*Period                        `bson:",omitempty" json:"preAuthRefPeriod,omitempty"` // The timeframe during which the supplied preauthorization reference may be quoted on claims to obtain the adjudication as provided.
	Precedence            *int                             `bson:",omitempty" json:"precedence,omitempty"`       // This indicates the relative order of a series of EOBs related to different coverages for the same suite of services.
	ResourceType          string                           `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ExplanationOfBenefitSupportingInfo) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["timingDate"], &out.TimingDate); err == nil {
	} else if err := go1.Unmarshal(asMap["timingPeriod"], &out.TimingPeriod); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["valueReference"], &out.ValueReference); err == nil {
	} else if err := go1.Unmarshal(asMap["valueIdentifier"], &out.ValueIdentifier); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
		return err
	}

	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
		return err
	}

	return nil
}

type ExplanationOfBenefitSupportingInfo struct {
	ExplanationOfBenefitSupportingInfoTimingx
	ExplanationOfBenefitSupportingInfoValuex
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Category  *CodeableConcept `binding:"required" bson:",omitempty" json:"category,omitempty"` // The general class of the information supplied: information; exception; accident, employment; onset, etc.
	Code      *CodeableConcept `bson:",omitempty" json:"code,omitempty"`                        // System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
	Reason    *Coding          `bson:",omitempty" json:"reason,omitempty"`                      // Provides the reason in the situation where a reason code is required in addition to the content.
	Extension []*Extension     `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Sequence  *int             `binding:"required" bson:",omitempty" json:"sequence,omitempty"` // A number to uniquely identify supporting information entries.
}
type ExplanationOfBenefitSupportingInfoTimingx struct {
	TimingDate   Date   `bson:",omitempty" json:"timingDate,omitempty"`
	TimingPeriod Period `bson:",omitempty" json:"timingPeriod,omitempty"`
}
type ExplanationOfBenefitSupportingInfoValuex struct {
	ValueBoolean    bool       `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueString     string     `bson:",omitempty" json:"valueString,omitempty"`
	ValueQuantity   Quantity   `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueAttachment Attachment `bson:",omitempty" json:"valueAttachment,omitempty"`
	ValueReference  Reference  `bson:",omitempty" json:"valueReference,omitempty"`
	ValueIdentifier Identifier `bson:",omitempty" json:"valueIdentifier,omitempty"`
}

func (out *ExplanationOfBenefitInsurance) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["focal"], &out.Focal); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["coverage"], &out.Coverage); err != nil {
		return err
	}

	if len(asMap["preAuthRef"]) > 0 {
		if err := go1.Unmarshal(asMap["preAuthRef"], &out.PreAuthRef); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ExplanationOfBenefitInsurance struct {
	Focal             *bool        `binding:"required" bson:",omitempty" json:"focal,omitempty"`    // A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.
	Coverage          *Reference   `binding:"required" bson:",omitempty" json:"coverage,omitempty"` // Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
	PreAuthRef        []*string    `bson:",omitempty" json:"preAuthRef,omitempty"`                  // Reference numbers previously provided by the insurer to the provider to be quoted on subsequent claims containing services or products related to the prior authorization.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`           /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *ExplanationOfBenefitBenefitBalance) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
		return err
	}

	if len(asMap["unit"]) > 0 {
		if err := go1.Unmarshal(asMap["unit"], &out.Unit); err != nil {
			return err
		}

	}
	if len(asMap["term"]) > 0 {
		if err := go1.Unmarshal(asMap["term"], &out.Term); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["excluded"]) > 0 {
		if err := go1.Unmarshal(asMap["excluded"], &out.Excluded); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["network"]) > 0 {
		if err := go1.Unmarshal(asMap["network"], &out.Network); err != nil {
			return err
		}

	}
	if len(asMap["financial"]) > 0 {
		if err := go1.Unmarshal(asMap["financial"], &out.Financial); err != nil {
			return err
		}

	}
	return nil
}

type ExplanationOfBenefitBenefitBalance struct {
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Category          *CodeableConcept `binding:"required" bson:",omitempty" json:"category,omitempty"` // Code to identify the general type of benefits under which products and services are provided.
	Unit              *CodeableConcept `bson:",omitempty" json:"unit,omitempty"`                        // Indicates if the benefits apply to an individual or to the family.
	Term              *CodeableConcept `bson:",omitempty" json:"term,omitempty"`                        // The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`           /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Excluded    *bool                                        `bson:",omitempty" json:"excluded,omitempty"`    // True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
	Name        *string                                      `bson:",omitempty" json:"name,omitempty"`        // A short name or tag for the benefit.
	Description *string                                      `bson:",omitempty" json:"description,omitempty"` // A richer description of the benefit or services covered.
	Network     *CodeableConcept                             `bson:",omitempty" json:"network,omitempty"`     // Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
	Financial   *ExplanationOfBenefitBenefitBalanceFinancial `binding:"omitempty" bson:",omitempty"`
}

func (out *ExplanationOfBenefitBenefitBalanceFinancial) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["allowedUnsignedInt"], &out.AllowedUnsignedInt); err == nil {
	} else if err := go1.Unmarshal(asMap["allowedString"], &out.AllowedString); err == nil {
	} else if err := go1.Unmarshal(asMap["allowedMoney"], &out.AllowedMoney); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["usedUnsignedInt"], &out.UsedUnsignedInt); err == nil {
	} else if err := go1.Unmarshal(asMap["usedMoney"], &out.UsedMoney); err == nil {
	} else {

	}
	return nil
}

type ExplanationOfBenefitBenefitBalanceFinancial struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // Classification of benefit being provided.
	ExplanationOfBenefitBenefitBalanceFinancialAllowedx
	ExplanationOfBenefitBenefitBalanceFinancialUsedx
}
type ExplanationOfBenefitBenefitBalanceFinancialAllowedx struct {
	AllowedUnsignedInt int    `bson:",omitempty" json:"allowedUnsignedInt,omitempty"`
	AllowedString      string `bson:",omitempty" json:"allowedString,omitempty"`
	AllowedMoney       Money  `bson:",omitempty" json:"allowedMoney,omitempty"`
}
type ExplanationOfBenefitBenefitBalanceFinancialUsedx struct {
	UsedUnsignedInt int   `bson:",omitempty" json:"usedUnsignedInt,omitempty"`
	UsedMoney       Money `bson:",omitempty" json:"usedMoney,omitempty"`
}

func (out *ExplanationOfBenefitEvent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["whenDateTime"], &out.WhenDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["whenPeriod"], &out.WhenPeriod); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "when[x]")
	}
	return nil
}

type ExplanationOfBenefitEvent struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // A coded event such as when a service is expected or a card printed.
	ExplanationOfBenefitEventWhenx
}
type ExplanationOfBenefitEventWhenx struct {
	WhenDateTime DateTime `bson:",omitempty" json:"whenDateTime,omitempty"`
	WhenPeriod   Period   `bson:",omitempty" json:"whenPeriod,omitempty"`
}

func (out *ExplanationOfBenefitDiagnosis) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["diagnosisCodeableConcept"], &out.DiagnosisCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["diagnosisReference"], &out.DiagnosisReference); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "diagnosis[x]")
	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["onAdmission"]) > 0 {
		if err := go1.Unmarshal(asMap["onAdmission"], &out.OnAdmission); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type ExplanationOfBenefitDiagnosis struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Sequence *int `binding:"required" bson:",omitempty" json:"sequence,omitempty"` // A number to uniquely identify diagnosis entries.
	ExplanationOfBenefitDiagnosisDiagnosisx
	Type        []*CodeableConcept `bson:",omitempty" json:"type,omitempty"`        // When the condition was observed or the relative ranking.
	OnAdmission *CodeableConcept   `bson:",omitempty" json:"onAdmission,omitempty"` // Indication of whether the diagnosis was present on admission to a facility.
	Id          *string            `bson:"_id,omitempty" json:"id,omitempty"`       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}
type ExplanationOfBenefitDiagnosisDiagnosisx struct {
	DiagnosisCodeableConcept CodeableConcept `bson:",omitempty" json:"diagnosisCodeableConcept,omitempty"`
	DiagnosisReference       Reference       `bson:",omitempty" json:"diagnosisReference,omitempty"`
}

func (out *ExplanationOfBenefitTotal) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
		return err
	}

	return nil
}

type ExplanationOfBenefitTotal struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Category *CodeableConcept `binding:"required" bson:",omitempty" json:"category,omitempty"` // A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item.
	Amount   *Money           `binding:"required" bson:",omitempty" json:"amount,omitempty"`   // Monetary total amount associated with the category.
}

func (out *ExplanationOfBenefitProcedure) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["procedureCodeableConcept"], &out.ProcedureCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["procedureReference"], &out.ProcedureReference); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "procedure[x]")
	}
	if len(asMap["udi"]) > 0 {
		if err := go1.Unmarshal(asMap["udi"], &out.Udi); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
		return err
	}

	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	return nil
}

type ExplanationOfBenefitProcedure struct {
	Date *DateTime `bson:",omitempty" json:"date,omitempty"` // Date and optionally time the procedure was performed.
	ExplanationOfBenefitProcedureProcedurex
	Udi               []*Reference `bson:",omitempty" json:"udi,omitempty"`               // Unique Device Identifiers associated with this line item.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Sequence *int               `binding:"required" bson:",omitempty" json:"sequence,omitempty"` // A number to uniquely identify procedure entries.
	Type     []*CodeableConcept `bson:",omitempty" json:"type,omitempty"`                        // When the condition was observed or the relative ranking.
}
type ExplanationOfBenefitProcedureProcedurex struct {
	ProcedureCodeableConcept CodeableConcept `bson:",omitempty" json:"procedureCodeableConcept,omitempty"`
	ProcedureReference       Reference       `bson:",omitempty" json:"procedureReference,omitempty"`
}

func (out *ExplanationOfBenefitPayment) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["adjustmentReason"]) > 0 {
		if err := go1.Unmarshal(asMap["adjustmentReason"], &out.AdjustmentReason); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["amount"]) > 0 {
		if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["adjustment"]) > 0 {
		if err := go1.Unmarshal(asMap["adjustment"], &out.Adjustment); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	return nil
}

type ExplanationOfBenefitPayment struct {
	AdjustmentReason  *CodeableConcept `bson:",omitempty" json:"adjustmentReason,omitempty"`  // Reason for the payment adjustment.
	Date              *Date            `bson:",omitempty" json:"date,omitempty"`              // Estimated date the payment will be issued or the actual issue date of payment.
	Amount            *Money           `bson:",omitempty" json:"amount,omitempty"`            // Benefits payable less any payment adjustment.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Adjustment *Money           `bson:",omitempty" json:"adjustment,omitempty"` // Total amount of all adjustments to this payment included in this transaction which are not related to this claim's adjudication.
	Identifier *Identifier      `bson:",omitempty" json:"identifier,omitempty"` // Issuer's unique identifier for the payment instrument.
	Extension  []*Extension     `bson:",omitempty" json:"extension,omitempty"`  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Type       *CodeableConcept `bson:",omitempty" json:"type,omitempty"`       // Whether this represents partial or complete payment of the benefits payable.
}

func (out *ExplanationOfBenefitItem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["diagnosisSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["diagnosisSequence"], &out.DiagnosisSequence); err != nil {
			return err
		}

	}
	if len(asMap["net"]) > 0 {
		if err := go1.Unmarshal(asMap["net"], &out.Net); err != nil {
			return err
		}

	}
	if len(asMap["productOrService"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrService"], &out.ProductOrService); err != nil {
			return err
		}

	}
	if len(asMap["bodySite"]) > 0 {
		if err := go1.Unmarshal(asMap["bodySite"], &out.BodySite); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["traceNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["traceNumber"], &out.TraceNumber); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["servicedDate"], &out.ServicedDate); err == nil {
	} else if err := go1.Unmarshal(asMap["servicedPeriod"], &out.ServicedPeriod); err == nil {
	} else {

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
		return err
	}

	if len(asMap["procedureSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["procedureSequence"], &out.ProcedureSequence); err != nil {
			return err
		}

	}
	if len(asMap["patientPaid"]) > 0 {
		if err := go1.Unmarshal(asMap["patientPaid"], &out.PatientPaid); err != nil {
			return err
		}

	}
	if len(asMap["udi"]) > 0 {
		if err := go1.Unmarshal(asMap["udi"], &out.Udi); err != nil {
			return err
		}

	}
	if len(asMap["productOrServiceEnd"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrServiceEnd"], &out.ProductOrServiceEnd); err != nil {
			return err
		}

	}
	if len(asMap["noteNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["noteNumber"], &out.NoteNumber); err != nil {
			return err
		}

	}
	if len(asMap["adjudication"]) > 0 {
		if err := go1.Unmarshal(asMap["adjudication"], &out.Adjudication); err != nil {
			return err
		}

	}
	if len(asMap["detail"]) > 0 {
		if err := go1.Unmarshal(asMap["detail"], &out.Detail); err != nil {
			return err
		}

	}
	if len(asMap["programCode"]) > 0 {
		if err := go1.Unmarshal(asMap["programCode"], &out.ProgramCode); err != nil {
			return err
		}

	}
	if len(asMap["unitPrice"]) > 0 {
		if err := go1.Unmarshal(asMap["unitPrice"], &out.UnitPrice); err != nil {
			return err
		}

	}
	if len(asMap["factor"]) > 0 {
		if err := go1.Unmarshal(asMap["factor"], &out.Factor); err != nil {
			return err
		}

	}
	if len(asMap["tax"]) > 0 {
		if err := go1.Unmarshal(asMap["tax"], &out.Tax); err != nil {
			return err
		}

	}
	if len(asMap["informationSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["informationSequence"], &out.InformationSequence); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["modifier"]) > 0 {
		if err := go1.Unmarshal(asMap["modifier"], &out.Modifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["locationCodeableConcept"], &out.LocationCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["locationAddress"], &out.LocationAddress); err == nil {
	} else if err := go1.Unmarshal(asMap["locationReference"], &out.LocationReference); err == nil {
	} else {

	}
	if len(asMap["careTeamSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["careTeamSequence"], &out.CareTeamSequence); err != nil {
			return err
		}

	}
	if len(asMap["revenue"]) > 0 {
		if err := go1.Unmarshal(asMap["revenue"], &out.Revenue); err != nil {
			return err
		}

	}
	if len(asMap["request"]) > 0 {
		if err := go1.Unmarshal(asMap["request"], &out.Request); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["reviewOutcome"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewOutcome"], &out.ReviewOutcome); err != nil {
			return err
		}

	}
	return nil
}

type ExplanationOfBenefitItem struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	DiagnosisSequence []*int                            `bson:",omitempty" json:"diagnosisSequence,omitempty"` // Diagnoses applicable for this service or product.
	Net               *Money                            `bson:",omitempty" json:"net,omitempty"`               // The total amount claimed for the group (if a grouper) or the line item. Net = unit price * quantity * factor.
	ProductOrService  *CodeableConcept                  `bson:",omitempty" json:"productOrService,omitempty"`  // When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
	BodySite          *ExplanationOfBenefitItemBodySite `binding:"omitempty" bson:",omitempty"`
	Id                *string                           `bson:"_id,omitempty" json:"id,omitempty"`       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	TraceNumber       []*Identifier                     `bson:",omitempty" json:"traceNumber,omitempty"` // Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
	ExplanationOfBenefitItemServicedx
	Encounter           []*Reference                          `bson:",omitempty" json:"encounter,omitempty"`                   // Healthcare encounters related to this claim.
	Extension           []*Extension                          `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Sequence            *int                                  `binding:"required" bson:",omitempty" json:"sequence,omitempty"` // A number to uniquely identify item entries.
	ProcedureSequence   []*int                                `bson:",omitempty" json:"procedureSequence,omitempty"`           // Procedures applicable for this service or product.
	PatientPaid         *Money                                `bson:",omitempty" json:"patientPaid,omitempty"`                 // The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
	Udi                 []*Reference                          `bson:",omitempty" json:"udi,omitempty"`                         // Unique Device Identifiers associated with this line item.
	ProductOrServiceEnd *CodeableConcept                      `bson:",omitempty" json:"productOrServiceEnd,omitempty"`         // This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
	NoteNumber          []*int                                `bson:",omitempty" json:"noteNumber,omitempty"`                  // The numbers associated with notes below which apply to the adjudication of this item.
	Adjudication        *ExplanationOfBenefitItemAdjudication `binding:"omitempty" bson:",omitempty"`
	Detail              *ExplanationOfBenefitItemDetail       `binding:"omitempty" bson:",omitempty"`
	ProgramCode         []*CodeableConcept                    `bson:",omitempty" json:"programCode,omitempty"`         // Identifies the program under which this may be recovered.
	UnitPrice           *Money                                `bson:",omitempty" json:"unitPrice,omitempty"`           // If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
	Factor              *float64                              `bson:",omitempty" json:"factor,omitempty"`              // A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
	Tax                 *Money                                `bson:",omitempty" json:"tax,omitempty"`                 // The total of taxes applicable for this product or service.
	InformationSequence []*int                                `bson:",omitempty" json:"informationSequence,omitempty"` // Exceptions, special conditions and supporting information applicable for this service or product.
	Category            *CodeableConcept                      `bson:",omitempty" json:"category,omitempty"`            // Code to identify the general type of benefits under which products and services are provided.
	Modifier            []*CodeableConcept                    `bson:",omitempty" json:"modifier,omitempty"`            // Item typification or modifiers codes to convey additional context for the product or service.
	ExplanationOfBenefitItemLocationx
	CareTeamSequence []*int                                 `bson:",omitempty" json:"careTeamSequence,omitempty"` // Care team members related to this service or product.
	Revenue          *CodeableConcept                       `bson:",omitempty" json:"revenue,omitempty"`          // The type of revenue or cost center providing the product and/or service.
	Request          []*Reference                           `bson:",omitempty" json:"request,omitempty"`          // Request or Referral for Goods or Service to be rendered.
	Quantity         *Quantity                              `bson:",omitempty" json:"quantity,omitempty"`         // The number of repetitions of a service or product.
	ReviewOutcome    *ExplanationOfBenefitItemReviewOutcome `binding:"omitempty" bson:",omitempty"`
}

func (out *ExplanationOfBenefitItemBodySite) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["site"], &out.Site); err != nil {
		return err
	}

	if len(asMap["subSite"]) > 0 {
		if err := go1.Unmarshal(asMap["subSite"], &out.SubSite); err != nil {
			return err
		}

	}
	return nil
}

type ExplanationOfBenefitItemBodySite struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Site    []*CodeableReference `binding:"required" bson:",omitempty" json:"site,omitempty"` // Physical service site on the patient (limb, tooth, etc.).
	SubSite []*CodeableConcept   `bson:",omitempty" json:"subSite,omitempty"`                 // A region or surface of the bodySite, e.g. limb region or tooth surface(s).
}
type ExplanationOfBenefitItemServicedx struct {
	ServicedDate   Date   `bson:",omitempty" json:"servicedDate,omitempty"`
	ServicedPeriod Period `bson:",omitempty" json:"servicedPeriod,omitempty"`
}

func (out *ExplanationOfBenefitItemAdjudication) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
		return err
	}

	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["amount"]) > 0 {
		if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	return nil
}

type ExplanationOfBenefitItemAdjudication struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Category *CodeableConcept `binding:"required" bson:",omitempty" json:"category,omitempty"` // A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in-aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item.
	Reason   *CodeableConcept `bson:",omitempty" json:"reason,omitempty"`                      // A code supporting the understanding of the adjudication result and explaining variance from expected amount.
	Amount   *Money           `bson:",omitempty" json:"amount,omitempty"`                      // Monetary amount associated with the category.
	Quantity *Quantity        `bson:",omitempty" json:"quantity,omitempty"`                    // A non-monetary value associated with the category. Mutually exclusive to the amount element above.
}

func (out *ExplanationOfBenefitItemDetail) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["revenue"]) > 0 {
		if err := go1.Unmarshal(asMap["revenue"], &out.Revenue); err != nil {
			return err
		}

	}
	if len(asMap["factor"]) > 0 {
		if err := go1.Unmarshal(asMap["factor"], &out.Factor); err != nil {
			return err
		}

	}
	if len(asMap["net"]) > 0 {
		if err := go1.Unmarshal(asMap["net"], &out.Net); err != nil {
			return err
		}

	}
	if len(asMap["reviewOutcome"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewOutcome"], &out.ReviewOutcome); err != nil {
			return err
		}

	}
	if len(asMap["adjudication"]) > 0 {
		if err := go1.Unmarshal(asMap["adjudication"], &out.Adjudication); err != nil {
			return err
		}

	}
	if len(asMap["subDetail"]) > 0 {
		if err := go1.Unmarshal(asMap["subDetail"], &out.SubDetail); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
		return err
	}

	if len(asMap["traceNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["traceNumber"], &out.TraceNumber); err != nil {
			return err
		}

	}
	if len(asMap["patientPaid"]) > 0 {
		if err := go1.Unmarshal(asMap["patientPaid"], &out.PatientPaid); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["tax"]) > 0 {
		if err := go1.Unmarshal(asMap["tax"], &out.Tax); err != nil {
			return err
		}

	}
	if len(asMap["noteNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["noteNumber"], &out.NoteNumber); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["productOrService"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrService"], &out.ProductOrService); err != nil {
			return err
		}

	}
	if len(asMap["productOrServiceEnd"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrServiceEnd"], &out.ProductOrServiceEnd); err != nil {
			return err
		}

	}
	if len(asMap["unitPrice"]) > 0 {
		if err := go1.Unmarshal(asMap["unitPrice"], &out.UnitPrice); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["modifier"]) > 0 {
		if err := go1.Unmarshal(asMap["modifier"], &out.Modifier); err != nil {
			return err
		}

	}
	if len(asMap["programCode"]) > 0 {
		if err := go1.Unmarshal(asMap["programCode"], &out.ProgramCode); err != nil {
			return err
		}

	}
	if len(asMap["udi"]) > 0 {
		if err := go1.Unmarshal(asMap["udi"], &out.Udi); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ExplanationOfBenefitItemDetail struct {
	Revenue             *CodeableConcept `bson:",omitempty" json:"revenue,omitempty"` // The type of revenue or cost center providing the product and/or service.
	Factor              *float64         `bson:",omitempty" json:"factor,omitempty"`  // A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
	Net                 *Money           `bson:",omitempty" json:"net,omitempty"`     // The total amount claimed for the group (if a grouper) or the line item.detail. Net = unit price * quantity * factor.
	ReviewOutcome       interface{}
	Adjudication        interface{}
	SubDetail           *ExplanationOfBenefitItemDetailSubDetail `binding:"omitempty" bson:",omitempty"`
	Sequence            *int                                     `binding:"required" bson:",omitempty" json:"sequence,omitempty"` // A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
	TraceNumber         []*Identifier                            `bson:",omitempty" json:"traceNumber,omitempty"`                 // Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
	PatientPaid         *Money                                   `bson:",omitempty" json:"patientPaid,omitempty"`                 // The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
	Quantity            *Quantity                                `bson:",omitempty" json:"quantity,omitempty"`                    // The number of repetitions of a service or product.
	Tax                 *Money                                   `bson:",omitempty" json:"tax,omitempty"`                         // The total of taxes applicable for this product or service.
	NoteNumber          []*int                                   `bson:",omitempty" json:"noteNumber,omitempty"`                  // The numbers associated with notes below which apply to the adjudication of this item.
	Extension           []*Extension                             `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ProductOrService    *CodeableConcept                         `bson:",omitempty" json:"productOrService,omitempty"`            // When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
	ProductOrServiceEnd *CodeableConcept                         `bson:",omitempty" json:"productOrServiceEnd,omitempty"`         // This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
	UnitPrice           *Money                                   `bson:",omitempty" json:"unitPrice,omitempty"`                   // If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
	Id                  *string                                  `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Category            *CodeableConcept                         `bson:",omitempty" json:"category,omitempty"`                    // Code to identify the general type of benefits under which products and services are provided.
	Modifier            []*CodeableConcept                       `bson:",omitempty" json:"modifier,omitempty"`                    // Item typification or modifiers codes to convey additional context for the product or service.
	ProgramCode         []*CodeableConcept                       `bson:",omitempty" json:"programCode,omitempty"`                 // Identifies the program under which this may be recovered.
	Udi                 []*Reference                             `bson:",omitempty" json:"udi,omitempty"`                         // Unique Device Identifiers associated with this line item.
	ModifierExtension   []*Extension                             `bson:",omitempty" json:"modifierExtension,omitempty"`           /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *ExplanationOfBenefitItemDetailSubDetail) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["factor"]) > 0 {
		if err := go1.Unmarshal(asMap["factor"], &out.Factor); err != nil {
			return err
		}

	}
	if len(asMap["udi"]) > 0 {
		if err := go1.Unmarshal(asMap["udi"], &out.Udi); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["patientPaid"]) > 0 {
		if err := go1.Unmarshal(asMap["patientPaid"], &out.PatientPaid); err != nil {
			return err
		}

	}
	if len(asMap["adjudication"]) > 0 {
		if err := go1.Unmarshal(asMap["adjudication"], &out.Adjudication); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
		return err
	}

	if len(asMap["traceNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["traceNumber"], &out.TraceNumber); err != nil {
			return err
		}

	}
	if len(asMap["productOrService"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrService"], &out.ProductOrService); err != nil {
			return err
		}

	}
	if len(asMap["productOrServiceEnd"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrServiceEnd"], &out.ProductOrServiceEnd); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["unitPrice"]) > 0 {
		if err := go1.Unmarshal(asMap["unitPrice"], &out.UnitPrice); err != nil {
			return err
		}

	}
	if len(asMap["tax"]) > 0 {
		if err := go1.Unmarshal(asMap["tax"], &out.Tax); err != nil {
			return err
		}

	}
	if len(asMap["net"]) > 0 {
		if err := go1.Unmarshal(asMap["net"], &out.Net); err != nil {
			return err
		}

	}
	if len(asMap["reviewOutcome"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewOutcome"], &out.ReviewOutcome); err != nil {
			return err
		}

	}
	if len(asMap["revenue"]) > 0 {
		if err := go1.Unmarshal(asMap["revenue"], &out.Revenue); err != nil {
			return err
		}

	}
	if len(asMap["modifier"]) > 0 {
		if err := go1.Unmarshal(asMap["modifier"], &out.Modifier); err != nil {
			return err
		}

	}
	if len(asMap["programCode"]) > 0 {
		if err := go1.Unmarshal(asMap["programCode"], &out.ProgramCode); err != nil {
			return err
		}

	}
	if len(asMap["noteNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["noteNumber"], &out.NoteNumber); err != nil {
			return err
		}

	}
	return nil
}

type ExplanationOfBenefitItemDetailSubDetail struct {
	Category          *CodeableConcept `bson:",omitempty" json:"category,omitempty"`          // Code to identify the general type of benefits under which products and services are provided.
	Factor            *float64         `bson:",omitempty" json:"factor,omitempty"`            // A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
	Udi               []*Reference     `bson:",omitempty" json:"udi,omitempty"`               // Unique Device Identifiers associated with this line item.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	PatientPaid         *Money `bson:",omitempty" json:"patientPaid,omitempty"` // The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
	Adjudication        interface{}
	Id                  *string          `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension           []*Extension     `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Sequence            *int             `binding:"required" bson:",omitempty" json:"sequence,omitempty"` // A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
	TraceNumber         []*Identifier    `bson:",omitempty" json:"traceNumber,omitempty"`                 // Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
	ProductOrService    *CodeableConcept `bson:",omitempty" json:"productOrService,omitempty"`            // When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
	ProductOrServiceEnd *CodeableConcept `bson:",omitempty" json:"productOrServiceEnd,omitempty"`         // This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
	Quantity            *Quantity        `bson:",omitempty" json:"quantity,omitempty"`                    // The number of repetitions of a service or product.
	UnitPrice           *Money           `bson:",omitempty" json:"unitPrice,omitempty"`                   // If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
	Tax                 *Money           `bson:",omitempty" json:"tax,omitempty"`                         // The total of taxes applicable for this product or service.
	Net                 *Money           `bson:",omitempty" json:"net,omitempty"`                         // The total amount claimed for the line item.detail.subDetail. Net = unit price * quantity * factor.
	ReviewOutcome       interface{}
	Revenue             *CodeableConcept   `bson:",omitempty" json:"revenue,omitempty"`     // The type of revenue or cost center providing the product and/or service.
	Modifier            []*CodeableConcept `bson:",omitempty" json:"modifier,omitempty"`    // Item typification or modifiers codes to convey additional context for the product or service.
	ProgramCode         []*CodeableConcept `bson:",omitempty" json:"programCode,omitempty"` // Identifies the program under which this may be recovered.
	NoteNumber          []*int             `bson:",omitempty" json:"noteNumber,omitempty"`  // The numbers associated with notes below which apply to the adjudication of this item.
}
type ExplanationOfBenefitItemLocationx struct {
	LocationCodeableConcept CodeableConcept `bson:",omitempty" json:"locationCodeableConcept,omitempty"`
	LocationAddress         Address         `bson:",omitempty" json:"locationAddress,omitempty"`
	LocationReference       Reference       `bson:",omitempty" json:"locationReference,omitempty"`
}

func (out *ExplanationOfBenefitItemReviewOutcome) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["preAuthRef"]) > 0 {
		if err := go1.Unmarshal(asMap["preAuthRef"], &out.PreAuthRef); err != nil {
			return err
		}

	}
	if len(asMap["preAuthPeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["preAuthPeriod"], &out.PreAuthPeriod); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["decision"]) > 0 {
		if err := go1.Unmarshal(asMap["decision"], &out.Decision); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	return nil
}

type ExplanationOfBenefitItemReviewOutcome struct {
	PreAuthRef        *string      `bson:",omitempty" json:"preAuthRef,omitempty"`        // Reference from the Insurer which is used in later communications which refers to this adjudication.
	PreAuthPeriod     *Period      `bson:",omitempty" json:"preAuthPeriod,omitempty"`     // The time frame during which this authorization is effective.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Decision *CodeableConcept   `bson:",omitempty" json:"decision,omitempty"` // The result of the claim, predetermination, or preauthorization adjudication.
	Reason   []*CodeableConcept `bson:",omitempty" json:"reason,omitempty"`   // The reasons for the result of the claim, predetermination, or preauthorization adjudication.
}

func (out *ExplanationOfBenefitRelated) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["claim"]) > 0 {
		if err := go1.Unmarshal(asMap["claim"], &out.Claim); err != nil {
			return err
		}

	}
	if len(asMap["relationship"]) > 0 {
		if err := go1.Unmarshal(asMap["relationship"], &out.Relationship); err != nil {
			return err
		}

	}
	if len(asMap["reference"]) > 0 {
		if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ExplanationOfBenefitRelated struct {
	Claim             *Reference       `bson:",omitempty" json:"claim,omitempty"`             // Reference to a related claim.
	Relationship      *CodeableConcept `bson:",omitempty" json:"relationship,omitempty"`      // A code to convey how the claims are related.
	Reference         *Identifier      `bson:",omitempty" json:"reference,omitempty"`         // An alternate organizational reference to the case or file to which this particular claim pertains.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *ExplanationOfBenefitAccident) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["locationAddress"], &out.LocationAddress); err == nil {
	} else if err := go1.Unmarshal(asMap["locationReference"], &out.LocationReference); err == nil {
	} else {

	}
	return nil
}

type ExplanationOfBenefitAccident struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Date *Date            `bson:",omitempty" json:"date,omitempty"` // Date of an accident event  related to the products and services contained in the claim.
	Type *CodeableConcept `bson:",omitempty" json:"type,omitempty"` // The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
	ExplanationOfBenefitAccidentLocationx
}
type ExplanationOfBenefitAccidentLocationx struct {
	LocationAddress   Address   `bson:",omitempty" json:"locationAddress,omitempty"`
	LocationReference Reference `bson:",omitempty" json:"locationReference,omitempty"`
}

func (out *ExplanationOfBenefitProcessNote) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["number"]) > 0 {
		if err := go1.Unmarshal(asMap["number"], &out.Number); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ExplanationOfBenefitProcessNote struct {
	Number            *int             `bson:",omitempty" json:"number,omitempty"`            // A number to uniquely identify a note entry.
	Type              *CodeableConcept `bson:",omitempty" json:"type,omitempty"`              // The business purpose of the note text.
	Text              *string          `bson:",omitempty" json:"text,omitempty"`              // The explanation or description associated with the processing.
	Language          *CodeableConcept `bson:",omitempty" json:"language,omitempty"`          // A code to define the language used in the text of the note.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *ExplanationOfBenefitAddItem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["locationCodeableConcept"], &out.LocationCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["locationAddress"], &out.LocationAddress); err == nil {
	} else if err := go1.Unmarshal(asMap["locationReference"], &out.LocationReference); err == nil {
	} else {

	}
	if len(asMap["traceNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["traceNumber"], &out.TraceNumber); err != nil {
			return err
		}

	}
	if len(asMap["request"]) > 0 {
		if err := go1.Unmarshal(asMap["request"], &out.Request); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["productOrServiceEnd"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrServiceEnd"], &out.ProductOrServiceEnd); err != nil {
			return err
		}

	}
	if len(asMap["factor"]) > 0 {
		if err := go1.Unmarshal(asMap["factor"], &out.Factor); err != nil {
			return err
		}

	}
	if len(asMap["tax"]) > 0 {
		if err := go1.Unmarshal(asMap["tax"], &out.Tax); err != nil {
			return err
		}

	}
	if len(asMap["detail"]) > 0 {
		if err := go1.Unmarshal(asMap["detail"], &out.Detail); err != nil {
			return err
		}

	}
	if len(asMap["net"]) > 0 {
		if err := go1.Unmarshal(asMap["net"], &out.Net); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["itemSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["itemSequence"], &out.ItemSequence); err != nil {
			return err
		}

	}
	if len(asMap["noteNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["noteNumber"], &out.NoteNumber); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["servicedDate"], &out.ServicedDate); err == nil {
	} else if err := go1.Unmarshal(asMap["servicedPeriod"], &out.ServicedPeriod); err == nil {
	} else {

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["productOrService"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrService"], &out.ProductOrService); err != nil {
			return err
		}

	}
	if len(asMap["modifier"]) > 0 {
		if err := go1.Unmarshal(asMap["modifier"], &out.Modifier); err != nil {
			return err
		}

	}
	if len(asMap["programCode"]) > 0 {
		if err := go1.Unmarshal(asMap["programCode"], &out.ProgramCode); err != nil {
			return err
		}

	}
	if len(asMap["unitPrice"]) > 0 {
		if err := go1.Unmarshal(asMap["unitPrice"], &out.UnitPrice); err != nil {
			return err
		}

	}
	if len(asMap["provider"]) > 0 {
		if err := go1.Unmarshal(asMap["provider"], &out.Provider); err != nil {
			return err
		}

	}
	if len(asMap["revenue"]) > 0 {
		if err := go1.Unmarshal(asMap["revenue"], &out.Revenue); err != nil {
			return err
		}

	}
	if len(asMap["adjudication"]) > 0 {
		if err := go1.Unmarshal(asMap["adjudication"], &out.Adjudication); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["subDetailSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["subDetailSequence"], &out.SubDetailSequence); err != nil {
			return err
		}

	}
	if len(asMap["patientPaid"]) > 0 {
		if err := go1.Unmarshal(asMap["patientPaid"], &out.PatientPaid); err != nil {
			return err
		}

	}
	if len(asMap["reviewOutcome"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewOutcome"], &out.ReviewOutcome); err != nil {
			return err
		}

	}
	if len(asMap["detailSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["detailSequence"], &out.DetailSequence); err != nil {
			return err
		}

	}
	if len(asMap["bodySite"]) > 0 {
		if err := go1.Unmarshal(asMap["bodySite"], &out.BodySite); err != nil {
			return err
		}

	}
	return nil
}

type ExplanationOfBenefitAddItem struct {
	ExplanationOfBenefitAddItemLocationx
	TraceNumber         []*Identifier                      `bson:",omitempty" json:"traceNumber,omitempty"`         // Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
	Request             []*Reference                       `bson:",omitempty" json:"request,omitempty"`             // Request or Referral for Goods or Service to be rendered.
	Id                  *string                            `bson:"_id,omitempty" json:"id,omitempty"`               // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ProductOrServiceEnd *CodeableConcept                   `bson:",omitempty" json:"productOrServiceEnd,omitempty"` // This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
	Factor              *float64                           `bson:",omitempty" json:"factor,omitempty"`              // A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
	Tax                 *Money                             `bson:",omitempty" json:"tax,omitempty"`                 // The total of taxes applicable for this product or service.
	Detail              *ExplanationOfBenefitAddItemDetail `binding:"omitempty" bson:",omitempty"`
	Net                 *Money                             `bson:",omitempty" json:"net,omitempty"`               // The total amount claimed for the group (if a grouper) or the addItem. Net = unit price * quantity * factor.
	ModifierExtension   []*Extension                       `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ItemSequence []*int `bson:",omitempty" json:"itemSequence,omitempty"` // Claim items which this service line is intended to replace.
	NoteNumber   []*int `bson:",omitempty" json:"noteNumber,omitempty"`   // The numbers associated with notes below which apply to the adjudication of this item.
	ExplanationOfBenefitAddItemServicedx
	Quantity          *Quantity          `bson:",omitempty" json:"quantity,omitempty"`         // The number of repetitions of a service or product.
	ProductOrService  *CodeableConcept   `bson:",omitempty" json:"productOrService,omitempty"` // When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
	Modifier          []*CodeableConcept `bson:",omitempty" json:"modifier,omitempty"`         // Item typification or modifiers codes to convey additional context for the product or service.
	ProgramCode       []*CodeableConcept `bson:",omitempty" json:"programCode,omitempty"`      // Identifies the program under which this may be recovered.
	UnitPrice         *Money             `bson:",omitempty" json:"unitPrice,omitempty"`        // If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
	Provider          []*Reference       `bson:",omitempty" json:"provider,omitempty"`         // The providers who are authorized for the services rendered to the patient.
	Revenue           *CodeableConcept   `bson:",omitempty" json:"revenue,omitempty"`          // The type of revenue or cost center providing the product and/or service.
	Adjudication      interface{}
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	SubDetailSequence []*int       `bson:",omitempty" json:"subDetailSequence,omitempty"` // The sequence number of the sub-details woithin the details within the claim item which this line is intended to replace.
	PatientPaid       *Money       `bson:",omitempty" json:"patientPaid,omitempty"`       // The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
	ReviewOutcome     interface{}
	DetailSequence    []*int                               `bson:",omitempty" json:"detailSequence,omitempty"` // The sequence number of the details within the claim item which this line is intended to replace.
	BodySite          *ExplanationOfBenefitAddItemBodySite `binding:"omitempty" bson:",omitempty"`
}
type ExplanationOfBenefitAddItemLocationx struct {
	LocationCodeableConcept CodeableConcept `bson:",omitempty" json:"locationCodeableConcept,omitempty"`
	LocationAddress         Address         `bson:",omitempty" json:"locationAddress,omitempty"`
	LocationReference       Reference       `bson:",omitempty" json:"locationReference,omitempty"`
}

func (out *ExplanationOfBenefitAddItemDetail) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["revenue"]) > 0 {
		if err := go1.Unmarshal(asMap["revenue"], &out.Revenue); err != nil {
			return err
		}

	}
	if len(asMap["productOrServiceEnd"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrServiceEnd"], &out.ProductOrServiceEnd); err != nil {
			return err
		}

	}
	if len(asMap["subDetail"]) > 0 {
		if err := go1.Unmarshal(asMap["subDetail"], &out.SubDetail); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifier"]) > 0 {
		if err := go1.Unmarshal(asMap["modifier"], &out.Modifier); err != nil {
			return err
		}

	}
	if len(asMap["tax"]) > 0 {
		if err := go1.Unmarshal(asMap["tax"], &out.Tax); err != nil {
			return err
		}

	}
	if len(asMap["reviewOutcome"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewOutcome"], &out.ReviewOutcome); err != nil {
			return err
		}

	}
	if len(asMap["unitPrice"]) > 0 {
		if err := go1.Unmarshal(asMap["unitPrice"], &out.UnitPrice); err != nil {
			return err
		}

	}
	if len(asMap["factor"]) > 0 {
		if err := go1.Unmarshal(asMap["factor"], &out.Factor); err != nil {
			return err
		}

	}
	if len(asMap["net"]) > 0 {
		if err := go1.Unmarshal(asMap["net"], &out.Net); err != nil {
			return err
		}

	}
	if len(asMap["adjudication"]) > 0 {
		if err := go1.Unmarshal(asMap["adjudication"], &out.Adjudication); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["traceNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["traceNumber"], &out.TraceNumber); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["productOrService"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrService"], &out.ProductOrService); err != nil {
			return err
		}

	}
	if len(asMap["patientPaid"]) > 0 {
		if err := go1.Unmarshal(asMap["patientPaid"], &out.PatientPaid); err != nil {
			return err
		}

	}
	if len(asMap["noteNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["noteNumber"], &out.NoteNumber); err != nil {
			return err
		}

	}
	return nil
}

type ExplanationOfBenefitAddItemDetail struct {
	Revenue             *CodeableConcept                            `bson:",omitempty" json:"revenue,omitempty"`             // The type of revenue or cost center providing the product and/or service.
	ProductOrServiceEnd *CodeableConcept                            `bson:",omitempty" json:"productOrServiceEnd,omitempty"` // This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
	SubDetail           *ExplanationOfBenefitAddItemDetailSubDetail `binding:"omitempty" bson:",omitempty"`
	Extension           []*Extension                                `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Modifier            []*CodeableConcept                          `bson:",omitempty" json:"modifier,omitempty"`  // Item typification or modifiers codes to convey additional context for the product or service.
	Tax                 *Money                                      `bson:",omitempty" json:"tax,omitempty"`       // The total of taxes applicable for this product or service.
	ReviewOutcome       interface{}
	UnitPrice           *Money   `bson:",omitempty" json:"unitPrice,omitempty"` // If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
	Factor              *float64 `bson:",omitempty" json:"factor,omitempty"`    // A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
	Net                 *Money   `bson:",omitempty" json:"net,omitempty"`       // The total amount claimed for the group (if a grouper) or the addItem.detail. Net = unit price * quantity * factor.
	Adjudication        interface{}
	Id                  *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension   []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	TraceNumber      []*Identifier    `bson:",omitempty" json:"traceNumber,omitempty"`      // Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
	Quantity         *Quantity        `bson:",omitempty" json:"quantity,omitempty"`         // The number of repetitions of a service or product.
	ProductOrService *CodeableConcept `bson:",omitempty" json:"productOrService,omitempty"` // When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
	PatientPaid      *Money           `bson:",omitempty" json:"patientPaid,omitempty"`      // The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
	NoteNumber       []*int           `bson:",omitempty" json:"noteNumber,omitempty"`       // The numbers associated with notes below which apply to the adjudication of this item.
}

func (out *ExplanationOfBenefitAddItemDetailSubDetail) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["traceNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["traceNumber"], &out.TraceNumber); err != nil {
			return err
		}

	}
	if len(asMap["factor"]) > 0 {
		if err := go1.Unmarshal(asMap["factor"], &out.Factor); err != nil {
			return err
		}

	}
	if len(asMap["reviewOutcome"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewOutcome"], &out.ReviewOutcome); err != nil {
			return err
		}

	}
	if len(asMap["productOrServiceEnd"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrServiceEnd"], &out.ProductOrServiceEnd); err != nil {
			return err
		}

	}
	if len(asMap["tax"]) > 0 {
		if err := go1.Unmarshal(asMap["tax"], &out.Tax); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["revenue"]) > 0 {
		if err := go1.Unmarshal(asMap["revenue"], &out.Revenue); err != nil {
			return err
		}

	}
	if len(asMap["productOrService"]) > 0 {
		if err := go1.Unmarshal(asMap["productOrService"], &out.ProductOrService); err != nil {
			return err
		}

	}
	if len(asMap["adjudication"]) > 0 {
		if err := go1.Unmarshal(asMap["adjudication"], &out.Adjudication); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifier"]) > 0 {
		if err := go1.Unmarshal(asMap["modifier"], &out.Modifier); err != nil {
			return err
		}

	}
	if len(asMap["unitPrice"]) > 0 {
		if err := go1.Unmarshal(asMap["unitPrice"], &out.UnitPrice); err != nil {
			return err
		}

	}
	if len(asMap["noteNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["noteNumber"], &out.NoteNumber); err != nil {
			return err
		}

	}
	if len(asMap["patientPaid"]) > 0 {
		if err := go1.Unmarshal(asMap["patientPaid"], &out.PatientPaid); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["net"]) > 0 {
		if err := go1.Unmarshal(asMap["net"], &out.Net); err != nil {
			return err
		}

	}
	return nil
}

type ExplanationOfBenefitAddItemDetailSubDetail struct {
	TraceNumber         []*Identifier `bson:",omitempty" json:"traceNumber,omitempty"` // Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
	Factor              *float64      `bson:",omitempty" json:"factor,omitempty"`      // A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
	ReviewOutcome       interface{}
	ProductOrServiceEnd *CodeableConcept `bson:",omitempty" json:"productOrServiceEnd,omitempty"` // This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
	Tax                 *Money           `bson:",omitempty" json:"tax,omitempty"`                 // The total of taxes applicable for this product or service.
	Id                  *string          `bson:"_id,omitempty" json:"id,omitempty"`               // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension   []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`   /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Revenue          *CodeableConcept `bson:",omitempty" json:"revenue,omitempty"`          // The type of revenue or cost center providing the product and/or service.
	ProductOrService *CodeableConcept `bson:",omitempty" json:"productOrService,omitempty"` // When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
	Adjudication     interface{}
	Extension        []*Extension       `bson:",omitempty" json:"extension,omitempty"`   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Modifier         []*CodeableConcept `bson:",omitempty" json:"modifier,omitempty"`    // Item typification or modifiers codes to convey additional context for the product or service.
	UnitPrice        *Money             `bson:",omitempty" json:"unitPrice,omitempty"`   // If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
	NoteNumber       []*int             `bson:",omitempty" json:"noteNumber,omitempty"`  // The numbers associated with notes below which apply to the adjudication of this item.
	PatientPaid      *Money             `bson:",omitempty" json:"patientPaid,omitempty"` // The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
	Quantity         *Quantity          `bson:",omitempty" json:"quantity,omitempty"`    // The number of repetitions of a service or product.
	Net              *Money             `bson:",omitempty" json:"net,omitempty"`         // The total amount claimed for the addItem.detail.subDetail. Net = unit price * quantity * factor.
}
type ExplanationOfBenefitAddItemServicedx struct {
	ServicedDate   Date   `bson:",omitempty" json:"servicedDate,omitempty"`
	ServicedPeriod Period `bson:",omitempty" json:"servicedPeriod,omitempty"`
}

func (out *ExplanationOfBenefitAddItemBodySite) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["site"], &out.Site); err != nil {
		return err
	}

	if len(asMap["subSite"]) > 0 {
		if err := go1.Unmarshal(asMap["subSite"], &out.SubSite); err != nil {
			return err
		}

	}
	return nil
}

type ExplanationOfBenefitAddItemBodySite struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Site    []*CodeableReference `binding:"required" bson:",omitempty" json:"site,omitempty"` // Physical service site on the patient (limb, tooth, etc.).
	SubSite []*CodeableConcept   `bson:",omitempty" json:"subSite,omitempty"`                 // A region or surface of the bodySite, e.g. limb region or tooth surface(s).
}

func (out *ExplanationOfBenefitCareTeam) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["responsible"]) > 0 {
		if err := go1.Unmarshal(asMap["responsible"], &out.Responsible); err != nil {
			return err
		}

	}
	if len(asMap["role"]) > 0 {
		if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
			return err
		}

	}
	if len(asMap["specialty"]) > 0 {
		if err := go1.Unmarshal(asMap["specialty"], &out.Specialty); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["provider"], &out.Provider); err != nil {
		return err
	}

	return nil
}

type ExplanationOfBenefitCareTeam struct {
	Responsible       *bool            `bson:",omitempty" json:"responsible,omitempty"`       // The party who is billing and/or responsible for the claimed products or services.
	Role              *CodeableConcept `bson:",omitempty" json:"role,omitempty"`              // The lead, assisting or supervising practitioner and their discipline if a multidisciplinary team.
	Specialty         *CodeableConcept `bson:",omitempty" json:"specialty,omitempty"`         // The specialization of the practitioner or provider which is applicable for this service.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Sequence *int       `binding:"required" bson:",omitempty" json:"sequence,omitempty"` // A number to uniquely identify care team entries.
	Provider *Reference `binding:"required" bson:",omitempty" json:"provider,omitempty"` // Member of the team who provided the product or service.
}

func (out *ExplanationOfBenefitPayee) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["party"]) > 0 {
		if err := go1.Unmarshal(asMap["party"], &out.Party); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type ExplanationOfBenefitPayee struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type      *CodeableConcept `bson:",omitempty" json:"type,omitempty"`      // Type of Party to be reimbursed: Subscriber, provider, other.
	Party     *Reference       `bson:",omitempty" json:"party,omitempty"`     // Reference to the individual or organization to whom any payment will be made.
	Id        *string          `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension     `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *FamilyMemberHistory) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"FamilyMemberHistory\"" {
		return fmt.Errorf("resourceType is not %s", "FamilyMemberHistory")
	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesUri"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesUri"], &out.InstantiatesUri); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["patient"], &out.Patient); err != nil {
		return err
	}

	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["dataAbsentReason"]) > 0 {
		if err := go1.Unmarshal(asMap["dataAbsentReason"], &out.DataAbsentReason); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["relationship"], &out.Relationship); err != nil {
		return err
	}

	if len(asMap["sex"]) > 0 {
		if err := go1.Unmarshal(asMap["sex"], &out.Sex); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["ageAge"], &out.AgeAge); err == nil {
	} else if err := go1.Unmarshal(asMap["ageRange"], &out.AgeRange); err == nil {
	} else if err := go1.Unmarshal(asMap["ageString"], &out.AgeString); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["deceasedBoolean"], &out.DeceasedBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["deceasedAge"], &out.DeceasedAge); err == nil {
	} else if err := go1.Unmarshal(asMap["deceasedRange"], &out.DeceasedRange); err == nil {
	} else if err := go1.Unmarshal(asMap["deceasedDate"], &out.DeceasedDate); err == nil {
	} else if err := go1.Unmarshal(asMap["deceasedString"], &out.DeceasedString); err == nil {
	} else {

	}
	if len(asMap["condition"]) > 0 {
		if err := go1.Unmarshal(asMap["condition"], &out.Condition); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesCanonical"], &out.InstantiatesCanonical); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["procedure"]) > 0 {
		if err := go1.Unmarshal(asMap["procedure"], &out.Procedure); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["participant"]) > 0 {
		if err := go1.Unmarshal(asMap["participant"], &out.Participant); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["bornPeriod"], &out.BornPeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["bornDate"], &out.BornDate); err == nil {
	} else if err := go1.Unmarshal(asMap["bornString"], &out.BornString); err == nil {
	} else {

	}
	if len(asMap["estimatedAge"]) > 0 {
		if err := go1.Unmarshal(asMap["estimatedAge"], &out.EstimatedAge); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	return nil
}

type FamilyMemberHistory struct {
	Meta              *Meta               `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language          *string             `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	InstantiatesUri  []*string            `bson:",omitempty" json:"instantiatesUri,omitempty"`                 // The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this FamilyMemberHistory.
	Text             *Narrative           `bson:",omitempty" json:"text,omitempty"`                            // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Name             *string              `bson:",omitempty" json:"name,omitempty"`                            // This will either be a name or a description; e.g. "Aunt Susan", "my cousin with the red hair".
	Patient          *Reference           `binding:"required" bson:",omitempty" json:"patient,omitempty"`      // The person who this history concerns.
	Reason           []*CodeableReference `bson:",omitempty" json:"reason,omitempty"`                          // Describes why the family member history occurred in coded or textual form, or Indicates a Condition, Observation, AllergyIntolerance, or QuestionnaireResponse that justifies this family member history event.
	Note             []*Annotation        `bson:",omitempty" json:"note,omitempty"`                            // This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.
	DataAbsentReason *CodeableConcept     `bson:",omitempty" json:"dataAbsentReason,omitempty"`                // Describes why the family member's history is not available.
	Relationship     *CodeableConcept     `binding:"required" bson:",omitempty" json:"relationship,omitempty"` // The type of relationship this person has to the patient (father, mother, brother etc.).
	Sex              *CodeableConcept     `bson:",omitempty" json:"sex,omitempty"`                             // The birth sex of the family member.
	FamilyMemberHistoryAgex
	FamilyMemberHistoryDeceasedx
	Condition             *FamilyMemberHistoryCondition   `binding:"omitempty" bson:",omitempty"`
	Extension             []*Extension                    `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	InstantiatesCanonical []*string                       `bson:",omitempty" json:"instantiatesCanonical,omitempty"`     // The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this FamilyMemberHistory.
	Status                *string                         `binding:"required" bson:",omitempty" json:"status,omitempty"` // A code specifying the status of the record of the family history of a specific family member.
	Procedure             *FamilyMemberHistoryProcedure   `binding:"omitempty" bson:",omitempty"`
	Date                  *DateTime                       `bson:",omitempty" json:"date,omitempty"` // The date (and possibly time) when the family member history was recorded or last updated.
	Participant           *FamilyMemberHistoryParticipant `binding:"omitempty" bson:",omitempty"`
	FamilyMemberHistoryBornx
	EstimatedAge  *bool         `bson:",omitempty" json:"estimatedAge,omitempty"`  // If true, indicates that the age value specified is an estimated value.
	ImplicitRules *string       `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained     []*Resource   `bson:",omitempty" json:"contained,omitempty"`     // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Identifier    []*Identifier `bson:",omitempty" json:"identifier,omitempty"`    // Business identifiers assigned to this family member history by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
	ResourceType  string        `binding:"omitempty" bson:"-" json:"resourceType"`
}
type FamilyMemberHistoryAgex struct {
	AgeAge    Age    `bson:",omitempty" json:"ageAge,omitempty"`
	AgeRange  Range  `bson:",omitempty" json:"ageRange,omitempty"`
	AgeString string `bson:",omitempty" json:"ageString,omitempty"`
}
type FamilyMemberHistoryDeceasedx struct {
	DeceasedBoolean bool   `bson:",omitempty" json:"deceasedBoolean,omitempty"`
	DeceasedAge     Age    `bson:",omitempty" json:"deceasedAge,omitempty"`
	DeceasedRange   Range  `bson:",omitempty" json:"deceasedRange,omitempty"`
	DeceasedDate    Date   `bson:",omitempty" json:"deceasedDate,omitempty"`
	DeceasedString  string `bson:",omitempty" json:"deceasedString,omitempty"`
}

func (out *FamilyMemberHistoryCondition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["outcome"]) > 0 {
		if err := go1.Unmarshal(asMap["outcome"], &out.Outcome); err != nil {
			return err
		}

	}
	if len(asMap["contributedToDeath"]) > 0 {
		if err := go1.Unmarshal(asMap["contributedToDeath"], &out.ContributedToDeath); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["onsetAge"], &out.OnsetAge); err == nil {
	} else if err := go1.Unmarshal(asMap["onsetRange"], &out.OnsetRange); err == nil {
	} else if err := go1.Unmarshal(asMap["onsetPeriod"], &out.OnsetPeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["onsetString"], &out.OnsetString); err == nil {
	} else {

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	return nil
}

type FamilyMemberHistoryCondition struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code               *CodeableConcept `binding:"required" bson:",omitempty" json:"code,omitempty"` // The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system.
	Outcome            *CodeableConcept `bson:",omitempty" json:"outcome,omitempty"`                 // Indicates what happened following the condition.  If the condition resulted in death, deceased date is captured on the relation.
	ContributedToDeath *bool            `bson:",omitempty" json:"contributedToDeath,omitempty"`      // This condition contributed to the cause of death of the related person. If contributedToDeath is not populated, then it is unknown.
	FamilyMemberHistoryConditionOnsetx
	Note []*Annotation `bson:",omitempty" json:"note,omitempty"` // An area where general notes can be placed about this specific condition.
}
type FamilyMemberHistoryConditionOnsetx struct {
	OnsetAge    Age    `bson:",omitempty" json:"onsetAge,omitempty"`
	OnsetRange  Range  `bson:",omitempty" json:"onsetRange,omitempty"`
	OnsetPeriod Period `bson:",omitempty" json:"onsetPeriod,omitempty"`
	OnsetString string `bson:",omitempty" json:"onsetString,omitempty"`
}

func (out *FamilyMemberHistoryProcedure) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["outcome"]) > 0 {
		if err := go1.Unmarshal(asMap["outcome"], &out.Outcome); err != nil {
			return err
		}

	}
	if len(asMap["contributedToDeath"]) > 0 {
		if err := go1.Unmarshal(asMap["contributedToDeath"], &out.ContributedToDeath); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["performedAge"], &out.PerformedAge); err == nil {
	} else if err := go1.Unmarshal(asMap["performedRange"], &out.PerformedRange); err == nil {
	} else if err := go1.Unmarshal(asMap["performedPeriod"], &out.PerformedPeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["performedString"], &out.PerformedString); err == nil {
	} else if err := go1.Unmarshal(asMap["performedDateTime"], &out.PerformedDateTime); err == nil {
	} else {

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type FamilyMemberHistoryProcedure struct {
	Code               *CodeableConcept `binding:"required" bson:",omitempty" json:"code,omitempty"` // The actual procedure specified. Could be a coded procedure or a less specific string depending on how much is known about the procedure and the capabilities of the creating system.
	Outcome            *CodeableConcept `bson:",omitempty" json:"outcome,omitempty"`                 // Indicates what happened following the procedure. If the procedure resulted in death, deceased date is captured on the relation.
	ContributedToDeath *bool            `bson:",omitempty" json:"contributedToDeath,omitempty"`      // This procedure contributed to the cause of death of the related person. If contributedToDeath is not populated, then it is unknown.
	FamilyMemberHistoryProcedurePerformedx
	Note              []*Annotation `bson:",omitempty" json:"note,omitempty"`              // An area where general notes can be placed about this specific procedure.
	Id                *string       `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension  `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension  `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type FamilyMemberHistoryProcedurePerformedx struct {
	PerformedAge      Age      `bson:",omitempty" json:"performedAge,omitempty"`
	PerformedRange    Range    `bson:",omitempty" json:"performedRange,omitempty"`
	PerformedPeriod   Period   `bson:",omitempty" json:"performedPeriod,omitempty"`
	PerformedString   string   `bson:",omitempty" json:"performedString,omitempty"`
	PerformedDateTime DateTime `bson:",omitempty" json:"performedDateTime,omitempty"`
}

func (out *FamilyMemberHistoryParticipant) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	return nil
}

type FamilyMemberHistoryParticipant struct {
	Actor             *Reference   `binding:"required" bson:",omitempty" json:"actor,omitempty"` // Indicates who or what participated in the activities related to the family member history.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`        /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Function *CodeableConcept `bson:",omitempty" json:"function,omitempty"` // Distinguishes the type of involvement of the actor in the activities related to the family member history.
}
type FamilyMemberHistoryBornx struct {
	BornPeriod Period `bson:",omitempty" json:"bornPeriod,omitempty"`
	BornDate   Date   `bson:",omitempty" json:"bornDate,omitempty"`
	BornString string `bson:",omitempty" json:"bornString,omitempty"`
}

func (out *Flag) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Flag\"" {
		return fmt.Errorf("resourceType is not %s", "Flag")
	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	return nil
}

type Flag struct {
	Encounter         *Reference         `bson:",omitempty" json:"encounter,omitempty"`                 // This alert is only relevant during the encounter.
	Status            *string            `binding:"required" bson:",omitempty" json:"status,omitempty"` // Supports basic workflow.
	Category          []*CodeableConcept `bson:",omitempty" json:"category,omitempty"`                  // Allows a flag to be divided into different categories like clinical, administrative etc. Intended to be used as a means of filtering which flags are displayed to particular user or in a given context.
	Extension         []*Extension       `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Language          *string            `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Contained         []*Resource        `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Code              *CodeableConcept   `binding:"required" bson:",omitempty" json:"code,omitempty"`   // The coded value or textual component of the flag to display to the user.
	Period            *Period            `bson:",omitempty" json:"period,omitempty"`                    // The period of time from the activation of the flag to inactivation of the flag. If the flag is active, the end of the period should be unspecified.
	ImplicitRules     *string            `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text              *Narrative         `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier   []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`                 // Business identifiers assigned to this flag by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
	Subject      *Reference          `binding:"required" bson:",omitempty" json:"subject,omitempty"` // The patient, related person, location, group, organization, or practitioner etc. this is about record this flag is associated with.
	Author       *Reference          `bson:",omitempty" json:"author,omitempty"`                     // The person, organization or device that created the flag.
	Id           *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta         *Meta               `bson:",omitempty" json:"meta,omitempty"`                       // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ResourceType string              `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *FormularyItem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"FormularyItem\"" {
		return fmt.Errorf("resourceType is not %s", "FormularyItem")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	return nil
}

type FormularyItem struct {
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Text              *Narrative          `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained         []*Resource         `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension         []*Extension        `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Identifier        []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`        // Business identifier for this formulary item.
	Meta              *Meta               `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules     *string             `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language          *string             `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code         *CodeableConcept `bson:",omitempty" json:"code,omitempty"`   // A code (or set of codes) that specify the product or service that is identified by this formulary item.
	Status       *string          `bson:",omitempty" json:"status,omitempty"` // The validity about the information of the formulary item and not of the underlying product or service itself.
	ResourceType string           `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *GenomicStudy) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"GenomicStudy\"" {
		return fmt.Errorf("resourceType is not %s", "GenomicStudy")
	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesCanonical"], &out.InstantiatesCanonical); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["interpreter"]) > 0 {
		if err := go1.Unmarshal(asMap["interpreter"], &out.Interpreter); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesUri"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesUri"], &out.InstantiatesUri); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["referrer"]) > 0 {
		if err := go1.Unmarshal(asMap["referrer"], &out.Referrer); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["analysis"]) > 0 {
		if err := go1.Unmarshal(asMap["analysis"], &out.Analysis); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["startDate"]) > 0 {
		if err := go1.Unmarshal(asMap["startDate"], &out.StartDate); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	return nil
}

type GenomicStudy struct {
	ImplicitRules     *string      `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language          *string      `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Text              *Narrative   `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Status                *string               `binding:"required" bson:",omitempty" json:"status,omitempty"`  // The status of the genomic study.
	Subject               *Reference            `binding:"required" bson:",omitempty" json:"subject,omitempty"` // The primary subject of the genomic study.
	Meta                  *Meta                 `bson:",omitempty" json:"meta,omitempty"`                       // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	InstantiatesCanonical *string               `bson:",omitempty" json:"instantiatesCanonical,omitempty"`      // The defined protocol that describes the study.
	BasedOn               []*Reference          `bson:",omitempty" json:"basedOn,omitempty"`                    // Event resources that the genomic study is based on.
	Interpreter           []*Reference          `bson:",omitempty" json:"interpreter,omitempty"`                // Healthcare professionals who interpreted the genomic study.
	Reason                []*CodeableReference  `bson:",omitempty" json:"reason,omitempty"`                     // Why the genomic study was performed.
	InstantiatesUri       *string               `bson:",omitempty" json:"instantiatesUri,omitempty"`            // The URL pointing to an externally maintained protocol that describes the study.
	Note                  []*Annotation         `bson:",omitempty" json:"note,omitempty"`                       // Comments related to the genomic study.
	Referrer              *Reference            `bson:",omitempty" json:"referrer,omitempty"`                   // Healthcare professional who requested or referred the genomic study.
	Contained             []*Resource           `bson:",omitempty" json:"contained,omitempty"`                  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Description           *string               `bson:",omitempty" json:"description,omitempty"`                // Description of the genomic study.
	Analysis              *GenomicStudyAnalysis `binding:"omitempty" bson:",omitempty"`
	Id                    *primitive.ObjectID   `bson:"_id,omitempty" json:"id,omitempty"`      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Type                  []*CodeableConcept    `bson:",omitempty" json:"type,omitempty"`       // The type of the study, e.g., Familial variant segregation, Functional variation detection, or Gene expression profiling.
	Encounter             *Reference            `bson:",omitempty" json:"encounter,omitempty"`  // The healthcare event with which this genomics study is associated.
	StartDate             *DateTime             `bson:",omitempty" json:"startDate,omitempty"`  // When the genomic study was started.
	Identifier            []*Identifier         `bson:",omitempty" json:"identifier,omitempty"` // Identifiers for this genomic study.
	ResourceType          string                `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *GenomicStudyAnalysis) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["instantiatesCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesCanonical"], &out.InstantiatesCanonical); err != nil {
			return err
		}

	}
	if len(asMap["focus"]) > 0 {
		if err := go1.Unmarshal(asMap["focus"], &out.Focus); err != nil {
			return err
		}

	}
	if len(asMap["input"]) > 0 {
		if err := go1.Unmarshal(asMap["input"], &out.Input); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["changeType"]) > 0 {
		if err := go1.Unmarshal(asMap["changeType"], &out.ChangeType); err != nil {
			return err
		}

	}
	if len(asMap["specimen"]) > 0 {
		if err := go1.Unmarshal(asMap["specimen"], &out.Specimen); err != nil {
			return err
		}

	}
	if len(asMap["regionsStudied"]) > 0 {
		if err := go1.Unmarshal(asMap["regionsStudied"], &out.RegionsStudied); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["genomeBuild"]) > 0 {
		if err := go1.Unmarshal(asMap["genomeBuild"], &out.GenomeBuild); err != nil {
			return err
		}

	}
	if len(asMap["methodType"]) > 0 {
		if err := go1.Unmarshal(asMap["methodType"], &out.MethodType); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesUri"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesUri"], &out.InstantiatesUri); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["regionsCalled"]) > 0 {
		if err := go1.Unmarshal(asMap["regionsCalled"], &out.RegionsCalled); err != nil {
			return err
		}

	}
	if len(asMap["output"]) > 0 {
		if err := go1.Unmarshal(asMap["output"], &out.Output); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["device"]) > 0 {
		if err := go1.Unmarshal(asMap["device"], &out.Device); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["protocolPerformed"]) > 0 {
		if err := go1.Unmarshal(asMap["protocolPerformed"], &out.ProtocolPerformed); err != nil {
			return err
		}

	}
	return nil
}

type GenomicStudyAnalysis struct {
	InstantiatesCanonical *string                    `bson:",omitempty" json:"instantiatesCanonical,omitempty"` // The defined protocol that describes the analysis.
	Focus                 []*Reference               `bson:",omitempty" json:"focus,omitempty"`                 // The focus of a genomic analysis when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, child, or sibling. For example, in trio testing, the GenomicStudy.subject would be the child (proband) and the GenomicStudy.analysis.focus of a specific analysis would be the parent.
	Input                 *GenomicStudyAnalysisInput `binding:"omitempty" bson:",omitempty"`
	ModifierExtension     []*Extension               `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ChangeType        []*CodeableConcept             `bson:",omitempty" json:"changeType,omitempty"`      // Type of the genomic changes studied in the analysis, e.g., DNA, RNA, or amino acid change.
	Specimen          []*Reference                   `bson:",omitempty" json:"specimen,omitempty"`        // The specimen used in the analysis event.
	RegionsStudied    []*Reference                   `bson:",omitempty" json:"regionsStudied,omitempty"`  // The genomic regions to be studied in the analysis (BED file).
	Extension         []*Extension                   `bson:",omitempty" json:"extension,omitempty"`       // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	GenomeBuild       *CodeableConcept               `bson:",omitempty" json:"genomeBuild,omitempty"`     // The reference genome build that is used in this analysis.
	MethodType        []*CodeableConcept             `bson:",omitempty" json:"methodType,omitempty"`      // Type of the methods used in the analysis, e.g., Fluorescence in situ hybridization (FISH), Karyotyping, or Microsatellite instability testing (MSI).
	InstantiatesUri   *string                        `bson:",omitempty" json:"instantiatesUri,omitempty"` // The URL pointing to an externally maintained protocol that describes the analysis.
	Title             *string                        `bson:",omitempty" json:"title,omitempty"`           // Name of the analysis event (human friendly).
	Note              []*Annotation                  `bson:",omitempty" json:"note,omitempty"`            // Any notes capture with the analysis event.
	RegionsCalled     []*Reference                   `bson:",omitempty" json:"regionsCalled,omitempty"`   // Genomic regions actually called in the analysis event (BED file).
	Output            *GenomicStudyAnalysisOutput    `binding:"omitempty" bson:",omitempty"`
	Id                *string                        `bson:"_id,omitempty" json:"id,omitempty"`      // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Identifier        []*Identifier                  `bson:",omitempty" json:"identifier,omitempty"` // Identifiers for the analysis event.
	Performer         *GenomicStudyAnalysisPerformer `binding:"omitempty" bson:",omitempty"`
	Device            *GenomicStudyAnalysisDevice    `binding:"omitempty" bson:",omitempty"`
	Date              *DateTime                      `bson:",omitempty" json:"date,omitempty"`              // The date of the analysis event.
	ProtocolPerformed *Reference                     `bson:",omitempty" json:"protocolPerformed,omitempty"` // The protocol that was performed for the analysis event.
}

func (out *GenomicStudyAnalysisInput) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["file"]) > 0 {
		if err := go1.Unmarshal(asMap["file"], &out.File); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["generatedByIdentifier"], &out.GeneratedByIdentifier); err == nil {
	} else if err := go1.Unmarshal(asMap["generatedByReference"], &out.GeneratedByReference); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type GenomicStudyAnalysisInput struct {
	File *Reference       `bson:",omitempty" json:"file,omitempty"` // File containing input data.
	Type *CodeableConcept `bson:",omitempty" json:"type,omitempty"` // Type of input data, e.g., BAM, CRAM, or FASTA.
	GenomicStudyAnalysisInputGeneratedByx
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type GenomicStudyAnalysisInputGeneratedByx struct {
	GeneratedByIdentifier Identifier `bson:",omitempty" json:"generatedByIdentifier,omitempty"`
	GeneratedByReference  Reference  `bson:",omitempty" json:"generatedByReference,omitempty"`
}

func (out *GenomicStudyAnalysisOutput) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["file"]) > 0 {
		if err := go1.Unmarshal(asMap["file"], &out.File); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type GenomicStudyAnalysisOutput struct {
	File              *Reference       `bson:",omitempty" json:"file,omitempty"`              // File containing output data.
	Type              *CodeableConcept `bson:",omitempty" json:"type,omitempty"`              // Type of output data, e.g., VCF, MAF, or BAM.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *GenomicStudyAnalysisPerformer) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["actor"]) > 0 {
		if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
			return err
		}

	}
	if len(asMap["role"]) > 0 {
		if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
			return err
		}

	}
	return nil
}

type GenomicStudyAnalysisPerformer struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Actor *Reference       `bson:",omitempty" json:"actor,omitempty"` // The organization, healthcare professional, or others who participated in performing this analysis.
	Role  *CodeableConcept `bson:",omitempty" json:"role,omitempty"`  // Role of the actor for this analysis.
}

func (out *GenomicStudyAnalysisDevice) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["device"]) > 0 {
		if err := go1.Unmarshal(asMap["device"], &out.Device); err != nil {
			return err
		}

	}
	return nil
}

type GenomicStudyAnalysisDevice struct {
	Function          *CodeableConcept `bson:",omitempty" json:"function,omitempty"`          // Specific function for the device used for the analysis.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Device *Reference `bson:",omitempty" json:"device,omitempty"` // Device used for the analysis.
}

func (out *Goal) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Goal\"" {
		return fmt.Errorf("resourceType is not %s", "Goal")
	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["lifecycleStatus"], &out.LifecycleStatus); err != nil {
		return err
	}

	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["statusReason"]) > 0 {
		if err := go1.Unmarshal(asMap["statusReason"], &out.StatusReason); err != nil {
			return err
		}

	}
	if len(asMap["addresses"]) > 0 {
		if err := go1.Unmarshal(asMap["addresses"], &out.Addresses); err != nil {
			return err
		}

	}
	if len(asMap["outcome"]) > 0 {
		if err := go1.Unmarshal(asMap["outcome"], &out.Outcome); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["statusDate"]) > 0 {
		if err := go1.Unmarshal(asMap["statusDate"], &out.StatusDate); err != nil {
			return err
		}

	}
	if len(asMap["source"]) > 0 {
		if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["startDate"], &out.StartDate); err == nil {
	} else if err := go1.Unmarshal(asMap["startCodeableConcept"], &out.StartCodeableConcept); err == nil {
	} else {

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["achievementStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["achievementStatus"], &out.AchievementStatus); err != nil {
			return err
		}

	}
	if len(asMap["continuous"]) > 0 {
		if err := go1.Unmarshal(asMap["continuous"], &out.Continuous); err != nil {
			return err
		}

	}
	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
		return err
	}

	if len(asMap["target"]) > 0 {
		if err := go1.Unmarshal(asMap["target"], &out.Target); err != nil {
			return err
		}

	}
	return nil
}

type Goal struct {
	Language        *string              `bson:",omitempty" json:"language,omitempty"`                           // The base language in which the resource is written.
	Extension       []*Extension         `bson:",omitempty" json:"extension,omitempty"`                          // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	LifecycleStatus *string              `binding:"required" bson:",omitempty" json:"lifecycleStatus,omitempty"` // The state of the goal throughout its lifecycle.
	Category        []*CodeableConcept   `bson:",omitempty" json:"category,omitempty"`                           // Indicates a category the goal falls within.
	StatusReason    *string              `bson:",omitempty" json:"statusReason,omitempty"`                       // Captures the reason for the current status.
	Addresses       []*Reference         `bson:",omitempty" json:"addresses,omitempty"`                          // The identified conditions and other health record elements that are intended to be addressed by the goal.
	Outcome         []*CodeableReference `bson:",omitempty" json:"outcome,omitempty"`                            // Identifies the change (or lack of change) at the point when the status of the goal is assessed.
	Id              *primitive.ObjectID  `bson:"_id,omitempty" json:"id,omitempty"`                              // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Text            *Narrative           `bson:",omitempty" json:"text,omitempty"`                               // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	StatusDate      *Date                `bson:",omitempty" json:"statusDate,omitempty"`                         // Identifies when the current status.  I.e. When initially created, when achieved, when cancelled, etc.
	Source          *Reference           `bson:",omitempty" json:"source,omitempty"`                             // Indicates whose goal this is - patient goal, practitioner goal, etc.
	Note            []*Annotation        `bson:",omitempty" json:"note,omitempty"`                               // Any comments related to the goal.
	ImplicitRules   *string              `bson:",omitempty" json:"implicitRules,omitempty"`                      // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained       []*Resource          `bson:",omitempty" json:"contained,omitempty"`                          // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Subject         *Reference           `binding:"required" bson:",omitempty" json:"subject,omitempty"`         // Identifies the patient, group or organization for whom the goal is being established.
	GoalStartx
	Meta              *Meta        `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier        []*Identifier    `bson:",omitempty" json:"identifier,omitempty"`                     // Business identifiers assigned to this goal by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
	AchievementStatus *CodeableConcept `bson:",omitempty" json:"achievementStatus,omitempty"`              // Describes the progression, or lack thereof, towards the goal against the target.
	Continuous        *bool            `bson:",omitempty" json:"continuous,omitempty"`                     // After meeting the goal, ongoing activity is needed to sustain the goal objective.
	Priority          *CodeableConcept `bson:",omitempty" json:"priority,omitempty"`                       // Identifies the mutually agreed level of importance associated with reaching/sustaining the goal.
	Description       *CodeableConcept `binding:"required" bson:",omitempty" json:"description,omitempty"` // Human-readable and/or coded description of a specific desired objective of care, such as "control blood pressure" or "negotiate an obstacle course" or "dance with child at wedding".
	Target            *GoalTarget      `binding:"omitempty" bson:",omitempty"`
	ResourceType      string           `binding:"omitempty" bson:"-" json:"resourceType"`
}
type GoalStartx struct {
	StartDate            Date            `bson:",omitempty" json:"startDate,omitempty"`
	StartCodeableConcept CodeableConcept `bson:",omitempty" json:"startCodeableConcept,omitempty"`
}

func (out *GoalTarget) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["measure"]) > 0 {
		if err := go1.Unmarshal(asMap["measure"], &out.Measure); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["detailQuantity"], &out.DetailQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["detailRange"], &out.DetailRange); err == nil {
	} else if err := go1.Unmarshal(asMap["detailCodeableConcept"], &out.DetailCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["detailString"], &out.DetailString); err == nil {
	} else if err := go1.Unmarshal(asMap["detailBoolean"], &out.DetailBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["detailInteger"], &out.DetailInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["detailRatio"], &out.DetailRatio); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["dueDate"], &out.DueDate); err == nil {
	} else if err := go1.Unmarshal(asMap["dueDuration"], &out.DueDuration); err == nil {
	} else {

	}
	return nil
}

type GoalTarget struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Measure *CodeableConcept `bson:",omitempty" json:"measure,omitempty"` // The parameter whose value is being tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
	GoalTargetDetailx
	GoalTargetDuex
}
type GoalTargetDetailx struct {
	DetailQuantity        Quantity        `bson:",omitempty" json:"detailQuantity,omitempty"`
	DetailRange           Range           `bson:",omitempty" json:"detailRange,omitempty"`
	DetailCodeableConcept CodeableConcept `bson:",omitempty" json:"detailCodeableConcept,omitempty"`
	DetailString          string          `bson:",omitempty" json:"detailString,omitempty"`
	DetailBoolean         bool            `bson:",omitempty" json:"detailBoolean,omitempty"`
	DetailInteger         int             `bson:",omitempty" json:"detailInteger,omitempty"`
	DetailRatio           Ratio           `bson:",omitempty" json:"detailRatio,omitempty"`
}
type GoalTargetDuex struct {
	DueDate     Date     `bson:",omitempty" json:"dueDate,omitempty"`
	DueDuration Duration `bson:",omitempty" json:"dueDuration,omitempty"`
}

func (out *GraphDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"GraphDefinition\"" {
		return fmt.Errorf("resourceType is not %s", "GraphDefinition")
	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["link"]) > 0 {
		if err := go1.Unmarshal(asMap["link"], &out.Link); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["start"]) > 0 {
		if err := go1.Unmarshal(asMap["start"], &out.Start); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["node"]) > 0 {
		if err := go1.Unmarshal(asMap["node"], &out.Node); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type GraphDefinition struct {
	Name         *string              `binding:"required" bson:",omitempty" json:"name,omitempty"` // A natural language name identifying the graph definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Experimental *bool                `bson:",omitempty" json:"experimental,omitempty"`            // A Boolean value to indicate that this graph definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Jurisdiction []*CodeableConcept   `bson:",omitempty" json:"jurisdiction,omitempty"`            // A legal or geographic region in which the graph definition is intended to be used.
	Id           *primitive.ObjectID  `bson:"_id,omitempty" json:"id,omitempty"`                   // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Publisher    *string              `bson:",omitempty" json:"publisher,omitempty"`               // The name of the organization or individual responsible for the release and ongoing maintenance of the graph definition.
	Link         *GraphDefinitionLink `binding:"omitempty" bson:",omitempty"`
	GraphDefinitionVersionAlgorithmx
	UseContext        []*UsageContext      `bson:",omitempty" json:"useContext,omitempty"`    // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate graph definition instances.
	Start             **primitive.ObjectID `bson:",omitempty" json:"start,omitempty"`         // The Node at which instances of this graph start. If there is no nominated start, the graph can start at any of the nodes.
	Meta              *Meta                `bson:",omitempty" json:"meta,omitempty"`          // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules     *string              `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Title             *string              `bson:",omitempty" json:"title,omitempty"`         // A short, descriptive, user-friendly title for the capability statement.
	Purpose           *string              `bson:",omitempty" json:"purpose,omitempty"`       // Explanation of why this graph definition is needed and why it has been designed as it has.
	Copyright         *string              `bson:",omitempty" json:"copyright,omitempty"`     // A copyright statement relating to the graph definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the graph definition.
	Node              *GraphDefinitionNode `binding:"omitempty" bson:",omitempty"`
	Language          *string              `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Text              *Narrative           `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Date              *DateTime            `bson:",omitempty" json:"date,omitempty"`                      // The date  (and optionally time) when the graph definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the graph definition changes.
	CopyrightLabel    *string              `bson:",omitempty" json:"copyrightLabel,omitempty"`            // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Contained         []*Resource          `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Url               *string              `bson:",omitempty" json:"url,omitempty"`                       // An absolute URI that is used to identify this graph definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this graph definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the graph definition is stored on different servers.
	Status            *string              `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this graph definition. Enables tracking the life-cycle of the content.
	Contact           []*ContactDetail     `bson:",omitempty" json:"contact,omitempty"`                   // Contact details to assist a user in finding and communicating with the publisher.
	Description       *string              `bson:",omitempty" json:"description,omitempty"`               // A free text natural language description of the graph definition from a consumer's perspective.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier   []*Identifier `bson:",omitempty" json:"identifier,omitempty"` // A formal identifier that is used to identify this GraphDefinition when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Version      *string       `bson:",omitempty" json:"version,omitempty"`    // The identifier that is used to identify this version of the graph definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the graph definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Extension    []*Extension  `bson:",omitempty" json:"extension,omitempty"`  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ResourceType string        `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *GraphDefinitionLink) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["path"]) > 0 {
		if err := go1.Unmarshal(asMap["path"], &out.Path); err != nil {
			return err
		}

	}
	if len(asMap["sliceName"]) > 0 {
		if err := go1.Unmarshal(asMap["sliceName"], &out.SliceName); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["targetId"], &out.TargetId); err != nil {
		return err
	}

	if len(asMap["compartment"]) > 0 {
		if err := go1.Unmarshal(asMap["compartment"], &out.Compartment); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["min"]) > 0 {
		if err := go1.Unmarshal(asMap["min"], &out.Min); err != nil {
			return err
		}

	}
	if len(asMap["max"]) > 0 {
		if err := go1.Unmarshal(asMap["max"], &out.Max); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sourceId"], &out.SourceId); err != nil {
		return err
	}

	if len(asMap["params"]) > 0 {
		if err := go1.Unmarshal(asMap["params"], &out.Params); err != nil {
			return err
		}

	}
	return nil
}

type GraphDefinitionLink struct {
	Id                *string                         `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                    `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Path              *string                         `bson:",omitempty" json:"path,omitempty"`                        // A FHIRPath expression that identifies one of FHIR References to other resources.
	SliceName         *string                         `bson:",omitempty" json:"sliceName,omitempty"`                   // Which slice (if profiled).
	TargetId          **primitive.ObjectID            `binding:"required" bson:",omitempty" json:"targetId,omitempty"` // The target node for this link.
	Compartment       *GraphDefinitionLinkCompartment `binding:"omitempty" bson:",omitempty"`
	ModifierExtension []*Extension                    `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Description *string              `bson:",omitempty" json:"description,omitempty"`                 // Information about why this link is of interest in this graph definition.
	Min         *int                 `bson:",omitempty" json:"min,omitempty"`                         // Minimum occurrences for this link.
	Max         *string              `bson:",omitempty" json:"max,omitempty"`                         // Maximum occurrences for this link.
	SourceId    **primitive.ObjectID `binding:"required" bson:",omitempty" json:"sourceId,omitempty"` // The source node for this link.
	Params      *string              `bson:",omitempty" json:"params,omitempty"`                      // A set of parameters to look up.
}

func (out *GraphDefinitionLinkCompartment) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["rule"], &out.Rule); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["expression"]) > 0 {
		if err := go1.Unmarshal(asMap["expression"], &out.Expression); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["use"], &out.Use); err != nil {
		return err
	}

	return nil
}

type GraphDefinitionLinkCompartment struct {
	Rule              *string      `binding:"required" bson:",omitempty" json:"rule,omitempty"` // identical | matching | different | no-rule | custom.
	Code              *string      `binding:"required" bson:",omitempty" json:"code,omitempty"` // Identifies the compartment.
	Expression        *string      `bson:",omitempty" json:"expression,omitempty"`              // Custom rule, as a FHIRPath expression.
	Description       *string      `bson:",omitempty" json:"description,omitempty"`             // Documentation for FHIRPath expression.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`       /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Use *string `binding:"required" bson:",omitempty" json:"use,omitempty"` // Defines how the compartment rule is used - whether it it is used to test whether resources are subject to the rule, or whether it is a rule that must be followed.
}
type GraphDefinitionVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *GraphDefinitionNode) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["nodeId"], &out.NodeId); err != nil {
		return err
	}

	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["profile"]) > 0 {
		if err := go1.Unmarshal(asMap["profile"], &out.Profile); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type GraphDefinitionNode struct {
	NodeId            **primitive.ObjectID `binding:"required" bson:",omitempty" json:"nodeId,omitempty"` // Internal ID of node - target for link references.
	Description       *string              `bson:",omitempty" json:"description,omitempty"`               // Information about why this node is of interest in this graph definition.
	Type              *string              `binding:"required" bson:",omitempty" json:"type,omitempty"`   // Type of resource this link refers to.
	Profile           *string              `bson:",omitempty" json:"profile,omitempty"`                   // Profile for the target resource.
	Id                *string              `bson:"_id,omitempty" json:"id,omitempty"`                     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension         `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *Group) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Group\"" {
		return fmt.Errorf("resourceType is not %s", "Group")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["active"]) > 0 {
		if err := go1.Unmarshal(asMap["active"], &out.Active); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["membership"], &out.Membership); err != nil {
		return err
	}

	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["characteristic"]) > 0 {
		if err := go1.Unmarshal(asMap["characteristic"], &out.Characteristic); err != nil {
			return err
		}

	}
	if len(asMap["member"]) > 0 {
		if err := go1.Unmarshal(asMap["member"], &out.Member); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["managingEntity"]) > 0 {
		if err := go1.Unmarshal(asMap["managingEntity"], &out.ManagingEntity); err != nil {
			return err
		}

	}
	return nil
}

type Group struct {
	Id            *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                         // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ImplicitRules *string             `bson:",omitempty" json:"implicitRules,omitempty"`                 // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language      *string             `bson:",omitempty" json:"language,omitempty"`                      // The base language in which the resource is written.
	Active        *bool               `bson:",omitempty" json:"active,omitempty"`                        // Indicates whether the record for the group is available for use or is merely being retained for historical purposes.
	Identifier    []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`                    // Business identifiers assigned to this participant by one of the applications involved.  These identifiers remain constant as the resource is updated and propagates from server to server.
	Type          *string             `binding:"required" bson:",omitempty" json:"type,omitempty"`       // Identifies the broad classification of the kind of resources the group includes.
	Membership    *string             `binding:"required" bson:",omitempty" json:"membership,omitempty"` /*
	Basis for membership in the Group:

	* 'definitional': The Group.characteristics specified are both necessary and sufficient to determine membership. All entities that meet the criteria are considered to be members of the group, whether referenced by the group or not. If members are present, they are individuals that happen to be known as meeting the Group.characteristics. The list cannot be presumed to be complete.
	* 'enumerated': The Group.characteristics are necessary but not sufficient to determine membership. Membership is determined by being listed as one of the Group.member.
	*/
	Name              *string              `bson:",omitempty" json:"name,omitempty"` // A label assigned to the group for human identification and communication.
	Characteristic    *GroupCharacteristic `binding:"omitempty" bson:",omitempty"`
	Member            *GroupMember         `binding:"omitempty" bson:",omitempty"`
	Text              *Narrative           `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension         []*Extension         `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code           *CodeableConcept `bson:",omitempty" json:"code,omitempty"`           // Provides a specific type of resource the group includes; e.g. "cow", "syringe", etc.
	Description    *string          `bson:",omitempty" json:"description,omitempty"`    // Explanation of what the group represents and how it is intended to be used.
	Meta           *Meta            `bson:",omitempty" json:"meta,omitempty"`           // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Contained      []*Resource      `bson:",omitempty" json:"contained,omitempty"`      // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Quantity       *int             `bson:",omitempty" json:"quantity,omitempty"`       // A count of the number of resource instances that are part of the group.
	ManagingEntity *Reference       `bson:",omitempty" json:"managingEntity,omitempty"` // Entity responsible for defining and maintaining Group characteristics and/or registered members.
	ResourceType   string           `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *GroupCharacteristic) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueReference"], &out.ValueReference); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	if err := go1.Unmarshal(asMap["exclude"], &out.Exclude); err != nil {
		return err
	}

	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type GroupCharacteristic struct {
	Code *CodeableConcept `binding:"required" bson:",omitempty" json:"code,omitempty"` // A code that identifies the kind of trait being asserted.
	GroupCharacteristicValuex
	Exclude           *bool        `binding:"required" bson:",omitempty" json:"exclude,omitempty"` // If true, indicates the characteristic is one that is NOT held by members of the group.
	Period            *Period      `bson:",omitempty" json:"period,omitempty"`                     // The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                      // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`          /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type GroupCharacteristicValuex struct {
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueBoolean         bool            `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueRange           Range           `bson:",omitempty" json:"valueRange,omitempty"`
	ValueReference       Reference       `bson:",omitempty" json:"valueReference,omitempty"`
}

func (out *GroupMember) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["entity"], &out.Entity); err != nil {
		return err
	}

	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["inactive"]) > 0 {
		if err := go1.Unmarshal(asMap["inactive"], &out.Inactive); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type GroupMember struct {
	Entity            *Reference   `binding:"required" bson:",omitempty" json:"entity,omitempty"` // A reference to the entity that is a member of the group. Must be consistent with Group.type. If the entity is another group, then the type must be the same.
	Period            *Period      `bson:",omitempty" json:"period,omitempty"`                    // The period that the member was in the group, if known.
	Inactive          *bool        `bson:",omitempty" json:"inactive,omitempty"`                  // A flag to indicate that the member is no longer in the group, but previously may have been a member.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *GuidanceResponse) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"GuidanceResponse\"" {
		return fmt.Errorf("resourceType is not %s", "GuidanceResponse")
	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["evaluationMessage"]) > 0 {
		if err := go1.Unmarshal(asMap["evaluationMessage"], &out.EvaluationMessage); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["requestIdentifier"]) > 0 {
		if err := go1.Unmarshal(asMap["requestIdentifier"], &out.RequestIdentifier); err != nil {
			return err
		}

	}
	if len(asMap["result"]) > 0 {
		if err := go1.Unmarshal(asMap["result"], &out.Result); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["dataRequirement"]) > 0 {
		if err := go1.Unmarshal(asMap["dataRequirement"], &out.DataRequirement); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["moduleUri"], &out.ModuleUri); err == nil {
	} else if err := go1.Unmarshal(asMap["moduleCanonical"], &out.ModuleCanonical); err == nil {
	} else if err := go1.Unmarshal(asMap["moduleCodeableConcept"], &out.ModuleCodeableConcept); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "module[x]")
	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["outputParameters"]) > 0 {
		if err := go1.Unmarshal(asMap["outputParameters"], &out.OutputParameters); err != nil {
			return err
		}

	}
	if len(asMap["occurrenceDateTime"]) > 0 {
		if err := go1.Unmarshal(asMap["occurrenceDateTime"], &out.OccurrenceDateTime); err != nil {
			return err
		}

	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	return nil
}

type GuidanceResponse struct {
	Reason            []*CodeableReference `bson:",omitempty" json:"reason,omitempty"`            // Describes the reason for the guidance response in coded or textual form, or Indicates the reason the request was initiated. This is typically provided as a parameter to the evaluation and echoed by the service, although for some use cases, such as subscription- or event-based scenarios, it may provide an indication of the cause for the response.
	Note              []*Annotation        `bson:",omitempty" json:"note,omitempty"`              // Provides a mechanism to communicate additional information about the response.
	EvaluationMessage *Reference           `bson:",omitempty" json:"evaluationMessage,omitempty"` // Messages resulting from the evaluation of the artifact or artifacts. As part of evaluating the request, the engine may produce informational or warning messages. These messages will be provided by this element.
	Extension         []*Extension         `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	RequestIdentifier *Identifier          `bson:",omitempty" json:"requestIdentifier,omitempty"` // The identifier of the request associated with this response. If an identifier was given as part of the request, it will be reproduced here to enable the requester to more easily identify the response in a multi-request scenario.
	Result            []*Reference         `bson:",omitempty" json:"result,omitempty"`            // The actions, if any, produced by the evaluation of the artifact.
	ImplicitRules     *string              `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Identifier        []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`        // Allows a service to provide  unique, business identifiers for the response.
	DataRequirement   []DataRequirement    `bson:",omitempty" json:"dataRequirement,omitempty"`   // If the evaluation could not be completed due to lack of information, or additional information would potentially result in a more accurate response, this element will a description of the data required in order to proceed with the evaluation. A subsequent request to the service should include this data.
	Meta              *Meta                `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Contained         []*Resource          `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Text              *Narrative           `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	GuidanceResponseModulex
	Status             *string             `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of the response. If the evaluation is completed successfully, the status will indicate success. However, in order to complete the evaluation, the engine may require more information. In this case, the status will be data-required, and the response will contain a description of the additional required information. If the evaluation completed successfully, but the engine determines that a potentially more accurate response could be provided if more data was available, the status will be data-requested, and the response will contain a description of the additional requested information.
	Subject            *Reference          `bson:",omitempty" json:"subject,omitempty"`                   // The patient for which the request was processed.
	Encounter          *Reference          `bson:",omitempty" json:"encounter,omitempty"`                 // The encounter during which this response was created or to which the creation of this record is tightly associated.
	Id                 *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language           *string             `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	OutputParameters   *Reference          `bson:",omitempty" json:"outputParameters,omitempty"`          // The output parameters of the evaluation, if any. Many modules will result in the return of specific resources such as procedure or communication requests that are returned as part of the operation result. However, modules may define specific outputs that would be returned as the result of the evaluation, and these would be returned in this element.
	OccurrenceDateTime *DateTime           `bson:",omitempty" json:"occurrenceDateTime,omitempty"`        // Indicates when the guidance response was processed.
	Performer          *Reference          `bson:",omitempty" json:"performer,omitempty"`                 // Provides a reference to the device that performed the guidance.
	ResourceType       string              `binding:"omitempty" bson:"-" json:"resourceType"`
}
type GuidanceResponseModulex struct {
	ModuleUri             string          `bson:",omitempty" json:"moduleUri,omitempty"`
	ModuleCanonical       string          `bson:",omitempty" json:"moduleCanonical,omitempty"`
	ModuleCodeableConcept CodeableConcept `bson:",omitempty" json:"moduleCodeableConcept,omitempty"`
}

func (out *HealthcareService) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"HealthcareService\"" {
		return fmt.Errorf("resourceType is not %s", "HealthcareService")
	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["characteristic"]) > 0 {
		if err := go1.Unmarshal(asMap["characteristic"], &out.Characteristic); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["offeredIn"]) > 0 {
		if err := go1.Unmarshal(asMap["offeredIn"], &out.OfferedIn); err != nil {
			return err
		}

	}
	if len(asMap["specialty"]) > 0 {
		if err := go1.Unmarshal(asMap["specialty"], &out.Specialty); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["availability"]) > 0 {
		if err := go1.Unmarshal(asMap["availability"], &out.Availability); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["active"]) > 0 {
		if err := go1.Unmarshal(asMap["active"], &out.Active); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["comment"]) > 0 {
		if err := go1.Unmarshal(asMap["comment"], &out.Comment); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["program"]) > 0 {
		if err := go1.Unmarshal(asMap["program"], &out.Program); err != nil {
			return err
		}

	}
	if len(asMap["photo"]) > 0 {
		if err := go1.Unmarshal(asMap["photo"], &out.Photo); err != nil {
			return err
		}

	}
	if len(asMap["serviceProvisionCode"]) > 0 {
		if err := go1.Unmarshal(asMap["serviceProvisionCode"], &out.ServiceProvisionCode); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["providedBy"]) > 0 {
		if err := go1.Unmarshal(asMap["providedBy"], &out.ProvidedBy); err != nil {
			return err
		}

	}
	if len(asMap["endpoint"]) > 0 {
		if err := go1.Unmarshal(asMap["endpoint"], &out.Endpoint); err != nil {
			return err
		}

	}
	if len(asMap["coverageArea"]) > 0 {
		if err := go1.Unmarshal(asMap["coverageArea"], &out.CoverageArea); err != nil {
			return err
		}

	}
	if len(asMap["appointmentRequired"]) > 0 {
		if err := go1.Unmarshal(asMap["appointmentRequired"], &out.AppointmentRequired); err != nil {
			return err
		}

	}
	if len(asMap["extraDetails"]) > 0 {
		if err := go1.Unmarshal(asMap["extraDetails"], &out.ExtraDetails); err != nil {
			return err
		}

	}
	if len(asMap["communication"]) > 0 {
		if err := go1.Unmarshal(asMap["communication"], &out.Communication); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["eligibility"]) > 0 {
		if err := go1.Unmarshal(asMap["eligibility"], &out.Eligibility); err != nil {
			return err
		}

	}
	if len(asMap["referralMethod"]) > 0 {
		if err := go1.Unmarshal(asMap["referralMethod"], &out.ReferralMethod); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	return nil
}

type HealthcareService struct {
	Location          []*Reference            `bson:",omitempty" json:"location,omitempty"`          // The location(s) where this healthcare service may be provided.
	Contact           []ExtendedContactDetail `bson:",omitempty" json:"contact,omitempty"`           // The contact details of communication devices available relevant to the specific HealthcareService. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.
	Characteristic    []*CodeableConcept      `bson:",omitempty" json:"characteristic,omitempty"`    // Collection of characteristics (attributes).
	Text              *Narrative              `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension         []*Extension            `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	OfferedIn         []*Reference            `bson:",omitempty" json:"offeredIn,omitempty"`         // When the HealthcareService is representing a specific, schedulable service, the availableIn property can refer to a generic service.
	Specialty         []*CodeableConcept      `bson:",omitempty" json:"specialty,omitempty"`         // Collection of specialties handled by the Healthcare service. This is more of a medical term.
	Name              *string                 `bson:",omitempty" json:"name,omitempty"`              // Further description of the service as it would be presented to a consumer while searching.
	Availability      []Availability          `bson:",omitempty" json:"availability,omitempty"`      // A collection of times that the healthcare service is available.
	ModifierExtension []*Extension            `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Active               *bool                         `bson:",omitempty" json:"active,omitempty"`               // This flag is used to mark the record to not be used. This is not used when a center is closed for maintenance, or for holidays, the notAvailable period is to be used for this.
	Language             *string                       `bson:",omitempty" json:"language,omitempty"`             // The base language in which the resource is written.
	Comment              *string                       `bson:",omitempty" json:"comment,omitempty"`              // Any additional description of the service and/or any specific issues not covered by the other attributes, which can be displayed as further detail under the serviceName.
	Id                   *primitive.ObjectID           `bson:"_id,omitempty" json:"id,omitempty"`                // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ImplicitRules        *string                       `bson:",omitempty" json:"implicitRules,omitempty"`        // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Program              []*CodeableConcept            `bson:",omitempty" json:"program,omitempty"`              // Programs that this service is applicable to.
	Photo                *Attachment                   `bson:",omitempty" json:"photo,omitempty"`                // If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list.
	ServiceProvisionCode []*CodeableConcept            `bson:",omitempty" json:"serviceProvisionCode,omitempty"` // The code(s) that detail the conditions under which the healthcare service is available/offered.
	Contained            []*Resource                   `bson:",omitempty" json:"contained,omitempty"`            // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ProvidedBy           *Reference                    `bson:",omitempty" json:"providedBy,omitempty"`           // The organization that provides this healthcare service.
	Endpoint             []*Reference                  `bson:",omitempty" json:"endpoint,omitempty"`             // Technical endpoints providing access to services operated for the specific healthcare services defined at this resource.
	CoverageArea         []*Reference                  `bson:",omitempty" json:"coverageArea,omitempty"`         // The location(s) that this service is available to (not where the service is provided).
	AppointmentRequired  *bool                         `bson:",omitempty" json:"appointmentRequired,omitempty"`  // Indicates whether or not a prospective consumer will require an appointment for a particular service at a site to be provided by the Organization. Indicates if an appointment is required for access to this service.
	ExtraDetails         *string                       `bson:",omitempty" json:"extraDetails,omitempty"`         // Extra details about the service that can't be placed in the other fields.
	Communication        []*CodeableConcept            `bson:",omitempty" json:"communication,omitempty"`        // Some services are specifically made available in multiple languages, this property permits a directory to declare the languages this is offered in. Typically this is only provided where a service operates in communities with mixed languages used.
	Category             []*CodeableConcept            `bson:",omitempty" json:"category,omitempty"`             // Identifies the broad category of service being performed or delivered.
	Type                 []*CodeableConcept            `bson:",omitempty" json:"type,omitempty"`                 // The specific type of service that may be delivered or performed.
	Eligibility          *HealthcareServiceEligibility `binding:"omitempty" bson:",omitempty"`
	ReferralMethod       []*CodeableConcept            `bson:",omitempty" json:"referralMethod,omitempty"` // Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required.
	Meta                 *Meta                         `bson:",omitempty" json:"meta,omitempty"`           // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Identifier           []*Identifier                 `bson:",omitempty" json:"identifier,omitempty"`     // External identifiers for this item.
	ResourceType         string                        `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *HealthcareServiceEligibility) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["comment"]) > 0 {
		if err := go1.Unmarshal(asMap["comment"], &out.Comment); err != nil {
			return err
		}

	}
	return nil
}

type HealthcareServiceEligibility struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code    *CodeableConcept `bson:",omitempty" json:"code,omitempty"`    // Coded value for the eligibility.
	Comment *string          `bson:",omitempty" json:"comment,omitempty"` // Describes the eligibility conditions for the service.
}

func (out *ImagingSelection) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ImagingSelection\"" {
		return fmt.Errorf("resourceType is not %s", "ImagingSelection")
	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["derivedFrom"]) > 0 {
		if err := go1.Unmarshal(asMap["derivedFrom"], &out.DerivedFrom); err != nil {
			return err
		}

	}
	if len(asMap["seriesNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["seriesNumber"], &out.SeriesNumber); err != nil {
			return err
		}

	}
	if len(asMap["frameOfReferenceUid"]) > 0 {
		if err := go1.Unmarshal(asMap["frameOfReferenceUid"], &out.FrameOfReferenceUid); err != nil {
			return err
		}

	}
	if len(asMap["bodySite"]) > 0 {
		if err := go1.Unmarshal(asMap["bodySite"], &out.BodySite); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["endpoint"]) > 0 {
		if err := go1.Unmarshal(asMap["endpoint"], &out.Endpoint); err != nil {
			return err
		}

	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["issued"]) > 0 {
		if err := go1.Unmarshal(asMap["issued"], &out.Issued); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["studyUid"]) > 0 {
		if err := go1.Unmarshal(asMap["studyUid"], &out.StudyUid); err != nil {
			return err
		}

	}
	if len(asMap["seriesUid"]) > 0 {
		if err := go1.Unmarshal(asMap["seriesUid"], &out.SeriesUid); err != nil {
			return err
		}

	}
	if len(asMap["focus"]) > 0 {
		if err := go1.Unmarshal(asMap["focus"], &out.Focus); err != nil {
			return err
		}

	}
	if len(asMap["instance"]) > 0 {
		if err := go1.Unmarshal(asMap["instance"], &out.Instance); err != nil {
			return err
		}

	}
	return nil
}

type ImagingSelection struct {
	Subject             *Reference                 `bson:",omitempty" json:"subject,omitempty"`                   // The patient, or group of patients, location, device, organization, procedure or practitioner this imaging selection is about and into whose or what record the imaging selection is placed.
	DerivedFrom         []*Reference               `bson:",omitempty" json:"derivedFrom,omitempty"`               // The imaging study from which the imaging selection is made.
	SeriesNumber        *int                       `bson:",omitempty" json:"seriesNumber,omitempty"`              // The Series Number for the DICOM Series from which the images were selected.
	FrameOfReferenceUid **primitive.ObjectID       `bson:",omitempty" json:"frameOfReferenceUid,omitempty"`       // The Frame of Reference UID identifying the coordinate system that conveys spatial and/or temporal information for the selected images or frames.
	BodySite            *CodeableReference         `bson:",omitempty" json:"bodySite,omitempty"`                  // The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings.
	ImplicitRules       *string                    `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Status              *string                    `binding:"required" bson:",omitempty" json:"status,omitempty"` // The current state of the ImagingSelection resource. This is not the status of any ImagingStudy, ServiceRequest, or Task resources associated with the ImagingSelection.
	Category            []*CodeableConcept         `bson:",omitempty" json:"category,omitempty"`                  // Classifies the imaging selection.
	Code                *CodeableConcept           `binding:"required" bson:",omitempty" json:"code,omitempty"`   // Reason for referencing the selected content.
	Id                  *primitive.ObjectID        `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Identifier          []*Identifier              `bson:",omitempty" json:"identifier,omitempty"`                // A unique identifier assigned to this imaging selection.
	Endpoint            []*Reference               `bson:",omitempty" json:"endpoint,omitempty"`                  // The network service providing retrieval access to the selected images, frames, etc. See implementation notes for information about using DICOM endpoints.
	Performer           *ImagingSelectionPerformer `binding:"omitempty" bson:",omitempty"`
	Meta                *Meta                      `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language            *string                    `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Text                *Narrative                 `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained           []*Resource                `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension           []*Extension               `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension   []*Extension               `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Issued       *time.Time                `bson:",omitempty" json:"issued,omitempty"`    // The date and time this imaging selection was created.
	BasedOn      []*Reference              `bson:",omitempty" json:"basedOn,omitempty"`   // A list of the diagnostic requests that resulted in this imaging selection being performed.
	StudyUid     **primitive.ObjectID      `bson:",omitempty" json:"studyUid,omitempty"`  // The Study Instance UID for the DICOM Study from which the images were selected.
	SeriesUid    **primitive.ObjectID      `bson:",omitempty" json:"seriesUid,omitempty"` // The Series Instance UID for the DICOM Series from which the images were selected.
	Focus        []*Reference              `bson:",omitempty" json:"focus,omitempty"`     // The actual focus of an observation when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, fetus, or donor. For example, fetus observations in a mother's record.  The focus of an observation could also be an existing condition,  an intervention, the subject's diet,  another observation of the subject,  or a body structure such as tumor or implanted device.   An example use case would be using the Observation resource to capture whether the mother is trained to change her child's tracheostomy tube. In this example, the child is the patient of record and the mother is the focus.
	Instance     *ImagingSelectionInstance `binding:"omitempty" bson:",omitempty"`
	ResourceType string                    `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ImagingSelectionPerformer) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	if len(asMap["actor"]) > 0 {
		if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
			return err
		}

	}
	return nil
}

type ImagingSelectionPerformer struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Function *CodeableConcept `bson:",omitempty" json:"function,omitempty"` // Distinguishes the type of involvement of the performer.
	Actor    *Reference       `bson:",omitempty" json:"actor,omitempty"`    // Author – human or machine.
}

func (out *ImagingSelectionInstance) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["sopClass"]) > 0 {
		if err := go1.Unmarshal(asMap["sopClass"], &out.SopClass); err != nil {
			return err
		}

	}
	if len(asMap["subset"]) > 0 {
		if err := go1.Unmarshal(asMap["subset"], &out.Subset); err != nil {
			return err
		}

	}
	if len(asMap["imageRegion3D"]) > 0 {
		if err := go1.Unmarshal(asMap["imageRegion3D"], &out.ImageRegion3D); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["number"]) > 0 {
		if err := go1.Unmarshal(asMap["number"], &out.Number); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["uid"], &out.Uid); err != nil {
		return err
	}

	if len(asMap["imageRegion2D"]) > 0 {
		if err := go1.Unmarshal(asMap["imageRegion2D"], &out.ImageRegion2D); err != nil {
			return err
		}

	}
	return nil
}

type ImagingSelectionInstance struct {
	SopClass *Coding   `bson:",omitempty" json:"sopClass,omitempty"` // The SOP Class UID for the selected DICOM instance.
	Subset   []*string `bson:",omitempty" json:"subset,omitempty"`   /*
	Selected subset of the SOP Instance. The content and format of the subset item is determined by the SOP Class of the selected instance.
	       May be one of:
	       - A list of frame numbers selected from a multiframe SOP Instance.
	       - A list of Content Item Observation UID values selected from a DICOM SR or other structured document SOP Instance.
	       - A list of segment numbers selected from a segmentation SOP Instance.
	       - A list of Region of Interest (ROI) numbers selected from a radiotherapy structure set SOP Instance.
	*/
	ImageRegion3D     *ImagingSelectionInstanceImageRegion3D `binding:"omitempty" bson:",omitempty"`
	Id                *string                                `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                           `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                           `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Number        *int                                   `bson:",omitempty" json:"number,omitempty"`                 // The Instance Number for the selected DICOM instance.
	Uid           **primitive.ObjectID                   `binding:"required" bson:",omitempty" json:"uid,omitempty"` // The SOP Instance UID for the selected DICOM instance.
	ImageRegion2D *ImagingSelectionInstanceImageRegion2D `binding:"omitempty" bson:",omitempty"`
}

func (out *ImagingSelectionInstanceImageRegion3D) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["regionType"], &out.RegionType); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["coordinate"], &out.Coordinate); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type ImagingSelectionInstanceImageRegion3D struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	RegionType *string      `binding:"required" bson:",omitempty" json:"regionType,omitempty"` // Specifies the type of image region.
	Coordinate []*float64   `binding:"required" bson:",omitempty" json:"coordinate,omitempty"` // The coordinates describing the image region. Encoded as an ordered set of (x,y,z) triplets (in mm and may be negative) that define a region of interest in the patient-relative Reference Coordinate System defined by ImagingSelection.frameOfReferenceUid element.
	Id         *string      `bson:"_id,omitempty" json:"id,omitempty"`                         // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension  []*Extension `bson:",omitempty" json:"extension,omitempty"`                     // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *ImagingSelectionInstanceImageRegion2D) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["regionType"], &out.RegionType); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["coordinate"], &out.Coordinate); err != nil {
		return err
	}

	return nil
}

type ImagingSelectionInstanceImageRegion2D struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	RegionType *string    `binding:"required" bson:",omitempty" json:"regionType,omitempty"` // Specifies the type of image region.
	Coordinate []*float64 `binding:"required" bson:",omitempty" json:"coordinate,omitempty"` /*
	The coordinates describing the image region. Encoded as a set of (column, row) pairs that denote positions in the selected image / frames specified with sub-pixel resolution.
	       The origin at the TLHC of the TLHC pixel is 0.0\0.0, the BRHC of the TLHC pixel is 1.0\1.0, and the BRHC of the BRHC pixel is the number of columns\rows in the image / frames. The values must be within the range 0\0 to the number of columns\rows in the image / frames.
	*/
}

func (out *ImagingStudy) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ImagingStudy\"" {
		return fmt.Errorf("resourceType is not %s", "ImagingStudy")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["modality"]) > 0 {
		if err := go1.Unmarshal(asMap["modality"], &out.Modality); err != nil {
			return err
		}

	}
	if len(asMap["numberOfInstances"]) > 0 {
		if err := go1.Unmarshal(asMap["numberOfInstances"], &out.NumberOfInstances); err != nil {
			return err
		}

	}
	if len(asMap["series"]) > 0 {
		if err := go1.Unmarshal(asMap["series"], &out.Series); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if len(asMap["referrer"]) > 0 {
		if err := go1.Unmarshal(asMap["referrer"], &out.Referrer); err != nil {
			return err
		}

	}
	if len(asMap["endpoint"]) > 0 {
		if err := go1.Unmarshal(asMap["endpoint"], &out.Endpoint); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["started"]) > 0 {
		if err := go1.Unmarshal(asMap["started"], &out.Started); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["numberOfSeries"]) > 0 {
		if err := go1.Unmarshal(asMap["numberOfSeries"], &out.NumberOfSeries); err != nil {
			return err
		}

	}
	if len(asMap["procedure"]) > 0 {
		if err := go1.Unmarshal(asMap["procedure"], &out.Procedure); err != nil {
			return err
		}

	}
	return nil
}

type ImagingStudy struct {
	Id                *primitive.ObjectID  `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Reason            []*CodeableReference `bson:",omitempty" json:"reason,omitempty"`            // Description of clinical condition indicating why the ImagingStudy was requested, and/or Indicates another resource whose existence justifies this Study.
	Modality          []*CodeableConcept   `bson:",omitempty" json:"modality,omitempty"`          // A list of all the distinct values of series.modality. This may include both acquisition and non-acquisition modalities.
	NumberOfInstances *int                 `bson:",omitempty" json:"numberOfInstances,omitempty"` // Number of SOP Instances in Study. This value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
	Series            *ImagingStudySeries  `binding:"omitempty" bson:",omitempty"`
	Meta              *Meta                `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules     *string              `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text              *Narrative           `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained         []*Resource          `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension         []*Extension         `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	PartOf            []*Reference         `bson:",omitempty" json:"partOf,omitempty"`            // A larger event of which this particular ImagingStudy is a component or step.  For example,  an ImagingStudy as part of a procedure.
	Referrer          *Reference           `bson:",omitempty" json:"referrer,omitempty"`          // The requesting/referring physician.
	Endpoint          []*Reference         `bson:",omitempty" json:"endpoint,omitempty"`          // The network service providing access (e.g., query, view, or retrieval) for the study. See implementation notes for information about using DICOM endpoints. A study-level endpoint applies to each series in the study, unless overridden by a series-level endpoint with the same Endpoint.connectionType.
	Language          *string              `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier     []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`                 // Identifiers for the ImagingStudy such as DICOM Study Instance UID.
	Status         *string              `binding:"required" bson:",omitempty" json:"status,omitempty"`  // The current state of the ImagingStudy resource. This is not the status of any ServiceRequest or Task resources associated with the ImagingStudy.
	Subject        *Reference           `binding:"required" bson:",omitempty" json:"subject,omitempty"` // The subject, typically a patient, of the imaging study.
	Location       *Reference           `bson:",omitempty" json:"location,omitempty"`                   // The principal physical location where the ImagingStudy was performed.
	Note           []*Annotation        `bson:",omitempty" json:"note,omitempty"`                       // Per the recommended DICOM mapping, this element is derived from the Study Description attribute (0008,1030). Observations or findings about the imaging study should be recorded in another resource, e.g. Observation, and not in this element.
	Description    *string              `bson:",omitempty" json:"description,omitempty"`                // The Imaging Manager description of the study. Institution-generated description or classification of the Study (component) performed.
	Encounter      *Reference           `bson:",omitempty" json:"encounter,omitempty"`                  // The healthcare event (e.g. a patient and healthcare provider interaction) during which this ImagingStudy is made.
	Started        *DateTime            `bson:",omitempty" json:"started,omitempty"`                    // Date and time the study started.
	BasedOn        []*Reference         `bson:",omitempty" json:"basedOn,omitempty"`                    // A list of the diagnostic requests that resulted in this imaging study being performed.
	NumberOfSeries *int                 `bson:",omitempty" json:"numberOfSeries,omitempty"`             // Number of Series in the Study. This value given may be larger than the number of series elements this Resource contains due to resource availability, security, or other factors. This element should be present if any series elements are present.
	Procedure      []*CodeableReference `bson:",omitempty" json:"procedure,omitempty"`                  // This field corresponds to the DICOM Procedure Code Sequence (0008,1032). This is different from the FHIR Procedure resource that may include the ImagingStudy.
	ResourceType   string               `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ImagingStudySeries) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["instance"]) > 0 {
		if err := go1.Unmarshal(asMap["instance"], &out.Instance); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["modality"], &out.Modality); err != nil {
		return err
	}

	if len(asMap["endpoint"]) > 0 {
		if err := go1.Unmarshal(asMap["endpoint"], &out.Endpoint); err != nil {
			return err
		}

	}
	if len(asMap["laterality"]) > 0 {
		if err := go1.Unmarshal(asMap["laterality"], &out.Laterality); err != nil {
			return err
		}

	}
	if len(asMap["started"]) > 0 {
		if err := go1.Unmarshal(asMap["started"], &out.Started); err != nil {
			return err
		}

	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["uid"], &out.Uid); err != nil {
		return err
	}

	if len(asMap["number"]) > 0 {
		if err := go1.Unmarshal(asMap["number"], &out.Number); err != nil {
			return err
		}

	}
	if len(asMap["numberOfInstances"]) > 0 {
		if err := go1.Unmarshal(asMap["numberOfInstances"], &out.NumberOfInstances); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["bodySite"]) > 0 {
		if err := go1.Unmarshal(asMap["bodySite"], &out.BodySite); err != nil {
			return err
		}

	}
	if len(asMap["specimen"]) > 0 {
		if err := go1.Unmarshal(asMap["specimen"], &out.Specimen); err != nil {
			return err
		}

	}
	return nil
}

type ImagingStudySeries struct {
	Instance          *ImagingStudySeriesInstance `binding:"omitempty" bson:",omitempty"`
	ModifierExtension []*Extension                `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Modality          *CodeableConcept             `binding:"required" bson:",omitempty" json:"modality,omitempty"` // The distinct modality for this series. This may include both acquisition and non-acquisition modalities.
	Endpoint          []*Reference                 `bson:",omitempty" json:"endpoint,omitempty"`                    // The network service providing access (e.g., query, view, or retrieval) for this series. See implementation notes for information about using DICOM endpoints. A series-level endpoint, if present, has precedence over a study-level endpoint with the same Endpoint.connectionType.
	Laterality        *CodeableConcept             `bson:",omitempty" json:"laterality,omitempty"`                  // The laterality of the (possibly paired) anatomic structures examined. E.g., the left knee, both lungs, or unpaired abdomen. If present, shall be consistent with any laterality information indicated in ImagingStudy.series.bodySite.
	Started           *DateTime                    `bson:",omitempty" json:"started,omitempty"`                     // The date and time the series was started.
	Performer         *ImagingStudySeriesPerformer `binding:"omitempty" bson:",omitempty"`
	Id                *string                      `bson:"_id,omitempty" json:"id,omitempty"`                  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                 `bson:",omitempty" json:"extension,omitempty"`              // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Uid               **primitive.ObjectID         `binding:"required" bson:",omitempty" json:"uid,omitempty"` // The DICOM Series Instance UID for the series.
	Number            *int                         `bson:",omitempty" json:"number,omitempty"`                 // The numeric identifier of this series in the study.
	NumberOfInstances *int                         `bson:",omitempty" json:"numberOfInstances,omitempty"`      // Number of SOP Instances in the Study. The value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
	Description       *string                      `bson:",omitempty" json:"description,omitempty"`            // A description of the series.
	BodySite          *CodeableReference           `bson:",omitempty" json:"bodySite,omitempty"`               // The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings. The bodySite may indicate the laterality of body part imaged; if so, it shall be consistent with any content of ImagingStudy.series.laterality.
	Specimen          []*Reference                 `bson:",omitempty" json:"specimen,omitempty"`               // The specimen imaged, e.g., for whole slide imaging of a biopsy.
}

func (out *ImagingStudySeriesInstance) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["sopClass"], &out.SopClass); err != nil {
		return err
	}

	if len(asMap["number"]) > 0 {
		if err := go1.Unmarshal(asMap["number"], &out.Number); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["uid"], &out.Uid); err != nil {
		return err
	}

	return nil
}

type ImagingStudySeriesInstance struct {
	SopClass          *Coding      `binding:"required" bson:",omitempty" json:"sopClass,omitempty"` // DICOM instance  type.
	Number            *int         `bson:",omitempty" json:"number,omitempty"`                      // The number of instance in the series.
	Title             *string      `bson:",omitempty" json:"title,omitempty"`                       // The description of the instance.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`           /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Uid **primitive.ObjectID `binding:"required" bson:",omitempty" json:"uid,omitempty"` // The DICOM SOP Instance UID for this image or other DICOM content.
}

func (out *ImagingStudySeriesPerformer) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type ImagingStudySeriesPerformer struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Function *CodeableConcept `bson:",omitempty" json:"function,omitempty"`                 // Distinguishes the type of involvement of the performer in the series.
	Actor    *Reference       `binding:"required" bson:",omitempty" json:"actor,omitempty"` // Indicates who or what performed the series.
	Id       *string          `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *Immunization) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Immunization\"" {
		return fmt.Errorf("resourceType is not %s", "Immunization")
	}
	if err := go1.Unmarshal(asMap["vaccineCode"], &out.VaccineCode); err != nil {
		return err
	}

	if len(asMap["site"]) > 0 {
		if err := go1.Unmarshal(asMap["site"], &out.Site); err != nil {
			return err
		}

	}
	if len(asMap["doseQuantity"]) > 0 {
		if err := go1.Unmarshal(asMap["doseQuantity"], &out.DoseQuantity); err != nil {
			return err
		}

	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["fundingSource"]) > 0 {
		if err := go1.Unmarshal(asMap["fundingSource"], &out.FundingSource); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["manufacturer"]) > 0 {
		if err := go1.Unmarshal(asMap["manufacturer"], &out.Manufacturer); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["occurrenceDateTime"], &out.OccurrenceDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrenceString"], &out.OccurrenceString); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "occurrence[x]")
	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["expirationDate"]) > 0 {
		if err := go1.Unmarshal(asMap["expirationDate"], &out.ExpirationDate); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["statusReason"]) > 0 {
		if err := go1.Unmarshal(asMap["statusReason"], &out.StatusReason); err != nil {
			return err
		}

	}
	if len(asMap["administeredProduct"]) > 0 {
		if err := go1.Unmarshal(asMap["administeredProduct"], &out.AdministeredProduct); err != nil {
			return err
		}

	}
	if len(asMap["reaction"]) > 0 {
		if err := go1.Unmarshal(asMap["reaction"], &out.Reaction); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["patient"], &out.Patient); err != nil {
		return err
	}

	if len(asMap["informationSource"]) > 0 {
		if err := go1.Unmarshal(asMap["informationSource"], &out.InformationSource); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["isSubpotent"]) > 0 {
		if err := go1.Unmarshal(asMap["isSubpotent"], &out.IsSubpotent); err != nil {
			return err
		}

	}
	if len(asMap["subpotentReason"]) > 0 {
		if err := go1.Unmarshal(asMap["subpotentReason"], &out.SubpotentReason); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["lotNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["lotNumber"], &out.LotNumber); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["primarySource"]) > 0 {
		if err := go1.Unmarshal(asMap["primarySource"], &out.PrimarySource); err != nil {
			return err
		}

	}
	if len(asMap["route"]) > 0 {
		if err := go1.Unmarshal(asMap["route"], &out.Route); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["supportingInformation"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInformation"], &out.SupportingInformation); err != nil {
			return err
		}

	}
	if len(asMap["programEligibility"]) > 0 {
		if err := go1.Unmarshal(asMap["programEligibility"], &out.ProgramEligibility); err != nil {
			return err
		}

	}
	if len(asMap["protocolApplied"]) > 0 {
		if err := go1.Unmarshal(asMap["protocolApplied"], &out.ProtocolApplied); err != nil {
			return err
		}

	}
	return nil
}

type Immunization struct {
	VaccineCode       *CodeableConcept       `binding:"required" bson:",omitempty" json:"vaccineCode,omitempty"` // Vaccine that was administered or was to be administered.
	Site              *CodeableConcept       `bson:",omitempty" json:"site,omitempty"`                           // Body site where vaccine was administered.
	DoseQuantity      *Quantity              `bson:",omitempty" json:"doseQuantity,omitempty"`                   // The quantity of vaccine product that was administered.
	Performer         *ImmunizationPerformer `binding:"omitempty" bson:",omitempty"`
	Reason            []*CodeableReference   `bson:",omitempty" json:"reason,omitempty"`            // Describes why the immunization occurred in coded or textual form, or Indicates another resource (Condition, Observation or DiagnosticReport) whose existence justifies this immunization.
	FundingSource     *CodeableConcept       `bson:",omitempty" json:"fundingSource,omitempty"`     // Indicates the source of the vaccine actually administered. This may be different than the patient eligibility (e.g. the patient may be eligible for a publically purchased vaccine but due to inventory issues, vaccine purchased with private funds was actually administered).
	Id                *primitive.ObjectID    `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta              *Meta                  `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language          *string                `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	ModifierExtension []*Extension           `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Status       *string            `binding:"required" bson:",omitempty" json:"status,omitempty"` // Indicates the current status of the immunization event.
	Manufacturer *CodeableReference `bson:",omitempty" json:"manufacturer,omitempty"`              // Name of vaccine manufacturer.
	ImmunizationOccurrencex
	Note                  []*Annotation                   `bson:",omitempty" json:"note,omitempty"`                // Extra information about the immunization that is not conveyed by the other attributes.
	Extension             []*Extension                    `bson:",omitempty" json:"extension,omitempty"`           // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	BasedOn               []*Reference                    `bson:",omitempty" json:"basedOn,omitempty"`             // A plan, order or recommendation fulfilled in whole or in part by this immunization.
	ExpirationDate        *Date                           `bson:",omitempty" json:"expirationDate,omitempty"`      // Date vaccine batch expires.
	Text                  *Narrative                      `bson:",omitempty" json:"text,omitempty"`                // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	StatusReason          *CodeableConcept                `bson:",omitempty" json:"statusReason,omitempty"`        // Indicates the reason the immunization event was not performed.
	AdministeredProduct   *CodeableReference              `bson:",omitempty" json:"administeredProduct,omitempty"` // An indication of which product was administered to the patient. This is typically a more detailed representation of the concept conveyed by the vaccineCode data element. If a Medication resource is referenced, it may be to a stand-alone resource or a contained resource within the Immunization resource.
	Reaction              *ImmunizationReaction           `binding:"omitempty" bson:",omitempty"`
	Patient               *Reference                      `binding:"required" bson:",omitempty" json:"patient,omitempty"` // The patient who either received or did not receive the immunization.
	InformationSource     *CodeableReference              `bson:",omitempty" json:"informationSource,omitempty"`          // Typically the source of the data when the report of the immunization event is not based on information from the person who administered the vaccine.
	Location              *Reference                      `bson:",omitempty" json:"location,omitempty"`                   // The service delivery location where the vaccine administration occurred.
	IsSubpotent           *bool                           `bson:",omitempty" json:"isSubpotent,omitempty"`                // Indication if a dose is considered to be subpotent. By default, a dose should be considered to be potent.
	SubpotentReason       []*CodeableConcept              `bson:",omitempty" json:"subpotentReason,omitempty"`            // Reason why a dose is considered to be subpotent.
	ImplicitRules         *string                         `bson:",omitempty" json:"implicitRules,omitempty"`              // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Identifier            []*Identifier                   `bson:",omitempty" json:"identifier,omitempty"`                 // A unique identifier assigned to this immunization record.
	LotNumber             *string                         `bson:",omitempty" json:"lotNumber,omitempty"`                  // Lot number of the  vaccine product.
	Encounter             *Reference                      `bson:",omitempty" json:"encounter,omitempty"`                  // The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
	PrimarySource         *bool                           `bson:",omitempty" json:"primarySource,omitempty"`              // Indicates whether the data contained in the resource was captured by the individual/organization which was responsible for the administration of the vaccine rather than as 'secondary reported' data documented by a third party. A value of 'true' means this data originated with the individual/organization which was responsible for the administration of the vaccine.
	Route                 *CodeableConcept                `bson:",omitempty" json:"route,omitempty"`                      // The path by which the vaccine product is taken into the body.
	Contained             []*Resource                     `bson:",omitempty" json:"contained,omitempty"`                  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	SupportingInformation []*Reference                    `bson:",omitempty" json:"supportingInformation,omitempty"`      // Additional information that is relevant to the immunization (e.g. for a vaccine recipient who is pregnant, the gestational age of the fetus). The reason why a vaccine was given (e.g. occupation, underlying medical condition) should be conveyed in Immunization.reason, not as supporting information. The reason why a vaccine was not given (e.g. contraindication) should be conveyed in Immunization.statusReason, not as supporting information.
	ProgramEligibility    *ImmunizationProgramEligibility `binding:"omitempty" bson:",omitempty"`
	ProtocolApplied       *ImmunizationProtocolApplied    `binding:"omitempty" bson:",omitempty"`
	ResourceType          string                          `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ImmunizationPerformer) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type ImmunizationPerformer struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Function *CodeableConcept `bson:",omitempty" json:"function,omitempty"`                 // Describes the type of performance (e.g. ordering provider, administering provider, etc.).
	Actor    *Reference       `binding:"required" bson:",omitempty" json:"actor,omitempty"` // The practitioner or organization who performed the action.
	Id       *string          `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}
type ImmunizationOccurrencex struct {
	OccurrenceDateTime DateTime `bson:",omitempty" json:"occurrenceDateTime,omitempty"`
	OccurrenceString   string   `bson:",omitempty" json:"occurrenceString,omitempty"`
}

func (out *ImmunizationReaction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["manifestation"]) > 0 {
		if err := go1.Unmarshal(asMap["manifestation"], &out.Manifestation); err != nil {
			return err
		}

	}
	if len(asMap["reported"]) > 0 {
		if err := go1.Unmarshal(asMap["reported"], &out.Reported); err != nil {
			return err
		}

	}
	return nil
}

type ImmunizationReaction struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Date          *DateTime          `bson:",omitempty" json:"date,omitempty"`          // Date of reaction to the immunization.
	Manifestation *CodeableReference `bson:",omitempty" json:"manifestation,omitempty"` // Details of the reaction.
	Reported      *bool              `bson:",omitempty" json:"reported,omitempty"`      // Self-reported indicator.
}

func (out *ImmunizationProgramEligibility) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["programStatus"], &out.ProgramStatus); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["program"], &out.Program); err != nil {
		return err
	}

	return nil
}

type ImmunizationProgramEligibility struct {
	ProgramStatus     *CodeableConcept `binding:"required" bson:",omitempty" json:"programStatus,omitempty"` // Indicates the patient's eligility status for for a specific payment program.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`                            // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`                        // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`                /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Program *CodeableConcept `binding:"required" bson:",omitempty" json:"program,omitempty"` // Indicates which program the patient had their eligility evaluated for.
}

func (out *ImmunizationProtocolApplied) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["series"]) > 0 {
		if err := go1.Unmarshal(asMap["series"], &out.Series); err != nil {
			return err
		}

	}
	if len(asMap["authority"]) > 0 {
		if err := go1.Unmarshal(asMap["authority"], &out.Authority); err != nil {
			return err
		}

	}
	if len(asMap["targetDisease"]) > 0 {
		if err := go1.Unmarshal(asMap["targetDisease"], &out.TargetDisease); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["doseNumber"], &out.DoseNumber); err != nil {
		return err
	}

	if len(asMap["seriesDoses"]) > 0 {
		if err := go1.Unmarshal(asMap["seriesDoses"], &out.SeriesDoses); err != nil {
			return err
		}

	}
	return nil
}

type ImmunizationProtocolApplied struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Series        *string            `bson:",omitempty" json:"series,omitempty"`                        // One possible path to achieve presumed immunity against a disease - within the context of an authority.
	Authority     *Reference         `bson:",omitempty" json:"authority,omitempty"`                     // Indicates the authority who published the protocol (e.g. ACIP) that is being followed.
	TargetDisease []*CodeableConcept `bson:",omitempty" json:"targetDisease,omitempty"`                 // The vaccine preventable disease the dose is being administered against.
	DoseNumber    *string            `binding:"required" bson:",omitempty" json:"doseNumber,omitempty"` // Nominal position in a series as intended by the practitioner administering the dose.
	SeriesDoses   *string            `bson:",omitempty" json:"seriesDoses,omitempty"`                   // The recommended number of doses to achieve immunity as intended by the practitioner administering the dose.
}

func (out *ImmunizationEvaluation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ImmunizationEvaluation\"" {
		return fmt.Errorf("resourceType is not %s", "ImmunizationEvaluation")
	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["immunizationEvent"], &out.ImmunizationEvent); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["doseStatus"], &out.DoseStatus); err != nil {
		return err
	}

	if len(asMap["doseStatusReason"]) > 0 {
		if err := go1.Unmarshal(asMap["doseStatusReason"], &out.DoseStatusReason); err != nil {
			return err
		}

	}
	if len(asMap["series"]) > 0 {
		if err := go1.Unmarshal(asMap["series"], &out.Series); err != nil {
			return err
		}

	}
	if len(asMap["doseNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["doseNumber"], &out.DoseNumber); err != nil {
			return err
		}

	}
	if len(asMap["seriesDoses"]) > 0 {
		if err := go1.Unmarshal(asMap["seriesDoses"], &out.SeriesDoses); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["patient"], &out.Patient); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["targetDisease"], &out.TargetDisease); err != nil {
		return err
	}

	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["authority"]) > 0 {
		if err := go1.Unmarshal(asMap["authority"], &out.Authority); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ImmunizationEvaluation struct {
	Meta              *Meta               `bson:",omitempty" json:"meta,omitempty"`                                 // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language          *string             `bson:",omitempty" json:"language,omitempty"`                             // The base language in which the resource is written.
	Date              *DateTime           `bson:",omitempty" json:"date,omitempty"`                                 // The date the evaluation of the vaccine administration event was performed.
	ImmunizationEvent *Reference          `binding:"required" bson:",omitempty" json:"immunizationEvent,omitempty"` // The vaccine administration event being evaluated.
	DoseStatus        *CodeableConcept    `binding:"required" bson:",omitempty" json:"doseStatus,omitempty"`        // Indicates if the dose is valid or not valid with respect to the published recommendations.
	DoseStatusReason  []*CodeableConcept  `bson:",omitempty" json:"doseStatusReason,omitempty"`                     // Provides an explanation as to why the vaccine administration event is valid or not relative to the published recommendations.
	Series            *string             `bson:",omitempty" json:"series,omitempty"`                               // One possible path to achieve presumed immunity against a disease - within the context of an authority.
	DoseNumber        *string             `bson:",omitempty" json:"doseNumber,omitempty"`                           // Nominal position in a series as determined by the outcome of the evaluation process.
	SeriesDoses       *string             `bson:",omitempty" json:"seriesDoses,omitempty"`                          // The recommended number of doses to achieve immunity as determined by the outcome of the evaluation process.
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                                // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Text              *Narrative          `bson:",omitempty" json:"text,omitempty"`                                 // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension         []*Extension        `bson:",omitempty" json:"extension,omitempty"`                            // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Identifier        []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`                           // A unique identifier assigned to this immunization evaluation record.
	Patient           *Reference          `binding:"required" bson:",omitempty" json:"patient,omitempty"`           // The individual for whom the evaluation is being done.
	TargetDisease     *CodeableConcept    `binding:"required" bson:",omitempty" json:"targetDisease,omitempty"`     // The vaccine preventable disease the dose is being evaluated against.
	ImplicitRules     *string             `bson:",omitempty" json:"implicitRules,omitempty"`                        // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Status            *string             `binding:"required" bson:",omitempty" json:"status,omitempty"`            // Indicates the current status of the evaluation of the vaccination administration event.
	Authority         *Reference          `bson:",omitempty" json:"authority,omitempty"`                            // Indicates the authority who published the protocol (e.g. ACIP).
	Description       *string             `bson:",omitempty" json:"description,omitempty"`                          // Additional information about the evaluation.
	Contained         []*Resource         `bson:",omitempty" json:"contained,omitempty"`                            // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"`                    /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ResourceType string `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ImmunizationRecommendation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ImmunizationRecommendation\"" {
		return fmt.Errorf("resourceType is not %s", "ImmunizationRecommendation")
	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["patient"], &out.Patient); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
		return err
	}

	if len(asMap["authority"]) > 0 {
		if err := go1.Unmarshal(asMap["authority"], &out.Authority); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["recommendation"], &out.Recommendation); err != nil {
		return err
	}

	return nil
}

type ImmunizationRecommendation struct {
	Language          *string             `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Contained         []*Resource         `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Identifier        []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`        // A unique identifier assigned to this particular recommendation record.
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta              *Meta               `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules     *string             `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text              *Narrative          `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension         []*Extension        `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Patient        *Reference                                `binding:"required" bson:",omitempty" json:"patient,omitempty"` // The patient the recommendation(s) are for.
	Date           *DateTime                                 `binding:"required" bson:",omitempty" json:"date,omitempty"`    // The date the immunization recommendation(s) were created.
	Authority      *Reference                                `bson:",omitempty" json:"authority,omitempty"`                  // Indicates the authority who published the protocol (e.g. ACIP).
	Recommendation *ImmunizationRecommendationRecommendation `binding:"omitempty" bson:",omitempty"`
	ResourceType   string                                    `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ImmunizationRecommendationRecommendation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["seriesDoses"]) > 0 {
		if err := go1.Unmarshal(asMap["seriesDoses"], &out.SeriesDoses); err != nil {
			return err
		}

	}
	if len(asMap["supportingPatientInformation"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingPatientInformation"], &out.SupportingPatientInformation); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["vaccineCode"]) > 0 {
		if err := go1.Unmarshal(asMap["vaccineCode"], &out.VaccineCode); err != nil {
			return err
		}

	}
	if len(asMap["contraindicatedVaccineCode"]) > 0 {
		if err := go1.Unmarshal(asMap["contraindicatedVaccineCode"], &out.ContraindicatedVaccineCode); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["doseNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["doseNumber"], &out.DoseNumber); err != nil {
			return err
		}

	}
	if len(asMap["forecastReason"]) > 0 {
		if err := go1.Unmarshal(asMap["forecastReason"], &out.ForecastReason); err != nil {
			return err
		}

	}
	if len(asMap["supportingImmunization"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingImmunization"], &out.SupportingImmunization); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["targetDisease"]) > 0 {
		if err := go1.Unmarshal(asMap["targetDisease"], &out.TargetDisease); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["forecastStatus"], &out.ForecastStatus); err != nil {
		return err
	}

	if len(asMap["dateCriterion"]) > 0 {
		if err := go1.Unmarshal(asMap["dateCriterion"], &out.DateCriterion); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["series"]) > 0 {
		if err := go1.Unmarshal(asMap["series"], &out.Series); err != nil {
			return err
		}

	}
	return nil
}

type ImmunizationRecommendationRecommendation struct {
	SeriesDoses                  *string            `bson:",omitempty" json:"seriesDoses,omitempty"`                  // The recommended number of doses to achieve immunity as determined by the evaluation and forecasting process.
	SupportingPatientInformation []*Reference       `bson:",omitempty" json:"supportingPatientInformation,omitempty"` // Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
	Extension                    []*Extension       `bson:",omitempty" json:"extension,omitempty"`                    // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	VaccineCode                  []*CodeableConcept `bson:",omitempty" json:"vaccineCode,omitempty"`                  // Vaccine(s) or vaccine group that pertain to the recommendation.
	ContraindicatedVaccineCode   []*CodeableConcept `bson:",omitempty" json:"contraindicatedVaccineCode,omitempty"`   // Vaccine(s) which should not be used to fulfill the recommendation.
	Description                  *string            `bson:",omitempty" json:"description,omitempty"`                  // Contains the description about the protocol under which the vaccine was administered.
	DoseNumber                   *string            `bson:",omitempty" json:"doseNumber,omitempty"`                   // Nominal position of the recommended dose in a series as determined by the evaluation and forecasting process (e.g. dose 2 is the next recommended dose).
	ForecastReason               []*CodeableConcept `bson:",omitempty" json:"forecastReason,omitempty"`               // The reason for the assigned forecast status.
	SupportingImmunization       []*Reference       `bson:",omitempty" json:"supportingImmunization,omitempty"`       // Immunization event history and/or evaluation that supports the status and recommendation.
	ModifierExtension            []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"`            /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	TargetDisease  []*CodeableConcept                                     `bson:",omitempty" json:"targetDisease,omitempty"`                     // The targeted disease for the recommendation.
	ForecastStatus *CodeableConcept                                       `binding:"required" bson:",omitempty" json:"forecastStatus,omitempty"` // Indicates the patient status with respect to the path to immunity for the target disease.
	DateCriterion  *ImmunizationRecommendationRecommendationDateCriterion `binding:"omitempty" bson:",omitempty"`
	Id             *string                                                `bson:"_id,omitempty" json:"id,omitempty"`  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Series         *string                                                `bson:",omitempty" json:"series,omitempty"` // One possible path to achieve presumed immunity against a disease - within the context of an authority.
}

func (out *ImmunizationRecommendationRecommendationDateCriterion) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type ImmunizationRecommendationRecommendationDateCriterion struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code      *CodeableConcept `binding:"required" bson:",omitempty" json:"code,omitempty"`  // Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.
	Value     *DateTime        `binding:"required" bson:",omitempty" json:"value,omitempty"` // The date whose meaning is specified by dateCriterion.code.
	Id        *string          `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension     `bson:",omitempty" json:"extension,omitempty"`                // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *ImplementationGuide) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ImplementationGuide\"" {
		return fmt.Errorf("resourceType is not %s", "ImplementationGuide")
	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if len(asMap["dependsOn"]) > 0 {
		if err := go1.Unmarshal(asMap["dependsOn"], &out.DependsOn); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["license"]) > 0 {
		if err := go1.Unmarshal(asMap["license"], &out.License); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["global"]) > 0 {
		if err := go1.Unmarshal(asMap["global"], &out.Global); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["fhirVersion"], &out.FhirVersion); err != nil {
		return err
	}

	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["manifest"]) > 0 {
		if err := go1.Unmarshal(asMap["manifest"], &out.Manifest); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
		return err
	}

	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["definition"]) > 0 {
		if err := go1.Unmarshal(asMap["definition"], &out.Definition); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["packageId"], &out.PackageId); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	return nil
}

type ImplementationGuide struct {
	Version           *string                       `bson:",omitempty" json:"version,omitempty"`                 // The identifier that is used to identify this version of the implementation guide when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the implementation guide author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Name              *string                       `binding:"required" bson:",omitempty" json:"name,omitempty"` // A natural language name identifying the implementation guide. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	DependsOn         *ImplementationGuideDependsOn `binding:"omitempty" bson:",omitempty"`
	Purpose           *string                       `bson:",omitempty" json:"purpose,omitempty"`      // Explanation of why this implementation guide is needed and why it has been designed as it has.
	License           *string                       `bson:",omitempty" json:"license,omitempty"`      // The license that applies to this Implementation Guide, using an SPDX license code, or 'not-open-source'.
	Identifier        []*Identifier                 `bson:",omitempty" json:"identifier,omitempty"`   // A formal identifier that is used to identify this implementation guide when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Jurisdiction      []*CodeableConcept            `bson:",omitempty" json:"jurisdiction,omitempty"` // A legal or geographic region in which the implementation guide is intended to be used.
	Copyright         *string                       `bson:",omitempty" json:"copyright,omitempty"`    // A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide.
	Global            *ImplementationGuideGlobal    `binding:"omitempty" bson:",omitempty"`
	ImplicitRules     *string                       `bson:",omitempty" json:"implicitRules,omitempty"`                  // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained         []*Resource                   `bson:",omitempty" json:"contained,omitempty"`                      // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Status            *string                       `binding:"required" bson:",omitempty" json:"status,omitempty"`      // The status of this implementation guide. Enables tracking the life-cycle of the content.
	FhirVersion       []*string                     `binding:"required" bson:",omitempty" json:"fhirVersion,omitempty"` // The version(s) of the FHIR specification that this ImplementationGuide targets - e.g. describes how to use. The value of this element is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.6.0. for this version.
	UseContext        []*UsageContext               `bson:",omitempty" json:"useContext,omitempty"`                     // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate implementation guide instances.
	CopyrightLabel    *string                       `bson:",omitempty" json:"copyrightLabel,omitempty"`                 // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Manifest          *ImplementationGuideManifest  `binding:"omitempty" bson:",omitempty"`
	ModifierExtension []*Extension                  `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Experimental *bool                          `bson:",omitempty" json:"experimental,omitempty"`           // A Boolean value to indicate that this implementation guide is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Contact      []*ContactDetail               `bson:",omitempty" json:"contact,omitempty"`                // Contact details to assist a user in finding and communicating with the publisher.
	Description  *string                        `bson:",omitempty" json:"description,omitempty"`            // A free text natural language description of the implementation guide from a consumer's perspective.
	Url          *string                        `binding:"required" bson:",omitempty" json:"url,omitempty"` // An absolute URI that is used to identify this implementation guide when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this implementation guide is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the implementation guide is stored on different servers.
	Title        *string                        `bson:",omitempty" json:"title,omitempty"`                  // A short, descriptive, user-friendly title for the implementation guide.
	Date         *DateTime                      `bson:",omitempty" json:"date,omitempty"`                   // The date  (and optionally time) when the implementation guide was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes.
	Extension    []*Extension                   `bson:",omitempty" json:"extension,omitempty"`              // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Publisher    *string                        `bson:",omitempty" json:"publisher,omitempty"`              // The name of the organization or individual responsible for the release and ongoing maintenance of the implementation guide.
	Definition   *ImplementationGuideDefinition `binding:"omitempty" bson:",omitempty"`
	ImplementationGuideVersionAlgorithmx
	PackageId    **primitive.ObjectID `binding:"required" bson:",omitempty" json:"packageId,omitempty"` // The NPM package name for this Implementation Guide, used in the NPM package distribution, which is the primary mechanism by which FHIR based tooling manages IG dependencies. This value must be globally unique, and should be assigned with care.
	Id           *primitive.ObjectID  `bson:"_id,omitempty" json:"id,omitempty"`                        // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta         *Meta                `bson:",omitempty" json:"meta,omitempty"`                         // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language     *string              `bson:",omitempty" json:"language,omitempty"`                     // The base language in which the resource is written.
	Text         *Narrative           `bson:",omitempty" json:"text,omitempty"`                         // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ResourceType string               `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ImplementationGuideDependsOn) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["uri"], &out.Uri); err != nil {
		return err
	}

	if len(asMap["packageId"]) > 0 {
		if err := go1.Unmarshal(asMap["packageId"], &out.PackageId); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	return nil
}

type ImplementationGuideDependsOn struct {
	Reason            *string      `bson:",omitempty" json:"reason,omitempty"`            // A description explaining the nature of the dependency on the listed IG.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Uri       *string              `binding:"required" bson:",omitempty" json:"uri,omitempty"` // A canonical reference to the Implementation guide for the dependency.
	PackageId **primitive.ObjectID `bson:",omitempty" json:"packageId,omitempty"`              // The NPM package name for the Implementation Guide that this IG depends on.
	Version   *string              `bson:",omitempty" json:"version,omitempty"`                // The version of the IG that is depended on, when the correct version is required to understand the IG correctly.
}

func (out *ImplementationGuideGlobal) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["profile"], &out.Profile); err != nil {
		return err
	}

	return nil
}

type ImplementationGuideGlobal struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type    *string `binding:"required" bson:",omitempty" json:"type,omitempty"`    // The type of resource that all instances must conform to.
	Profile *string `binding:"required" bson:",omitempty" json:"profile,omitempty"` // A reference to the profile that all instances must conform to.
}

func (out *ImplementationGuideManifest) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["image"]) > 0 {
		if err := go1.Unmarshal(asMap["image"], &out.Image); err != nil {
			return err
		}

	}
	if len(asMap["other"]) > 0 {
		if err := go1.Unmarshal(asMap["other"], &out.Other); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["rendering"]) > 0 {
		if err := go1.Unmarshal(asMap["rendering"], &out.Rendering); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["resource"], &out.Resource); err != nil {
		return err
	}

	if len(asMap["page"]) > 0 {
		if err := go1.Unmarshal(asMap["page"], &out.Page); err != nil {
			return err
		}

	}
	return nil
}

type ImplementationGuideManifest struct {
	Image             []*string    `bson:",omitempty" json:"image,omitempty"`             // Indicates a relative path to an image that exists within the IG.
	Other             []*string    `bson:",omitempty" json:"other,omitempty"`             // Indicates the relative path of an additional non-page, non-image file that is part of the IG - e.g. zip, jar and similar files that could be the target of a hyperlink in a derived IG.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Rendering *url.URL                             `bson:",omitempty" json:"rendering,omitempty"` // A pointer to official web page, PDF or other rendering of the implementation guide.
	Resource  *ImplementationGuideManifestResource `binding:"omitempty" bson:",omitempty"`
	Page      *ImplementationGuideManifestPage     `binding:"omitempty" bson:",omitempty"`
}

func (out *ImplementationGuideManifestResource) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
		return err
	}

	if len(asMap["isExample"]) > 0 {
		if err := go1.Unmarshal(asMap["isExample"], &out.IsExample); err != nil {
			return err
		}

	}
	if len(asMap["profile"]) > 0 {
		if err := go1.Unmarshal(asMap["profile"], &out.Profile); err != nil {
			return err
		}

	}
	if len(asMap["relativePath"]) > 0 {
		if err := go1.Unmarshal(asMap["relativePath"], &out.RelativePath); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ImplementationGuideManifestResource struct {
	Reference         *Reference   `binding:"required" bson:",omitempty" json:"reference,omitempty"` // Where this resource is found.
	IsExample         *bool        `bson:",omitempty" json:"isExample,omitempty"`                    // If true, indicates the resource is an example instance.
	Profile           []*string    `bson:",omitempty" json:"profile,omitempty"`                      // If present, indicates profile(s) the instance is valid against.
	RelativePath      *url.URL     `bson:",omitempty" json:"relativePath,omitempty"`                 // The relative path for primary page for this resource within the IG.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                        // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                    // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`            /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *ImplementationGuideManifestPage) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["anchor"]) > 0 {
		if err := go1.Unmarshal(asMap["anchor"], &out.Anchor); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type ImplementationGuideManifestPage struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name      *string      `binding:"required" bson:",omitempty" json:"name,omitempty"` // Relative path to the page.
	Title     *string      `bson:",omitempty" json:"title,omitempty"`                   // Label for the page intended for human display.
	Anchor    []*string    `bson:",omitempty" json:"anchor,omitempty"`                  // The name of an anchor available on the page.
	Id        *string      `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *ImplementationGuideDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["page"]) > 0 {
		if err := go1.Unmarshal(asMap["page"], &out.Page); err != nil {
			return err
		}

	}
	if len(asMap["parameter"]) > 0 {
		if err := go1.Unmarshal(asMap["parameter"], &out.Parameter); err != nil {
			return err
		}

	}
	if len(asMap["template"]) > 0 {
		if err := go1.Unmarshal(asMap["template"], &out.Template); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["grouping"]) > 0 {
		if err := go1.Unmarshal(asMap["grouping"], &out.Grouping); err != nil {
			return err
		}

	}
	if len(asMap["resource"]) > 0 {
		if err := go1.Unmarshal(asMap["resource"], &out.Resource); err != nil {
			return err
		}

	}
	return nil
}

type ImplementationGuideDefinition struct {
	Page              *ImplementationGuideDefinitionPage      `binding:"omitempty" bson:",omitempty"`
	Parameter         *ImplementationGuideDefinitionParameter `binding:"omitempty" bson:",omitempty"`
	Template          *ImplementationGuideDefinitionTemplate  `binding:"omitempty" bson:",omitempty"`
	Id                *string                                 `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                            `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                            `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Grouping *ImplementationGuideDefinitionGrouping `binding:"omitempty" bson:",omitempty"`
	Resource *ImplementationGuideDefinitionResource `binding:"omitempty" bson:",omitempty"`
}

func (out *ImplementationGuideDefinitionPage) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["generation"], &out.Generation); err != nil {
		return err
	}

	if len(asMap["page"]) > 0 {
		if err := go1.Unmarshal(asMap["page"], &out.Page); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sourceUrl"], &out.SourceUrl); err == nil {
	} else if err := go1.Unmarshal(asMap["sourceString"], &out.SourceString); err == nil {
	} else if err := go1.Unmarshal(asMap["sourceMarkdown"], &out.SourceMarkdown); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	return nil
}

type ImplementationGuideDefinitionPage struct {
	Title             *string `binding:"required" bson:",omitempty" json:"title,omitempty"`      // A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
	Generation        *string `binding:"required" bson:",omitempty" json:"generation,omitempty"` // A code that indicates how the page is generated.
	Page              interface{}
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ImplementationGuideDefinitionPageSourcex
	Name *url.URL `binding:"required" bson:",omitempty" json:"name,omitempty"` // The url by which the page should be known when published.
}
type ImplementationGuideDefinitionPageSourcex struct {
	SourceUrl      url.URL `bson:",omitempty" json:"sourceUrl,omitempty"`
	SourceString   string  `bson:",omitempty" json:"sourceString,omitempty"`
	SourceMarkdown string  `bson:",omitempty" json:"sourceMarkdown,omitempty"`
}

func (out *ImplementationGuideDefinitionParameter) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
		return err
	}

	return nil
}

type ImplementationGuideDefinitionParameter struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code  *Coding `binding:"required" bson:",omitempty" json:"code,omitempty"`  // A tool-specific code that defines the parameter.
	Value *string `binding:"required" bson:",omitempty" json:"value,omitempty"` // Value for named type.
}

func (out *ImplementationGuideDefinitionTemplate) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["scope"]) > 0 {
		if err := go1.Unmarshal(asMap["scope"], &out.Scope); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
		return err
	}

	return nil
}

type ImplementationGuideDefinitionTemplate struct {
	Scope             *string      `bson:",omitempty" json:"scope,omitempty"`             // The scope in which the template applies.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code   *string `binding:"required" bson:",omitempty" json:"code,omitempty"`   // Type of template specified.
	Source *string `binding:"required" bson:",omitempty" json:"source,omitempty"` // The source location for the template.
}

func (out *ImplementationGuideDefinitionGrouping) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	return nil
}

type ImplementationGuideDefinitionGrouping struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name        *string `binding:"required" bson:",omitempty" json:"name,omitempty"` // The human-readable title to display for the package of resources when rendering the implementation guide.
	Description *string `bson:",omitempty" json:"description,omitempty"`             // Human readable text describing the package.
}

func (out *ImplementationGuideDefinitionResource) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
		return err
	}

	if len(asMap["fhirVersion"]) > 0 {
		if err := go1.Unmarshal(asMap["fhirVersion"], &out.FhirVersion); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["isExample"]) > 0 {
		if err := go1.Unmarshal(asMap["isExample"], &out.IsExample); err != nil {
			return err
		}

	}
	if len(asMap["profile"]) > 0 {
		if err := go1.Unmarshal(asMap["profile"], &out.Profile); err != nil {
			return err
		}

	}
	if len(asMap["groupingId"]) > 0 {
		if err := go1.Unmarshal(asMap["groupingId"], &out.GroupingId); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ImplementationGuideDefinitionResource struct {
	Id                *string              `bson:"_id,omitempty" json:"id,omitempty"`                        // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Description       *string              `bson:",omitempty" json:"description,omitempty"`                  // A description of the reason that a resource has been included in the implementation guide.
	Reference         *Reference           `binding:"required" bson:",omitempty" json:"reference,omitempty"` // Where this resource is found.
	FhirVersion       []*string            `bson:",omitempty" json:"fhirVersion,omitempty"`                  // Indicates the FHIR Version(s) this artifact is intended to apply to. If no versions are specified, the resource is assumed to apply to all the versions stated in ImplementationGuide.fhirVersion.
	Name              *string              `bson:",omitempty" json:"name,omitempty"`                         // A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
	IsExample         *bool                `bson:",omitempty" json:"isExample,omitempty"`                    // If true, indicates the resource is an example instance.
	Profile           []*string            `bson:",omitempty" json:"profile,omitempty"`                      // If present, indicates profile(s) the instance is valid against.
	GroupingId        **primitive.ObjectID `bson:",omitempty" json:"groupingId,omitempty"`                   // Reference to the id of the grouping this resource appears in.
	Extension         []*Extension         `bson:",omitempty" json:"extension,omitempty"`                    // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"`            /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type ImplementationGuideVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *Ingredient) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Ingredient\"" {
		return fmt.Errorf("resourceType is not %s", "Ingredient")
	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["group"]) > 0 {
		if err := go1.Unmarshal(asMap["group"], &out.Group); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
		return err
	}

	if len(asMap["allergenicIndicator"]) > 0 {
		if err := go1.Unmarshal(asMap["allergenicIndicator"], &out.AllergenicIndicator); err != nil {
			return err
		}

	}
	if len(asMap["comment"]) > 0 {
		if err := go1.Unmarshal(asMap["comment"], &out.Comment); err != nil {
			return err
		}

	}
	if len(asMap["manufacturer"]) > 0 {
		if err := go1.Unmarshal(asMap["manufacturer"], &out.Manufacturer); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["substance"], &out.Substance); err != nil {
		return err
	}

	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["for"]) > 0 {
		if err := go1.Unmarshal(asMap["for"], &out.For); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	return nil
}

type Ingredient struct {
	Meta              *Meta               `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language          *string             `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Text              *Narrative          `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Group             *CodeableConcept    `bson:",omitempty" json:"group,omitempty"`             // A classification of the ingredient according to where in the physical item it tends to be used, such the outer shell of a tablet, inner body or ink.
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Contained         []*Resource         `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Role                *CodeableConcept        `binding:"required" bson:",omitempty" json:"role,omitempty"` // A classification of the ingredient identifying its purpose within the product, e.g. active, inactive.
	AllergenicIndicator *bool                   `bson:",omitempty" json:"allergenicIndicator,omitempty"`     // If the ingredient is a known or suspected allergen. Note that this is a property of the substance, so if a reference to a SubstanceDefinition is used to decribe that (rather than just a code), the allergen information should go there, not here.
	Comment             *string                 `bson:",omitempty" json:"comment,omitempty"`                 // A place for providing any notes that are relevant to the component, e.g. removed during process, adjusted for loss on drying.
	Manufacturer        *IngredientManufacturer `binding:"omitempty" bson:",omitempty"`
	Substance           *IngredientSubstance    `binding:"omitempty" bson:",omitempty"`
	ImplicitRules       *string                 `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Identifier          *Identifier             `bson:",omitempty" json:"identifier,omitempty"`                // The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
	For                 []*Reference            `bson:",omitempty" json:"for,omitempty"`                       // The product which this ingredient is a constituent part of.
	Extension           []*Extension            `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Function            []*CodeableConcept      `bson:",omitempty" json:"function,omitempty"`                  // A classification of the ingredient identifying its precise purpose(s) in the drug product. This extends the Ingredient.role to add more detail. Example: antioxidant, alkalizing agent.
	Status              *string                 `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this ingredient. Enables tracking the life-cycle of the content.
	ResourceType        string                  `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *IngredientManufacturer) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["role"]) > 0 {
		if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["manufacturer"], &out.Manufacturer); err != nil {
		return err
	}

	return nil
}

type IngredientManufacturer struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Role         *string    `bson:",omitempty" json:"role,omitempty"`                            // The way in which this manufacturer is associated with the ingredient. For example whether it is a possible one (others allowed), or an exclusive authorized one for this ingredient. Note that this is not the manufacturing process role.
	Manufacturer *Reference `binding:"required" bson:",omitempty" json:"manufacturer,omitempty"` // An organization that manufactures this ingredient.
}

func (out *IngredientSubstance) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["strength"]) > 0 {
		if err := go1.Unmarshal(asMap["strength"], &out.Strength); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type IngredientSubstance struct {
	Code              *CodeableReference           `binding:"required" bson:",omitempty" json:"code,omitempty"` // A code or full resource that represents the ingredient's substance.
	Strength          *IngredientSubstanceStrength `binding:"omitempty" bson:",omitempty"`
	Id                *string                      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                 `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                 `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *IngredientSubstanceStrength) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["country"]) > 0 {
		if err := go1.Unmarshal(asMap["country"], &out.Country); err != nil {
			return err
		}

	}
	if len(asMap["referenceStrength"]) > 0 {
		if err := go1.Unmarshal(asMap["referenceStrength"], &out.ReferenceStrength); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["presentationRatio"], &out.PresentationRatio); err == nil {
	} else if err := go1.Unmarshal(asMap["presentationRatioRange"], &out.PresentationRatioRange); err == nil {
	} else if err := go1.Unmarshal(asMap["presentationCodeableConcept"], &out.PresentationCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["presentationQuantity"], &out.PresentationQuantity); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["concentrationRatio"], &out.ConcentrationRatio); err == nil {
	} else if err := go1.Unmarshal(asMap["concentrationRatioRange"], &out.ConcentrationRatioRange); err == nil {
	} else if err := go1.Unmarshal(asMap["concentrationCodeableConcept"], &out.ConcentrationCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["concentrationQuantity"], &out.ConcentrationQuantity); err == nil {
	} else {

	}
	if len(asMap["measurementPoint"]) > 0 {
		if err := go1.Unmarshal(asMap["measurementPoint"], &out.MeasurementPoint); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["textPresentation"]) > 0 {
		if err := go1.Unmarshal(asMap["textPresentation"], &out.TextPresentation); err != nil {
			return err
		}

	}
	if len(asMap["textConcentration"]) > 0 {
		if err := go1.Unmarshal(asMap["textConcentration"], &out.TextConcentration); err != nil {
			return err
		}

	}
	if len(asMap["basis"]) > 0 {
		if err := go1.Unmarshal(asMap["basis"], &out.Basis); err != nil {
			return err
		}

	}
	return nil
}

type IngredientSubstanceStrength struct {
	Country           []*CodeableConcept                            `bson:",omitempty" json:"country,omitempty"` // The country or countries for which the strength range applies.
	ReferenceStrength *IngredientSubstanceStrengthReferenceStrength `binding:"omitempty" bson:",omitempty"`
	Id                *string                                       `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension []*Extension                                  `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	IngredientSubstanceStrengthPresentationx
	IngredientSubstanceStrengthConcentrationx
	MeasurementPoint  *string          `bson:",omitempty" json:"measurementPoint,omitempty"`  // For when strength is measured at a particular point or distance. There are products where strength is measured at a particular point. For example, the strength of the ingredient in some inhalers is measured at a particular position relative to the point of aerosolization.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	TextPresentation  *string          `bson:",omitempty" json:"textPresentation,omitempty"`  // A textual represention of either the whole of the presentation strength or a part of it - with the rest being in Strength.presentation as a ratio.
	TextConcentration *string          `bson:",omitempty" json:"textConcentration,omitempty"` // A textual represention of either the whole of the concentration strength or a part of it - with the rest being in Strength.concentration as a ratio.
	Basis             *CodeableConcept `bson:",omitempty" json:"basis,omitempty"`             // A code that indicates if the strength is, for example, based on the ingredient substance as stated or on the substance base (when the ingredient is a salt).
}

func (out *IngredientSubstanceStrengthReferenceStrength) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["substance"], &out.Substance); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["strengthRatio"], &out.StrengthRatio); err == nil {
	} else if err := go1.Unmarshal(asMap["strengthRatioRange"], &out.StrengthRatioRange); err == nil {
	} else if err := go1.Unmarshal(asMap["strengthQuantity"], &out.StrengthQuantity); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "strength[x]")
	}
	if len(asMap["measurementPoint"]) > 0 {
		if err := go1.Unmarshal(asMap["measurementPoint"], &out.MeasurementPoint); err != nil {
			return err
		}

	}
	if len(asMap["country"]) > 0 {
		if err := go1.Unmarshal(asMap["country"], &out.Country); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type IngredientSubstanceStrengthReferenceStrength struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Substance *CodeableReference `binding:"required" bson:",omitempty" json:"substance,omitempty"` // Relevant reference substance.
	IngredientSubstanceStrengthReferenceStrengthStrengthx
	MeasurementPoint *string            `bson:",omitempty" json:"measurementPoint,omitempty"` // For when strength is measured at a particular point or distance.
	Country          []*CodeableConcept `bson:",omitempty" json:"country,omitempty"`          // The country or countries for which the strength range applies.
	Id               *string            `bson:"_id,omitempty" json:"id,omitempty"`            // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension        []*Extension       `bson:",omitempty" json:"extension,omitempty"`        // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}
type IngredientSubstanceStrengthReferenceStrengthStrengthx struct {
	StrengthRatio      Ratio      `bson:",omitempty" json:"strengthRatio,omitempty"`
	StrengthRatioRange RatioRange `bson:",omitempty" json:"strengthRatioRange,omitempty"`
	StrengthQuantity   Quantity   `bson:",omitempty" json:"strengthQuantity,omitempty"`
}
type IngredientSubstanceStrengthPresentationx struct {
	PresentationRatio           Ratio           `bson:",omitempty" json:"presentationRatio,omitempty"`
	PresentationRatioRange      RatioRange      `bson:",omitempty" json:"presentationRatioRange,omitempty"`
	PresentationCodeableConcept CodeableConcept `bson:",omitempty" json:"presentationCodeableConcept,omitempty"`
	PresentationQuantity        Quantity        `bson:",omitempty" json:"presentationQuantity,omitempty"`
}
type IngredientSubstanceStrengthConcentrationx struct {
	ConcentrationRatio           Ratio           `bson:",omitempty" json:"concentrationRatio,omitempty"`
	ConcentrationRatioRange      RatioRange      `bson:",omitempty" json:"concentrationRatioRange,omitempty"`
	ConcentrationCodeableConcept CodeableConcept `bson:",omitempty" json:"concentrationCodeableConcept,omitempty"`
	ConcentrationQuantity        Quantity        `bson:",omitempty" json:"concentrationQuantity,omitempty"`
}

func (out *InsurancePlan) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"InsurancePlan\"" {
		return fmt.Errorf("resourceType is not %s", "InsurancePlan")
	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["plan"]) > 0 {
		if err := go1.Unmarshal(asMap["plan"], &out.Plan); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["alias"]) > 0 {
		if err := go1.Unmarshal(asMap["alias"], &out.Alias); err != nil {
			return err
		}

	}
	if len(asMap["administeredBy"]) > 0 {
		if err := go1.Unmarshal(asMap["administeredBy"], &out.AdministeredBy); err != nil {
			return err
		}

	}
	if len(asMap["network"]) > 0 {
		if err := go1.Unmarshal(asMap["network"], &out.Network); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["coverageArea"]) > 0 {
		if err := go1.Unmarshal(asMap["coverageArea"], &out.CoverageArea); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["coverage"]) > 0 {
		if err := go1.Unmarshal(asMap["coverage"], &out.Coverage); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["ownedBy"]) > 0 {
		if err := go1.Unmarshal(asMap["ownedBy"], &out.OwnedBy); err != nil {
			return err
		}

	}
	if len(asMap["endpoint"]) > 0 {
		if err := go1.Unmarshal(asMap["endpoint"], &out.Endpoint); err != nil {
			return err
		}

	}
	return nil
}

type InsurancePlan struct {
	Text              *Narrative         `bson:",omitempty" json:"text,omitempty"` // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Type              []*CodeableConcept `bson:",omitempty" json:"type,omitempty"` // The kind of health insurance product.
	Plan              *InsurancePlanPlan `binding:"omitempty" bson:",omitempty"`
	ImplicitRules     *string            `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained         []*Resource        `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier     []*Identifier            `bson:",omitempty" json:"identifier,omitempty"`     // Business identifiers assigned to this health insurance product which remain constant as the resource is updated and propagates from server to server.
	Alias          []*string                `bson:",omitempty" json:"alias,omitempty"`          // A list of alternate names that the product is known as, or was known as in the past.
	AdministeredBy *Reference               `bson:",omitempty" json:"administeredBy,omitempty"` // An organization which administer other services such as underwriting, customer service and/or claims processing on behalf of the health insurance product owner.
	Network        []*Reference             `bson:",omitempty" json:"network,omitempty"`        // Reference to the network included in the health insurance product.
	Id             *primitive.ObjectID      `bson:"_id,omitempty" json:"id,omitempty"`          // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Extension      []*Extension             `bson:",omitempty" json:"extension,omitempty"`      // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Period         *Period                  `bson:",omitempty" json:"period,omitempty"`         // The period of time that the health insurance product is available.
	CoverageArea   []*Reference             `bson:",omitempty" json:"coverageArea,omitempty"`   // The geographic region in which a health insurance product's benefits apply.
	Contact        []*ExtendedContactDetail `bson:",omitempty" json:"contact,omitempty"`        // The contact details of communication devices available relevant to the specific Insurance Plan/Product. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.
	Coverage       *InsurancePlanCoverage   `binding:"omitempty" bson:",omitempty"`
	Meta           *Meta                    `bson:",omitempty" json:"meta,omitempty"`     // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language       *string                  `bson:",omitempty" json:"language,omitempty"` // The base language in which the resource is written.
	Status         *string                  `bson:",omitempty" json:"status,omitempty"`   // The current state of the health insurance product.
	Name           *string                  `bson:",omitempty" json:"name,omitempty"`     // Official name of the health insurance product as designated by the owner.
	OwnedBy        *Reference               `bson:",omitempty" json:"ownedBy,omitempty"`  // The entity that is providing  the health insurance product and underwriting the risk.  This is typically an insurance carriers, other third-party payers, or health plan sponsors comonly referred to as 'payers'.
	Endpoint       []*Reference             `bson:",omitempty" json:"endpoint,omitempty"` // The technical endpoints providing access to services operated for the health insurance product.
	ResourceType   string                   `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *InsurancePlanPlan) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["coverageArea"]) > 0 {
		if err := go1.Unmarshal(asMap["coverageArea"], &out.CoverageArea); err != nil {
			return err
		}

	}
	if len(asMap["specificCost"]) > 0 {
		if err := go1.Unmarshal(asMap["specificCost"], &out.SpecificCost); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["network"]) > 0 {
		if err := go1.Unmarshal(asMap["network"], &out.Network); err != nil {
			return err
		}

	}
	if len(asMap["generalCost"]) > 0 {
		if err := go1.Unmarshal(asMap["generalCost"], &out.GeneralCost); err != nil {
			return err
		}

	}
	return nil
}

type InsurancePlanPlan struct {
	Extension         []*Extension                   `bson:",omitempty" json:"extension,omitempty"`    // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Identifier        []*Identifier                  `bson:",omitempty" json:"identifier,omitempty"`   // Business identifiers assigned to this health insurance plan which remain constant as the resource is updated and propagates from server to server.
	Type              *CodeableConcept               `bson:",omitempty" json:"type,omitempty"`         // Type of plan. For example, "Platinum" or "High Deductable".
	CoverageArea      []*Reference                   `bson:",omitempty" json:"coverageArea,omitempty"` // The geographic region in which a health insurance plan's benefits apply.
	SpecificCost      *InsurancePlanPlanSpecificCost `binding:"omitempty" bson:",omitempty"`
	Id                *string                        `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension []*Extension                   `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Network     []*Reference                  `bson:",omitempty" json:"network,omitempty"` // Reference to the network that providing the type of coverage.
	GeneralCost *InsurancePlanPlanGeneralCost `binding:"omitempty" bson:",omitempty"`
}

func (out *InsurancePlanPlanSpecificCost) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
		return err
	}

	if len(asMap["benefit"]) > 0 {
		if err := go1.Unmarshal(asMap["benefit"], &out.Benefit); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type InsurancePlanPlanSpecificCost struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Category *CodeableConcept                      `binding:"required" bson:",omitempty" json:"category,omitempty"` // General category of benefit (Medical; Dental; Vision; Drug; Mental Health; Substance Abuse; Hospice, Home Health).
	Benefit  *InsurancePlanPlanSpecificCostBenefit `binding:"omitempty" bson:",omitempty"`
	Id       *string                               `bson:"_id,omitempty" json:"id,omitempty"` // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *InsurancePlanPlanSpecificCostBenefit) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["cost"]) > 0 {
		if err := go1.Unmarshal(asMap["cost"], &out.Cost); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type InsurancePlanPlanSpecificCostBenefit struct {
	Type              *CodeableConcept                          `binding:"required" bson:",omitempty" json:"type,omitempty"` // Type of specific benefit (preventative; primary care office visit; speciality office visit; hospitalization; emergency room; urgent care).
	Cost              *InsurancePlanPlanSpecificCostBenefitCost `binding:"omitempty" bson:",omitempty"`
	Id                *string                                   `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                              `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                              `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *InsurancePlanPlanSpecificCostBenefitCost) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["qualifiers"]) > 0 {
		if err := go1.Unmarshal(asMap["qualifiers"], &out.Qualifiers); err != nil {
			return err
		}

	}
	if len(asMap["value"]) > 0 {
		if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["applicability"]) > 0 {
		if err := go1.Unmarshal(asMap["applicability"], &out.Applicability); err != nil {
			return err
		}

	}
	return nil
}

type InsurancePlanPlanSpecificCostBenefitCost struct {
	Qualifiers        []*CodeableConcept `bson:",omitempty" json:"qualifiers,omitempty"`        // Additional information about the cost, such as information about funding sources (e.g. HSA, HRA, FSA, RRA).
	Value             *Quantity          `bson:",omitempty" json:"value,omitempty"`             // The actual cost value. (some of the costs may be represented as percentages rather than currency, e.g. 10% coinsurance).
	Id                *string            `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension       `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type          *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // Type of cost (copay; individual cap; family cap; coinsurance; deductible).
	Applicability *CodeableConcept `bson:",omitempty" json:"applicability,omitempty"`           // Whether the cost applies to in-network or out-of-network providers (in-network; out-of-network; other).
}

func (out *InsurancePlanPlanGeneralCost) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["groupSize"]) > 0 {
		if err := go1.Unmarshal(asMap["groupSize"], &out.GroupSize); err != nil {
			return err
		}

	}
	if len(asMap["cost"]) > 0 {
		if err := go1.Unmarshal(asMap["cost"], &out.Cost); err != nil {
			return err
		}

	}
	if len(asMap["comment"]) > 0 {
		if err := go1.Unmarshal(asMap["comment"], &out.Comment); err != nil {
			return err
		}

	}
	return nil
}

type InsurancePlanPlanGeneralCost struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type      *CodeableConcept `bson:",omitempty" json:"type,omitempty"`      // Type of cost.
	GroupSize *int             `bson:",omitempty" json:"groupSize,omitempty"` // Number of participants enrolled in the plan.
	Cost      *Money           `bson:",omitempty" json:"cost,omitempty"`      // Value of the cost.
	Comment   *string          `bson:",omitempty" json:"comment,omitempty"`   // Additional information about the general costs associated with this plan.
}

func (out *InsurancePlanCoverage) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["benefit"], &out.Benefit); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["network"]) > 0 {
		if err := go1.Unmarshal(asMap["network"], &out.Network); err != nil {
			return err
		}

	}
	return nil
}

type InsurancePlanCoverage struct {
	Benefit           *InsurancePlanCoverageBenefit `binding:"omitempty" bson:",omitempty"`
	Id                *string                       `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                  `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                  `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type    *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // Type of coverage  (Medical; Dental; Mental Health; Substance Abuse; Vision; Drug; Short Term; Long Term Care; Hospice; Home Health).
	Network []*Reference     `bson:",omitempty" json:"network,omitempty"`                 // Reference to the network that providing the type of coverage.
}

func (out *InsurancePlanCoverageBenefit) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["limit"]) > 0 {
		if err := go1.Unmarshal(asMap["limit"], &out.Limit); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["requirement"]) > 0 {
		if err := go1.Unmarshal(asMap["requirement"], &out.Requirement); err != nil {
			return err
		}

	}
	return nil
}

type InsurancePlanCoverageBenefit struct {
	Limit             *InsurancePlanCoverageBenefitLimit `binding:"omitempty" bson:",omitempty"`
	Id                *string                            `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                       `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                       `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type        *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // Type of benefit (primary care; speciality care; inpatient; outpatient).
	Requirement *string          `bson:",omitempty" json:"requirement,omitempty"`             // The referral requirements to have access/coverage for this benefit.
}

func (out *InsurancePlanCoverageBenefitLimit) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["value"]) > 0 {
		if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	return nil
}

type InsurancePlanCoverageBenefitLimit struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Value *Quantity        `bson:",omitempty" json:"value,omitempty"` // The maximum amount of a service item a plan will pay for a covered benefit.  For examples. wellness visits, or eyeglasses.
	Code  *CodeableConcept `bson:",omitempty" json:"code,omitempty"`  // The specific limit on the benefit.
}

func (out *InventoryItem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"InventoryItem\"" {
		return fmt.Errorf("resourceType is not %s", "InventoryItem")
	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["baseUnit"]) > 0 {
		if err := go1.Unmarshal(asMap["baseUnit"], &out.BaseUnit); err != nil {
			return err
		}

	}
	if len(asMap["productReference"]) > 0 {
		if err := go1.Unmarshal(asMap["productReference"], &out.ProductReference); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["responsibleOrganization"]) > 0 {
		if err := go1.Unmarshal(asMap["responsibleOrganization"], &out.ResponsibleOrganization); err != nil {
			return err
		}

	}
	if len(asMap["instance"]) > 0 {
		if err := go1.Unmarshal(asMap["instance"], &out.Instance); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["association"]) > 0 {
		if err := go1.Unmarshal(asMap["association"], &out.Association); err != nil {
			return err
		}

	}
	if len(asMap["characteristic"]) > 0 {
		if err := go1.Unmarshal(asMap["characteristic"], &out.Characteristic); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["inventoryStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["inventoryStatus"], &out.InventoryStatus); err != nil {
			return err
		}

	}
	if len(asMap["netContent"]) > 0 {
		if err := go1.Unmarshal(asMap["netContent"], &out.NetContent); err != nil {
			return err
		}

	}
	return nil
}

type InventoryItem struct {
	Language          *string                   `bson:",omitempty" json:"language,omitempty"` // The base language in which the resource is written.
	Description       *InventoryItemDescription `binding:"omitempty" bson:",omitempty"`
	BaseUnit          *CodeableConcept          `bson:",omitempty" json:"baseUnit,omitempty"`          // The base unit of measure - the unit in which the product is used or counted.
	ProductReference  *Reference                `bson:",omitempty" json:"productReference,omitempty"`  // Link to a product resource used in clinical workflows.
	ImplicitRules     *string                   `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained         []*Resource               `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension []*Extension              `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name                    *InventoryItemName                    `binding:"omitempty" bson:",omitempty"`
	ResponsibleOrganization *InventoryItemResponsibleOrganization `binding:"omitempty" bson:",omitempty"`
	Instance                *InventoryItemInstance                `binding:"omitempty" bson:",omitempty"`
	Text                    *Narrative                            `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Identifier              []*Identifier                         `bson:",omitempty" json:"identifier,omitempty"`                // Business identifier for the inventory item.
	Status                  *string                               `binding:"required" bson:",omitempty" json:"status,omitempty"` // Status of the item entry.
	Category                []*CodeableConcept                    `bson:",omitempty" json:"category,omitempty"`                  // Category or class of the item.
	Code                    []*CodeableConcept                    `bson:",omitempty" json:"code,omitempty"`                      // Code designating the specific type of item.
	Association             *InventoryItemAssociation             `binding:"omitempty" bson:",omitempty"`
	Characteristic          *InventoryItemCharacteristic          `binding:"omitempty" bson:",omitempty"`
	Id                      *primitive.ObjectID                   `bson:"_id,omitempty" json:"id,omitempty"`           // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta                    *Meta                                 `bson:",omitempty" json:"meta,omitempty"`            // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Extension               []*Extension                          `bson:",omitempty" json:"extension,omitempty"`       // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	InventoryStatus         []*CodeableConcept                    `bson:",omitempty" json:"inventoryStatus,omitempty"` // The usage status e.g. recalled, in use, discarded... This can be used to indicate that the items have been taken out of inventory, or are in use, etc.
	NetContent              *Quantity                             `bson:",omitempty" json:"netContent,omitempty"`      // Net content or amount present in the item.
	ResourceType            string                                `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *InventoryItemDescription) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	return nil
}

type InventoryItemDescription struct {
	Description       *string      `bson:",omitempty" json:"description,omitempty"`       // Textual description of the item.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Language *string `bson:",omitempty" json:"language,omitempty"` // The language for the item description, when an item must be described in different languages and those languages may be authoritative and not translations of a 'main' language.
}

func (out *InventoryItemName) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["nameType"], &out.NameType); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type InventoryItemName struct {
	NameType          *Coding      `binding:"required" bson:",omitempty" json:"nameType,omitempty"` // The type of name e.g. 'brand-name', 'functional-name', 'common-name'.
	Language          *string      `binding:"required" bson:",omitempty" json:"language,omitempty"` // The language that the item name is expressed in.
	Name              *string      `binding:"required" bson:",omitempty" json:"name,omitempty"`     // The name or designation that the item is given.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`           /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *InventoryItemResponsibleOrganization) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["organization"], &out.Organization); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type InventoryItemResponsibleOrganization struct {
	Role              *CodeableConcept `binding:"required" bson:",omitempty" json:"role,omitempty"`         // The role of the organization e.g. manufacturer, distributor, etc.
	Organization      *Reference       `binding:"required" bson:",omitempty" json:"organization,omitempty"` // An organization that has an association with the item, e.g. manufacturer, distributor, responsible, etc.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`                           // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`                       // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`               /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *InventoryItemInstance) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["lotNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["lotNumber"], &out.LotNumber); err != nil {
			return err
		}

	}
	if len(asMap["expiry"]) > 0 {
		if err := go1.Unmarshal(asMap["expiry"], &out.Expiry); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	return nil
}

type InventoryItemInstance struct {
	LotNumber         *string      `bson:",omitempty" json:"lotNumber,omitempty"`         // The lot or batch number of the item.
	Expiry            *DateTime    `bson:",omitempty" json:"expiry,omitempty"`            // The expiry date or date and time for the product.
	Subject           *Reference   `bson:",omitempty" json:"subject,omitempty"`           // The subject that the item is associated with.
	Location          *Reference   `bson:",omitempty" json:"location,omitempty"`          // The location that the item is associated with.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier []*Identifier `bson:",omitempty" json:"identifier,omitempty"` // The identifier for the physical instance, typically a serial number.
}

func (out *InventoryItemAssociation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["associationType"], &out.AssociationType); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["relatedItem"], &out.RelatedItem); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type InventoryItemAssociation struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	AssociationType *CodeableConcept `binding:"required" bson:",omitempty" json:"associationType,omitempty"` // This attribute defined the type of association when establishing associations or relations between items, e.g. 'packaged within' or 'used with' or 'to be mixed with.
	RelatedItem     *Reference       `binding:"required" bson:",omitempty" json:"relatedItem,omitempty"`     // The related item or product.
	Quantity        *Ratio           `binding:"required" bson:",omitempty" json:"quantity,omitempty"`        // The quantity of the related product in this product - Numerator is the quantity of the related product. Denominator is the quantity of the present product. For example a value of 20 means that this product contains 20 units of the related product; a value of 1:20 means the inverse - that the contained product contains 20 units of the present product.
	Id              *string          `bson:"_id,omitempty" json:"id,omitempty"`                              // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension       []*Extension     `bson:",omitempty" json:"extension,omitempty"`                          // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *InventoryItemCharacteristic) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["characteristicType"], &out.CharacteristicType); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDecimal"], &out.ValueDecimal); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUrl"], &out.ValueUrl); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDateTime"], &out.ValueDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRatio"], &out.ValueRatio); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAnnotation"], &out.ValueAnnotation); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAddress"], &out.ValueAddress); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDuration"], &out.ValueDuration); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type InventoryItemCharacteristic struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	CharacteristicType *CodeableConcept `binding:"required" bson:",omitempty" json:"characteristicType,omitempty"` // The type of characteristic that is being defined.
	InventoryItemCharacteristicValuex
	Id        *string      `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}
type InventoryItemCharacteristicValuex struct {
	ValueString          string          `bson:",omitempty" json:"valueString,omitempty"`
	ValueInteger         int             `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueDecimal         float64         `bson:",omitempty" json:"valueDecimal,omitempty"`
	ValueBoolean         bool            `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueUrl             url.URL         `bson:",omitempty" json:"valueUrl,omitempty"`
	ValueDateTime        DateTime        `bson:",omitempty" json:"valueDateTime,omitempty"`
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueRange           Range           `bson:",omitempty" json:"valueRange,omitempty"`
	ValueRatio           Ratio           `bson:",omitempty" json:"valueRatio,omitempty"`
	ValueAnnotation      Annotation      `bson:",omitempty" json:"valueAnnotation,omitempty"`
	ValueAddress         Address         `bson:",omitempty" json:"valueAddress,omitempty"`
	ValueDuration        Duration        `bson:",omitempty" json:"valueDuration,omitempty"`
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
}

func (out *InventoryReport) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"InventoryReport\"" {
		return fmt.Errorf("resourceType is not %s", "InventoryReport")
	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["operationType"]) > 0 {
		if err := go1.Unmarshal(asMap["operationType"], &out.OperationType); err != nil {
			return err
		}

	}
	if len(asMap["operationTypeReason"]) > 0 {
		if err := go1.Unmarshal(asMap["operationTypeReason"], &out.OperationTypeReason); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["countType"], &out.CountType); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["reportedDateTime"], &out.ReportedDateTime); err != nil {
		return err
	}

	if len(asMap["reporter"]) > 0 {
		if err := go1.Unmarshal(asMap["reporter"], &out.Reporter); err != nil {
			return err
		}

	}
	if len(asMap["reportingPeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["reportingPeriod"], &out.ReportingPeriod); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["inventoryListing"]) > 0 {
		if err := go1.Unmarshal(asMap["inventoryListing"], &out.InventoryListing); err != nil {
			return err
		}

	}
	return nil
}

type InventoryReport struct {
	Text                *Narrative          `bson:",omitempty" json:"text,omitempty"`                // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	OperationType       *CodeableConcept    `bson:",omitempty" json:"operationType,omitempty"`       // What type of operation is being performed - addition or subtraction.
	OperationTypeReason *CodeableConcept    `bson:",omitempty" json:"operationTypeReason,omitempty"` // The reason for this count - regular count, ad-hoc count, new arrivals, etc.
	ImplicitRules       *string             `bson:",omitempty" json:"implicitRules,omitempty"`       // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Identifier          []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`          // Business identifier for the InventoryReport.
	Id                  *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`               // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta                *Meta               `bson:",omitempty" json:"meta,omitempty"`                // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Extension           []*Extension        `bson:",omitempty" json:"extension,omitempty"`           // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension   []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"`   /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Status           *string                          `binding:"required" bson:",omitempty" json:"status,omitempty"`           // The status of the inventory check or notification - whether this is draft (e.g. the report is still pending some updates) or active.
	CountType        *string                          `binding:"required" bson:",omitempty" json:"countType,omitempty"`        // Whether the report is about the current inventory count (snapshot) or a differential change in inventory (change).
	ReportedDateTime *DateTime                        `binding:"required" bson:",omitempty" json:"reportedDateTime,omitempty"` // When the report has been submitted.
	Reporter         *Reference                       `bson:",omitempty" json:"reporter,omitempty"`                            // Who submits the report.
	ReportingPeriod  *Period                          `bson:",omitempty" json:"reportingPeriod,omitempty"`                     // The period the report refers to.
	Note             []*Annotation                    `bson:",omitempty" json:"note,omitempty"`                                // A note associated with the InventoryReport.
	Language         *string                          `bson:",omitempty" json:"language,omitempty"`                            // The base language in which the resource is written.
	Contained        []*Resource                      `bson:",omitempty" json:"contained,omitempty"`                           // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	InventoryListing *InventoryReportInventoryListing `binding:"omitempty" bson:",omitempty"`
	ResourceType     string                           `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *InventoryReportInventoryListing) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["item"]) > 0 {
		if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["itemStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["itemStatus"], &out.ItemStatus); err != nil {
			return err
		}

	}
	if len(asMap["countingDateTime"]) > 0 {
		if err := go1.Unmarshal(asMap["countingDateTime"], &out.CountingDateTime); err != nil {
			return err
		}

	}
	return nil
}

type InventoryReportInventoryListing struct {
	Item              *InventoryReportInventoryListingItem `binding:"omitempty" bson:",omitempty"`
	Id                *string                              `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                         `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Location         *Reference       `bson:",omitempty" json:"location,omitempty"`         // Location of the inventory items.
	ItemStatus       *CodeableConcept `bson:",omitempty" json:"itemStatus,omitempty"`       // The status of the items.
	CountingDateTime *DateTime        `bson:",omitempty" json:"countingDateTime,omitempty"` // The date and time when the items were counted.
}

func (out *InventoryReportInventoryListingItem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type InventoryReportInventoryListingItem struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Category  *CodeableConcept   `bson:",omitempty" json:"category,omitempty"`                    // The inventory category or classification of the items being reported. This is meant not for defining the product, but for inventory categories e.g. 'pending recount' or 'damaged'.
	Quantity  *Quantity          `binding:"required" bson:",omitempty" json:"quantity,omitempty"` // The quantity of the item or items being reported.
	Item      *CodeableReference `binding:"required" bson:",omitempty" json:"item,omitempty"`     // The code or reference to the item type.
	Id        *string            `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension       `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *Invoice) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Invoice\"" {
		return fmt.Errorf("resourceType is not %s", "Invoice")
	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["lineItem"]) > 0 {
		if err := go1.Unmarshal(asMap["lineItem"], &out.LineItem); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["cancelledReason"]) > 0 {
		if err := go1.Unmarshal(asMap["cancelledReason"], &out.CancelledReason); err != nil {
			return err
		}

	}
	if len(asMap["recipient"]) > 0 {
		if err := go1.Unmarshal(asMap["recipient"], &out.Recipient); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["periodDate"], &out.PeriodDate); err == nil {
	} else if err := go1.Unmarshal(asMap["periodPeriod"], &out.PeriodPeriod); err == nil {
	} else {

	}
	if len(asMap["issuer"]) > 0 {
		if err := go1.Unmarshal(asMap["issuer"], &out.Issuer); err != nil {
			return err
		}

	}
	if len(asMap["account"]) > 0 {
		if err := go1.Unmarshal(asMap["account"], &out.Account); err != nil {
			return err
		}

	}
	if len(asMap["totalGross"]) > 0 {
		if err := go1.Unmarshal(asMap["totalGross"], &out.TotalGross); err != nil {
			return err
		}

	}
	if len(asMap["paymentTerms"]) > 0 {
		if err := go1.Unmarshal(asMap["paymentTerms"], &out.PaymentTerms); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["creation"]) > 0 {
		if err := go1.Unmarshal(asMap["creation"], &out.Creation); err != nil {
			return err
		}

	}
	if len(asMap["participant"]) > 0 {
		if err := go1.Unmarshal(asMap["participant"], &out.Participant); err != nil {
			return err
		}

	}
	if len(asMap["totalPriceComponent"]) > 0 {
		if err := go1.Unmarshal(asMap["totalPriceComponent"], &out.TotalPriceComponent); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["totalNet"]) > 0 {
		if err := go1.Unmarshal(asMap["totalNet"], &out.TotalNet); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	return nil
}

type Invoice struct {
	Meta            *Meta               `bson:",omitempty" json:"meta,omitempty"`       // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Text            *Narrative          `bson:",omitempty" json:"text,omitempty"`       // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension       []*Extension        `bson:",omitempty" json:"extension,omitempty"`  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Identifier      []*Identifier       `bson:",omitempty" json:"identifier,omitempty"` // Identifier of this Invoice, often used for reference in correspondence about this invoice or for tracking of payments.
	LineItem        *InvoiceLineItem    `binding:"omitempty" bson:",omitempty"`
	Id              *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`           // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ImplicitRules   *string             `bson:",omitempty" json:"implicitRules,omitempty"`   // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	CancelledReason *string             `bson:",omitempty" json:"cancelledReason,omitempty"` // In case of Invoice cancellation a reason must be given (entered in error, superseded by corrected invoice etc.).
	Recipient       *Reference          `bson:",omitempty" json:"recipient,omitempty"`       // The individual or Organization responsible for balancing of this invoice.
	Date            *DateTime           `bson:",omitempty" json:"date,omitempty"`            // Depricared by the element below.
	InvoicePeriodx
	Issuer              *Reference           `bson:",omitempty" json:"issuer,omitempty"`       // The organizationissuing the Invoice.
	Account             *Reference           `bson:",omitempty" json:"account,omitempty"`      // Account which is supposed to be balanced with this Invoice.
	TotalGross          *Money               `bson:",omitempty" json:"totalGross,omitempty"`   // Invoice total, tax included.
	PaymentTerms        *string              `bson:",omitempty" json:"paymentTerms,omitempty"` // Payment details such as banking details, period of payment, deductibles, methods of payment.
	Contained           []*Resource          `bson:",omitempty" json:"contained,omitempty"`    // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Type                *CodeableConcept     `bson:",omitempty" json:"type,omitempty"`         // Type of Invoice depending on domain, realm an usage (e.g. internal/external, dental, preliminary).
	Creation            *DateTime            `bson:",omitempty" json:"creation,omitempty"`     // Date/time(s) of when this Invoice was posted.
	Participant         *InvoiceParticipant  `binding:"omitempty" bson:",omitempty"`
	TotalPriceComponent []*MonetaryComponent `bson:",omitempty" json:"totalPriceComponent,omitempty"` // The total amount for the Invoice may be calculated as the sum of the line items with surcharges/deductions that apply in certain conditions.  The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the total price was calculated.
	Language            *string              `bson:",omitempty" json:"language,omitempty"`            // The base language in which the resource is written.
	ModifierExtension   []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"`   /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Status       *string       `binding:"required" bson:",omitempty" json:"status,omitempty"` // The current state of the Invoice.
	Subject      *Reference    `bson:",omitempty" json:"subject,omitempty"`                   // The individual or set of individuals receiving the goods and services billed in this invoice.
	TotalNet     *Money        `bson:",omitempty" json:"totalNet,omitempty"`                  // Invoice total , taxes excluded.
	Note         []*Annotation `bson:",omitempty" json:"note,omitempty"`                      // Comments made about the invoice by the issuer, subject, or other participants.
	ResourceType string        `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *InvoiceLineItem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["priceComponent"]) > 0 {
		if err := go1.Unmarshal(asMap["priceComponent"], &out.PriceComponent); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["sequence"]) > 0 {
		if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["servicedDate"], &out.ServicedDate); err == nil {
	} else if err := go1.Unmarshal(asMap["servicedPeriod"], &out.ServicedPeriod); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["chargeItemReference"], &out.ChargeItemReference); err == nil {
	} else if err := go1.Unmarshal(asMap["chargeItemCodeableConcept"], &out.ChargeItemCodeableConcept); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "chargeItem[x]")
	}
	return nil
}

type InvoiceLineItem struct {
	PriceComponent    []*MonetaryComponent `bson:",omitempty" json:"priceComponent,omitempty"`    // The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice as to how the prices have been calculated.
	Id                *string              `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension         `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Sequence *int `bson:",omitempty" json:"sequence,omitempty"` // Sequence in which the items appear on the invoice.
	InvoiceLineItemServicedx
	InvoiceLineItemChargeItemx
}
type InvoiceLineItemServicedx struct {
	ServicedDate   Date   `bson:",omitempty" json:"servicedDate,omitempty"`
	ServicedPeriod Period `bson:",omitempty" json:"servicedPeriod,omitempty"`
}
type InvoiceLineItemChargeItemx struct {
	ChargeItemReference       Reference       `bson:",omitempty" json:"chargeItemReference,omitempty"`
	ChargeItemCodeableConcept CodeableConcept `bson:",omitempty" json:"chargeItemCodeableConcept,omitempty"`
}
type InvoicePeriodx struct {
	PeriodDate   Date   `bson:",omitempty" json:"periodDate,omitempty"`
	PeriodPeriod Period `bson:",omitempty" json:"periodPeriod,omitempty"`
}

func (out *InvoiceParticipant) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["role"]) > 0 {
		if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
		return err
	}

	return nil
}

type InvoiceParticipant struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Role  *CodeableConcept `bson:",omitempty" json:"role,omitempty"`                     // Describes the type of involvement (e.g. transcriptionist, creator etc.). If the invoice has been created automatically, the Participant may be a billing engine or another kind of device.
	Actor *Reference       `binding:"required" bson:",omitempty" json:"actor,omitempty"` // The device, practitioner, etc. who performed or participated in the service.
}

func (out *Library) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Library\"" {
		return fmt.Errorf("resourceType is not %s", "Library")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["endorser"]) > 0 {
		if err := go1.Unmarshal(asMap["endorser"], &out.Endorser); err != nil {
			return err
		}

	}
	if len(asMap["parameter"]) > 0 {
		if err := go1.Unmarshal(asMap["parameter"], &out.Parameter); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["topic"]) > 0 {
		if err := go1.Unmarshal(asMap["topic"], &out.Topic); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["editor"]) > 0 {
		if err := go1.Unmarshal(asMap["editor"], &out.Editor); err != nil {
			return err
		}

	}
	if len(asMap["dataRequirement"]) > 0 {
		if err := go1.Unmarshal(asMap["dataRequirement"], &out.DataRequirement); err != nil {
			return err
		}

	}
	if len(asMap["content"]) > 0 {
		if err := go1.Unmarshal(asMap["content"], &out.Content); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["usage"]) > 0 {
		if err := go1.Unmarshal(asMap["usage"], &out.Usage); err != nil {
			return err
		}

	}
	if len(asMap["approvalDate"]) > 0 {
		if err := go1.Unmarshal(asMap["approvalDate"], &out.ApprovalDate); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["lastReviewDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastReviewDate"], &out.LastReviewDate); err != nil {
			return err
		}

	}
	if len(asMap["reviewer"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewer"], &out.Reviewer); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["subtitle"]) > 0 {
		if err := go1.Unmarshal(asMap["subtitle"], &out.Subtitle); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subjectCodeableConcept"], &out.SubjectCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["subjectReference"], &out.SubjectReference); err == nil {
	} else {

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["effectivePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err != nil {
			return err
		}

	}
	if len(asMap["relatedArtifact"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedArtifact"], &out.RelatedArtifact); err != nil {
			return err
		}

	}
	return nil
}

type Library struct {
	Id                *primitive.ObjectID   `bson:"_id,omitempty" json:"id,omitempty"`                   // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Name              *string               `bson:",omitempty" json:"name,omitempty"`                    // A natural language name identifying the library. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Title             *string               `bson:",omitempty" json:"title,omitempty"`                   // A short, descriptive, user-friendly title for the library.
	Experimental      *bool                 `bson:",omitempty" json:"experimental,omitempty"`            // A Boolean value to indicate that this library is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Endorser          []*ContactDetail      `bson:",omitempty" json:"endorser,omitempty"`                // An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.
	Parameter         []ParameterDefinition `bson:",omitempty" json:"parameter,omitempty"`               // The parameter element defines parameters used by the library.
	Version           *string               `bson:",omitempty" json:"version,omitempty"`                 // The identifier that is used to identify this version of the library when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the library author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
	Type              *CodeableConcept      `binding:"required" bson:",omitempty" json:"type,omitempty"` // Identifies the type of library such as a Logic Library, Model Definition, Asset Collection, or Module Definition.
	Description       *string               `bson:",omitempty" json:"description,omitempty"`             // A free text natural language description of the library from a consumer's perspective.
	CopyrightLabel    *string               `bson:",omitempty" json:"copyrightLabel,omitempty"`          // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Topic             []*CodeableConcept    `bson:",omitempty" json:"topic,omitempty"`                   // Descriptive topics related to the content of the library. Topics provide a high-level categorization of the library that can be useful for filtering and searching.
	Author            []*ContactDetail      `bson:",omitempty" json:"author,omitempty"`                  // An individiual or organization primarily involved in the creation and maintenance of the content.
	Editor            []*ContactDetail      `bson:",omitempty" json:"editor,omitempty"`                  // An individual or organization primarily responsible for internal coherence of the content.
	DataRequirement   []*DataRequirement    `bson:",omitempty" json:"dataRequirement,omitempty"`         // Describes a set of data that must be provided in order to be able to successfully perform the computations defined by the library.
	Content           []*Attachment         `bson:",omitempty" json:"content,omitempty"`                 // The content of the library as an Attachment. The content may be a reference to a url, or may be directly embedded as a base-64 string. Either way, the contentType of the attachment determines how to interpret the content.
	Text              *Narrative            `bson:",omitempty" json:"text,omitempty"`                    // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension         []*Extension          `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension          `bson:",omitempty" json:"modifierExtension,omitempty"`       /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Url           *string `bson:",omitempty" json:"url,omitempty"`           // An absolute URI that is used to identify this library when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this library is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the library is stored on different servers.
	Publisher     *string `bson:",omitempty" json:"publisher,omitempty"`     // The name of the organization or individual responsible for the release and ongoing maintenance of the library.
	ImplicitRules *string `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	LibraryVersionAlgorithmx
	Status         *string          `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this library. Enables tracking the life-cycle of the content.
	Contact        []*ContactDetail `bson:",omitempty" json:"contact,omitempty"`                   // Contact details to assist a user in finding and communicating with the publisher.
	UseContext     []*UsageContext  `bson:",omitempty" json:"useContext,omitempty"`                // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate library instances.
	Usage          *string          `bson:",omitempty" json:"usage,omitempty"`                     // A detailed description of how the library is used from a clinical perspective.
	ApprovalDate   *Date            `bson:",omitempty" json:"approvalDate,omitempty"`              // The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
	Meta           *Meta            `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Identifier     []*Identifier    `bson:",omitempty" json:"identifier,omitempty"`                // A formal identifier that is used to identify this library when it is represented in other formats, or referenced in a specification, model, design or an instance. e.g. CMS or NQF identifiers for a measure artifact. Note that at least one identifier is required for non-experimental active artifacts.
	Date           *DateTime        `bson:",omitempty" json:"date,omitempty"`                      // The date  (and optionally time) when the library was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the library changes.
	LastReviewDate *Date            `bson:",omitempty" json:"lastReviewDate,omitempty"`            // The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
	Reviewer       []*ContactDetail `bson:",omitempty" json:"reviewer,omitempty"`                  // An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.
	Language       *string          `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Contained      []*Resource      `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Purpose        *string          `bson:",omitempty" json:"purpose,omitempty"`                   // Explanation of why this library is needed and why it has been designed as it has.
	Copyright      *string          `bson:",omitempty" json:"copyright,omitempty"`                 // A copyright statement relating to the library and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the library.
	Subtitle       *string          `bson:",omitempty" json:"subtitle,omitempty"`                  // An explanatory or alternate title for the library giving additional information about its content.
	LibrarySubjectx
	Jurisdiction    []*CodeableConcept `bson:",omitempty" json:"jurisdiction,omitempty"`    // A legal or geographic region in which the library is intended to be used.
	EffectivePeriod *Period            `bson:",omitempty" json:"effectivePeriod,omitempty"` // The period during which the library content was or is planned to be in active use.
	RelatedArtifact []*RelatedArtifact `bson:",omitempty" json:"relatedArtifact,omitempty"` // Related artifacts such as additional documentation, justification, or bibliographic references.
	ResourceType    string             `binding:"omitempty" bson:"-" json:"resourceType"`
}
type LibraryVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}
type LibrarySubjectx struct {
	SubjectCodeableConcept CodeableConcept `bson:",omitempty" json:"subjectCodeableConcept,omitempty"`
	SubjectReference       Reference       `bson:",omitempty" json:"subjectReference,omitempty"`
}

func (out *Linkage) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Linkage\"" {
		return fmt.Errorf("resourceType is not %s", "Linkage")
	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["active"]) > 0 {
		if err := go1.Unmarshal(asMap["active"], &out.Active); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	return nil
}

type Linkage struct {
	Meta              *Meta        `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language          *string      `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Text              *Narrative   `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained         []*Resource  `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Author        *Reference          `bson:",omitempty" json:"author,omitempty"` // Identifies the user or organization responsible for asserting the linkages as well as the user or organization who establishes the context in which the nature of each linkage is evaluated.
	Item          *LinkageItem        `binding:"omitempty" bson:",omitempty"`
	Id            *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`         // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Extension     []*Extension        `bson:",omitempty" json:"extension,omitempty"`     // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Active        *bool               `bson:",omitempty" json:"active,omitempty"`        // Indicates whether the asserted set of linkages are considered to be "in effect".
	ImplicitRules *string             `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ResourceType  string              `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *LinkageItem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["resource"], &out.Resource); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type LinkageItem struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type     *string    `binding:"required" bson:",omitempty" json:"type,omitempty"`     // Distinguishes which item is "source of truth" (if any) and which items are no longer considered to be current representations.
	Resource *Reference `binding:"required" bson:",omitempty" json:"resource,omitempty"` // The resource instance being linked as part of the group.
	Id       *string    `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *List) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"List\"" {
		return fmt.Errorf("resourceType is not %s", "List")
	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["emptyReason"]) > 0 {
		if err := go1.Unmarshal(asMap["emptyReason"], &out.EmptyReason); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["mode"], &out.Mode); err != nil {
		return err
	}

	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["entry"]) > 0 {
		if err := go1.Unmarshal(asMap["entry"], &out.Entry); err != nil {
			return err
		}

	}
	if len(asMap["orderedBy"]) > 0 {
		if err := go1.Unmarshal(asMap["orderedBy"], &out.OrderedBy); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["source"]) > 0 {
		if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	return nil
}

type List struct {
	ImplicitRules     *string             `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Date              *DateTime           `bson:",omitempty" json:"date,omitempty"`              // Date list was last reviewed/revised and determined to be 'current'.
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Identifier        []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`        // Identifier for the List assigned for business purposes outside the context of FHIR.
	EmptyReason       *CodeableConcept    `bson:",omitempty" json:"emptyReason,omitempty"`       // If the list is empty, why the list is empty.
	Text              *Narrative          `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Language          *string             `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Extension         []*Extension        `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Mode         *string          `binding:"required" bson:",omitempty" json:"mode,omitempty"` // How this list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
	Code         *CodeableConcept `bson:",omitempty" json:"code,omitempty"`                    // This code defines the purpose of the list - why it was created.
	Subject      []*Reference     `bson:",omitempty" json:"subject,omitempty"`                 // The common subject(s) (or patient(s)) of the resources that are in the list if there is one (or a set of subjects).
	Encounter    *Reference       `bson:",omitempty" json:"encounter,omitempty"`               // The encounter that is the context in which this list was created.
	Meta         *Meta            `bson:",omitempty" json:"meta,omitempty"`                    // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Entry        *ListEntry       `binding:"omitempty" bson:",omitempty"`
	OrderedBy    *CodeableConcept `bson:",omitempty" json:"orderedBy,omitempty"`                 // What order applies to the items in the list.
	Status       *string          `binding:"required" bson:",omitempty" json:"status,omitempty"` // Indicates the current state of this list.
	Title        *string          `bson:",omitempty" json:"title,omitempty"`                     // A label for the list assigned by the author.
	Source       *Reference       `bson:",omitempty" json:"source,omitempty"`                    // The entity responsible for deciding what the contents of the list were. Where the list was created by a human, this is the same as the author of the list.
	Note         []*Annotation    `bson:",omitempty" json:"note,omitempty"`                      // Comments that apply to the overall list.
	Contained    []*Resource      `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ResourceType string           `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ListEntry) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["flag"]) > 0 {
		if err := go1.Unmarshal(asMap["flag"], &out.Flag); err != nil {
			return err
		}

	}
	if len(asMap["deleted"]) > 0 {
		if err := go1.Unmarshal(asMap["deleted"], &out.Deleted); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ListEntry struct {
	Flag              *CodeableConcept `bson:",omitempty" json:"flag,omitempty"`                    // The flag allows the system constructing the list to indicate the role and significance of the item in the list.
	Deleted           *bool            `bson:",omitempty" json:"deleted,omitempty"`                 // True if this item is marked as deleted in the list.
	Date              *DateTime        `bson:",omitempty" json:"date,omitempty"`                    // When this item was added to the list.
	Item              *Reference       `binding:"required" bson:",omitempty" json:"item,omitempty"` // A reference to the actual resource from which data was derived.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`       /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *Location) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Location\"" {
		return fmt.Errorf("resourceType is not %s", "Location")
	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["managingOrganization"]) > 0 {
		if err := go1.Unmarshal(asMap["managingOrganization"], &out.ManagingOrganization); err != nil {
			return err
		}

	}
	if len(asMap["characteristic"]) > 0 {
		if err := go1.Unmarshal(asMap["characteristic"], &out.Characteristic); err != nil {
			return err
		}

	}
	if len(asMap["virtualService"]) > 0 {
		if err := go1.Unmarshal(asMap["virtualService"], &out.VirtualService); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["operationalStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["operationalStatus"], &out.OperationalStatus); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["position"]) > 0 {
		if err := go1.Unmarshal(asMap["position"], &out.Position); err != nil {
			return err
		}

	}
	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if len(asMap["hoursOfOperation"]) > 0 {
		if err := go1.Unmarshal(asMap["hoursOfOperation"], &out.HoursOfOperation); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["alias"]) > 0 {
		if err := go1.Unmarshal(asMap["alias"], &out.Alias); err != nil {
			return err
		}

	}
	if len(asMap["endpoint"]) > 0 {
		if err := go1.Unmarshal(asMap["endpoint"], &out.Endpoint); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["mode"]) > 0 {
		if err := go1.Unmarshal(asMap["mode"], &out.Mode); err != nil {
			return err
		}

	}
	if len(asMap["address"]) > 0 {
		if err := go1.Unmarshal(asMap["address"], &out.Address); err != nil {
			return err
		}

	}
	if len(asMap["form"]) > 0 {
		if err := go1.Unmarshal(asMap["form"], &out.Form); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	return nil
}

type Location struct {
	Description          *string                  `bson:",omitempty" json:"description,omitempty"`          // Description of the Location, which helps in finding or referencing the place.
	ManagingOrganization *Reference               `bson:",omitempty" json:"managingOrganization,omitempty"` // The organization responsible for the provisioning and upkeep of the location.
	Characteristic       []*CodeableConcept       `bson:",omitempty" json:"characteristic,omitempty"`       // Collection of characteristics (attributes).
	VirtualService       []*VirtualServiceDetail  `bson:",omitempty" json:"virtualService,omitempty"`       // Connection details of a virtual service (e.g. shared conference call facility with dedicated number/details).
	Meta                 *Meta                    `bson:",omitempty" json:"meta,omitempty"`                 // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Extension            []*Extension             `bson:",omitempty" json:"extension,omitempty"`            // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	OperationalStatus    *Coding                  `bson:",omitempty" json:"operationalStatus,omitempty"`    // The operational status covers operation values most relevant to beds (but can also apply to rooms/units/chairs/etc. such as an isolation unit/dialysis chair). This typically covers concepts such as contamination, housekeeping, and other activities like maintenance.
	Contact              []*ExtendedContactDetail `bson:",omitempty" json:"contact,omitempty"`              // The contact details of communication devices available at the location. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.
	Position             *LocationPosition        `binding:"omitempty" bson:",omitempty"`
	PartOf               *Reference               `bson:",omitempty" json:"partOf,omitempty"`            // Another Location of which this Location is physically a part of.
	HoursOfOperation     []*Availability          `bson:",omitempty" json:"hoursOfOperation,omitempty"`  // What days/times during a week is this location usually open, and any exceptions where the location is not available.
	Id                   *primitive.ObjectID      `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ImplicitRules        *string                  `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Type                 []*CodeableConcept       `bson:",omitempty" json:"type,omitempty"`              // Indicates the type of function performed at the location.
	Alias                []*string                `bson:",omitempty" json:"alias,omitempty"`             // A list of alternate names that the location is known as, or was known as, in the past.
	Endpoint             []*Reference             `bson:",omitempty" json:"endpoint,omitempty"`          // Technical endpoints providing access to services operated for the location.
	Language             *string                  `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	ModifierExtension    []*Extension             `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier   []*Identifier    `bson:",omitempty" json:"identifier,omitempty"` // Unique code or number identifying the location to its users.
	Name         *string          `bson:",omitempty" json:"name,omitempty"`       // Name of the location as used by humans. Does not need to be unique.
	Mode         *string          `bson:",omitempty" json:"mode,omitempty"`       // Indicates whether a resource instance represents a specific location or a class of locations.
	Address      *Address         `bson:",omitempty" json:"address,omitempty"`    // Physical location.
	Form         *CodeableConcept `bson:",omitempty" json:"form,omitempty"`       // Physical form of the location, e.g. building, room, vehicle, road, virtual.
	Text         *Narrative       `bson:",omitempty" json:"text,omitempty"`       // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained    []*Resource      `bson:",omitempty" json:"contained,omitempty"`  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Status       *string          `bson:",omitempty" json:"status,omitempty"`     // The status property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location.
	ResourceType string           `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *LocationPosition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["longitude"], &out.Longitude); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["latitude"], &out.Latitude); err != nil {
		return err
	}

	if len(asMap["altitude"]) > 0 {
		if err := go1.Unmarshal(asMap["altitude"], &out.Altitude); err != nil {
			return err
		}

	}
	return nil
}

type LocationPosition struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Longitude *float64 `binding:"required" bson:",omitempty" json:"longitude,omitempty"` // Longitude. The value domain and the interpretation are the same as for the text of the longitude element in KML (see notes on Location main page).
	Latitude  *float64 `binding:"required" bson:",omitempty" json:"latitude,omitempty"`  // Latitude. The value domain and the interpretation are the same as for the text of the latitude element in KML (see notes on Location main page).
	Altitude  *float64 `bson:",omitempty" json:"altitude,omitempty"`                     // Altitude. The value domain and the interpretation are the same as for the text of the altitude element in KML (see notes on Location main page).
}

func (out *ManufacturedItemDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ManufacturedItemDefinition\"" {
		return fmt.Errorf("resourceType is not %s", "ManufacturedItemDefinition")
	}
	if len(asMap["manufacturer"]) > 0 {
		if err := go1.Unmarshal(asMap["manufacturer"], &out.Manufacturer); err != nil {
			return err
		}

	}
	if len(asMap["ingredient"]) > 0 {
		if err := go1.Unmarshal(asMap["ingredient"], &out.Ingredient); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["manufacturedDoseForm"], &out.ManufacturedDoseForm); err != nil {
		return err
	}

	if len(asMap["unitOfPresentation"]) > 0 {
		if err := go1.Unmarshal(asMap["unitOfPresentation"], &out.UnitOfPresentation); err != nil {
			return err
		}

	}
	if len(asMap["marketingStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["marketingStatus"], &out.MarketingStatus); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["property"]) > 0 {
		if err := go1.Unmarshal(asMap["property"], &out.Property); err != nil {
			return err
		}

	}
	if len(asMap["component"]) > 0 {
		if err := go1.Unmarshal(asMap["component"], &out.Component); err != nil {
			return err
		}

	}
	return nil
}

type ManufacturedItemDefinition struct {
	Manufacturer      []*Reference        `bson:",omitempty" json:"manufacturer,omitempty"`      // Manufacturer of the item, one of several possible.
	Ingredient        []*CodeableConcept  `bson:",omitempty" json:"ingredient,omitempty"`        // The ingredients of this manufactured item. This is only needed if the ingredients are not specified by incoming references from the Ingredient resource.
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ImplicitRules     *string             `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language          *string             `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Text              *Narrative          `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier           []*Identifier                        `bson:",omitempty" json:"identifier,omitempty"`                              // Unique identifier.
	Status               *string                              `binding:"required" bson:",omitempty" json:"status,omitempty"`               // The status of this item. Enables tracking the life-cycle of the content.
	ManufacturedDoseForm *CodeableConcept                     `binding:"required" bson:",omitempty" json:"manufacturedDoseForm,omitempty"` // Dose form as manufactured and before any transformation into the pharmaceutical product.
	UnitOfPresentation   *CodeableConcept                     `bson:",omitempty" json:"unitOfPresentation,omitempty"`                      // The “real-world” units in which the quantity of the manufactured item is described.
	MarketingStatus      []MarketingStatus                    `bson:",omitempty" json:"marketingStatus,omitempty"`                         // Allows specifying that an item is on the market for sale, or that it is not available, and the dates and locations associated.
	Meta                 *Meta                                `bson:",omitempty" json:"meta,omitempty"`                                    // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Contained            []*Resource                          `bson:",omitempty" json:"contained,omitempty"`                               // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension            []*Extension                         `bson:",omitempty" json:"extension,omitempty"`                               // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Name                 *string                              `bson:",omitempty" json:"name,omitempty"`                                    // A descriptive name applied to this item.
	Property             *ManufacturedItemDefinitionProperty  `binding:"omitempty" bson:",omitempty"`
	Component            *ManufacturedItemDefinitionComponent `binding:"omitempty" bson:",omitempty"`
	ResourceType         string                               `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ManufacturedItemDefinitionProperty) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDate"], &out.ValueDate); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueMarkdown"], &out.ValueMarkdown); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["valueReference"], &out.ValueReference); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ManufacturedItemDefinitionProperty struct {
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // A code expressing the type of characteristic.
	ManufacturedItemDefinitionPropertyValuex
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type ManufacturedItemDefinitionPropertyValuex struct {
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueDate            Date            `bson:",omitempty" json:"valueDate,omitempty"`
	ValueBoolean         bool            `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueMarkdown        string          `bson:",omitempty" json:"valueMarkdown,omitempty"`
	ValueAttachment      Attachment      `bson:",omitempty" json:"valueAttachment,omitempty"`
	ValueReference       Reference       `bson:",omitempty" json:"valueReference,omitempty"`
}

func (out *ManufacturedItemDefinitionComponent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["amount"]) > 0 {
		if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
			return err
		}

	}
	if len(asMap["constituent"]) > 0 {
		if err := go1.Unmarshal(asMap["constituent"], &out.Constituent); err != nil {
			return err
		}

	}
	if len(asMap["property"]) > 0 {
		if err := go1.Unmarshal(asMap["property"], &out.Property); err != nil {
			return err
		}

	}
	if len(asMap["component"]) > 0 {
		if err := go1.Unmarshal(asMap["component"], &out.Component); err != nil {
			return err
		}

	}
	return nil
}

type ManufacturedItemDefinitionComponent struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Function    []*CodeableConcept                              `bson:",omitempty" json:"function,omitempty"`                // The function of this component within the item e.g. delivers active ingredient, masks taste.
	Id          *string                                         `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension   []*Extension                                    `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Type        *CodeableConcept                                `binding:"required" bson:",omitempty" json:"type,omitempty"` // Defining type of the component e.g. shell, layer, ink.
	Amount      []*Quantity                                     `bson:",omitempty" json:"amount,omitempty"`                  // The measurable amount of total quantity of all substances in the component, expressable in different ways (e.g. by mass or volume).
	Constituent *ManufacturedItemDefinitionComponentConstituent `binding:"omitempty" bson:",omitempty"`
	Property    interface{}
	Component   interface{}
}

func (out *ManufacturedItemDefinitionComponentConstituent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	if len(asMap["hasIngredient"]) > 0 {
		if err := go1.Unmarshal(asMap["hasIngredient"], &out.HasIngredient); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["amount"]) > 0 {
		if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	return nil
}

type ManufacturedItemDefinitionComponentConstituent struct {
	Function          []*CodeableConcept   `bson:",omitempty" json:"function,omitempty"`          // The function of this constituent within the component e.g. binder.
	HasIngredient     []*CodeableReference `bson:",omitempty" json:"hasIngredient,omitempty"`     // The ingredient that is the constituent of the given component.
	Id                *string              `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension         `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Amount   []*Quantity        `bson:",omitempty" json:"amount,omitempty"`   // The measurable amount of the substance, expressable in different ways (e.g. by mass or volume).
	Location []*CodeableConcept `bson:",omitempty" json:"location,omitempty"` // The physical location of the constituent/ingredient within the component. Example – if the component is the bead in the capsule, then the location would be where the ingredient resides within the product part – intragranular, extra-granular, etc.
}

func (out *Measure) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Measure\"" {
		return fmt.Errorf("resourceType is not %s", "Measure")
	}
	if len(asMap["usage"]) > 0 {
		if err := go1.Unmarshal(asMap["usage"], &out.Usage); err != nil {
			return err
		}

	}
	if len(asMap["editor"]) > 0 {
		if err := go1.Unmarshal(asMap["editor"], &out.Editor); err != nil {
			return err
		}

	}
	if len(asMap["scoring"]) > 0 {
		if err := go1.Unmarshal(asMap["scoring"], &out.Scoring); err != nil {
			return err
		}

	}
	if len(asMap["term"]) > 0 {
		if err := go1.Unmarshal(asMap["term"], &out.Term); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["disclaimer"]) > 0 {
		if err := go1.Unmarshal(asMap["disclaimer"], &out.Disclaimer); err != nil {
			return err
		}

	}
	if len(asMap["riskAdjustment"]) > 0 {
		if err := go1.Unmarshal(asMap["riskAdjustment"], &out.RiskAdjustment); err != nil {
			return err
		}

	}
	if len(asMap["rationale"]) > 0 {
		if err := go1.Unmarshal(asMap["rationale"], &out.Rationale); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["scoringUnit"]) > 0 {
		if err := go1.Unmarshal(asMap["scoringUnit"], &out.ScoringUnit); err != nil {
			return err
		}

	}
	if len(asMap["compositeScoring"]) > 0 {
		if err := go1.Unmarshal(asMap["compositeScoring"], &out.CompositeScoring); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["library"]) > 0 {
		if err := go1.Unmarshal(asMap["library"], &out.Library); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subjectCodeableConcept"], &out.SubjectCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["subjectReference"], &out.SubjectReference); err == nil {
	} else {

	}
	if len(asMap["relatedArtifact"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedArtifact"], &out.RelatedArtifact); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["approvalDate"]) > 0 {
		if err := go1.Unmarshal(asMap["approvalDate"], &out.ApprovalDate); err != nil {
			return err
		}

	}
	if len(asMap["topic"]) > 0 {
		if err := go1.Unmarshal(asMap["topic"], &out.Topic); err != nil {
			return err
		}

	}
	if len(asMap["subtitle"]) > 0 {
		if err := go1.Unmarshal(asMap["subtitle"], &out.Subtitle); err != nil {
			return err
		}

	}
	if len(asMap["lastReviewDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastReviewDate"], &out.LastReviewDate); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["guidance"]) > 0 {
		if err := go1.Unmarshal(asMap["guidance"], &out.Guidance); err != nil {
			return err
		}

	}
	if len(asMap["group"]) > 0 {
		if err := go1.Unmarshal(asMap["group"], &out.Group); err != nil {
			return err
		}

	}
	if len(asMap["clinicalRecommendationStatement"]) > 0 {
		if err := go1.Unmarshal(asMap["clinicalRecommendationStatement"], &out.ClinicalRecommendationStatement); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["supplementalData"]) > 0 {
		if err := go1.Unmarshal(asMap["supplementalData"], &out.SupplementalData); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["reviewer"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewer"], &out.Reviewer); err != nil {
			return err
		}

	}
	if len(asMap["rateAggregation"]) > 0 {
		if err := go1.Unmarshal(asMap["rateAggregation"], &out.RateAggregation); err != nil {
			return err
		}

	}
	if len(asMap["basis"]) > 0 {
		if err := go1.Unmarshal(asMap["basis"], &out.Basis); err != nil {
			return err
		}

	}
	if len(asMap["effectivePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err != nil {
			return err
		}

	}
	if len(asMap["endorser"]) > 0 {
		if err := go1.Unmarshal(asMap["endorser"], &out.Endorser); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["improvementNotation"]) > 0 {
		if err := go1.Unmarshal(asMap["improvementNotation"], &out.ImprovementNotation); err != nil {
			return err
		}

	}
	return nil
}

type Measure struct {
	Usage          *string          `bson:",omitempty" json:"usage,omitempty"`   // A detailed description, from a clinical perspective, of how the measure is used.
	Editor         []*ContactDetail `bson:",omitempty" json:"editor,omitempty"`  // An individual or organization primarily responsible for internal coherence of the content.
	Scoring        *CodeableConcept `bson:",omitempty" json:"scoring,omitempty"` // Indicates how the calculation is performed for the measure, including proportion, ratio, continuous-variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented.
	Term           *MeasureTerm     `binding:"omitempty" bson:",omitempty"`
	Status         *string          `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this measure. Enables tracking the life-cycle of the content.
	Disclaimer     *string          `bson:",omitempty" json:"disclaimer,omitempty"`                // Notices and disclaimers regarding the use of the measure or related to intellectual property (such as code systems) referenced by the measure.
	RiskAdjustment *string          `bson:",omitempty" json:"riskAdjustment,omitempty"`            // A description of the risk adjustment factors that may impact the resulting score for the measure and how they may be accounted for when computing and reporting measure results.
	Rationale      *string          `bson:",omitempty" json:"rationale,omitempty"`                 // Provides a succinct statement of the need for the measure. Usually includes statements pertaining to importance criterion: impact, gap in care, and evidence.
	Purpose        *string          `bson:",omitempty" json:"purpose,omitempty"`                   // Explanation of why this measure is needed and why it has been designed as it has.
	Description    *string          `bson:",omitempty" json:"description,omitempty"`               // A free text natural language description of the measure from a consumer's perspective.
	UseContext     []*UsageContext  `bson:",omitempty" json:"useContext,omitempty"`                // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate measure instances.
	ImplicitRules  *string          `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text           *Narrative       `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Identifier     []*Identifier    `bson:",omitempty" json:"identifier,omitempty"`                // A formal identifier that is used to identify this measure when it is represented in other formats, or referenced in a specification, model, design or an instance.
	MeasureVersionAlgorithmx
	ScoringUnit      *CodeableConcept   `bson:",omitempty" json:"scoringUnit,omitempty"`      // Defines the expected units of measure for the measure score. This element SHOULD be specified as a UCUM unit.
	CompositeScoring *CodeableConcept   `bson:",omitempty" json:"compositeScoring,omitempty"` // If this is a composite measure, the scoring method used to combine the component measures to determine the composite score.
	Jurisdiction     []*CodeableConcept `bson:",omitempty" json:"jurisdiction,omitempty"`     // A legal or geographic region in which the measure is intended to be used.
	Library          []*string          `bson:",omitempty" json:"library,omitempty"`          // A reference to a Library resource containing the formal logic used by the measure.
	MeasureSubjectx
	RelatedArtifact   []*RelatedArtifact  `bson:",omitempty" json:"relatedArtifact,omitempty"`   // Related artifacts such as additional documentation, justification, or bibliographic references.
	Publisher         *string             `bson:",omitempty" json:"publisher,omitempty"`         // The name of the organization or individual responsible for the release and ongoing maintenance of the measure.
	Name              *string             `bson:",omitempty" json:"name,omitempty"`              // A natural language name identifying the measure. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Author            []*ContactDetail    `bson:",omitempty" json:"author,omitempty"`            // An individiual or organization primarily involved in the creation and maintenance of the content.
	Version           *string             `bson:",omitempty" json:"version,omitempty"`           // The identifier that is used to identify this version of the measure when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the measure author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
	Date              *DateTime           `bson:",omitempty" json:"date,omitempty"`              // The date  (and optionally time) when the measure was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the measure changes.
	CopyrightLabel    *string             `bson:",omitempty" json:"copyrightLabel,omitempty"`    // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Meta              *Meta               `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Url               *string             `bson:",omitempty" json:"url,omitempty"`               // An absolute URI that is used to identify this measure when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this measure is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the measure is stored on different servers.
	Title             *string             `bson:",omitempty" json:"title,omitempty"`             // A short, descriptive, user-friendly title for the measure.
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Contained         []*Resource         `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension         []*Extension        `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Contact                         []*ContactDetail         `bson:",omitempty" json:"contact,omitempty"`        // Contact details to assist a user in finding and communicating with the publisher.
	ApprovalDate                    *Date                    `bson:",omitempty" json:"approvalDate,omitempty"`   // The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
	Topic                           []*CodeableConcept       `bson:",omitempty" json:"topic,omitempty"`          // Descriptive topics related to the content of the measure. Topics provide a high-level categorization grouping types of measures that can be useful for filtering and searching.
	Subtitle                        *string                  `bson:",omitempty" json:"subtitle,omitempty"`       // An explanatory or alternate title for the measure giving additional information about its content.
	LastReviewDate                  *Date                    `bson:",omitempty" json:"lastReviewDate,omitempty"` // The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
	Language                        *string                  `bson:",omitempty" json:"language,omitempty"`       // The base language in which the resource is written.
	Guidance                        *string                  `bson:",omitempty" json:"guidance,omitempty"`       // Additional guidance for the measure including how it can be used in a clinical context, and the intent of the measure.
	Group                           *MeasureGroup            `binding:"omitempty" bson:",omitempty"`
	ClinicalRecommendationStatement *string                  `bson:",omitempty" json:"clinicalRecommendationStatement,omitempty"` // Provides a summary of relevant clinical guidelines or other clinical recommendations supporting the measure.
	Copyright                       *string                  `bson:",omitempty" json:"copyright,omitempty"`                       // A copyright statement relating to the measure and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the measure.
	SupplementalData                *MeasureSupplementalData `binding:"omitempty" bson:",omitempty"`
	Experimental                    *bool                    `bson:",omitempty" json:"experimental,omitempty"`        // A Boolean value to indicate that this measure is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Reviewer                        []*ContactDetail         `bson:",omitempty" json:"reviewer,omitempty"`            // An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.
	RateAggregation                 *string                  `bson:",omitempty" json:"rateAggregation,omitempty"`     // Describes how to combine the information calculated, based on logic in each of several populations, into one summarized result.
	Basis                           *string                  `bson:",omitempty" json:"basis,omitempty"`               // The population basis specifies the type of elements in the population. For a subject-based measure, this is boolean (because the subject and the population basis are the same, and the population criteria define yes/no values for each individual in the population). For measures that have a population basis that is different than the subject, this element specifies the type of the population basis. For example, an encounter-based measure has a subject of Patient and a population basis of Encounter, and the population criteria all return lists of Encounters.
	EffectivePeriod                 *Period                  `bson:",omitempty" json:"effectivePeriod,omitempty"`     // The period during which the measure content was or is planned to be in active use.
	Endorser                        []*ContactDetail         `bson:",omitempty" json:"endorser,omitempty"`            // An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.
	Type                            []*CodeableConcept       `bson:",omitempty" json:"type,omitempty"`                // Indicates whether the measure is used to examine a process, an outcome over time, a patient-reported outcome, or a structure measure such as utilization.
	ImprovementNotation             *CodeableConcept         `bson:",omitempty" json:"improvementNotation,omitempty"` // Information on whether an increase or decrease in score is the preferred result (e.g., a higher score indicates better quality OR a lower score indicates better quality OR quality is within a range).
	ResourceType                    string                   `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *MeasureTerm) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["definition"]) > 0 {
		if err := go1.Unmarshal(asMap["definition"], &out.Definition); err != nil {
			return err
		}

	}
	return nil
}

type MeasureTerm struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code       *CodeableConcept `bson:",omitempty" json:"code,omitempty"`       // A codeable representation of the defined term.
	Definition *string          `bson:",omitempty" json:"definition,omitempty"` // Provides a definition for the term as used within the measure.
}
type MeasureVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}
type MeasureSubjectx struct {
	SubjectCodeableConcept CodeableConcept `bson:",omitempty" json:"subjectCodeableConcept,omitempty"`
	SubjectReference       Reference       `bson:",omitempty" json:"subjectReference,omitempty"`
}

func (out *MeasureGroup) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["basis"]) > 0 {
		if err := go1.Unmarshal(asMap["basis"], &out.Basis); err != nil {
			return err
		}

	}
	if len(asMap["scoringUnit"]) > 0 {
		if err := go1.Unmarshal(asMap["scoringUnit"], &out.ScoringUnit); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["scoring"]) > 0 {
		if err := go1.Unmarshal(asMap["scoring"], &out.Scoring); err != nil {
			return err
		}

	}
	if len(asMap["rateAggregation"]) > 0 {
		if err := go1.Unmarshal(asMap["rateAggregation"], &out.RateAggregation); err != nil {
			return err
		}

	}
	if len(asMap["improvementNotation"]) > 0 {
		if err := go1.Unmarshal(asMap["improvementNotation"], &out.ImprovementNotation); err != nil {
			return err
		}

	}
	if len(asMap["population"]) > 0 {
		if err := go1.Unmarshal(asMap["population"], &out.Population); err != nil {
			return err
		}

	}
	if len(asMap["linkId"]) > 0 {
		if err := go1.Unmarshal(asMap["linkId"], &out.LinkId); err != nil {
			return err
		}

	}
	if len(asMap["library"]) > 0 {
		if err := go1.Unmarshal(asMap["library"], &out.Library); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subjectCodeableConcept"], &out.SubjectCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["subjectReference"], &out.SubjectReference); err == nil {
	} else {

	}
	if len(asMap["stratifier"]) > 0 {
		if err := go1.Unmarshal(asMap["stratifier"], &out.Stratifier); err != nil {
			return err
		}

	}
	return nil
}

type MeasureGroup struct {
	Extension           []*Extension            `bson:",omitempty" json:"extension,omitempty"`           // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Basis               *string                 `bson:",omitempty" json:"basis,omitempty"`               // The population basis specifies the type of elements in the population. For a subject-based measure, this is boolean (because the subject and the population basis are the same, and the population criteria define yes/no values for each individual in the population). For measures that have a population basis that is different than the subject, this element specifies the type of the population basis. For example, an encounter-based measure has a subject of Patient and a population basis of Encounter, and the population criteria all return lists of Encounters.
	ScoringUnit         *CodeableConcept        `bson:",omitempty" json:"scoringUnit,omitempty"`         // Defines the expected units of measure for the measure score. This element SHOULD be specified as a UCUM unit.
	Code                *CodeableConcept        `bson:",omitempty" json:"code,omitempty"`                // Indicates a meaning for the group. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing groups to be correlated across measures.
	Description         *string                 `bson:",omitempty" json:"description,omitempty"`         // The human readable description of this population group.
	Type                []*CodeableConcept      `bson:",omitempty" json:"type,omitempty"`                // Indicates whether the measure is used to examine a process, an outcome over time, a patient-reported outcome, or a structure measure such as utilization.
	Scoring             *CodeableConcept        `bson:",omitempty" json:"scoring,omitempty"`             // Indicates how the calculation is performed for the measure, including proportion, ratio, continuous-variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented.
	RateAggregation     *string                 `bson:",omitempty" json:"rateAggregation,omitempty"`     // Describes how to combine the information calculated, based on logic in each of several populations, into one summarized result.
	ImprovementNotation *CodeableConcept        `bson:",omitempty" json:"improvementNotation,omitempty"` // Information on whether an increase or decrease in score is the preferred result (e.g., a higher score indicates better quality OR a lower score indicates better quality OR quality is within a range).
	Population          *MeasureGroupPopulation `binding:"omitempty" bson:",omitempty"`
	LinkId              *string                 `bson:",omitempty" json:"linkId,omitempty"`            // An identifier that is unique within the Measure allowing linkage to the equivalent item in a MeasureReport resource.
	Library             []*string               `bson:",omitempty" json:"library,omitempty"`           // A reference to a Library resource containing the formal logic used by the measure group.
	Id                  *string                 `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension   []*Extension            `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	MeasureGroupSubjectx
	Stratifier *MeasureGroupStratifier `binding:"omitempty" bson:",omitempty"`
}

func (out *MeasureGroupPopulation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["criteria"]) > 0 {
		if err := go1.Unmarshal(asMap["criteria"], &out.Criteria); err != nil {
			return err
		}

	}
	if len(asMap["aggregateMethod"]) > 0 {
		if err := go1.Unmarshal(asMap["aggregateMethod"], &out.AggregateMethod); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["linkId"]) > 0 {
		if err := go1.Unmarshal(asMap["linkId"], &out.LinkId); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["groupDefinition"]) > 0 {
		if err := go1.Unmarshal(asMap["groupDefinition"], &out.GroupDefinition); err != nil {
			return err
		}

	}
	if len(asMap["inputPopulationId"]) > 0 {
		if err := go1.Unmarshal(asMap["inputPopulationId"], &out.InputPopulationId); err != nil {
			return err
		}

	}
	return nil
}

type MeasureGroupPopulation struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Criteria          *Expression      `bson:",omitempty" json:"criteria,omitempty"`          // An expression that specifies the criteria for the population, typically the name of an expression in a library.
	AggregateMethod   *CodeableConcept `bson:",omitempty" json:"aggregateMethod,omitempty"`   // Specifies which method should be used to aggregate measure observation values. For most scoring types, this is implied by scoring (e.g. a proportion measure counts members of the populations). For continuous variables, however, this information must be specified to ensure correct calculation.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	LinkId            *string          `bson:",omitempty" json:"linkId,omitempty"`            // An identifier that is unique within the Measure allowing linkage to the equivalent population in a MeasureReport resource.
	Code              *CodeableConcept `bson:",omitempty" json:"code,omitempty"`              // The type of population criteria.
	Description       *string          `bson:",omitempty" json:"description,omitempty"`       // The human readable description of this population criteria.
	GroupDefinition   *Reference       `bson:",omitempty" json:"groupDefinition,omitempty"`   // A Group resource that defines this population as a set of characteristics.
	InputPopulationId *string          `bson:",omitempty" json:"inputPopulationId,omitempty"` // The id of a population element in this measure that provides the input for this population criteria. In most cases, the scoring structure of the measure implies specific relationships (e.g. the Numerator uses the Denominator as the source in a proportion scoring). In some cases, however, multiple possible choices exist and must be resolved explicitly. For example in a ratio measure with multiple initial populations, the denominator must specify which population should be used as the starting point.
}
type MeasureGroupSubjectx struct {
	SubjectCodeableConcept CodeableConcept `bson:",omitempty" json:"subjectCodeableConcept,omitempty"`
	SubjectReference       Reference       `bson:",omitempty" json:"subjectReference,omitempty"`
}

func (out *MeasureGroupStratifier) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["criteria"]) > 0 {
		if err := go1.Unmarshal(asMap["criteria"], &out.Criteria); err != nil {
			return err
		}

	}
	if len(asMap["component"]) > 0 {
		if err := go1.Unmarshal(asMap["component"], &out.Component); err != nil {
			return err
		}

	}
	if len(asMap["groupDefinition"]) > 0 {
		if err := go1.Unmarshal(asMap["groupDefinition"], &out.GroupDefinition); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["linkId"]) > 0 {
		if err := go1.Unmarshal(asMap["linkId"], &out.LinkId); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	return nil
}

type MeasureGroupStratifier struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Criteria        *Expression                      `bson:",omitempty" json:"criteria,omitempty"` // An expression that specifies the criteria for the stratifier. This is typically the name of an expression defined within a referenced library, but it may also be a path to a stratifier element.
	Component       *MeasureGroupStratifierComponent `binding:"omitempty" bson:",omitempty"`
	GroupDefinition *Reference                       `bson:",omitempty" json:"groupDefinition,omitempty"` // A Group resource that defines this population as a set of characteristics.
	Id              *string                          `bson:"_id,omitempty" json:"id,omitempty"`           // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension       []*Extension                     `bson:",omitempty" json:"extension,omitempty"`       // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	LinkId          *string                          `bson:",omitempty" json:"linkId,omitempty"`          // An identifier that is unique within the Measure allowing linkage to the equivalent item in a MeasureReport resource.
	Code            *CodeableConcept                 `bson:",omitempty" json:"code,omitempty"`            // Indicates a meaning for the stratifier. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing stratifiers to be correlated across measures.
	Description     *string                          `bson:",omitempty" json:"description,omitempty"`     // The human readable description of this stratifier criteria.
}

func (out *MeasureGroupStratifierComponent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["criteria"]) > 0 {
		if err := go1.Unmarshal(asMap["criteria"], &out.Criteria); err != nil {
			return err
		}

	}
	if len(asMap["groupDefinition"]) > 0 {
		if err := go1.Unmarshal(asMap["groupDefinition"], &out.GroupDefinition); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["linkId"]) > 0 {
		if err := go1.Unmarshal(asMap["linkId"], &out.LinkId); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	return nil
}

type MeasureGroupStratifierComponent struct {
	Description       *string      `bson:",omitempty" json:"description,omitempty"`       // The human readable description of this stratifier criteria component.
	Criteria          *Expression  `bson:",omitempty" json:"criteria,omitempty"`          // An expression that specifies the criteria for this component of the stratifier. This is typically the name of an expression defined within a referenced library, but it may also be a path to a stratifier element.
	GroupDefinition   *Reference   `bson:",omitempty" json:"groupDefinition,omitempty"`   // A Group resource that defines this population as a set of characteristics.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	LinkId *string          `bson:",omitempty" json:"linkId,omitempty"` // An identifier that is unique within the Measure allowing linkage to the equivalent item in a MeasureReport resource.
	Code   *CodeableConcept `bson:",omitempty" json:"code,omitempty"`   // Indicates a meaning for the stratifier component. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing stratifiers to be correlated across measures.
}

func (out *MeasureSupplementalData) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["linkId"]) > 0 {
		if err := go1.Unmarshal(asMap["linkId"], &out.LinkId); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["usage"]) > 0 {
		if err := go1.Unmarshal(asMap["usage"], &out.Usage); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["criteria"], &out.Criteria); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type MeasureSupplementalData struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	LinkId      *string            `bson:",omitempty" json:"linkId,omitempty"`                      // An identifier that is unique within the Measure allowing linkage to the equivalent item in a MeasureReport resource.
	Code        *CodeableConcept   `bson:",omitempty" json:"code,omitempty"`                        // Indicates a meaning for the supplemental data. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing supplemental data to be correlated across measures.
	Usage       []*CodeableConcept `bson:",omitempty" json:"usage,omitempty"`                       // An indicator of the intended usage for the supplemental data element. Supplemental data indicates the data is additional information requested to augment the measure information. Risk adjustment factor indicates the data is additional information used to calculate risk adjustment factors when applying a risk model to the measure calculation.
	Description *string            `bson:",omitempty" json:"description,omitempty"`                 // The human readable description of this supplemental data.
	Criteria    *Expression        `binding:"required" bson:",omitempty" json:"criteria,omitempty"` // The criteria for the supplemental data. This is typically the name of a valid expression defined within a referenced library, but it may also be a path to a specific data element. The criteria defines the data to be returned for this element.
	Id          *string            `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *MeasureReport) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"MeasureReport\"" {
		return fmt.Errorf("resourceType is not %s", "MeasureReport")
	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["reportingVendor"]) > 0 {
		if err := go1.Unmarshal(asMap["reportingVendor"], &out.ReportingVendor); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
		return err
	}

	if len(asMap["scoring"]) > 0 {
		if err := go1.Unmarshal(asMap["scoring"], &out.Scoring); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["measure"]) > 0 {
		if err := go1.Unmarshal(asMap["measure"], &out.Measure); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["group"]) > 0 {
		if err := go1.Unmarshal(asMap["group"], &out.Group); err != nil {
			return err
		}

	}
	if len(asMap["inputParameters"]) > 0 {
		if err := go1.Unmarshal(asMap["inputParameters"], &out.InputParameters); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["dataUpdateType"]) > 0 {
		if err := go1.Unmarshal(asMap["dataUpdateType"], &out.DataUpdateType); err != nil {
			return err
		}

	}
	if len(asMap["supplementalData"]) > 0 {
		if err := go1.Unmarshal(asMap["supplementalData"], &out.SupplementalData); err != nil {
			return err
		}

	}
	if len(asMap["evaluatedResource"]) > 0 {
		if err := go1.Unmarshal(asMap["evaluatedResource"], &out.EvaluatedResource); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["reporter"]) > 0 {
		if err := go1.Unmarshal(asMap["reporter"], &out.Reporter); err != nil {
			return err
		}

	}
	if len(asMap["improvementNotation"]) > 0 {
		if err := go1.Unmarshal(asMap["improvementNotation"], &out.ImprovementNotation); err != nil {
			return err
		}

	}
	return nil
}

type MeasureReport struct {
	Subject           *Reference   `bson:",omitempty" json:"subject,omitempty"`           // Optional subject identifying the individual or individuals the report is for.
	ImplicitRules     *string      `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained         []*Resource  `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Status              *string             `binding:"required" bson:",omitempty" json:"status,omitempty"` // The MeasureReport status. No data will be available until the MeasureReport status is complete.
	ReportingVendor     *Reference          `bson:",omitempty" json:"reportingVendor,omitempty"`           // A reference to the vendor who queried the data, calculated results and/or generated the report. The ‘reporting vendor’ is intended to represent the submitting entity when it is not the same as the reporting entity. This extension is used when the Receiver is interested in getting vendor information in the report.
	Location            *Reference          `bson:",omitempty" json:"location,omitempty"`                  // A reference to the location for which the data is being reported.
	Period              *Period             `binding:"required" bson:",omitempty" json:"period,omitempty"` // The reporting period for which the report was calculated.
	Scoring             *CodeableConcept    `bson:",omitempty" json:"scoring,omitempty"`                   // Indicates how the calculation is performed for the measure, including proportion, ratio, continuous-variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented. It is expected to be the same as the scoring element on the referenced Measure.
	Id                  *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Text                *Narrative          `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Measure             *string             `bson:",omitempty" json:"measure,omitempty"`                   // A reference to the Measure that was calculated to produce this report.
	Date                *DateTime           `bson:",omitempty" json:"date,omitempty"`                      // The date this measure was calculated.
	Group               *MeasureReportGroup `binding:"omitempty" bson:",omitempty"`
	InputParameters     *Reference          `bson:",omitempty" json:"inputParameters,omitempty"`         // A reference to a Parameters resource (typically represented using a contained resource) that represents any input parameters that were provided to the operation that generated the report.
	Meta                *Meta               `bson:",omitempty" json:"meta,omitempty"`                    // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Extension           []*Extension        `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Type                *string             `binding:"required" bson:",omitempty" json:"type,omitempty"` // The type of measure report. This may be an individual report, which provides the score for the measure for an individual member of the population; a subject-listing, which returns the list of members that meet the various criteria in the measure; a summary report, which returns a population count for each of the criteria in the measure; or a data-collection, which enables the MeasureReport to be used to exchange the data-of-interest for a quality measure.
	DataUpdateType      *string             `bson:",omitempty" json:"dataUpdateType,omitempty"`          // Indicates whether the data submitted in a data-exchange report represents a snapshot or incremental update. A snapshot update replaces all previously submitted data for the receiver, whereas an incremental update represents only updated and/or changed data and should be applied as a differential update to the existing submitted data for the receiver.
	SupplementalData    []*Reference        `bson:",omitempty" json:"supplementalData,omitempty"`        // A reference to a Resource that represents additional information collected for the report. If the value of the supplemental data is not a Resource (i.e. evaluating the supplementalData expression for this case in the measure results in a value that is not a FHIR Resource), it is reported as a reference to a contained Observation resource.
	EvaluatedResource   []*Reference        `bson:",omitempty" json:"evaluatedResource,omitempty"`       // Evaluated resources are used to capture what data was involved in the calculation of a measure. This usage is only allowed for individual reports to ensure that the size of the MeasureReport resource is bounded.
	Language            *string             `bson:",omitempty" json:"language,omitempty"`                // The base language in which the resource is written.
	Identifier          []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`              // A formal identifier that is used to identify this MeasureReport when it is represented in other formats or referenced in a specification, model, design or an instance.
	Reporter            *Reference          `bson:",omitempty" json:"reporter,omitempty"`                // The individual or organization that is reporting the data.
	ImprovementNotation *CodeableConcept    `bson:",omitempty" json:"improvementNotation,omitempty"`     // Whether improvement in the measure is noted by an increase or decrease in the measure score.
	ResourceType        string              `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *MeasureReportGroup) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["population"]) > 0 {
		if err := go1.Unmarshal(asMap["population"], &out.Population); err != nil {
			return err
		}

	}
	if len(asMap["stratifier"]) > 0 {
		if err := go1.Unmarshal(asMap["stratifier"], &out.Stratifier); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["measureScoreQuantity"], &out.MeasureScoreQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["measureScoreDateTime"], &out.MeasureScoreDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["measureScoreCodeableConcept"], &out.MeasureScoreCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["measureScorePeriod"], &out.MeasureScorePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["measureScoreRange"], &out.MeasureScoreRange); err == nil {
	} else if err := go1.Unmarshal(asMap["measureScoreDuration"], &out.MeasureScoreDuration); err == nil {
	} else {

	}
	if len(asMap["linkId"]) > 0 {
		if err := go1.Unmarshal(asMap["linkId"], &out.LinkId); err != nil {
			return err
		}

	}
	return nil
}

type MeasureReportGroup struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Subject    *Reference                    `bson:",omitempty" json:"subject,omitempty"` // Optional subject identifying the individual or individuals the report is for.
	Population *MeasureReportGroupPopulation `binding:"omitempty" bson:",omitempty"`
	Stratifier *MeasureReportGroupStratifier `binding:"omitempty" bson:",omitempty"`
	Id         *string                       `bson:"_id,omitempty" json:"id,omitempty"` // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Code       *CodeableConcept              `bson:",omitempty" json:"code,omitempty"`  // The meaning of the population group as defined in the measure definition.
	MeasureReportGroupMeasureScorex
	LinkId *string `bson:",omitempty" json:"linkId,omitempty"` // The group from the Measure that corresponds to this group in the MeasureReport resource.
}

func (out *MeasureReportGroupPopulation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["linkId"]) > 0 {
		if err := go1.Unmarshal(asMap["linkId"], &out.LinkId); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["count"]) > 0 {
		if err := go1.Unmarshal(asMap["count"], &out.Count); err != nil {
			return err
		}

	}
	if len(asMap["subjectResults"]) > 0 {
		if err := go1.Unmarshal(asMap["subjectResults"], &out.SubjectResults); err != nil {
			return err
		}

	}
	if len(asMap["subjects"]) > 0 {
		if err := go1.Unmarshal(asMap["subjects"], &out.Subjects); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["subjectReport"]) > 0 {
		if err := go1.Unmarshal(asMap["subjectReport"], &out.SubjectReport); err != nil {
			return err
		}

	}
	return nil
}

type MeasureReportGroupPopulation struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	LinkId         *string          `bson:",omitempty" json:"linkId,omitempty"`         // The population from the Measure that corresponds to this population in the MeasureReport resource.
	Code           *CodeableConcept `bson:",omitempty" json:"code,omitempty"`           // The type of the population.
	Count          *int             `bson:",omitempty" json:"count,omitempty"`          // The number of members of the population.
	SubjectResults *Reference       `bson:",omitempty" json:"subjectResults,omitempty"` // This element refers to a List of individual level MeasureReport resources, one for each subject in this population.
	Subjects       *Reference       `bson:",omitempty" json:"subjects,omitempty"`       // Optional Group identifying the individuals that make up the population.
	Extension      []*Extension     `bson:",omitempty" json:"extension,omitempty"`      // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	SubjectReport  []*Reference     `bson:",omitempty" json:"subjectReport,omitempty"`  // A reference to an individual level MeasureReport resource for a member of the population.
}

func (out *MeasureReportGroupStratifier) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["linkId"]) > 0 {
		if err := go1.Unmarshal(asMap["linkId"], &out.LinkId); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["stratum"]) > 0 {
		if err := go1.Unmarshal(asMap["stratum"], &out.Stratum); err != nil {
			return err
		}

	}
	return nil
}

type MeasureReportGroupStratifier struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	LinkId  *string                              `bson:",omitempty" json:"linkId,omitempty"` // The stratifier from the Measure that corresponds to this stratifier in the MeasureReport resource.
	Code    *CodeableConcept                     `bson:",omitempty" json:"code,omitempty"`   // The meaning of this stratifier, as defined in the measure definition.
	Stratum *MeasureReportGroupStratifierStratum `binding:"omitempty" bson:",omitempty"`
}

func (out *MeasureReportGroupStratifierStratum) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueReference"], &out.ValueReference); err == nil {
	} else {

	}
	if len(asMap["component"]) > 0 {
		if err := go1.Unmarshal(asMap["component"], &out.Component); err != nil {
			return err
		}

	}
	if len(asMap["population"]) > 0 {
		if err := go1.Unmarshal(asMap["population"], &out.Population); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["measureScoreQuantity"], &out.MeasureScoreQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["measureScoreDateTime"], &out.MeasureScoreDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["measureScoreCodeableConcept"], &out.MeasureScoreCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["measureScorePeriod"], &out.MeasureScorePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["measureScoreRange"], &out.MeasureScoreRange); err == nil {
	} else if err := go1.Unmarshal(asMap["measureScoreDuration"], &out.MeasureScoreDuration); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type MeasureReportGroupStratifierStratum struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	MeasureReportGroupStratifierStratumValuex
	Component  *MeasureReportGroupStratifierStratumComponent  `binding:"omitempty" bson:",omitempty"`
	Population *MeasureReportGroupStratifierStratumPopulation `binding:"omitempty" bson:",omitempty"`
	MeasureReportGroupStratifierStratumMeasureScorex
	Id *string `bson:"_id,omitempty" json:"id,omitempty"` // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}
type MeasureReportGroupStratifierStratumValuex struct {
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueBoolean         bool            `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueRange           Range           `bson:",omitempty" json:"valueRange,omitempty"`
	ValueReference       Reference       `bson:",omitempty" json:"valueReference,omitempty"`
}

func (out *MeasureReportGroupStratifierStratumComponent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["linkId"]) > 0 {
		if err := go1.Unmarshal(asMap["linkId"], &out.LinkId); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueReference"], &out.ValueReference); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	return nil
}

type MeasureReportGroupStratifierStratumComponent struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	LinkId *string          `bson:",omitempty" json:"linkId,omitempty"`                  // The stratifier component from the Measure that corresponds to this stratifier component in the MeasureReport resource.
	Code   *CodeableConcept `binding:"required" bson:",omitempty" json:"code,omitempty"` // The code for the stratum component value.
	MeasureReportGroupStratifierStratumComponentValuex
}
type MeasureReportGroupStratifierStratumComponentValuex struct {
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueBoolean         bool            `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueRange           Range           `bson:",omitempty" json:"valueRange,omitempty"`
	ValueReference       Reference       `bson:",omitempty" json:"valueReference,omitempty"`
}

func (out *MeasureReportGroupStratifierStratumPopulation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["subjects"]) > 0 {
		if err := go1.Unmarshal(asMap["subjects"], &out.Subjects); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["linkId"]) > 0 {
		if err := go1.Unmarshal(asMap["linkId"], &out.LinkId); err != nil {
			return err
		}

	}
	if len(asMap["count"]) > 0 {
		if err := go1.Unmarshal(asMap["count"], &out.Count); err != nil {
			return err
		}

	}
	if len(asMap["subjectResults"]) > 0 {
		if err := go1.Unmarshal(asMap["subjectResults"], &out.SubjectResults); err != nil {
			return err
		}

	}
	if len(asMap["subjectReport"]) > 0 {
		if err := go1.Unmarshal(asMap["subjectReport"], &out.SubjectReport); err != nil {
			return err
		}

	}
	return nil
}

type MeasureReportGroupStratifierStratumPopulation struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code           *CodeableConcept `bson:",omitempty" json:"code,omitempty"`           // The type of the population.
	Subjects       *Reference       `bson:",omitempty" json:"subjects,omitempty"`       // Optional Group identifying the individuals that make up the population.
	Id             *string          `bson:"_id,omitempty" json:"id,omitempty"`          // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	LinkId         *string          `bson:",omitempty" json:"linkId,omitempty"`         // The population from the Measure that corresponds to this population in the MeasureReport resource.
	Count          *int             `bson:",omitempty" json:"count,omitempty"`          // The number of members of the population in this stratum.
	SubjectResults *Reference       `bson:",omitempty" json:"subjectResults,omitempty"` // This element refers to a List of individual level MeasureReport resources, one for each subject in this population in this stratum.
	SubjectReport  []*Reference     `bson:",omitempty" json:"subjectReport,omitempty"`  // A reference to an individual level MeasureReport resource for a member of the population.
}
type MeasureReportGroupStratifierStratumMeasureScorex struct {
	MeasureScoreQuantity        Quantity        `bson:",omitempty" json:"measureScoreQuantity,omitempty"`
	MeasureScoreDateTime        DateTime        `bson:",omitempty" json:"measureScoreDateTime,omitempty"`
	MeasureScoreCodeableConcept CodeableConcept `bson:",omitempty" json:"measureScoreCodeableConcept,omitempty"`
	MeasureScorePeriod          Period          `bson:",omitempty" json:"measureScorePeriod,omitempty"`
	MeasureScoreRange           Range           `bson:",omitempty" json:"measureScoreRange,omitempty"`
	MeasureScoreDuration        Duration        `bson:",omitempty" json:"measureScoreDuration,omitempty"`
}
type MeasureReportGroupMeasureScorex struct {
	MeasureScoreQuantity        Quantity        `bson:",omitempty" json:"measureScoreQuantity,omitempty"`
	MeasureScoreDateTime        DateTime        `bson:",omitempty" json:"measureScoreDateTime,omitempty"`
	MeasureScoreCodeableConcept CodeableConcept `bson:",omitempty" json:"measureScoreCodeableConcept,omitempty"`
	MeasureScorePeriod          Period          `bson:",omitempty" json:"measureScorePeriod,omitempty"`
	MeasureScoreRange           Range           `bson:",omitempty" json:"measureScoreRange,omitempty"`
	MeasureScoreDuration        Duration        `bson:",omitempty" json:"measureScoreDuration,omitempty"`
}

func (out *Medication) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Medication\"" {
		return fmt.Errorf("resourceType is not %s", "Medication")
	}
	if len(asMap["marketingAuthorizationHolder"]) > 0 {
		if err := go1.Unmarshal(asMap["marketingAuthorizationHolder"], &out.MarketingAuthorizationHolder); err != nil {
			return err
		}

	}
	if len(asMap["totalVolume"]) > 0 {
		if err := go1.Unmarshal(asMap["totalVolume"], &out.TotalVolume); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["doseForm"]) > 0 {
		if err := go1.Unmarshal(asMap["doseForm"], &out.DoseForm); err != nil {
			return err
		}

	}
	if len(asMap["definition"]) > 0 {
		if err := go1.Unmarshal(asMap["definition"], &out.Definition); err != nil {
			return err
		}

	}
	if len(asMap["batch"]) > 0 {
		if err := go1.Unmarshal(asMap["batch"], &out.Batch); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["ingredient"]) > 0 {
		if err := go1.Unmarshal(asMap["ingredient"], &out.Ingredient); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type Medication struct {
	MarketingAuthorizationHolder *Reference            `bson:",omitempty" json:"marketingAuthorizationHolder,omitempty"` // The company or other legal entity that has authorization, from the appropriate drug regulatory authority,  to market a medicine in one or more jurisdictions.  Typically abbreviated MAH.Note:  The MAH may manufacture the product and may also contract the manufacturing of the product to one or more companies (organizations).
	TotalVolume                  *Quantity             `bson:",omitempty" json:"totalVolume,omitempty"`                  // When the specified product code does not infer a package size, this is the specific amount of drug in the product.  For example, when specifying a product that has the same strength (For example, Insulin glargine 100 unit per mL solution for injection), this attribute provides additional clarification of the package amount (For example, 3 mL, 10mL, etc.).
	Contained                    []*Resource           `bson:",omitempty" json:"contained,omitempty"`                    // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	DoseForm                     *CodeableConcept      `bson:",omitempty" json:"doseForm,omitempty"`                     // Describes the form of the item.  Powder; tablets; capsule.
	Definition                   *Reference            `bson:",omitempty" json:"definition,omitempty"`                   // A reference to a knowledge resource that provides more information about this medication.
	Batch                        *MedicationBatch      `binding:"omitempty" bson:",omitempty"`
	Meta                         *Meta                 `bson:",omitempty" json:"meta,omitempty"`       // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Extension                    []*Extension          `bson:",omitempty" json:"extension,omitempty"`  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Identifier                   []*Identifier         `bson:",omitempty" json:"identifier,omitempty"` // Business identifier for this medication.
	Code                         *CodeableConcept      `bson:",omitempty" json:"code,omitempty"`       // A code (or set of codes) that specify this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
	Status                       *string               `bson:",omitempty" json:"status,omitempty"`     // A code to indicate if the medication is in active use.
	Ingredient                   *MedicationIngredient `binding:"omitempty" bson:",omitempty"`
	Id                           *primitive.ObjectID   `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ImplicitRules                *string               `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language                     *string               `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Text                         *Narrative            `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ModifierExtension            []*Extension          `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ResourceType string `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *MedicationBatch) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["lotNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["lotNumber"], &out.LotNumber); err != nil {
			return err
		}

	}
	if len(asMap["expirationDate"]) > 0 {
		if err := go1.Unmarshal(asMap["expirationDate"], &out.ExpirationDate); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type MedicationBatch struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	LotNumber      *string      `bson:",omitempty" json:"lotNumber,omitempty"`      // The assigned lot number of a batch of the specified product.
	ExpirationDate *DateTime    `bson:",omitempty" json:"expirationDate,omitempty"` // When this specific batch of product will expire.
	Id             *string      `bson:"_id,omitempty" json:"id,omitempty"`          // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension      []*Extension `bson:",omitempty" json:"extension,omitempty"`      // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *MedicationIngredient) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
		return err
	}

	if len(asMap["isActive"]) > 0 {
		if err := go1.Unmarshal(asMap["isActive"], &out.IsActive); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["strengthRatio"], &out.StrengthRatio); err == nil {
	} else if err := go1.Unmarshal(asMap["strengthCodeableConcept"], &out.StrengthCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["strengthQuantity"], &out.StrengthQuantity); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type MedicationIngredient struct {
	Item     *CodeableReference `binding:"required" bson:",omitempty" json:"item,omitempty"` // The ingredient (substance or medication) that the ingredient.strength relates to.  This is represented as a concept from a code system or described in another resource (Substance or Medication).
	IsActive *bool              `bson:",omitempty" json:"isActive,omitempty"`                // Indication of whether this ingredient affects the therapeutic action of the drug.
	MedicationIngredientStrengthx
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type MedicationIngredientStrengthx struct {
	StrengthRatio           Ratio           `bson:",omitempty" json:"strengthRatio,omitempty"`
	StrengthCodeableConcept CodeableConcept `bson:",omitempty" json:"strengthCodeableConcept,omitempty"`
	StrengthQuantity        Quantity        `bson:",omitempty" json:"strengthQuantity,omitempty"`
}

func (out *MedicationAdministration) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"MedicationAdministration\"" {
		return fmt.Errorf("resourceType is not %s", "MedicationAdministration")
	}
	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["subPotentReason"]) > 0 {
		if err := go1.Unmarshal(asMap["subPotentReason"], &out.SubPotentReason); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["device"]) > 0 {
		if err := go1.Unmarshal(asMap["device"], &out.Device); err != nil {
			return err
		}

	}
	if len(asMap["eventHistory"]) > 0 {
		if err := go1.Unmarshal(asMap["eventHistory"], &out.EventHistory); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["medication"], &out.Medication); err != nil {
		return err
	}

	if len(asMap["isSubPotent"]) > 0 {
		if err := go1.Unmarshal(asMap["isSubPotent"], &out.IsSubPotent); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["occurenceDateTime"], &out.OccurenceDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["occurencePeriod"], &out.OccurencePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["occurenceTiming"], &out.OccurenceTiming); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "occurence[x]")
	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["statusReason"]) > 0 {
		if err := go1.Unmarshal(asMap["statusReason"], &out.StatusReason); err != nil {
			return err
		}

	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["request"]) > 0 {
		if err := go1.Unmarshal(asMap["request"], &out.Request); err != nil {
			return err
		}

	}
	if len(asMap["dosage"]) > 0 {
		if err := go1.Unmarshal(asMap["dosage"], &out.Dosage); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if len(asMap["supportingInformation"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInformation"], &out.SupportingInformation); err != nil {
			return err
		}

	}
	if len(asMap["recorded"]) > 0 {
		if err := go1.Unmarshal(asMap["recorded"], &out.Recorded); err != nil {
			return err
		}

	}
	return nil
}

type MedicationAdministration struct {
	PartOf          []*Reference         `bson:",omitempty" json:"partOf,omitempty"`                        // A larger event of which this particular event is a component or step.
	Contained       []*Resource          `bson:",omitempty" json:"contained,omitempty"`                     // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	SubPotentReason []*CodeableConcept   `bson:",omitempty" json:"subPotentReason,omitempty"`               // The reason or reasons why the full dose was not administered.
	Reason          []*CodeableReference `bson:",omitempty" json:"reason,omitempty"`                        // A code, Condition or observation that supports why the medication was administered.
	Device          []*CodeableReference `bson:",omitempty" json:"device,omitempty"`                        // The device that is to be used for the administration of the medication (for example, PCA Pump).
	EventHistory    []*Reference         `bson:",omitempty" json:"eventHistory,omitempty"`                  // A summary of the events of interest that have occurred, such as when the administration was verified.
	Identifier      []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`                    // Identifiers associated with this Medication Administration that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
	BasedOn         []*Reference         `bson:",omitempty" json:"basedOn,omitempty"`                       // A plan that is fulfilled in whole or in part by this MedicationAdministration.
	Medication      *CodeableReference   `binding:"required" bson:",omitempty" json:"medication,omitempty"` // Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
	IsSubPotent     *bool                `bson:",omitempty" json:"isSubPotent,omitempty"`                   // An indication that the full dose was not administered.
	Id              *primitive.ObjectID  `bson:"_id,omitempty" json:"id,omitempty"`                         // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Status          *string              `binding:"required" bson:",omitempty" json:"status,omitempty"`     // Will generally be set to show that the administration has been completed.  For some long running administrations such as infusions, it is possible for an administration to be started but not completed or it may be paused while some other process is under way.
	MedicationAdministrationOccurencex
	Note              []*Annotation `bson:",omitempty" json:"note,omitempty"`              // Extra information about the medication administration that is not conveyed by the other attributes.
	Extension         []*Extension  `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension  `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	StatusReason          []*CodeableConcept                 `bson:",omitempty" json:"statusReason,omitempty"` // A code indicating why the administration was not performed.
	Performer             *MedicationAdministrationPerformer `binding:"omitempty" bson:",omitempty"`
	Category              []*CodeableConcept                 `bson:",omitempty" json:"category,omitempty"` // The type of medication administration (for example, drug classification like ATC, where meds would be administered, legal category of the medication).
	Request               *Reference                         `bson:",omitempty" json:"request,omitempty"`  // The original request, instruction or authority to perform the administration.
	Dosage                *MedicationAdministrationDosage    `binding:"omitempty" bson:",omitempty"`
	Meta                  *Meta                              `bson:",omitempty" json:"meta,omitempty"`                       // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Text                  *Narrative                         `bson:",omitempty" json:"text,omitempty"`                       // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Encounter             *Reference                         `bson:",omitempty" json:"encounter,omitempty"`                  // The visit, admission, or other contact between patient and health care provider during which the medication administration was performed.
	ImplicitRules         *string                            `bson:",omitempty" json:"implicitRules,omitempty"`              // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language              *string                            `bson:",omitempty" json:"language,omitempty"`                   // The base language in which the resource is written.
	Subject               *Reference                         `binding:"required" bson:",omitempty" json:"subject,omitempty"` // The person or animal or group receiving the medication.
	SupportingInformation []*Reference                       `bson:",omitempty" json:"supportingInformation,omitempty"`      // Additional information (for example, patient height and weight) that supports the administration of the medication.  This attribute can be used to provide documentation of specific characteristics of the patient present at the time of administration.  For example, if the dose says "give "x" if the heartrate exceeds "y"", then the heart rate can be included using this attribute.
	Recorded              *DateTime                          `bson:",omitempty" json:"recorded,omitempty"`                   // The date the occurrence of the  MedicationAdministration was first captured in the record - potentially significantly after the occurrence of the event.
	ResourceType          string                             `binding:"omitempty" bson:"-" json:"resourceType"`
}
type MedicationAdministrationOccurencex struct {
	OccurenceDateTime DateTime `bson:",omitempty" json:"occurenceDateTime,omitempty"`
	OccurencePeriod   Period   `bson:",omitempty" json:"occurencePeriod,omitempty"`
	OccurenceTiming   Timing   `bson:",omitempty" json:"occurenceTiming,omitempty"`
}

func (out *MedicationAdministrationPerformer) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type MedicationAdministrationPerformer struct {
	Function          *CodeableConcept   `bson:",omitempty" json:"function,omitempty"`                 // Distinguishes the type of involvement of the performer in the medication administration.
	Actor             *CodeableReference `binding:"required" bson:",omitempty" json:"actor,omitempty"` // Indicates who or what performed the medication administration.
	Id                *string            `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension       `bson:",omitempty" json:"extension,omitempty"`                // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"`        /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *MedicationAdministrationDosage) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["site"]) > 0 {
		if err := go1.Unmarshal(asMap["site"], &out.Site); err != nil {
			return err
		}

	}
	if len(asMap["dose"]) > 0 {
		if err := go1.Unmarshal(asMap["dose"], &out.Dose); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["rateRatio"], &out.RateRatio); err == nil {
	} else if err := go1.Unmarshal(asMap["rateQuantity"], &out.RateQuantity); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["route"]) > 0 {
		if err := go1.Unmarshal(asMap["route"], &out.Route); err != nil {
			return err
		}

	}
	if len(asMap["method"]) > 0 {
		if err := go1.Unmarshal(asMap["method"], &out.Method); err != nil {
			return err
		}

	}
	return nil
}

type MedicationAdministrationDosage struct {
	Extension []*Extension     `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Site      *CodeableConcept `bson:",omitempty" json:"site,omitempty"`      // A coded specification of the anatomic site where the medication first entered the body.  For example, "left arm".
	Dose      *Quantity        `bson:",omitempty" json:"dose,omitempty"`      // The amount of the medication given at one administration event.   Use this value when the administration is essentially an instantaneous event such as a swallowing a tablet or giving an injection.
	MedicationAdministrationDosageRatex
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Text   *string          `bson:",omitempty" json:"text,omitempty"`   // Free text dosage can be used for cases where the dosage administered is too complex to code. When coded dosage is present, the free text dosage may still be present for display to humans.The dosage instructions should reflect the dosage of the medication that was administered.
	Route  *CodeableConcept `bson:",omitempty" json:"route,omitempty"`  // A code specifying the route or physiological path of administration of a therapeutic agent into or onto the patient.  For example, topical, intravenous, etc.
	Method *CodeableConcept `bson:",omitempty" json:"method,omitempty"` // A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV.
}
type MedicationAdministrationDosageRatex struct {
	RateRatio    Ratio    `bson:",omitempty" json:"rateRatio,omitempty"`
	RateQuantity Quantity `bson:",omitempty" json:"rateQuantity,omitempty"`
}

func (out *MedicationDispense) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"MedicationDispense\"" {
		return fmt.Errorf("resourceType is not %s", "MedicationDispense")
	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if len(asMap["whenPrepared"]) > 0 {
		if err := go1.Unmarshal(asMap["whenPrepared"], &out.WhenPrepared); err != nil {
			return err
		}

	}
	if len(asMap["whenHandedOver"]) > 0 {
		if err := go1.Unmarshal(asMap["whenHandedOver"], &out.WhenHandedOver); err != nil {
			return err
		}

	}
	if len(asMap["renderedDosageInstruction"]) > 0 {
		if err := go1.Unmarshal(asMap["renderedDosageInstruction"], &out.RenderedDosageInstruction); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["notPerformedReason"]) > 0 {
		if err := go1.Unmarshal(asMap["notPerformedReason"], &out.NotPerformedReason); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["daysSupply"]) > 0 {
		if err := go1.Unmarshal(asMap["daysSupply"], &out.DaysSupply); err != nil {
			return err
		}

	}
	if len(asMap["destination"]) > 0 {
		if err := go1.Unmarshal(asMap["destination"], &out.Destination); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["statusChanged"]) > 0 {
		if err := go1.Unmarshal(asMap["statusChanged"], &out.StatusChanged); err != nil {
			return err
		}

	}
	if len(asMap["dosageInstruction"]) > 0 {
		if err := go1.Unmarshal(asMap["dosageInstruction"], &out.DosageInstruction); err != nil {
			return err
		}

	}
	if len(asMap["eventHistory"]) > 0 {
		if err := go1.Unmarshal(asMap["eventHistory"], &out.EventHistory); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["medication"], &out.Medication); err != nil {
		return err
	}

	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["authorizingPrescription"]) > 0 {
		if err := go1.Unmarshal(asMap["authorizingPrescription"], &out.AuthorizingPrescription); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["supportingInformation"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInformation"], &out.SupportingInformation); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["receiver"]) > 0 {
		if err := go1.Unmarshal(asMap["receiver"], &out.Receiver); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["recorded"]) > 0 {
		if err := go1.Unmarshal(asMap["recorded"], &out.Recorded); err != nil {
			return err
		}

	}
	if len(asMap["substitution"]) > 0 {
		if err := go1.Unmarshal(asMap["substitution"], &out.Substitution); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	return nil
}

type MedicationDispense struct {
	Performer                 *MedicationDispensePerformer `binding:"omitempty" bson:",omitempty"`
	Note                      []*Annotation                `bson:",omitempty" json:"note,omitempty"`                          // Extra information about the dispense that could not be conveyed in the other attributes.
	PartOf                    []*Reference                 `bson:",omitempty" json:"partOf,omitempty"`                        // The procedure or medication administration that triggered the dispense.
	Subject                   *Reference                   `binding:"required" bson:",omitempty" json:"subject,omitempty"`    // A link to a resource representing the person or the group to whom the medication will be given.
	WhenPrepared              *DateTime                    `bson:",omitempty" json:"whenPrepared,omitempty"`                  // The time when the dispensed product was packaged and reviewed.
	WhenHandedOver            *DateTime                    `bson:",omitempty" json:"whenHandedOver,omitempty"`                // The time the dispensed product was provided to the patient or their representative.
	RenderedDosageInstruction *string                      `bson:",omitempty" json:"renderedDosageInstruction,omitempty"`     // The full representation of the dose of the medication included in all dosage instructions.  To be used when multiple dosage instructions are included to represent complex dosing such as increasing or tapering doses.
	Meta                      *Meta                        `bson:",omitempty" json:"meta,omitempty"`                          // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	NotPerformedReason        *CodeableReference           `bson:",omitempty" json:"notPerformedReason,omitempty"`            // Indicates the reason why a dispense was not performed.
	Quantity                  *Quantity                    `bson:",omitempty" json:"quantity,omitempty"`                      // The amount of medication that has been dispensed. Includes unit of measure.
	DaysSupply                *Quantity                    `bson:",omitempty" json:"daysSupply,omitempty"`                    // The amount of medication expressed as a timing amount.
	Destination               *Reference                   `bson:",omitempty" json:"destination,omitempty"`                   // Identification of the facility/location where the medication was/will be shipped to, as part of the dispense event.
	Id                        *primitive.ObjectID          `bson:"_id,omitempty" json:"id,omitempty"`                         // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	StatusChanged             *DateTime                    `bson:",omitempty" json:"statusChanged,omitempty"`                 // The date (and maybe time) when the status of the dispense record changed.
	DosageInstruction         []*Dosage                    `bson:",omitempty" json:"dosageInstruction,omitempty"`             // Indicates how the medication is to be used by the patient.
	EventHistory              []*Reference                 `bson:",omitempty" json:"eventHistory,omitempty"`                  // A summary of the events of interest that have occurred, such as when the dispense was verified.
	Category                  []*CodeableConcept           `bson:",omitempty" json:"category,omitempty"`                      // Indicates the type of medication dispense (for example, drug classification like ATC, where meds would be administered, legal category of the medication.).
	Medication                *CodeableReference           `binding:"required" bson:",omitempty" json:"medication,omitempty"` // Identifies the medication supplied. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
	ModifierExtension         []*Extension                 `bson:",omitempty" json:"modifierExtension,omitempty"`             /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	BasedOn                 []*Reference                    `bson:",omitempty" json:"basedOn,omitempty"`                   // A plan that is fulfilled in whole or in part by this MedicationDispense.
	Status                  *string                         `binding:"required" bson:",omitempty" json:"status,omitempty"` // A code specifying the state of the set of dispense events.
	Location                *Reference                      `bson:",omitempty" json:"location,omitempty"`                  // The principal physical location where the dispense was performed.
	AuthorizingPrescription []*Reference                    `bson:",omitempty" json:"authorizingPrescription,omitempty"`   // Indicates the medication order that is being dispensed against.
	ImplicitRules           *string                         `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language                *string                         `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Identifier              []*Identifier                   `bson:",omitempty" json:"identifier,omitempty"`                // Identifiers associated with this Medication Dispense that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
	SupportingInformation   []*Reference                    `bson:",omitempty" json:"supportingInformation,omitempty"`     // Additional information that supports the medication being dispensed.  For example, there may be requirements that a specific lab test has been completed prior to dispensing or the patient's weight at the time of dispensing is documented.
	Contained               []*Resource                     `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension               []*Extension                    `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Receiver                []*Reference                    `bson:",omitempty" json:"receiver,omitempty"`                  // Identifies the person who picked up the medication or the location of where the medication was delivered.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional or a location.
	Encounter               *Reference                      `bson:",omitempty" json:"encounter,omitempty"`                 // The encounter that establishes the context for this event.
	Recorded                *DateTime                       `bson:",omitempty" json:"recorded,omitempty"`                  // The date (and maybe time) when the dispense activity started if whenPrepared or whenHandedOver is not populated.
	Substitution            *MedicationDispenseSubstitution `binding:"omitempty" bson:",omitempty"`
	Text                    *Narrative                      `bson:",omitempty" json:"text,omitempty"` // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Type                    *CodeableConcept                `bson:",omitempty" json:"type,omitempty"` // Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
	ResourceType            string                          `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *MedicationDispensePerformer) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	return nil
}

type MedicationDispensePerformer struct {
	Actor             *Reference   `binding:"required" bson:",omitempty" json:"actor,omitempty"` // The device, practitioner, etc. who performed the action.  It should be assumed that the actor is the dispenser of the medication.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`        /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Function *CodeableConcept `bson:",omitempty" json:"function,omitempty"` // Distinguishes the type of performer in the dispense.  For example, date enterer, packager, final checker.
}

func (out *MedicationDispenseSubstitution) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["responsibleParty"]) > 0 {
		if err := go1.Unmarshal(asMap["responsibleParty"], &out.ResponsibleParty); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["wasSubstituted"], &out.WasSubstituted); err != nil {
		return err
	}

	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	return nil
}

type MedicationDispenseSubstitution struct {
	Reason            []*CodeableConcept `bson:",omitempty" json:"reason,omitempty"`            // Indicates the reason for the substitution (or lack of substitution) from what was prescribed.
	ResponsibleParty  *Reference         `bson:",omitempty" json:"responsibleParty,omitempty"`  // The person or organization that has primary responsibility for the substitution.
	Id                *string            `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension       `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	WasSubstituted *bool            `binding:"required" bson:",omitempty" json:"wasSubstituted,omitempty"` // True if the dispenser dispensed a different drug or product from what was prescribed.
	Type           *CodeableConcept `bson:",omitempty" json:"type,omitempty"`                              // A code signifying whether a different drug was dispensed from what was prescribed.
}

func (out *MedicationKnowledge) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"MedicationKnowledge\"" {
		return fmt.Errorf("resourceType is not %s", "MedicationKnowledge")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["cost"]) > 0 {
		if err := go1.Unmarshal(asMap["cost"], &out.Cost); err != nil {
			return err
		}

	}
	if len(asMap["medicineClassification"]) > 0 {
		if err := go1.Unmarshal(asMap["medicineClassification"], &out.MedicineClassification); err != nil {
			return err
		}

	}
	if len(asMap["preparationInstruction"]) > 0 {
		if err := go1.Unmarshal(asMap["preparationInstruction"], &out.PreparationInstruction); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["productType"]) > 0 {
		if err := go1.Unmarshal(asMap["productType"], &out.ProductType); err != nil {
			return err
		}

	}
	if len(asMap["indicationGuideline"]) > 0 {
		if err := go1.Unmarshal(asMap["indicationGuideline"], &out.IndicationGuideline); err != nil {
			return err
		}

	}
	if len(asMap["storageGuideline"]) > 0 {
		if err := go1.Unmarshal(asMap["storageGuideline"], &out.StorageGuideline); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["intendedJurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["intendedJurisdiction"], &out.IntendedJurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["monograph"]) > 0 {
		if err := go1.Unmarshal(asMap["monograph"], &out.Monograph); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["associatedMedication"]) > 0 {
		if err := go1.Unmarshal(asMap["associatedMedication"], &out.AssociatedMedication); err != nil {
			return err
		}

	}
	if len(asMap["packaging"]) > 0 {
		if err := go1.Unmarshal(asMap["packaging"], &out.Packaging); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["clinicalUseIssue"]) > 0 {
		if err := go1.Unmarshal(asMap["clinicalUseIssue"], &out.ClinicalUseIssue); err != nil {
			return err
		}

	}
	if len(asMap["regulatory"]) > 0 {
		if err := go1.Unmarshal(asMap["regulatory"], &out.Regulatory); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["definitional"]) > 0 {
		if err := go1.Unmarshal(asMap["definitional"], &out.Definitional); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["relatedMedicationKnowledge"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedMedicationKnowledge"], &out.RelatedMedicationKnowledge); err != nil {
			return err
		}

	}
	if len(asMap["monitoringProgram"]) > 0 {
		if err := go1.Unmarshal(asMap["monitoringProgram"], &out.MonitoringProgram); err != nil {
			return err
		}

	}
	return nil
}

type MedicationKnowledge struct {
	Id                     *primitive.ObjectID                        `bson:"_id,omitempty" json:"id,omitempty"`      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Identifier             []*Identifier                              `bson:",omitempty" json:"identifier,omitempty"` // Business identifier for this medication.
	Cost                   *MedicationKnowledgeCost                   `binding:"omitempty" bson:",omitempty"`
	MedicineClassification *MedicationKnowledgeMedicineClassification `binding:"omitempty" bson:",omitempty"`
	PreparationInstruction *string                                    `bson:",omitempty" json:"preparationInstruction,omitempty"` // The instructions for preparing the medication.
	Code                   *CodeableConcept                           `bson:",omitempty" json:"code,omitempty"`                   // A code that specifies this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
	ProductType            []*CodeableConcept                         `bson:",omitempty" json:"productType,omitempty"`            // Category of the medication or product (e.g. branded product, therapeutic moeity, generic product, innovator product, etc.).
	IndicationGuideline    *MedicationKnowledgeIndicationGuideline    `binding:"omitempty" bson:",omitempty"`
	StorageGuideline       *MedicationKnowledgeStorageGuideline       `binding:"omitempty" bson:",omitempty"`
	Text                   *Narrative                                 `bson:",omitempty" json:"text,omitempty"`                 // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Author                 *Reference                                 `bson:",omitempty" json:"author,omitempty"`               // The creator or owner of the knowledge or information about the medication.
	IntendedJurisdiction   []*CodeableConcept                         `bson:",omitempty" json:"intendedJurisdiction,omitempty"` // Lists the jurisdictions that this medication knowledge was written for.
	Monograph              *MedicationKnowledgeMonograph              `binding:"omitempty" bson:",omitempty"`
	Language               *string                                    `bson:",omitempty" json:"language,omitempty"`             // The base language in which the resource is written.
	Name                   []*string                                  `bson:",omitempty" json:"name,omitempty"`                 // All of the names for a medication, for example, the name(s) given to a medication in different countries.  For example, acetaminophen and paracetamol or salbutamol and albuterol.
	AssociatedMedication   []*Reference                               `bson:",omitempty" json:"associatedMedication,omitempty"` // Links to associated medications that could be prescribed, dispensed or administered.
	Packaging              *MedicationKnowledgePackaging              `binding:"omitempty" bson:",omitempty"`
	ModifierExtension      []*Extension                               `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ClinicalUseIssue           []*Reference                                   `bson:",omitempty" json:"clinicalUseIssue,omitempty"` // Potential clinical issue with or between medication(s) (for example, drug-drug interaction, drug-disease contraindication, drug-allergy interaction, etc.).
	Regulatory                 *MedicationKnowledgeRegulatory                 `binding:"omitempty" bson:",omitempty"`
	Meta                       *Meta                                          `bson:",omitempty" json:"meta,omitempty"`   // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Status                     *string                                        `bson:",omitempty" json:"status,omitempty"` // A code to indicate if the medication referred to by this MedicationKnowledge is in active use within the drug database or inventory system. The status refers to the validity about the information of the medication and not to its medicinal properties.
	Definitional               *MedicationKnowledgeDefinitional               `binding:"omitempty" bson:",omitempty"`
	ImplicitRules              *string                                        `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained                  []*Resource                                    `bson:",omitempty" json:"contained,omitempty"`     // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension                  []*Extension                                   `bson:",omitempty" json:"extension,omitempty"`     // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	RelatedMedicationKnowledge *MedicationKnowledgeRelatedMedicationKnowledge `binding:"omitempty" bson:",omitempty"`
	MonitoringProgram          *MedicationKnowledgeMonitoringProgram          `binding:"omitempty" bson:",omitempty"`
	ResourceType               string                                         `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *MedicationKnowledgeCost) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["source"]) > 0 {
		if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["costMoney"], &out.CostMoney); err == nil {
	} else if err := go1.Unmarshal(asMap["costCodeableConcept"], &out.CostCodeableConcept); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "cost[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["effectiveDate"]) > 0 {
		if err := go1.Unmarshal(asMap["effectiveDate"], &out.EffectiveDate); err != nil {
			return err
		}

	}
	return nil
}

type MedicationKnowledgeCost struct {
	Type   *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // The category of the cost information.  For example, manufacturers' cost, patient cost, claim reimbursement cost, actual acquisition cost.
	Source *string          `bson:",omitempty" json:"source,omitempty"`                  // The source or owner that assigns the price to the medication.
	MedicationKnowledgeCostCostx
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	EffectiveDate []*Period `bson:",omitempty" json:"effectiveDate,omitempty"` // The date range for which the cost information of the medication is effective.
}
type MedicationKnowledgeCostCostx struct {
	CostMoney           Money           `bson:",omitempty" json:"costMoney,omitempty"`
	CostCodeableConcept CodeableConcept `bson:",omitempty" json:"costCodeableConcept,omitempty"`
}

func (out *MedicationKnowledgeMedicineClassification) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["sourceString"], &out.SourceString); err == nil {
	} else if err := go1.Unmarshal(asMap["sourceUri"], &out.SourceUri); err == nil {
	} else {

	}
	if len(asMap["classification"]) > 0 {
		if err := go1.Unmarshal(asMap["classification"], &out.Classification); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type MedicationKnowledgeMedicineClassification struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // The type of category for the medication (for example, therapeutic classification, therapeutic sub-classification).
	MedicationKnowledgeMedicineClassificationSourcex
	Classification []*CodeableConcept `bson:",omitempty" json:"classification,omitempty"` // Specific category assigned to the medication (e.g. anti-infective, anti-hypertensive, antibiotic, etc.).
	Id             *string            `bson:"_id,omitempty" json:"id,omitempty"`          // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}
type MedicationKnowledgeMedicineClassificationSourcex struct {
	SourceString string `bson:",omitempty" json:"sourceString,omitempty"`
	SourceUri    string `bson:",omitempty" json:"sourceUri,omitempty"`
}

func (out *MedicationKnowledgeIndicationGuideline) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["indication"]) > 0 {
		if err := go1.Unmarshal(asMap["indication"], &out.Indication); err != nil {
			return err
		}

	}
	if len(asMap["dosingGuideline"]) > 0 {
		if err := go1.Unmarshal(asMap["dosingGuideline"], &out.DosingGuideline); err != nil {
			return err
		}

	}
	return nil
}

type MedicationKnowledgeIndicationGuideline struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Indication      []*CodeableReference                                   `bson:",omitempty" json:"indication,omitempty"` // Indication or reason for use of the medication that applies to the specific administration guideline.
	DosingGuideline *MedicationKnowledgeIndicationGuidelineDosingGuideline `binding:"omitempty" bson:",omitempty"`
}

func (out *MedicationKnowledgeIndicationGuidelineDosingGuideline) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["treatmentIntent"]) > 0 {
		if err := go1.Unmarshal(asMap["treatmentIntent"], &out.TreatmentIntent); err != nil {
			return err
		}

	}
	if len(asMap["dosage"]) > 0 {
		if err := go1.Unmarshal(asMap["dosage"], &out.Dosage); err != nil {
			return err
		}

	}
	if len(asMap["administrationTreatment"]) > 0 {
		if err := go1.Unmarshal(asMap["administrationTreatment"], &out.AdministrationTreatment); err != nil {
			return err
		}

	}
	if len(asMap["patientCharacteristic"]) > 0 {
		if err := go1.Unmarshal(asMap["patientCharacteristic"], &out.PatientCharacteristic); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type MedicationKnowledgeIndicationGuidelineDosingGuideline struct {
	TreatmentIntent         *CodeableConcept                                                            `bson:",omitempty" json:"treatmentIntent,omitempty"` // The overall intention of the treatment, for example, prophylactic, supporative, curative, etc.
	Dosage                  *MedicationKnowledgeIndicationGuidelineDosingGuidelineDosage                `binding:"omitempty" bson:",omitempty"`
	AdministrationTreatment *CodeableConcept                                                            `bson:",omitempty" json:"administrationTreatment,omitempty"` // The type of the treatment that the guideline applies to, for example, long term therapy, first line treatment, etc.
	PatientCharacteristic   *MedicationKnowledgeIndicationGuidelineDosingGuidelinePatientCharacteristic `binding:"omitempty" bson:",omitempty"`
	Id                      *string                                                                     `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension               []*Extension                                                                `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension       []*Extension                                                                `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *MedicationKnowledgeIndicationGuidelineDosingGuidelineDosage) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["dosage"], &out.Dosage); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	return nil
}

type MedicationKnowledgeIndicationGuidelineDosingGuidelineDosage struct {
	Dosage            []*Dosage    `binding:"required" bson:",omitempty" json:"dosage,omitempty"` // Dosage for the medication for the specific guidelines.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // The type or category of dosage for a given medication (for example, prophylaxis, maintenance, therapeutic, etc.).
}

func (out *MedicationKnowledgeIndicationGuidelineDosingGuidelinePatientCharacteristic) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type MedicationKnowledgeIndicationGuidelineDosingGuidelinePatientCharacteristic struct {
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // The categorization of the specific characteristic that is relevant to the administration guideline (e.g. height, weight, gender).
	MedicationKnowledgeIndicationGuidelineDosingGuidelinePatientCharacteristicValuex
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type MedicationKnowledgeIndicationGuidelineDosingGuidelinePatientCharacteristicValuex struct {
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueRange           Range           `bson:",omitempty" json:"valueRange,omitempty"`
}

func (out *MedicationKnowledgeStorageGuideline) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["reference"]) > 0 {
		if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["stabilityDuration"]) > 0 {
		if err := go1.Unmarshal(asMap["stabilityDuration"], &out.StabilityDuration); err != nil {
			return err
		}

	}
	if len(asMap["environmentalSetting"]) > 0 {
		if err := go1.Unmarshal(asMap["environmentalSetting"], &out.EnvironmentalSetting); err != nil {
			return err
		}

	}
	return nil
}

type MedicationKnowledgeStorageGuideline struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Reference            *string                                                  `bson:",omitempty" json:"reference,omitempty"`         // Reference to additional information about the storage guidelines.
	Note                 []*Annotation                                            `bson:",omitempty" json:"note,omitempty"`              // Additional notes about the storage.
	StabilityDuration    *Duration                                                `bson:",omitempty" json:"stabilityDuration,omitempty"` // Duration that the medication remains stable if the environmentalSetting is respected.
	EnvironmentalSetting *MedicationKnowledgeStorageGuidelineEnvironmentalSetting `binding:"omitempty" bson:",omitempty"`
}

func (out *MedicationKnowledgeStorageGuidelineEnvironmentalSetting) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	return nil
}

type MedicationKnowledgeStorageGuidelineEnvironmentalSetting struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // Identifies the category or type of setting (e.g., type of location, temperature, humidity).
	MedicationKnowledgeStorageGuidelineEnvironmentalSettingValuex
}
type MedicationKnowledgeStorageGuidelineEnvironmentalSettingValuex struct {
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueRange           Range           `bson:",omitempty" json:"valueRange,omitempty"`
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
}

func (out *MedicationKnowledgeMonograph) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["source"]) > 0 {
		if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type MedicationKnowledgeMonograph struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type   *CodeableConcept `bson:",omitempty" json:"type,omitempty"`   // The category of documentation about the medication. (e.g. professional monograph, patient education monograph).
	Source *Reference       `bson:",omitempty" json:"source,omitempty"` // Associated documentation about the medication.
	Id     *string          `bson:"_id,omitempty" json:"id,omitempty"`  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *MedicationKnowledgePackaging) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["cost"]) > 0 {
		if err := go1.Unmarshal(asMap["cost"], &out.Cost); err != nil {
			return err
		}

	}
	if len(asMap["packagedProduct"]) > 0 {
		if err := go1.Unmarshal(asMap["packagedProduct"], &out.PackagedProduct); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type MedicationKnowledgePackaging struct {
	Cost              interface{}
	PackagedProduct   *Reference   `bson:",omitempty" json:"packagedProduct,omitempty"`   // A reference to a PackagedProductDefinition that provides the details of the product that is in the packaging and is being priced.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *MedicationKnowledgeRegulatory) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["substitution"]) > 0 {
		if err := go1.Unmarshal(asMap["substitution"], &out.Substitution); err != nil {
			return err
		}

	}
	if len(asMap["schedule"]) > 0 {
		if err := go1.Unmarshal(asMap["schedule"], &out.Schedule); err != nil {
			return err
		}

	}
	if len(asMap["maxDispense"]) > 0 {
		if err := go1.Unmarshal(asMap["maxDispense"], &out.MaxDispense); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["regulatoryAuthority"], &out.RegulatoryAuthority); err != nil {
		return err
	}

	return nil
}

type MedicationKnowledgeRegulatory struct {
	Substitution      *MedicationKnowledgeRegulatorySubstitution `binding:"omitempty" bson:",omitempty"`
	Schedule          []*CodeableConcept                         `bson:",omitempty" json:"schedule,omitempty"` // Specifies the schedule of a medication in jurisdiction.
	MaxDispense       *MedicationKnowledgeRegulatoryMaxDispense  `binding:"omitempty" bson:",omitempty"`
	Id                *string                                    `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                               `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                               `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	RegulatoryAuthority *Reference `binding:"required" bson:",omitempty" json:"regulatoryAuthority,omitempty"` // The authority that is specifying the regulations.
}

func (out *MedicationKnowledgeRegulatorySubstitution) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["allowed"], &out.Allowed); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type MedicationKnowledgeRegulatorySubstitution struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type      *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"`    // Specifies the type of substitution allowed.
	Allowed   *bool            `binding:"required" bson:",omitempty" json:"allowed,omitempty"` // Specifies if regulation allows for changes in the medication when dispensing.
	Id        *string          `bson:"_id,omitempty" json:"id,omitempty"`                      // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension     `bson:",omitempty" json:"extension,omitempty"`                  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *MedicationKnowledgeRegulatoryMaxDispense) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
		return err
	}

	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	return nil
}

type MedicationKnowledgeRegulatoryMaxDispense struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Quantity *Quantity `binding:"required" bson:",omitempty" json:"quantity,omitempty"` // The maximum number of units of the medication that can be dispensed.
	Period   *Duration `bson:",omitempty" json:"period,omitempty"`                      // The period that applies to the maximum number of units.
}

func (out *MedicationKnowledgeDefinitional) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["definition"]) > 0 {
		if err := go1.Unmarshal(asMap["definition"], &out.Definition); err != nil {
			return err
		}

	}
	if len(asMap["doseForm"]) > 0 {
		if err := go1.Unmarshal(asMap["doseForm"], &out.DoseForm); err != nil {
			return err
		}

	}
	if len(asMap["intendedRoute"]) > 0 {
		if err := go1.Unmarshal(asMap["intendedRoute"], &out.IntendedRoute); err != nil {
			return err
		}

	}
	if len(asMap["ingredient"]) > 0 {
		if err := go1.Unmarshal(asMap["ingredient"], &out.Ingredient); err != nil {
			return err
		}

	}
	if len(asMap["drugCharacteristic"]) > 0 {
		if err := go1.Unmarshal(asMap["drugCharacteristic"], &out.DrugCharacteristic); err != nil {
			return err
		}

	}
	return nil
}

type MedicationKnowledgeDefinitional struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Definition         []*Reference                                       `bson:",omitempty" json:"definition,omitempty"`    // Associated definitions for this medication.
	DoseForm           *CodeableConcept                                   `bson:",omitempty" json:"doseForm,omitempty"`      // Describes the form of the item.  Powder; tablets; capsule.
	IntendedRoute      []*CodeableConcept                                 `bson:",omitempty" json:"intendedRoute,omitempty"` // The intended or approved route of administration.
	Ingredient         *MedicationKnowledgeDefinitionalIngredient         `binding:"omitempty" bson:",omitempty"`
	DrugCharacteristic *MedicationKnowledgeDefinitionalDrugCharacteristic `binding:"omitempty" bson:",omitempty"`
}

func (out *MedicationKnowledgeDefinitionalIngredient) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
		return err
	}

	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["strengthRatio"], &out.StrengthRatio); err == nil {
	} else if err := go1.Unmarshal(asMap["strengthCodeableConcept"], &out.StrengthCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["strengthQuantity"], &out.StrengthQuantity); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type MedicationKnowledgeDefinitionalIngredient struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Item *CodeableReference `binding:"required" bson:",omitempty" json:"item,omitempty"` // A reference to the resource that provides information about the ingredient.
	Type *CodeableConcept   `bson:",omitempty" json:"type,omitempty"`                    // Indication of whether this ingredient affects the therapeutic action of the drug.
	MedicationKnowledgeDefinitionalIngredientStrengthx
	Id        *string      `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}
type MedicationKnowledgeDefinitionalIngredientStrengthx struct {
	StrengthRatio           Ratio           `bson:",omitempty" json:"strengthRatio,omitempty"`
	StrengthCodeableConcept CodeableConcept `bson:",omitempty" json:"strengthCodeableConcept,omitempty"`
	StrengthQuantity        Quantity        `bson:",omitempty" json:"strengthQuantity,omitempty"`
}

func (out *MedicationKnowledgeDefinitionalDrugCharacteristic) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBase64Binary"], &out.ValueBase64Binary); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else {

	}
	return nil
}

type MedicationKnowledgeDefinitionalDrugCharacteristic struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `bson:",omitempty" json:"type,omitempty"` // A code specifying which characteristic of the medicine is being described (for example, colour, shape, imprint).
	MedicationKnowledgeDefinitionalDrugCharacteristicValuex
}
type MedicationKnowledgeDefinitionalDrugCharacteristicValuex struct {
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueString          string          `bson:",omitempty" json:"valueString,omitempty"`
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueBase64Binary    Base64Binary    `bson:",omitempty" json:"valueBase64Binary,omitempty"`
	ValueAttachment      Attachment      `bson:",omitempty" json:"valueAttachment,omitempty"`
}

func (out *MedicationKnowledgeRelatedMedicationKnowledge) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
		return err
	}

	return nil
}

type MedicationKnowledgeRelatedMedicationKnowledge struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type      *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"`      // The category of the associated medication knowledge reference.
	Reference []*Reference     `binding:"required" bson:",omitempty" json:"reference,omitempty"` // Associated documentation about the associated medication knowledge.
}

func (out *MedicationKnowledgeMonitoringProgram) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type MedicationKnowledgeMonitoringProgram struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `bson:",omitempty" json:"type,omitempty"`  // Type of program under which the medication is monitored.
	Name *string          `bson:",omitempty" json:"name,omitempty"`  // Name of the reviewing program.
	Id   *string          `bson:"_id,omitempty" json:"id,omitempty"` // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *MedicationRequest) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"MedicationRequest\"" {
		return fmt.Errorf("resourceType is not %s", "MedicationRequest")
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["performerType"]) > 0 {
		if err := go1.Unmarshal(asMap["performerType"], &out.PerformerType); err != nil {
			return err
		}

	}
	if len(asMap["dosageInstruction"]) > 0 {
		if err := go1.Unmarshal(asMap["dosageInstruction"], &out.DosageInstruction); err != nil {
			return err
		}

	}
	if len(asMap["dispenseRequest"]) > 0 {
		if err := go1.Unmarshal(asMap["dispenseRequest"], &out.DispenseRequest); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["requester"]) > 0 {
		if err := go1.Unmarshal(asMap["requester"], &out.Requester); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["statusChanged"]) > 0 {
		if err := go1.Unmarshal(asMap["statusChanged"], &out.StatusChanged); err != nil {
			return err
		}

	}
	if len(asMap["insurance"]) > 0 {
		if err := go1.Unmarshal(asMap["insurance"], &out.Insurance); err != nil {
			return err
		}

	}
	if len(asMap["eventHistory"]) > 0 {
		if err := go1.Unmarshal(asMap["eventHistory"], &out.EventHistory); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	if len(asMap["authoredOn"]) > 0 {
		if err := go1.Unmarshal(asMap["authoredOn"], &out.AuthoredOn); err != nil {
			return err
		}

	}
	if len(asMap["recorder"]) > 0 {
		if err := go1.Unmarshal(asMap["recorder"], &out.Recorder); err != nil {
			return err
		}

	}
	if len(asMap["courseOfTherapyType"]) > 0 {
		if err := go1.Unmarshal(asMap["courseOfTherapyType"], &out.CourseOfTherapyType); err != nil {
			return err
		}

	}
	if len(asMap["effectiveDosePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["effectiveDosePeriod"], &out.EffectiveDosePeriod); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["reported"]) > 0 {
		if err := go1.Unmarshal(asMap["reported"], &out.Reported); err != nil {
			return err
		}

	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["device"]) > 0 {
		if err := go1.Unmarshal(asMap["device"], &out.Device); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["supportingInformation"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInformation"], &out.SupportingInformation); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["substitution"]) > 0 {
		if err := go1.Unmarshal(asMap["substitution"], &out.Substitution); err != nil {
			return err
		}

	}
	if len(asMap["priorPrescription"]) > 0 {
		if err := go1.Unmarshal(asMap["priorPrescription"], &out.PriorPrescription); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["intent"], &out.Intent); err != nil {
		return err
	}

	if len(asMap["doNotPerform"]) > 0 {
		if err := go1.Unmarshal(asMap["doNotPerform"], &out.DoNotPerform); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["medication"], &out.Medication); err != nil {
		return err
	}

	if len(asMap["informationSource"]) > 0 {
		if err := go1.Unmarshal(asMap["informationSource"], &out.InformationSource); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["groupIdentifier"]) > 0 {
		if err := go1.Unmarshal(asMap["groupIdentifier"], &out.GroupIdentifier); err != nil {
			return err
		}

	}
	if len(asMap["statusReason"]) > 0 {
		if err := go1.Unmarshal(asMap["statusReason"], &out.StatusReason); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if len(asMap["renderedDosageInstruction"]) > 0 {
		if err := go1.Unmarshal(asMap["renderedDosageInstruction"], &out.RenderedDosageInstruction); err != nil {
			return err
		}

	}
	return nil
}

type MedicationRequest struct {
	Extension         []*Extension                      `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Category          []*CodeableConcept                `bson:",omitempty" json:"category,omitempty"`          // An arbitrary categorization or grouping of the medication request.  It could be used for indicating where meds are intended to be administered, eg. in an inpatient setting or in a patient's home, or a legal category of the medication.
	PerformerType     *CodeableConcept                  `bson:",omitempty" json:"performerType,omitempty"`     // Indicates the type of performer of the administration of the medication.
	DosageInstruction []*Dosage                         `bson:",omitempty" json:"dosageInstruction,omitempty"` // Specific instructions for how the medication is to be used by the patient.
	DispenseRequest   *MedicationRequestDispenseRequest `binding:"omitempty" bson:",omitempty"`
	ImplicitRules     *string                           `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text              *Narrative                        `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ModifierExtension []*Extension                      `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Requester                 *Reference                     `bson:",omitempty" json:"requester,omitempty"`             // The individual, organization, or device that initiated the request and has responsibility for its activation.
	Note                      []*Annotation                  `bson:",omitempty" json:"note,omitempty"`                  // Extra information about the prescription that could not be conveyed by the other attributes.
	StatusChanged             *DateTime                      `bson:",omitempty" json:"statusChanged,omitempty"`         // The date (and perhaps time) when the status was changed.
	Insurance                 []*Reference                   `bson:",omitempty" json:"insurance,omitempty"`             // Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
	EventHistory              []*Reference                   `bson:",omitempty" json:"eventHistory,omitempty"`          // Links to Provenance records for past versions of this resource or fulfilling request or event resources that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the resource.
	Id                        *primitive.ObjectID            `bson:"_id,omitempty" json:"id,omitempty"`                 // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta                      *Meta                          `bson:",omitempty" json:"meta,omitempty"`                  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Priority                  *string                        `bson:",omitempty" json:"priority,omitempty"`              // Indicates how quickly the Medication Request should be addressed with respect to other requests.
	AuthoredOn                *DateTime                      `bson:",omitempty" json:"authoredOn,omitempty"`            // The date (and perhaps time) when the prescription was initially written or authored on.
	Recorder                  *Reference                     `bson:",omitempty" json:"recorder,omitempty"`              // The person who entered the order on behalf of another individual for example in the case of a verbal or a telephone order.
	CourseOfTherapyType       *CodeableConcept               `bson:",omitempty" json:"courseOfTherapyType,omitempty"`   // The description of the overall pattern of the administration of the medication to the patient.
	EffectiveDosePeriod       *Period                        `bson:",omitempty" json:"effectiveDosePeriod,omitempty"`   // The period over which the medication is to be taken.  Where there are multiple dosageInstruction lines (for example, tapering doses), this is the earliest date and the latest end date of the dosageInstructions.
	Contained                 []*Resource                    `bson:",omitempty" json:"contained,omitempty"`             // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Encounter                 *Reference                     `bson:",omitempty" json:"encounter,omitempty"`             // The Encounter during which this [x] was created or to which the creation of this record is tightly associated.
	Reported                  *bool                          `bson:",omitempty" json:"reported,omitempty"`              // Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
	Performer                 []*Reference                   `bson:",omitempty" json:"performer,omitempty"`             // The specified desired performer of the medication treatment (e.g. the performer of the medication administration).  For devices, this is the device that is intended to perform the administration of the medication.  An IV Pump would be an example of a device that is performing the administration.  Both the IV Pump and the practitioner that set the rate or bolus on the pump can be listed as performers.
	Device                    []*CodeableReference           `bson:",omitempty" json:"device,omitempty"`                // The intended type of device that is to be used for the administration of the medication (for example, PCA Pump).
	Identifier                []*Identifier                  `bson:",omitempty" json:"identifier,omitempty"`            // Identifiers associated with this medication request that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
	SupportingInformation     []*Reference                   `bson:",omitempty" json:"supportingInformation,omitempty"` // Information to support fulfilling (i.e. dispensing or administering) of the medication, for example, patient height and weight, a MedicationStatement for the patient).
	Reason                    []*CodeableReference           `bson:",omitempty" json:"reason,omitempty"`                // The reason or the indication for ordering or not ordering the medication.
	Substitution              *MedicationRequestSubstitution `binding:"omitempty" bson:",omitempty"`
	PriorPrescription         *Reference                     `bson:",omitempty" json:"priorPrescription,omitempty"`             // Reference to an order/prescription that is being replaced by this MedicationRequest.
	Status                    *string                        `binding:"required" bson:",omitempty" json:"status,omitempty"`     // A code specifying the current state of the order.  Generally, this will be active or completed state.
	Intent                    *string                        `binding:"required" bson:",omitempty" json:"intent,omitempty"`     // Whether the request is a proposal, plan, or an original order.
	DoNotPerform              *bool                          `bson:",omitempty" json:"doNotPerform,omitempty"`                  // If true, indicates that the provider is asking for the patient to either stop taking or to not start taking the specified medication. For example, the patient is taking an existing medication and the provider is changing their medication. They want to create two seperate requests: one to stop using the current medication and another to start the new medication.
	Medication                *CodeableReference             `binding:"required" bson:",omitempty" json:"medication,omitempty"` // Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
	InformationSource         []*Reference                   `bson:",omitempty" json:"informationSource,omitempty"`             // The person or organization who provided the information about this request, if the source is someone other than the requestor.  This is often used when the MedicationRequest is reported by another person.
	Language                  *string                        `bson:",omitempty" json:"language,omitempty"`                      // The base language in which the resource is written.
	BasedOn                   []*Reference                   `bson:",omitempty" json:"basedOn,omitempty"`                       // A plan or request that is fulfilled in whole or in part by this medication request.
	GroupIdentifier           *Identifier                    `bson:",omitempty" json:"groupIdentifier,omitempty"`               // A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.
	StatusReason              *CodeableConcept               `bson:",omitempty" json:"statusReason,omitempty"`                  // Captures the reason for the current state of the MedicationRequest.
	Subject                   *Reference                     `binding:"required" bson:",omitempty" json:"subject,omitempty"`    // The individual or group for whom the medication has been requested.
	RenderedDosageInstruction *string                        `bson:",omitempty" json:"renderedDosageInstruction,omitempty"`     // The full representation of the dose of the medication included in all dosage instructions.  To be used when multiple dosage instructions are included to represent complex dosing such as increasing or tapering doses.
	ResourceType              string                         `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *MedicationRequestDispenseRequest) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["validityPeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["validityPeriod"], &out.ValidityPeriod); err != nil {
			return err
		}

	}
	if len(asMap["numberOfRepeatsAllowed"]) > 0 {
		if err := go1.Unmarshal(asMap["numberOfRepeatsAllowed"], &out.NumberOfRepeatsAllowed); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["dispenser"]) > 0 {
		if err := go1.Unmarshal(asMap["dispenser"], &out.Dispenser); err != nil {
			return err
		}

	}
	if len(asMap["doseAdministrationAid"]) > 0 {
		if err := go1.Unmarshal(asMap["doseAdministrationAid"], &out.DoseAdministrationAid); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["initialFill"]) > 0 {
		if err := go1.Unmarshal(asMap["initialFill"], &out.InitialFill); err != nil {
			return err
		}

	}
	if len(asMap["dispenseInterval"]) > 0 {
		if err := go1.Unmarshal(asMap["dispenseInterval"], &out.DispenseInterval); err != nil {
			return err
		}

	}
	if len(asMap["expectedSupplyDuration"]) > 0 {
		if err := go1.Unmarshal(asMap["expectedSupplyDuration"], &out.ExpectedSupplyDuration); err != nil {
			return err
		}

	}
	if len(asMap["dispenserInstruction"]) > 0 {
		if err := go1.Unmarshal(asMap["dispenserInstruction"], &out.DispenserInstruction); err != nil {
			return err
		}

	}
	return nil
}

type MedicationRequestDispenseRequest struct {
	Id                     *string          `bson:"_id,omitempty" json:"id,omitempty"`                  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ValidityPeriod         *Period          `bson:",omitempty" json:"validityPeriod,omitempty"`         // This indicates the validity period of a prescription (stale dating the Prescription).
	NumberOfRepeatsAllowed *int             `bson:",omitempty" json:"numberOfRepeatsAllowed,omitempty"` // An integer indicating the number of times, in addition to the original dispense, (aka refills or repeats) that the patient can receive the prescribed medication. Usage Notes: This integer does not include the original order dispense. This means that if an order indicates dispense 30 tablets plus "3 repeats", then the order can be dispensed a total of 4 times and the patient can receive a total of 120 tablets.  A prescriber may explicitly say that zero refills are permitted after the initial dispense.
	Quantity               *Quantity        `bson:",omitempty" json:"quantity,omitempty"`               // The amount that is to be dispensed for one fill.
	Dispenser              *Reference       `bson:",omitempty" json:"dispenser,omitempty"`              // Indicates the intended performing Organization that will dispense the medication as specified by the prescriber.
	DoseAdministrationAid  *CodeableConcept `bson:",omitempty" json:"doseAdministrationAid,omitempty"`  // Provides information about the type of adherence packaging to be supplied for the medication dispense.
	Extension              []*Extension     `bson:",omitempty" json:"extension,omitempty"`              // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension      []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`      /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	InitialFill            *MedicationRequestDispenseRequestInitialFill `binding:"omitempty" bson:",omitempty"`
	DispenseInterval       *Duration                                    `bson:",omitempty" json:"dispenseInterval,omitempty"`       // The minimum period of time that must occur between dispenses of the medication.
	ExpectedSupplyDuration *Duration                                    `bson:",omitempty" json:"expectedSupplyDuration,omitempty"` // Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last.
	DispenserInstruction   []*Annotation                                `bson:",omitempty" json:"dispenserInstruction,omitempty"`   // Provides additional information to the dispenser, for example, counselling to be provided to the patient.
}

func (out *MedicationRequestDispenseRequestInitialFill) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["duration"]) > 0 {
		if err := go1.Unmarshal(asMap["duration"], &out.Duration); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type MedicationRequestDispenseRequestInitialFill struct {
	Quantity          *Quantity    `bson:",omitempty" json:"quantity,omitempty"`          // The amount or quantity to provide as part of the first dispense.
	Duration          *Duration    `bson:",omitempty" json:"duration,omitempty"`          // The length of time that the first dispense is expected to last.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *MedicationRequestSubstitution) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["allowedBoolean"], &out.AllowedBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["allowedCodeableConcept"], &out.AllowedCodeableConcept); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "allowed[x]")
	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	return nil
}

type MedicationRequestSubstitution struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	MedicationRequestSubstitutionAllowedx
	Reason *CodeableConcept `bson:",omitempty" json:"reason,omitempty"` // Indicates the reason for the substitution, or why substitution must or must not be performed.
}
type MedicationRequestSubstitutionAllowedx struct {
	AllowedBoolean         bool            `bson:",omitempty" json:"allowedBoolean,omitempty"`
	AllowedCodeableConcept CodeableConcept `bson:",omitempty" json:"allowedCodeableConcept,omitempty"`
}

func (out *MedicationStatement) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"MedicationStatement\"" {
		return fmt.Errorf("resourceType is not %s", "MedicationStatement")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["effectiveDateTime"], &out.EffectiveDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["effectiveTiming"], &out.EffectiveTiming); err == nil {
	} else {

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["informationSource"]) > 0 {
		if err := go1.Unmarshal(asMap["informationSource"], &out.InformationSource); err != nil {
			return err
		}

	}
	if len(asMap["derivedFrom"]) > 0 {
		if err := go1.Unmarshal(asMap["derivedFrom"], &out.DerivedFrom); err != nil {
			return err
		}

	}
	if len(asMap["renderedDosageInstruction"]) > 0 {
		if err := go1.Unmarshal(asMap["renderedDosageInstruction"], &out.RenderedDosageInstruction); err != nil {
			return err
		}

	}
	if len(asMap["dateAsserted"]) > 0 {
		if err := go1.Unmarshal(asMap["dateAsserted"], &out.DateAsserted); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["medication"], &out.Medication); err != nil {
		return err
	}

	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["relatedClinicalInformation"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedClinicalInformation"], &out.RelatedClinicalInformation); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if len(asMap["dosage"]) > 0 {
		if err := go1.Unmarshal(asMap["dosage"], &out.Dosage); err != nil {
			return err
		}

	}
	if len(asMap["adherence"]) > 0 {
		if err := go1.Unmarshal(asMap["adherence"], &out.Adherence); err != nil {
			return err
		}

	}
	return nil
}

type MedicationStatement struct {
	Id       *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`    // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language *string             `bson:",omitempty" json:"language,omitempty"` // The base language in which the resource is written.
	MedicationStatementEffectivex
	Reason                    []*CodeableReference `bson:",omitempty" json:"reason,omitempty"`                    // A concept, Condition or observation that supports why the medication is being/was taken.
	Identifier                []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`                // Identifiers associated with this Medication Statement that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
	Status                    *string              `binding:"required" bson:",omitempty" json:"status,omitempty"` // A code representing the status of recording the medication statement.
	Category                  []*CodeableConcept   `bson:",omitempty" json:"category,omitempty"`                  // Type of medication statement (for example, drug classification like ATC, where meds would be administered, legal category of the medication.).
	Encounter                 *Reference           `bson:",omitempty" json:"encounter,omitempty"`                 // The encounter that establishes the context for this MedicationStatement.
	InformationSource         []*Reference         `bson:",omitempty" json:"informationSource,omitempty"`         // The person or organization that provided the information about the taking of this medication. Note: Use derivedFrom when a MedicationStatement is derived from other resources, e.g. Claim or MedicationRequest.
	DerivedFrom               []*Reference         `bson:",omitempty" json:"derivedFrom,omitempty"`               // Allows linking the MedicationStatement to the underlying MedicationRequest, or to other information that supports or is used to derive the MedicationStatement.
	RenderedDosageInstruction *string              `bson:",omitempty" json:"renderedDosageInstruction,omitempty"` // The full representation of the dose of the medication included in all dosage instructions.  To be used when multiple dosage instructions are included to represent complex dosing such as increasing or tapering doses.
	DateAsserted              *DateTime            `bson:",omitempty" json:"dateAsserted,omitempty"`              // The date when the Medication Statement was asserted by the information source.
	Meta                      *Meta                `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules             *string              `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text                      *Narrative           `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained                 []*Resource          `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension         []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	PartOf                     []*Reference                  `bson:",omitempty" json:"partOf,omitempty"`                        // A larger event of which this particular MedicationStatement is a component or step.
	Medication                 *CodeableReference            `binding:"required" bson:",omitempty" json:"medication,omitempty"` // Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
	Note                       []*Annotation                 `bson:",omitempty" json:"note,omitempty"`                          // Provides extra information about the Medication Statement that is not conveyed by the other attributes.
	RelatedClinicalInformation []*Reference                  `bson:",omitempty" json:"relatedClinicalInformation,omitempty"`    // Link to information that is relevant to a medication statement, for example, illicit drug use, gestational age, etc.
	Extension                  []*Extension                  `bson:",omitempty" json:"extension,omitempty"`                     // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Subject                    *Reference                    `binding:"required" bson:",omitempty" json:"subject,omitempty"`    // The person, animal or group who is/was taking the medication.
	Dosage                     []*Dosage                     `bson:",omitempty" json:"dosage,omitempty"`                        // Indicates how the medication is/was or should be taken by the patient.
	Adherence                  *MedicationStatementAdherence `binding:"omitempty" bson:",omitempty"`
	ResourceType               string                        `binding:"omitempty" bson:"-" json:"resourceType"`
}
type MedicationStatementEffectivex struct {
	EffectiveDateTime DateTime `bson:",omitempty" json:"effectiveDateTime,omitempty"`
	EffectivePeriod   Period   `bson:",omitempty" json:"effectivePeriod,omitempty"`
	EffectiveTiming   Timing   `bson:",omitempty" json:"effectiveTiming,omitempty"`
}

func (out *MedicationStatementAdherence) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type MedicationStatementAdherence struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code      *CodeableConcept `binding:"required" bson:",omitempty" json:"code,omitempty"` // Type of the adherence for the medication.
	Reason    *CodeableConcept `bson:",omitempty" json:"reason,omitempty"`                  // Captures the reason for the current use or adherence of a medication.
	Id        *string          `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension     `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *MedicinalProductDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"MedicinalProductDefinition\"" {
		return fmt.Errorf("resourceType is not %s", "MedicinalProductDefinition")
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["statusDate"]) > 0 {
		if err := go1.Unmarshal(asMap["statusDate"], &out.StatusDate); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["pediatricUseIndicator"]) > 0 {
		if err := go1.Unmarshal(asMap["pediatricUseIndicator"], &out.PediatricUseIndicator); err != nil {
			return err
		}

	}
	if len(asMap["packagedMedicinalProduct"]) > 0 {
		if err := go1.Unmarshal(asMap["packagedMedicinalProduct"], &out.PackagedMedicinalProduct); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["additionalMonitoringIndicator"]) > 0 {
		if err := go1.Unmarshal(asMap["additionalMonitoringIndicator"], &out.AdditionalMonitoringIndicator); err != nil {
			return err
		}

	}
	if len(asMap["attachedDocument"]) > 0 {
		if err := go1.Unmarshal(asMap["attachedDocument"], &out.AttachedDocument); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["combinedPharmaceuticalDoseForm"]) > 0 {
		if err := go1.Unmarshal(asMap["combinedPharmaceuticalDoseForm"], &out.CombinedPharmaceuticalDoseForm); err != nil {
			return err
		}

	}
	if len(asMap["marketingStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["marketingStatus"], &out.MarketingStatus); err != nil {
			return err
		}

	}
	if len(asMap["comprisedOf"]) > 0 {
		if err := go1.Unmarshal(asMap["comprisedOf"], &out.ComprisedOf); err != nil {
			return err
		}

	}
	if len(asMap["impurity"]) > 0 {
		if err := go1.Unmarshal(asMap["impurity"], &out.Impurity); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["domain"]) > 0 {
		if err := go1.Unmarshal(asMap["domain"], &out.Domain); err != nil {
			return err
		}

	}
	if len(asMap["operation"]) > 0 {
		if err := go1.Unmarshal(asMap["operation"], &out.Operation); err != nil {
			return err
		}

	}
	if len(asMap["characteristic"]) > 0 {
		if err := go1.Unmarshal(asMap["characteristic"], &out.Characteristic); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["route"]) > 0 {
		if err := go1.Unmarshal(asMap["route"], &out.Route); err != nil {
			return err
		}

	}
	if len(asMap["legalStatusOfSupply"]) > 0 {
		if err := go1.Unmarshal(asMap["legalStatusOfSupply"], &out.LegalStatusOfSupply); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["ingredient"]) > 0 {
		if err := go1.Unmarshal(asMap["ingredient"], &out.Ingredient); err != nil {
			return err
		}

	}
	if len(asMap["crossReference"]) > 0 {
		if err := go1.Unmarshal(asMap["crossReference"], &out.CrossReference); err != nil {
			return err
		}

	}
	if len(asMap["indication"]) > 0 {
		if err := go1.Unmarshal(asMap["indication"], &out.Indication); err != nil {
			return err
		}

	}
	if len(asMap["specialMeasures"]) > 0 {
		if err := go1.Unmarshal(asMap["specialMeasures"], &out.SpecialMeasures); err != nil {
			return err
		}

	}
	if len(asMap["classification"]) > 0 {
		if err := go1.Unmarshal(asMap["classification"], &out.Classification); err != nil {
			return err
		}

	}
	if len(asMap["masterFile"]) > 0 {
		if err := go1.Unmarshal(asMap["masterFile"], &out.MasterFile); err != nil {
			return err
		}

	}
	if len(asMap["clinicalTrial"]) > 0 {
		if err := go1.Unmarshal(asMap["clinicalTrial"], &out.ClinicalTrial); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	return nil
}

type MedicinalProductDefinition struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	StatusDate                     *DateTime                                 `bson:",omitempty" json:"statusDate,omitempty"`                    // The date at which the given status became applicable.
	Description                    *string                                   `bson:",omitempty" json:"description,omitempty"`                   // General description of this product.
	PediatricUseIndicator          *CodeableConcept                          `bson:",omitempty" json:"pediatricUseIndicator,omitempty"`         // If authorised for use in children, or infants, neonates etc.
	PackagedMedicinalProduct       []*CodeableConcept                        `bson:",omitempty" json:"packagedMedicinalProduct,omitempty"`      // Package type for the product. See also the PackagedProductDefinition resource.
	Text                           *Narrative                                `bson:",omitempty" json:"text,omitempty"`                          // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Identifier                     []*Identifier                             `bson:",omitempty" json:"identifier,omitempty"`                    // Business identifier for this product. Could be an MPID. When in development or being regulated, products are typically referenced by official identifiers, assigned by a manufacturer or regulator, and unique to a product (which, when compared to a product instance being prescribed, is actually a product type). See also MedicinalProductDefinition.code.
	AdditionalMonitoringIndicator  *CodeableConcept                          `bson:",omitempty" json:"additionalMonitoringIndicator,omitempty"` // Whether the Medicinal Product is subject to additional monitoring for regulatory reasons, such as heightened reporting requirements.
	AttachedDocument               []*Reference                              `bson:",omitempty" json:"attachedDocument,omitempty"`              // Additional information or supporting documentation about the medicinal product.
	Extension                      []*Extension                              `bson:",omitempty" json:"extension,omitempty"`                     // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Status                         *CodeableConcept                          `bson:",omitempty" json:"status,omitempty"`                        // The status within the lifecycle of this product record. A high-level status, this is not intended to duplicate details carried elsewhere such as legal status, or authorization status.
	Name                           *MedicinalProductDefinitionName           `binding:"omitempty" bson:",omitempty"`
	Version                        *string                                   `bson:",omitempty" json:"version,omitempty"`                        // A business identifier relating to a specific version of the product, this is commonly used to support revisions to an existing product.
	CombinedPharmaceuticalDoseForm *CodeableConcept                          `bson:",omitempty" json:"combinedPharmaceuticalDoseForm,omitempty"` // The dose form for a single part product, or combined form of a multiple part product. This is one concept that describes all the components. It does not represent the form with components physically mixed, if that might be necessary, for which see (AdministrableProductDefinition.administrableDoseForm).
	MarketingStatus                []*MarketingStatus                        `bson:",omitempty" json:"marketingStatus,omitempty"`                // Marketing status of the medicinal product, in contrast to marketing authorization. This refers to the product being actually 'on the market' as opposed to being allowed to be on the market (which is an authorization).
	ComprisedOf                    []*Reference                              `bson:",omitempty" json:"comprisedOf,omitempty"`                    // Types of medicinal manufactured items and/or devices that this product consists of, such as tablets, capsule, or syringes. Used as a direct link when the item's packaging is not being recorded (see also PackagedProductDefinition.package.containedItem.item).
	Impurity                       []*CodeableReference                      `bson:",omitempty" json:"impurity,omitempty"`                       // Any component of the drug product which is not the chemical entity defined as the drug substance, or an excipient in the drug product. This includes process-related impurities and contaminants, product-related impurities including degradation products.
	Contact                        *MedicinalProductDefinitionContact        `binding:"omitempty" bson:",omitempty"`
	ImplicitRules                  *string                                   `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Type                           *CodeableConcept                          `bson:",omitempty" json:"type,omitempty"`          // Regulatory type, e.g. Investigational or Authorized.
	Domain                         *CodeableConcept                          `bson:",omitempty" json:"domain,omitempty"`        // If this medicine applies to human or veterinary uses.
	Operation                      *MedicinalProductDefinitionOperation      `binding:"omitempty" bson:",omitempty"`
	Characteristic                 *MedicinalProductDefinitionCharacteristic `binding:"omitempty" bson:",omitempty"`
	Language                       *string                                   `bson:",omitempty" json:"language,omitempty"`            // The base language in which the resource is written.
	Route                          []*CodeableConcept                        `bson:",omitempty" json:"route,omitempty"`               // The path by which the product is taken into or makes contact with the body. In some regions this is referred to as the licenced or approved route. See also AdministrableProductDefinition resource. MedicinalProductDefinition.route is the same concept as AdministrableProductDefinition.routeOfAdministration.code, and they cannot be used together.
	LegalStatusOfSupply            *CodeableConcept                          `bson:",omitempty" json:"legalStatusOfSupply,omitempty"` // The legal status of supply of the medicinal product as classified by the regulator.
	Id                             *primitive.ObjectID                       `bson:"_id,omitempty" json:"id,omitempty"`               // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta                           *Meta                                     `bson:",omitempty" json:"meta,omitempty"`                // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Contained                      []*Resource                               `bson:",omitempty" json:"contained,omitempty"`           // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Ingredient                     []*CodeableConcept                        `bson:",omitempty" json:"ingredient,omitempty"`          // The ingredients of this medicinal product - when not detailed in other resources. This is only needed if the ingredients are not specified by incoming references from the Ingredient resource, or indirectly via incoming AdministrableProductDefinition, PackagedProductDefinition or ManufacturedItemDefinition references. In cases where those levels of detail are not used, the ingredients may be specified directly here as codes.
	CrossReference                 *MedicinalProductDefinitionCrossReference `binding:"omitempty" bson:",omitempty"`
	Indication                     *string                                   `bson:",omitempty" json:"indication,omitempty"`      // Description of indication(s) for this product, used when structured indications are not required. In cases where structured indications are required, they are captured using the ClinicalUseDefinition resource. An indication is a medical situation for which using the product is appropriate.
	SpecialMeasures                []*CodeableConcept                        `bson:",omitempty" json:"specialMeasures,omitempty"` // Whether the Medicinal Product is subject to special measures for regulatory reasons, such as a requirement to conduct post-authorization studies.
	Classification                 []*CodeableConcept                        `bson:",omitempty" json:"classification,omitempty"`  // Allows the product to be classified by various systems, commonly WHO ATC.
	MasterFile                     []*Reference                              `bson:",omitempty" json:"masterFile,omitempty"`      // A master file for the medicinal product (e.g. Pharmacovigilance System Master File). Drug master files (DMFs) are documents submitted to regulatory agencies to provide confidential detailed information about facilities, processes or articles used in the manufacturing, processing, packaging and storing of drug products.
	ClinicalTrial                  []*Reference                              `bson:",omitempty" json:"clinicalTrial,omitempty"`   // Clinical trials or studies that this product is involved in.
	Code                           []*Coding                                 `bson:",omitempty" json:"code,omitempty"`            // A code that this product is known by, usually within some formal terminology, perhaps assigned by a third party (i.e. not the manufacturer or regulator). Products (types of medications) tend to be known by identifiers during development and within regulatory process. However when they are prescribed they tend to be identified by codes. The same product may be have multiple codes, applied to it by multiple organizations.
	ResourceType                   string                                    `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *MedicinalProductDefinitionName) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["usage"]) > 0 {
		if err := go1.Unmarshal(asMap["usage"], &out.Usage); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["productName"], &out.ProductName); err != nil {
		return err
	}

	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["part"]) > 0 {
		if err := go1.Unmarshal(asMap["part"], &out.Part); err != nil {
			return err
		}

	}
	return nil
}

type MedicinalProductDefinitionName struct {
	Usage             *MedicinalProductDefinitionNameUsage `binding:"omitempty" bson:",omitempty"`
	Id                *string                              `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                         `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ProductName *string                             `binding:"required" bson:",omitempty" json:"productName,omitempty"` // The full product name.
	Type        *CodeableConcept                    `bson:",omitempty" json:"type,omitempty"`                           // Type of product name, such as rINN, BAN, Proprietary, Non-Proprietary.
	Part        *MedicinalProductDefinitionNamePart `binding:"omitempty" bson:",omitempty"`
}

func (out *MedicinalProductDefinitionNameUsage) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["country"], &out.Country); err != nil {
		return err
	}

	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
		return err
	}

	return nil
}

type MedicinalProductDefinitionNameUsage struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Country      *CodeableConcept `binding:"required" bson:",omitempty" json:"country,omitempty"`  // Country code for where this name applies.
	Jurisdiction *CodeableConcept `bson:",omitempty" json:"jurisdiction,omitempty"`                // Jurisdiction code for where this name applies. A jurisdiction may be a sub- or supra-national entity (e.g. a state or a geographic region).
	Language     *CodeableConcept `binding:"required" bson:",omitempty" json:"language,omitempty"` // Language code for this name.
}

func (out *MedicinalProductDefinitionNamePart) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["part"], &out.Part); err != nil {
		return err
	}

	return nil
}

type MedicinalProductDefinitionNamePart struct {
	Type              *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // Identifying type for this part of the name (e.g. strength part).
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`       /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Part *string `binding:"required" bson:",omitempty" json:"part,omitempty"` // A fragment of a product name.
}

func (out *MedicinalProductDefinitionContact) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type MedicinalProductDefinitionContact struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type    *CodeableConcept `bson:",omitempty" json:"type,omitempty"`                       // Allows the contact to be classified, for example QPPV, Pharmacovigilance Enquiry Information.
	Contact *Reference       `binding:"required" bson:",omitempty" json:"contact,omitempty"` // A product specific contact, person (in a role), or an organization.
	Id      *string          `bson:"_id,omitempty" json:"id,omitempty"`                      // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *MedicinalProductDefinitionOperation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["effectiveDate"]) > 0 {
		if err := go1.Unmarshal(asMap["effectiveDate"], &out.EffectiveDate); err != nil {
			return err
		}

	}
	if len(asMap["organization"]) > 0 {
		if err := go1.Unmarshal(asMap["organization"], &out.Organization); err != nil {
			return err
		}

	}
	if len(asMap["confidentialityIndicator"]) > 0 {
		if err := go1.Unmarshal(asMap["confidentialityIndicator"], &out.ConfidentialityIndicator); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type MedicinalProductDefinitionOperation struct {
	Type                     *CodeableReference `bson:",omitempty" json:"type,omitempty"`                     // The type of manufacturing operation e.g. manufacturing itself, re-packaging. For the authorization of this, a RegulatedAuthorization would point to the same plan or activity referenced here.
	EffectiveDate            *Period            `bson:",omitempty" json:"effectiveDate,omitempty"`            // Date range of applicability.
	Organization             []*Reference       `bson:",omitempty" json:"organization,omitempty"`             // The organization or establishment responsible for (or associated with) the particular process or step, examples include the manufacturer, importer, agent.
	ConfidentialityIndicator *CodeableConcept   `bson:",omitempty" json:"confidentialityIndicator,omitempty"` // Specifies whether this particular business or manufacturing process is considered proprietary or confidential.
	Id                       *string            `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension                []*Extension       `bson:",omitempty" json:"extension,omitempty"`                // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension        []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"`        /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *MedicinalProductDefinitionCharacteristic) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueMarkdown"], &out.ValueMarkdown); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDate"], &out.ValueDate); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	return nil
}

type MedicinalProductDefinitionCharacteristic struct {
	MedicinalProductDefinitionCharacteristicValuex
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // A code expressing the type of characteristic.
}
type MedicinalProductDefinitionCharacteristicValuex struct {
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueMarkdown        string          `bson:",omitempty" json:"valueMarkdown,omitempty"`
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueInteger         int             `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueDate            Date            `bson:",omitempty" json:"valueDate,omitempty"`
	ValueBoolean         bool            `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueAttachment      Attachment      `bson:",omitempty" json:"valueAttachment,omitempty"`
}

func (out *MedicinalProductDefinitionCrossReference) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["product"], &out.Product); err != nil {
		return err
	}

	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	return nil
}

type MedicinalProductDefinitionCrossReference struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Product *CodeableReference `binding:"required" bson:",omitempty" json:"product,omitempty"` // Reference to another product, e.g. for linking authorised to investigational product.
	Type    *CodeableConcept   `bson:",omitempty" json:"type,omitempty"`                       // The type of relationship, for instance branded to generic, virtual to actual product, product to development product (investigational), parallel import version.
}

func (out *MessageDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"MessageDefinition\"" {
		return fmt.Errorf("resourceType is not %s", "MessageDefinition")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["replaces"]) > 0 {
		if err := go1.Unmarshal(asMap["replaces"], &out.Replaces); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
		return err
	}

	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["graph"]) > 0 {
		if err := go1.Unmarshal(asMap["graph"], &out.Graph); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["parent"]) > 0 {
		if err := go1.Unmarshal(asMap["parent"], &out.Parent); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["eventCoding"], &out.EventCoding); err == nil {
	} else if err := go1.Unmarshal(asMap["eventUri"], &out.EventUri); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "event[x]")
	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["focus"]) > 0 {
		if err := go1.Unmarshal(asMap["focus"], &out.Focus); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["responseRequired"]) > 0 {
		if err := go1.Unmarshal(asMap["responseRequired"], &out.ResponseRequired); err != nil {
			return err
		}

	}
	if len(asMap["allowedResponse"]) > 0 {
		if err := go1.Unmarshal(asMap["allowedResponse"], &out.AllowedResponse); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["base"]) > 0 {
		if err := go1.Unmarshal(asMap["base"], &out.Base); err != nil {
			return err
		}

	}
	return nil
}

type MessageDefinition struct {
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                   // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Name              *string             `bson:",omitempty" json:"name,omitempty"`                    // A natural language name identifying the message definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Replaces          []*string           `bson:",omitempty" json:"replaces,omitempty"`                // A MessageDefinition that is superseded by this definition.
	Date              *DateTime           `binding:"required" bson:",omitempty" json:"date,omitempty"` // The date  (and optionally time) when the message definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the message definition changes.
	Purpose           *string             `bson:",omitempty" json:"purpose,omitempty"`                 // Explanation of why this message definition is needed and why it has been designed as it has.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"`       /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Description  *string     `bson:",omitempty" json:"description,omitempty"`  // A free text natural language description of the message definition from a consumer's perspective.
	Graph        *string     `bson:",omitempty" json:"graph,omitempty"`        // Graph is Canonical reference to a GraphDefinition. If a URL is provided, it is the canonical reference to a GraphDefinition that it controls what additional resources are to be added to the Bundle when building the message. The GraphDefinition can also specify profiles that apply to the various resources.
	Contained    []*Resource `bson:",omitempty" json:"contained,omitempty"`    // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Experimental *bool       `bson:",omitempty" json:"experimental,omitempty"` // A Boolean value to indicate that this message definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Meta         *Meta       `bson:",omitempty" json:"meta,omitempty"`         // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Title        *string     `bson:",omitempty" json:"title,omitempty"`        // A short, descriptive, user-friendly title for the message definition.
	Parent       []*string   `bson:",omitempty" json:"parent,omitempty"`       // Identifies a protocol or workflow that this MessageDefinition represents a step in.
	MessageDefinitionEventx
	Category         *string                           `bson:",omitempty" json:"category,omitempty"` // The impact of the content of the message.
	Focus            *MessageDefinitionFocus           `binding:"omitempty" bson:",omitempty"`
	Text             *Narrative                        `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension        []*Extension                      `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Status           *string                           `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this message definition. Enables tracking the life-cycle of the content.
	Copyright        *string                           `bson:",omitempty" json:"copyright,omitempty"`                 // A copyright statement relating to the message definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the message definition.
	CopyrightLabel   *string                           `bson:",omitempty" json:"copyrightLabel,omitempty"`            // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	ResponseRequired *string                           `bson:",omitempty" json:"responseRequired,omitempty"`          // Declare at a message definition level whether a response is required or only upon error or success, or never.
	AllowedResponse  *MessageDefinitionAllowedResponse `binding:"omitempty" bson:",omitempty"`
	UseContext       []*UsageContext                   `bson:",omitempty" json:"useContext,omitempty"`    // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate message definition instances.
	ImplicitRules    *string                           `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language         *string                           `bson:",omitempty" json:"language,omitempty"`      // The base language in which the resource is written.
	Url              *string                           `bson:",omitempty" json:"url,omitempty"`           // The business identifier that is used to reference the MessageDefinition and *is* expected to be consistent from server to server.
	Identifier       []*Identifier                     `bson:",omitempty" json:"identifier,omitempty"`    // A formal identifier that is used to identify this message definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
	MessageDefinitionVersionAlgorithmx
	Publisher    *string            `bson:",omitempty" json:"publisher,omitempty"`    // The name of the organization or individual responsible for the release and ongoing maintenance of the message definition.
	Contact      []*ContactDetail   `bson:",omitempty" json:"contact,omitempty"`      // Contact details to assist a user in finding and communicating with the publisher.
	Jurisdiction []*CodeableConcept `bson:",omitempty" json:"jurisdiction,omitempty"` // A legal or geographic region in which the message definition is intended to be used.
	Version      *string            `bson:",omitempty" json:"version,omitempty"`      // The identifier that is used to identify this version of the message definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the message definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Base         *string            `bson:",omitempty" json:"base,omitempty"`         // The MessageDefinition that is the basis for the contents of this resource.
	ResourceType string             `binding:"omitempty" bson:"-" json:"resourceType"`
}
type MessageDefinitionEventx struct {
	EventCoding Coding `bson:",omitempty" json:"eventCoding,omitempty"`
	EventUri    string `bson:",omitempty" json:"eventUri,omitempty"`
}

func (out *MessageDefinitionFocus) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["profile"]) > 0 {
		if err := go1.Unmarshal(asMap["profile"], &out.Profile); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["min"], &out.Min); err != nil {
		return err
	}

	if len(asMap["max"]) > 0 {
		if err := go1.Unmarshal(asMap["max"], &out.Max); err != nil {
			return err
		}

	}
	return nil
}

type MessageDefinitionFocus struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code    *string `binding:"required" bson:",omitempty" json:"code,omitempty"` // The kind of resource that must be the focus for this message.
	Profile *string `bson:",omitempty" json:"profile,omitempty"`                 // A profile that reflects constraints for the focal resource (and potentially for related resources).
	Min     *int    `binding:"required" bson:",omitempty" json:"min,omitempty"`  // Identifies the minimum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.
	Max     *string `bson:",omitempty" json:"max,omitempty"`                     // Identifies the maximum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.
}

func (out *MessageDefinitionAllowedResponse) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["message"], &out.Message); err != nil {
		return err
	}

	if len(asMap["situation"]) > 0 {
		if err := go1.Unmarshal(asMap["situation"], &out.Situation); err != nil {
			return err
		}

	}
	return nil
}

type MessageDefinitionAllowedResponse struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Message   *string `binding:"required" bson:",omitempty" json:"message,omitempty"` // A reference to the message definition that must be adhered to by this supported response.
	Situation *string `bson:",omitempty" json:"situation,omitempty"`                  // Provides a description of the circumstances in which this response should be used (as opposed to one of the alternative responses).
}
type MessageDefinitionVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *MessageHeader) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"MessageHeader\"" {
		return fmt.Errorf("resourceType is not %s", "MessageHeader")
	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["eventCoding"], &out.EventCoding); err == nil {
	} else if err := go1.Unmarshal(asMap["eventCanonical"], &out.EventCanonical); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "event[x]")
	}
	if len(asMap["responsible"]) > 0 {
		if err := go1.Unmarshal(asMap["responsible"], &out.Responsible); err != nil {
			return err
		}

	}
	if len(asMap["response"]) > 0 {
		if err := go1.Unmarshal(asMap["response"], &out.Response); err != nil {
			return err
		}

	}
	if len(asMap["definition"]) > 0 {
		if err := go1.Unmarshal(asMap["definition"], &out.Definition); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["destination"]) > 0 {
		if err := go1.Unmarshal(asMap["destination"], &out.Destination); err != nil {
			return err
		}

	}
	if len(asMap["sender"]) > 0 {
		if err := go1.Unmarshal(asMap["sender"], &out.Sender); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
		return err
	}

	if len(asMap["focus"]) > 0 {
		if err := go1.Unmarshal(asMap["focus"], &out.Focus); err != nil {
			return err
		}

	}
	return nil
}

type MessageHeader struct {
	ImplicitRules     *string      `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language          *string      `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Reason *CodeableConcept `bson:",omitempty" json:"reason,omitempty"` // Coded indication of the cause for the event - indicates  a reason for the occurrence of the event that is a focus of this message.
	Meta   *Meta            `bson:",omitempty" json:"meta,omitempty"`   // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	MessageHeaderEventx
	Responsible  *Reference                `bson:",omitempty" json:"responsible,omitempty"` // The person or organization that accepts overall responsibility for the contents of the message. The implication is that the message event happened under the policies of the responsible party.
	Response     *MessageHeaderResponse    `binding:"omitempty" bson:",omitempty"`
	Definition   *string                   `bson:",omitempty" json:"definition,omitempty"` // Permanent link to the MessageDefinition for this message.
	Id           *primitive.ObjectID       `bson:"_id,omitempty" json:"id,omitempty"`      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Text         *Narrative                `bson:",omitempty" json:"text,omitempty"`       // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained    []*Resource               `bson:",omitempty" json:"contained,omitempty"`  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Author       *Reference                `bson:",omitempty" json:"author,omitempty"`     // The logical author of the message - the personor device that decided the described event should happen. When there is more than one candidate, pick the most proximal to the MessageHeader. Can provide other authors in extensions.
	Extension    []*Extension              `bson:",omitempty" json:"extension,omitempty"`  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Destination  *MessageHeaderDestination `binding:"omitempty" bson:",omitempty"`
	Sender       *Reference                `bson:",omitempty" json:"sender,omitempty"` // Identifies the sending system to allow the use of a trust relationship.
	Source       *MessageHeaderSource      `binding:"omitempty" bson:",omitempty"`
	Focus        []*Reference              `bson:",omitempty" json:"focus,omitempty"` // The actual data of the message - a reference to the root/focus class of the event. This is allowed to be a Parameters resource.
	ResourceType string                    `binding:"omitempty" bson:"-" json:"resourceType"`
}
type MessageHeaderEventx struct {
	EventCoding    Coding `bson:",omitempty" json:"eventCoding,omitempty"`
	EventCanonical string `bson:",omitempty" json:"eventCanonical,omitempty"`
}

func (out *MessageHeaderResponse) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["details"]) > 0 {
		if err := go1.Unmarshal(asMap["details"], &out.Details); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type MessageHeaderResponse struct {
	Identifier        *Identifier  `binding:"required" bson:",omitempty" json:"identifier,omitempty"` // The Bundle.identifier of the message to which this message is a response.
	Code              *string      `binding:"required" bson:",omitempty" json:"code,omitempty"`       // Code that identifies the type of response to the message - whether it was successful or not, and whether it should be resent or not.
	Details           *Reference   `bson:",omitempty" json:"details,omitempty"`                       // Full details of any issues found in the message.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                         // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                     // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`             /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *MessageHeaderDestination) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["endpointUrl"], &out.EndpointUrl); err == nil {
	} else if err := go1.Unmarshal(asMap["endpointReference"], &out.EndpointReference); err == nil {
	} else {

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["target"]) > 0 {
		if err := go1.Unmarshal(asMap["target"], &out.Target); err != nil {
			return err
		}

	}
	if len(asMap["receiver"]) > 0 {
		if err := go1.Unmarshal(asMap["receiver"], &out.Receiver); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type MessageHeaderDestination struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	MessageHeaderDestinationEndpointx
	Name      *string      `bson:",omitempty" json:"name,omitempty"`      // Human-readable name for the target system.
	Target    *Reference   `bson:",omitempty" json:"target,omitempty"`    // Identifies the target end system in situations where the initial message transmission is to an intermediary system.
	Receiver  *Reference   `bson:",omitempty" json:"receiver,omitempty"`  // Allows data conveyed by a message to be addressed to a particular person or department when routing to a specific application isn't sufficient.
	Id        *string      `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}
type MessageHeaderDestinationEndpointx struct {
	EndpointUrl       url.URL   `bson:",omitempty" json:"endpointUrl,omitempty"`
	EndpointReference Reference `bson:",omitempty" json:"endpointReference,omitempty"`
}

func (out *MessageHeaderSource) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["endpointUrl"], &out.EndpointUrl); err == nil {
	} else if err := go1.Unmarshal(asMap["endpointReference"], &out.EndpointReference); err == nil {
	} else {

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["software"]) > 0 {
		if err := go1.Unmarshal(asMap["software"], &out.Software); err != nil {
			return err
		}

	}
	return nil
}

type MessageHeaderSource struct {
	Version           *string       `bson:",omitempty" json:"version,omitempty"`           // Can convey versions of multiple systems in situations where a message passes through multiple hands.
	Contact           *ContactPoint `bson:",omitempty" json:"contact,omitempty"`           // An e-mail, phone, website or other contact point to use to resolve issues with message communications.
	Id                *string       `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension  `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension  `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	MessageHeaderSourceEndpointx
	Name     *string `bson:",omitempty" json:"name,omitempty"`     // Human-readable name for the source system.
	Software *string `bson:",omitempty" json:"software,omitempty"` // May include configuration or other information useful in debugging.
}
type MessageHeaderSourceEndpointx struct {
	EndpointUrl       url.URL   `bson:",omitempty" json:"endpointUrl,omitempty"`
	EndpointReference Reference `bson:",omitempty" json:"endpointReference,omitempty"`
}

func (out *MetadataResource) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"MetadataResource\"" {
		return fmt.Errorf("resourceType is not %s", "MetadataResource")
	}
	if len(asMap["topic"]) > 0 {
		if err := go1.Unmarshal(asMap["topic"], &out.Topic); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["reviewer"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewer"], &out.Reviewer); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["approvalDate"]) > 0 {
		if err := go1.Unmarshal(asMap["approvalDate"], &out.ApprovalDate); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["lastReviewDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastReviewDate"], &out.LastReviewDate); err != nil {
			return err
		}

	}
	if len(asMap["editor"]) > 0 {
		if err := go1.Unmarshal(asMap["editor"], &out.Editor); err != nil {
			return err
		}

	}
	if len(asMap["effectivePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["endorser"]) > 0 {
		if err := go1.Unmarshal(asMap["endorser"], &out.Endorser); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["relatedArtifact"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedArtifact"], &out.RelatedArtifact); err != nil {
			return err
		}

	}
	return nil
}

type MetadataResource struct {
	Topic             []*CodeableConcept `bson:",omitempty" json:"topic,omitempty"`             // Descriptive topics related to the content of the {{title}}. Topics provide a high-level categorization as well as keywords for the {{title}} that can be useful for filtering and searching.
	Identifier        []*Identifier      `bson:",omitempty" json:"identifier,omitempty"`        // A formal identifier that is used to identify this {{title}} when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Date              *DateTime          `bson:",omitempty" json:"date,omitempty"`              // The date (and optionally time) when the {{title}} was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the {{title}} changes.
	Contact           []*ContactDetail   `bson:",omitempty" json:"contact,omitempty"`           // Contact details to assist a user in finding and communicating with the publisher.
	Purpose           *string            `bson:",omitempty" json:"purpose,omitempty"`           // Explanation of why this {{title}} is needed and why it has been designed as it has.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	MetadataResourceVersionAlgorithmx
	Name            *string             `bson:",omitempty" json:"name,omitempty"`                      // A natural language name identifying the {{title}}. This name should be usable as an identifier for the resource by machine processing applications such as code generation.
	Jurisdiction    []*CodeableConcept  `bson:",omitempty" json:"jurisdiction,omitempty"`              // A legal or geographic region in which the {{title}} is intended to be used.
	Publisher       *string             `bson:",omitempty" json:"publisher,omitempty"`                 // The name of the organization or individual responsible for the release and ongoing maintenance of the {{title}}.
	CopyrightLabel  *string             `bson:",omitempty" json:"copyrightLabel,omitempty"`            // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Reviewer        []*ContactDetail    `bson:",omitempty" json:"reviewer,omitempty"`                  // An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the {{title}}.
	Id              *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Contained       []*Resource         `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Version         *string             `bson:",omitempty" json:"version,omitempty"`                   // The identifier that is used to identify this version of the {{title}} when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the {{title}} author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence without additional knowledge.  (See the versionAlgorithm element.)
	Title           *string             `bson:",omitempty" json:"title,omitempty"`                     // A short, descriptive, user-friendly title for the {{title}}.
	Description     *string             `bson:",omitempty" json:"description,omitempty"`               // A free text natural language description of the {{title}} from a consumer's perspective.
	UseContext      []*UsageContext     `bson:",omitempty" json:"useContext,omitempty"`                // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate {{title}}s.
	ApprovalDate    *Date               `bson:",omitempty" json:"approvalDate,omitempty"`              // The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
	ImplicitRules   *string             `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Status          *string             `binding:"required" bson:",omitempty" json:"status,omitempty"` // The current state of this {{title}}.
	Experimental    *bool               `bson:",omitempty" json:"experimental,omitempty"`              // A Boolean value to indicate that this {{title}} is authored for testing purposes (or education/evaluation/marketing) and is not intended for genuine usage.
	Meta            *Meta               `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	LastReviewDate  *Date               `bson:",omitempty" json:"lastReviewDate,omitempty"`            // The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
	Editor          []*ContactDetail    `bson:",omitempty" json:"editor,omitempty"`                    // An individual or organization primarily responsible for internal coherence of the {{title}}.
	EffectivePeriod *Period             `bson:",omitempty" json:"effectivePeriod,omitempty"`           // The period during which the {{title}} content was or is planned to be in active use.
	Author          []*ContactDetail    `bson:",omitempty" json:"author,omitempty"`                    // An individiual or organization primarily involved in the creation and maintenance of the {{title}}.
	Endorser        []*ContactDetail    `bson:",omitempty" json:"endorser,omitempty"`                  // An individual or organization asserted by the publisher to be responsible for officially endorsing the {{title}} for use in some setting.
	Language        *string             `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Text            *Narrative          `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension       []*Extension        `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Url             *string             `bson:",omitempty" json:"url,omitempty"`                       // An absolute URI that is used to identify this {{title}} when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this {{title}} is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the {{title}} is stored on different servers.
	Copyright       *string             `bson:",omitempty" json:"copyright,omitempty"`                 // A copyright statement relating to the {{title}} and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the {{title}}.
	RelatedArtifact []*RelatedArtifact  `bson:",omitempty" json:"relatedArtifact,omitempty"`           // Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts.
	ResourceType    string              `binding:"omitempty" bson:"-" json:"resourceType"`
}
type MetadataResourceVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *MolecularSequence) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"MolecularSequence\"" {
		return fmt.Errorf("resourceType is not %s", "MolecularSequence")
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["device"]) > 0 {
		if err := go1.Unmarshal(asMap["device"], &out.Device); err != nil {
			return err
		}

	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["literal"]) > 0 {
		if err := go1.Unmarshal(asMap["literal"], &out.Literal); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["focus"]) > 0 {
		if err := go1.Unmarshal(asMap["focus"], &out.Focus); err != nil {
			return err
		}

	}
	if len(asMap["specimen"]) > 0 {
		if err := go1.Unmarshal(asMap["specimen"], &out.Specimen); err != nil {
			return err
		}

	}
	if len(asMap["formatted"]) > 0 {
		if err := go1.Unmarshal(asMap["formatted"], &out.Formatted); err != nil {
			return err
		}

	}
	if len(asMap["relative"]) > 0 {
		if err := go1.Unmarshal(asMap["relative"], &out.Relative); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	return nil
}

type MolecularSequence struct {
	Extension         []*Extension               `bson:",omitempty" json:"extension,omitempty"`     // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Identifier        []*Identifier              `bson:",omitempty" json:"identifier,omitempty"`    // A unique identifier for this particular sequence instance.
	Type              *string                    `bson:",omitempty" json:"type,omitempty"`          // Amino Acid Sequence/ DNA Sequence / RNA Sequence.
	Device            *Reference                 `bson:",omitempty" json:"device,omitempty"`        // The method for sequencing, for example, chip information.
	Performer         *Reference                 `bson:",omitempty" json:"performer,omitempty"`     // The organization or lab that should be responsible for this result.
	Literal           *string                    `bson:",omitempty" json:"literal,omitempty"`       // Sequence that was observed.
	Contained         []*Resource                `bson:",omitempty" json:"contained,omitempty"`     // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Subject           *Reference                 `bson:",omitempty" json:"subject,omitempty"`       // Indicates the subject this sequence is associated too.
	Meta              *Meta                      `bson:",omitempty" json:"meta,omitempty"`          // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules     *string                    `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language          *string                    `bson:",omitempty" json:"language,omitempty"`      // The base language in which the resource is written.
	Focus             []*Reference               `bson:",omitempty" json:"focus,omitempty"`         // The actual focus of a molecular sequence when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, child, or sibling. For example, in trio testing, the subject would be the child (proband) and the focus would be the parent.
	Specimen          *Reference                 `bson:",omitempty" json:"specimen,omitempty"`      // Specimen used for sequencing.
	Formatted         []*Attachment              `bson:",omitempty" json:"formatted,omitempty"`     // Sequence that was observed as file content. Can be an actual file contents, or referenced by a URL to an external system.
	Relative          *MolecularSequenceRelative `binding:"omitempty" bson:",omitempty"`
	Id                *primitive.ObjectID        `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ModifierExtension []*Extension               `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Text         *Narrative `bson:",omitempty" json:"text,omitempty"` // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ResourceType string     `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *MolecularSequenceRelative) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["startingSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["startingSequence"], &out.StartingSequence); err != nil {
			return err
		}

	}
	if len(asMap["edit"]) > 0 {
		if err := go1.Unmarshal(asMap["edit"], &out.Edit); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["coordinateSystem"], &out.CoordinateSystem); err != nil {
		return err
	}

	if len(asMap["ordinalPosition"]) > 0 {
		if err := go1.Unmarshal(asMap["ordinalPosition"], &out.OrdinalPosition); err != nil {
			return err
		}

	}
	if len(asMap["sequenceRange"]) > 0 {
		if err := go1.Unmarshal(asMap["sequenceRange"], &out.SequenceRange); err != nil {
			return err
		}

	}
	return nil
}

type MolecularSequenceRelative struct {
	StartingSequence  *MolecularSequenceRelativeStartingSequence `binding:"omitempty" bson:",omitempty"`
	Edit              *MolecularSequenceRelativeEdit             `binding:"omitempty" bson:",omitempty"`
	Id                *string                                    `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                               `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                               `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	CoordinateSystem *CodeableConcept `binding:"required" bson:",omitempty" json:"coordinateSystem,omitempty"` // These are different ways of identifying nucleotides or amino acids within a sequence. Different databases and file types may use different systems. For detail definitions, see https://loinc.org/92822-6/ for more detail.
	OrdinalPosition  *int             `bson:",omitempty" json:"ordinalPosition,omitempty"`                     // Indicates the order in which the sequence should be considered when putting multiple 'relative' elements together.
	SequenceRange    *Range           `bson:",omitempty" json:"sequenceRange,omitempty"`                       // Indicates the nucleotide range in the composed sequence when multiple 'relative' elements are used together.
}

func (out *MolecularSequenceRelativeStartingSequence) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["orientation"]) > 0 {
		if err := go1.Unmarshal(asMap["orientation"], &out.Orientation); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["windowEnd"]) > 0 {
		if err := go1.Unmarshal(asMap["windowEnd"], &out.WindowEnd); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sequenceCodeableConcept"], &out.SequenceCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["sequenceString"], &out.SequenceString); err == nil {
	} else if err := go1.Unmarshal(asMap["sequenceReference"], &out.SequenceReference); err == nil {
	} else {

	}
	if len(asMap["windowStart"]) > 0 {
		if err := go1.Unmarshal(asMap["windowStart"], &out.WindowStart); err != nil {
			return err
		}

	}
	if len(asMap["strand"]) > 0 {
		if err := go1.Unmarshal(asMap["strand"], &out.Strand); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["genomeAssembly"]) > 0 {
		if err := go1.Unmarshal(asMap["genomeAssembly"], &out.GenomeAssembly); err != nil {
			return err
		}

	}
	if len(asMap["chromosome"]) > 0 {
		if err := go1.Unmarshal(asMap["chromosome"], &out.Chromosome); err != nil {
			return err
		}

	}
	return nil
}

type MolecularSequenceRelativeStartingSequence struct {
	Orientation       *string      `bson:",omitempty" json:"orientation,omitempty"`       // A relative reference to a DNA strand based on gene orientation. The strand that contains the open reading frame of the gene is the "sense" strand, and the opposite complementary strand is the "antisense" strand.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	WindowEnd *int `bson:",omitempty" json:"windowEnd,omitempty"` // End position of the window on the starting sequence. This value should honor the rules of the  coordinateSystem.
	MolecularSequenceRelativeStartingSequenceSequencex
	WindowStart    *int             `bson:",omitempty" json:"windowStart,omitempty"`    // Start position of the window on the starting sequence. This value should honor the rules of the coordinateSystem.
	Strand         *string          `bson:",omitempty" json:"strand,omitempty"`         // An absolute reference to a strand. The Watson strand is the strand whose 5'-end is on the short arm of the chromosome, and the Crick strand as the one whose 5'-end is on the long arm.
	Extension      []*Extension     `bson:",omitempty" json:"extension,omitempty"`      // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	GenomeAssembly *CodeableConcept `bson:",omitempty" json:"genomeAssembly,omitempty"` // The genome assembly used for starting sequence, e.g. GRCh38.
	Chromosome     *CodeableConcept `bson:",omitempty" json:"chromosome,omitempty"`     // Structural unit composed of a nucleic acid molecule which controls its own replication through the interaction of specific proteins at one or more origins of replication ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:0000340)).
}
type MolecularSequenceRelativeStartingSequenceSequencex struct {
	SequenceCodeableConcept CodeableConcept `bson:",omitempty" json:"sequenceCodeableConcept,omitempty"`
	SequenceString          string          `bson:",omitempty" json:"sequenceString,omitempty"`
	SequenceReference       Reference       `bson:",omitempty" json:"sequenceReference,omitempty"`
}

func (out *MolecularSequenceRelativeEdit) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["replacedSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["replacedSequence"], &out.ReplacedSequence); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["start"]) > 0 {
		if err := go1.Unmarshal(asMap["start"], &out.Start); err != nil {
			return err
		}

	}
	if len(asMap["end"]) > 0 {
		if err := go1.Unmarshal(asMap["end"], &out.End); err != nil {
			return err
		}

	}
	if len(asMap["replacementSequence"]) > 0 {
		if err := go1.Unmarshal(asMap["replacementSequence"], &out.ReplacementSequence); err != nil {
			return err
		}

	}
	return nil
}

type MolecularSequenceRelativeEdit struct {
	ReplacedSequence  *string      `bson:",omitempty" json:"replacedSequence,omitempty"`  // Allele in the starting sequence. Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the starting sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Start               *int    `bson:",omitempty" json:"start,omitempty"`               // Start position of the edit on the starting sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
	End                 *int    `bson:",omitempty" json:"end,omitempty"`                 // End position of the edit on the starting sequence. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
	ReplacementSequence *string `bson:",omitempty" json:"replacementSequence,omitempty"` // Allele that was observed. Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the observed sequence. When the sequence type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
}

func (out *NamingSystem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"NamingSystem\"" {
		return fmt.Errorf("resourceType is not %s", "NamingSystem")
	}
	if err := go1.Unmarshal(asMap["kind"], &out.Kind); err != nil {
		return err
	}

	if len(asMap["responsible"]) > 0 {
		if err := go1.Unmarshal(asMap["responsible"], &out.Responsible); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["effectivePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err != nil {
			return err
		}

	}
	if len(asMap["topic"]) > 0 {
		if err := go1.Unmarshal(asMap["topic"], &out.Topic); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["endorser"]) > 0 {
		if err := go1.Unmarshal(asMap["endorser"], &out.Endorser); err != nil {
			return err
		}

	}
	if len(asMap["usage"]) > 0 {
		if err := go1.Unmarshal(asMap["usage"], &out.Usage); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
		return err
	}

	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["editor"]) > 0 {
		if err := go1.Unmarshal(asMap["editor"], &out.Editor); err != nil {
			return err
		}

	}
	if len(asMap["relatedArtifact"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedArtifact"], &out.RelatedArtifact); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["uniqueId"], &out.UniqueId); err != nil {
		return err
	}

	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["approvalDate"]) > 0 {
		if err := go1.Unmarshal(asMap["approvalDate"], &out.ApprovalDate); err != nil {
			return err
		}

	}
	if len(asMap["lastReviewDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastReviewDate"], &out.LastReviewDate); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["reviewer"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewer"], &out.Reviewer); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	return nil
}

type NamingSystem struct {
	Kind            *string             `binding:"required" bson:",omitempty" json:"kind,omitempty"` // Indicates the purpose for the naming system - what kinds of things does it make unique?
	Responsible     *string             `bson:",omitempty" json:"responsible,omitempty"`             // The name of the organization that is responsible for issuing identifiers or codes for this namespace and ensuring their non-collision.
	Description     *string             `bson:",omitempty" json:"description,omitempty"`             // A free text natural language description of the naming system from a consumer's perspective. Details about what the namespace identifies including scope, granularity, version labeling, etc.
	EffectivePeriod *Period             `bson:",omitempty" json:"effectivePeriod,omitempty"`         // The period during which the NamingSystem content was or is planned to be in active use.
	Topic           []*CodeableConcept  `bson:",omitempty" json:"topic,omitempty"`                   // Descriptions related to the content of the NamingSystem. Topics provide a high-level categorization as well as keywords for the NamingSystem that can be useful for filtering and searching.
	Identifier      []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`              // A formal identifier that is used to identify this naming system when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Extension       []*Extension        `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Url             *string             `bson:",omitempty" json:"url,omitempty"`                     // An absolute URI that is used to identify this naming system when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this naming system is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the naming system is stored on different servers.
	Contact         []*ContactDetail    `bson:",omitempty" json:"contact,omitempty"`                 // Contact details to assist a user in finding and communicating with the publisher.
	Type            *CodeableConcept    `bson:",omitempty" json:"type,omitempty"`                    // Categorizes a naming system for easier search by grouping related naming systems.
	Endorser        []*ContactDetail    `bson:",omitempty" json:"endorser,omitempty"`                // An individual or organization asserted by the publisher to be responsible for officially endorsing the NamingSystem for use in some setting.
	Usage           *string             `bson:",omitempty" json:"usage,omitempty"`                   // Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc.
	Id              *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                   // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	NamingSystemVersionAlgorithmx
	Date              *DateTime             `binding:"required" bson:",omitempty" json:"date,omitempty"` // The date  (and optionally time) when the naming system was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the naming system changes.
	Copyright         *string               `bson:",omitempty" json:"copyright,omitempty"`               // A copyright statement relating to the naming system and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the naming system.
	Editor            []*ContactDetail      `bson:",omitempty" json:"editor,omitempty"`                  // An individual or organization primarily responsible for internal coherence of the NamingSystem.
	RelatedArtifact   []*RelatedArtifact    `bson:",omitempty" json:"relatedArtifact,omitempty"`         // Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts.
	UniqueId          *NamingSystemUniqueId `binding:"omitempty" bson:",omitempty"`
	ModifierExtension []*Extension          `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Purpose        *string            `bson:",omitempty" json:"purpose,omitempty"`                   // Explanation of why this naming system is needed and why it has been designed as it has.
	Experimental   *bool              `bson:",omitempty" json:"experimental,omitempty"`              // A Boolean value to indicate that this naming system is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Title          *string            `bson:",omitempty" json:"title,omitempty"`                     // A short, descriptive, user-friendly title for the naming system.
	Publisher      *string            `bson:",omitempty" json:"publisher,omitempty"`                 // The name of the organization or individual responsible for the release and ongoing maintenance of the naming system.
	ApprovalDate   *Date              `bson:",omitempty" json:"approvalDate,omitempty"`              // The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
	LastReviewDate *Date              `bson:",omitempty" json:"lastReviewDate,omitempty"`            // The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
	Meta           *Meta              `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language       *string            `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Contained      []*Resource        `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Jurisdiction   []*CodeableConcept `bson:",omitempty" json:"jurisdiction,omitempty"`              // A legal or geographic region in which the naming system is intended to be used.
	CopyrightLabel *string            `bson:",omitempty" json:"copyrightLabel,omitempty"`            // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Author         []*ContactDetail   `bson:",omitempty" json:"author,omitempty"`                    // An individiual or organization primarily involved in the creation and maintenance of the NamingSystem.
	Reviewer       []*ContactDetail   `bson:",omitempty" json:"reviewer,omitempty"`                  // An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the NamingSystem.
	ImplicitRules  *string            `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Name           *string            `binding:"required" bson:",omitempty" json:"name,omitempty"`   // A natural language name identifying the naming system. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Version        *string            `bson:",omitempty" json:"version,omitempty"`                   // The identifier that is used to identify this version of the naming system when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the naming system author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Status         *string            `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this naming system. Enables tracking the life-cycle of the content.
	UseContext     []*UsageContext    `bson:",omitempty" json:"useContext,omitempty"`                // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate naming system instances.
	Text           *Narrative         `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ResourceType   string             `binding:"omitempty" bson:"-" json:"resourceType"`
}
type NamingSystemVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *NamingSystemUniqueId) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
		return err
	}

	if len(asMap["preferred"]) > 0 {
		if err := go1.Unmarshal(asMap["preferred"], &out.Preferred); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["authoritative"]) > 0 {
		if err := go1.Unmarshal(asMap["authoritative"], &out.Authoritative); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["comment"]) > 0 {
		if err := go1.Unmarshal(asMap["comment"], &out.Comment); err != nil {
			return err
		}

	}
	return nil
}

type NamingSystemUniqueId struct {
	Value             *string      `binding:"required" bson:",omitempty" json:"value,omitempty"` // The string that should be sent over the wire to identify the code system or identifier system.
	Preferred         *bool        `bson:",omitempty" json:"preferred,omitempty"`                // Indicates whether this identifier is the "preferred" identifier of this type.
	Period            *Period      `bson:",omitempty" json:"period,omitempty"`                   // Identifies the period of time over which this identifier is considered appropriate to refer to the naming system.  Outside of this window, the identifier might be non-deterministic.
	Authoritative     *bool        `bson:",omitempty" json:"authoritative,omitempty"`            // Indicates whether this identifier ie endorsed by the official owner of the associated naming system.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`        /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type    *string `binding:"required" bson:",omitempty" json:"type,omitempty"` // Identifies the unique identifier scheme used for this particular identifier.
	Comment *string `bson:",omitempty" json:"comment,omitempty"`                 // Notes about the past or intended usage of this identifier.
}

func (out *NutritionIntake) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"NutritionIntake\"" {
		return fmt.Errorf("resourceType is not %s", "NutritionIntake")
	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesCanonical"], &out.InstantiatesCanonical); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesUri"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesUri"], &out.InstantiatesUri); err != nil {
			return err
		}

	}
	if len(asMap["statusReason"]) > 0 {
		if err := go1.Unmarshal(asMap["statusReason"], &out.StatusReason); err != nil {
			return err
		}

	}
	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["recorded"]) > 0 {
		if err := go1.Unmarshal(asMap["recorded"], &out.Recorded); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["consumedItem"], &out.ConsumedItem); err != nil {
		return err
	}

	if len(asMap["ingredientLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["ingredientLabel"], &out.IngredientLabel); err != nil {
			return err
		}

	}
	if len(asMap["derivedFrom"]) > 0 {
		if err := go1.Unmarshal(asMap["derivedFrom"], &out.DerivedFrom); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["reportedBoolean"], &out.ReportedBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["reportedReference"], &out.ReportedReference); err == nil {
	} else {

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["occurrenceDateTime"], &out.OccurrenceDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrencePeriod"], &out.OccurrencePeriod); err == nil {
	} else {

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	return nil
}

type NutritionIntake struct {
	Location              *Reference                `bson:",omitempty" json:"location,omitempty"`              // Where the intake occurred.
	InstantiatesCanonical []*string                 `bson:",omitempty" json:"instantiatesCanonical,omitempty"` // Instantiates FHIR protocol or definition.
	Meta                  *Meta                     `bson:",omitempty" json:"meta,omitempty"`                  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Contained             []*Resource               `bson:",omitempty" json:"contained,omitempty"`             // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Performer             *NutritionIntakePerformer `binding:"omitempty" bson:",omitempty"`
	Reason                []*CodeableReference      `bson:",omitempty" json:"reason,omitempty"`            // A reason, Condition or observation for why the food or fluid is /was consumed.
	Id                    *primitive.ObjectID       `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ImplicitRules         *string                   `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text                  *Narrative                `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ModifierExtension     []*Extension              `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	InstantiatesUri []*string                       `bson:",omitempty" json:"instantiatesUri,omitempty"`            // Instantiates external protocol or definition.
	StatusReason    []*CodeableConcept              `bson:",omitempty" json:"statusReason,omitempty"`               // Captures the reason for the current state of the NutritionIntake.
	PartOf          []*Reference                    `bson:",omitempty" json:"partOf,omitempty"`                     // A larger event of which this particular event is a component or step.
	Subject         *Reference                      `binding:"required" bson:",omitempty" json:"subject,omitempty"` // The person, animal or group who is/was consuming the food or fluid.
	Language        *string                         `bson:",omitempty" json:"language,omitempty"`                   // The base language in which the resource is written.
	Identifier      []*Identifier                   `bson:",omitempty" json:"identifier,omitempty"`                 // Identifiers associated with this Nutrition Intake that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
	Status          *string                         `binding:"required" bson:",omitempty" json:"status,omitempty"`  // A code representing the patient or other source's judgment about the state of the intake that this assertion is about.  Generally, this will be active or completed.
	Recorded        *DateTime                       `bson:",omitempty" json:"recorded,omitempty"`                   // The date when the Nutrition Intake was asserted by the information source.
	ConsumedItem    *NutritionIntakeConsumedItem    `binding:"omitempty" bson:",omitempty"`
	IngredientLabel *NutritionIntakeIngredientLabel `binding:"omitempty" bson:",omitempty"`
	DerivedFrom     []*Reference                    `bson:",omitempty" json:"derivedFrom,omitempty"` // Allows linking the NutritionIntake to the underlying NutritionOrder, or to other information, such as AllergyIntolerance, that supports or is used to derive the NutritionIntake.
	NutritionIntakeReportedx
	BasedOn   []*Reference `bson:",omitempty" json:"basedOn,omitempty"`   // A plan, proposal or order that is fulfilled in whole or in part by this event.
	Encounter *Reference   `bson:",omitempty" json:"encounter,omitempty"` // The encounter that establishes the context for this NutritionIntake.
	NutritionIntakeOccurrencex
	Note         []*Annotation    `bson:",omitempty" json:"note,omitempty"`      // Provides extra information about the Nutrition Intake that is not conveyed by the other attributes.
	Extension    []*Extension     `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Code         *CodeableConcept `bson:",omitempty" json:"code,omitempty"`      // Overall type of nutrition intake.
	ResourceType string           `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *NutritionIntakePerformer) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
		return err
	}

	return nil
}

type NutritionIntakePerformer struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Function *CodeableConcept `bson:",omitempty" json:"function,omitempty"`                 // Type of performer.
	Actor    *Reference       `binding:"required" bson:",omitempty" json:"actor,omitempty"` // Who performed the intake.
}

func (out *NutritionIntakeConsumedItem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["amount"]) > 0 {
		if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
			return err
		}

	}
	if len(asMap["rate"]) > 0 {
		if err := go1.Unmarshal(asMap["rate"], &out.Rate); err != nil {
			return err
		}

	}
	if len(asMap["notConsumed"]) > 0 {
		if err := go1.Unmarshal(asMap["notConsumed"], &out.NotConsumed); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["nutritionProduct"], &out.NutritionProduct); err != nil {
		return err
	}

	if len(asMap["schedule"]) > 0 {
		if err := go1.Unmarshal(asMap["schedule"], &out.Schedule); err != nil {
			return err
		}

	}
	if len(asMap["notConsumedReason"]) > 0 {
		if err := go1.Unmarshal(asMap["notConsumedReason"], &out.NotConsumedReason); err != nil {
			return err
		}

	}
	return nil
}

type NutritionIntakeConsumedItem struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type              *CodeableConcept   `binding:"required" bson:",omitempty" json:"type,omitempty"`             // Indicates what a category of item that was consumed: e.g., food, fluid, enteral, etc.
	Amount            *Quantity          `bson:",omitempty" json:"amount,omitempty"`                              // Quantity of the specified food.
	Rate              *Quantity          `bson:",omitempty" json:"rate,omitempty"`                                // Rate at which enteral feeding was administered.
	NotConsumed       *bool              `bson:",omitempty" json:"notConsumed,omitempty"`                         // Indicator when a patient is in a setting where it is helpful to know if food was not consumed, such as it was refused, held (as in tube feedings), or otherwise not provided. If a consumption is being recorded from an app, such as MyFitnessPal, this indicator will likely not be used.
	Extension         []*Extension       `bson:",omitempty" json:"extension,omitempty"`                           // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	NutritionProduct  *CodeableReference `binding:"required" bson:",omitempty" json:"nutritionProduct,omitempty"` // Identifies the food or fluid product that was consumed. This is potentially a link to a resource representing the details of the food product (TBD) or a simple attribute carrying a code that identifies the food from a known list of foods.
	Schedule          *Timing            `bson:",omitempty" json:"schedule,omitempty"`                            // Scheduled frequency of consumption.
	NotConsumedReason *CodeableConcept   `bson:",omitempty" json:"notConsumedReason,omitempty"`                   // Document the reason the food or fluid was not consumed, such as refused, held, etc.
}

func (out *NutritionIntakeIngredientLabel) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["nutrient"], &out.Nutrient); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
		return err
	}

	return nil
}

type NutritionIntakeIngredientLabel struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Nutrient *CodeableReference `binding:"required" bson:",omitempty" json:"nutrient,omitempty"` // Total nutrient consumed. This could be a macronutrient (protein, fat, carbohydrate), or a vitamin and mineral.
	Amount   *Quantity          `binding:"required" bson:",omitempty" json:"amount,omitempty"`   // Total amount of nutrient consumed.
}
type NutritionIntakeReportedx struct {
	ReportedBoolean   bool      `bson:",omitempty" json:"reportedBoolean,omitempty"`
	ReportedReference Reference `bson:",omitempty" json:"reportedReference,omitempty"`
}
type NutritionIntakeOccurrencex struct {
	OccurrenceDateTime DateTime `bson:",omitempty" json:"occurrenceDateTime,omitempty"`
	OccurrencePeriod   Period   `bson:",omitempty" json:"occurrencePeriod,omitempty"`
}

func (out *NutritionOrder) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"NutritionOrder\"" {
		return fmt.Errorf("resourceType is not %s", "NutritionOrder")
	}
	if err := go1.Unmarshal(asMap["dateTime"], &out.DateTime); err != nil {
		return err
	}

	if len(asMap["allergyIntolerance"]) > 0 {
		if err := go1.Unmarshal(asMap["allergyIntolerance"], &out.AllergyIntolerance); err != nil {
			return err
		}

	}
	if len(asMap["excludeFoodModifier"]) > 0 {
		if err := go1.Unmarshal(asMap["excludeFoodModifier"], &out.ExcludeFoodModifier); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["intent"], &out.Intent); err != nil {
		return err
	}

	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["oralDiet"]) > 0 {
		if err := go1.Unmarshal(asMap["oralDiet"], &out.OralDiet); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesCanonical"], &out.InstantiatesCanonical); err != nil {
			return err
		}

	}
	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["outsideFoodAllowed"]) > 0 {
		if err := go1.Unmarshal(asMap["outsideFoodAllowed"], &out.OutsideFoodAllowed); err != nil {
			return err
		}

	}
	if len(asMap["orderer"]) > 0 {
		if err := go1.Unmarshal(asMap["orderer"], &out.Orderer); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["supportingInformation"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInformation"], &out.SupportingInformation); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesUri"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesUri"], &out.InstantiatesUri); err != nil {
			return err
		}

	}
	if len(asMap["instantiates"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiates"], &out.Instantiates); err != nil {
			return err
		}

	}
	if len(asMap["groupIdentifier"]) > 0 {
		if err := go1.Unmarshal(asMap["groupIdentifier"], &out.GroupIdentifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["supplement"]) > 0 {
		if err := go1.Unmarshal(asMap["supplement"], &out.Supplement); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["foodPreferenceModifier"]) > 0 {
		if err := go1.Unmarshal(asMap["foodPreferenceModifier"], &out.FoodPreferenceModifier); err != nil {
			return err
		}

	}
	if len(asMap["enteralFormula"]) > 0 {
		if err := go1.Unmarshal(asMap["enteralFormula"], &out.EnteralFormula); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	return nil
}

type NutritionOrder struct {
	DateTime              *DateTime                 `binding:"required" bson:",omitempty" json:"dateTime,omitempty"` // The date and time that this nutrition order was requested.
	AllergyIntolerance    []*Reference              `bson:",omitempty" json:"allergyIntolerance,omitempty"`          // A link to a record of allergies or intolerances  which should be included in the nutrition order.
	ExcludeFoodModifier   []*CodeableConcept        `bson:",omitempty" json:"excludeFoodModifier,omitempty"`         // This modifier is used to convey Order-specific modifier about the type of oral food or oral fluids that should not be given. These can be derived from patient allergies, intolerances, or preferences such as No Red Meat, No Soy or No Wheat or  Gluten-Free.  While it should not be necessary to repeat allergy or intolerance information captured in the referenced AllergyIntolerance resource in the excludeFoodModifier, this element may be used to convey additional specificity related to foods that should be eliminated from the patient’s diet for any reason.  This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
	Language              *string                   `bson:",omitempty" json:"language,omitempty"`                    // The base language in which the resource is written.
	Intent                *string                   `binding:"required" bson:",omitempty" json:"intent,omitempty"`   // Indicates the level of authority/intentionality associated with the NutrionOrder and where the request fits into the workflow chain.
	Identifier            []*Identifier             `bson:",omitempty" json:"identifier,omitempty"`                  // Identifiers assigned to this order by the order sender or by the order receiver.
	Encounter             *Reference                `bson:",omitempty" json:"encounter,omitempty"`                   // An encounter that provides additional information about the healthcare context in which this request is made.
	OralDiet              *NutritionOrderOralDiet   `binding:"omitempty" bson:",omitempty"`
	Meta                  *Meta                     `bson:",omitempty" json:"meta,omitempty"`                       // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Contained             []*Resource               `bson:",omitempty" json:"contained,omitempty"`                  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	InstantiatesCanonical []*string                 `bson:",omitempty" json:"instantiatesCanonical,omitempty"`      // The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
	Priority              *string                   `bson:",omitempty" json:"priority,omitempty"`                   // Indicates how quickly the Nutrition Order should be addressed with respect to other        requests.
	Id                    *primitive.ObjectID       `bson:"_id,omitempty" json:"id,omitempty"`                      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ImplicitRules         *string                   `bson:",omitempty" json:"implicitRules,omitempty"`              // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	OutsideFoodAllowed    *bool                     `bson:",omitempty" json:"outsideFoodAllowed,omitempty"`         // This modifier is used to convey whether a food item is allowed to be brought in by the patient and/or family.  If set to true, indicates that the receiving system does not need to supply the food item.
	Orderer               *Reference                `bson:",omitempty" json:"orderer,omitempty"`                    // The practitioner that holds legal responsibility for ordering the diet, nutritional supplement, or formula feedings.
	Status                *string                   `binding:"required" bson:",omitempty" json:"status,omitempty"`  // The workflow status of the nutrition order/request.
	SupportingInformation []*Reference              `bson:",omitempty" json:"supportingInformation,omitempty"`      // Information to support fulfilling (i.e. dispensing or administering) of the nutrition,        for example, patient height and weight).
	InstantiatesUri       []*string                 `bson:",omitempty" json:"instantiatesUri,omitempty"`            // The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
	Instantiates          []*string                 `bson:",omitempty" json:"instantiates,omitempty"`               // The URL pointing to a protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
	GroupIdentifier       *Identifier               `bson:",omitempty" json:"groupIdentifier,omitempty"`            // A shared identifier common to all nutrition orders that were authorized more or less simultaneously by a single author, representing the composite or group identifier.
	Subject               *Reference                `binding:"required" bson:",omitempty" json:"subject,omitempty"` // The person or set of individuals who needs the nutrition order for an oral diet, nutritional supplement and/or enteral or formula feeding.
	Performer             []*CodeableReference      `bson:",omitempty" json:"performer,omitempty"`                  // The specified desired performer of the nutrition order.
	Supplement            *NutritionOrderSupplement `binding:"omitempty" bson:",omitempty"`
	Text                  *Narrative                `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ModifierExtension     []*Extension              `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Note                   []*Annotation                 `bson:",omitempty" json:"note,omitempty"`                   // Comments made about the {{title}} by the requester, performer, subject or other participants.
	FoodPreferenceModifier []*CodeableConcept            `bson:",omitempty" json:"foodPreferenceModifier,omitempty"` // This modifier is used to convey order-specific modifiers about the type of food that should be given. These can be derived from patient allergies, intolerances, or preferences such as Halal, Vegan or Kosher. This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
	EnteralFormula         *NutritionOrderEnteralFormula `binding:"omitempty" bson:",omitempty"`
	Extension              []*Extension                  `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	BasedOn                []*Reference                  `bson:",omitempty" json:"basedOn,omitempty"`   // A plan or request that is fulfilled in whole or in part by this nutrition order.
	ResourceType           string                        `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *NutritionOrderOralDiet) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["nutrient"]) > 0 {
		if err := go1.Unmarshal(asMap["nutrient"], &out.Nutrient); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["schedule"]) > 0 {
		if err := go1.Unmarshal(asMap["schedule"], &out.Schedule); err != nil {
			return err
		}

	}
	if len(asMap["texture"]) > 0 {
		if err := go1.Unmarshal(asMap["texture"], &out.Texture); err != nil {
			return err
		}

	}
	if len(asMap["fluidConsistencyType"]) > 0 {
		if err := go1.Unmarshal(asMap["fluidConsistencyType"], &out.FluidConsistencyType); err != nil {
			return err
		}

	}
	if len(asMap["instruction"]) > 0 {
		if err := go1.Unmarshal(asMap["instruction"], &out.Instruction); err != nil {
			return err
		}

	}
	return nil
}

type NutritionOrderOralDiet struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type                 []*CodeableConcept              `bson:",omitempty" json:"type,omitempty"` // The kind of diet or dietary restriction such as fiber restricted diet or diabetic diet.
	Nutrient             *NutritionOrderOralDietNutrient `binding:"omitempty" bson:",omitempty"`
	Extension            []*Extension                    `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Schedule             *NutritionOrderOralDietSchedule `binding:"omitempty" bson:",omitempty"`
	Texture              *NutritionOrderOralDietTexture  `binding:"omitempty" bson:",omitempty"`
	FluidConsistencyType []*CodeableConcept              `bson:",omitempty" json:"fluidConsistencyType,omitempty"` // The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of liquids or fluids served to the patient.
	Instruction          *string                         `bson:",omitempty" json:"instruction,omitempty"`          // Free text or additional instructions or information pertaining to the oral diet.
}

func (out *NutritionOrderOralDietNutrient) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["modifier"]) > 0 {
		if err := go1.Unmarshal(asMap["modifier"], &out.Modifier); err != nil {
			return err
		}

	}
	if len(asMap["amount"]) > 0 {
		if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
			return err
		}

	}
	return nil
}

type NutritionOrderOralDietNutrient struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Modifier *CodeableConcept `bson:",omitempty" json:"modifier,omitempty"` // The nutrient that is being modified such as carbohydrate or sodium.
	Amount   *Quantity        `bson:",omitempty" json:"amount,omitempty"`   // The quantity of the specified nutrient to include in diet.
}

func (out *NutritionOrderOralDietSchedule) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["timing"]) > 0 {
		if err := go1.Unmarshal(asMap["timing"], &out.Timing); err != nil {
			return err
		}

	}
	if len(asMap["asNeeded"]) > 0 {
		if err := go1.Unmarshal(asMap["asNeeded"], &out.AsNeeded); err != nil {
			return err
		}

	}
	if len(asMap["asNeededFor"]) > 0 {
		if err := go1.Unmarshal(asMap["asNeededFor"], &out.AsNeededFor); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type NutritionOrderOralDietSchedule struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Timing      []*Timing        `bson:",omitempty" json:"timing,omitempty"`      // The time period and frequency at which the diet should be given.  The diet should be given for the combination of all schedules if more than one schedule is present.
	AsNeeded    *bool            `bson:",omitempty" json:"asNeeded,omitempty"`    // Indicates whether the product is only taken when needed within a specific dosing schedule.
	AsNeededFor *CodeableConcept `bson:",omitempty" json:"asNeededFor,omitempty"` // Indicates whether the product is only taken based on a precondition for taking the product.
	Id          *string          `bson:"_id,omitempty" json:"id,omitempty"`       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension   []*Extension     `bson:",omitempty" json:"extension,omitempty"`   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *NutritionOrderOralDietTexture) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["modifier"]) > 0 {
		if err := go1.Unmarshal(asMap["modifier"], &out.Modifier); err != nil {
			return err
		}

	}
	if len(asMap["foodType"]) > 0 {
		if err := go1.Unmarshal(asMap["foodType"], &out.FoodType); err != nil {
			return err
		}

	}
	return nil
}

type NutritionOrderOralDietTexture struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Modifier *CodeableConcept `bson:",omitempty" json:"modifier,omitempty"` // Any texture modifications (for solid foods) that should be made, e.g. easy to chew, chopped, ground, and pureed.
	FoodType *CodeableConcept `bson:",omitempty" json:"foodType,omitempty"` // The food type(s) (e.g. meats, all foods)  that the texture modification applies to.  This could be all foods types.
}

func (out *NutritionOrderSupplement) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["productName"]) > 0 {
		if err := go1.Unmarshal(asMap["productName"], &out.ProductName); err != nil {
			return err
		}

	}
	if len(asMap["schedule"]) > 0 {
		if err := go1.Unmarshal(asMap["schedule"], &out.Schedule); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["instruction"]) > 0 {
		if err := go1.Unmarshal(asMap["instruction"], &out.Instruction); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type NutritionOrderSupplement struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type        *CodeableReference                `bson:",omitempty" json:"type,omitempty"`        // The kind of nutritional supplement product required such as a high protein or pediatric clear liquid supplement.
	ProductName *string                           `bson:",omitempty" json:"productName,omitempty"` // The product or brand name of the nutritional supplement such as "Acme Protein Shake".
	Schedule    *NutritionOrderSupplementSchedule `binding:"omitempty" bson:",omitempty"`
	Quantity    *Quantity                         `bson:",omitempty" json:"quantity,omitempty"`    // The amount of the nutritional supplement to be given.
	Instruction *string                           `bson:",omitempty" json:"instruction,omitempty"` // Free text or additional instructions or information pertaining to the oral supplement.
	Id          *string                           `bson:"_id,omitempty" json:"id,omitempty"`       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension   []*Extension                      `bson:",omitempty" json:"extension,omitempty"`   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *NutritionOrderSupplementSchedule) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["timing"]) > 0 {
		if err := go1.Unmarshal(asMap["timing"], &out.Timing); err != nil {
			return err
		}

	}
	if len(asMap["asNeeded"]) > 0 {
		if err := go1.Unmarshal(asMap["asNeeded"], &out.AsNeeded); err != nil {
			return err
		}

	}
	if len(asMap["asNeededFor"]) > 0 {
		if err := go1.Unmarshal(asMap["asNeededFor"], &out.AsNeededFor); err != nil {
			return err
		}

	}
	return nil
}

type NutritionOrderSupplementSchedule struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Timing      []*Timing        `bson:",omitempty" json:"timing,omitempty"`      // The time period and frequency at which the supplement should be given.  The supplement should be given for the combination of all schedules if more than one schedule is present.
	AsNeeded    *bool            `bson:",omitempty" json:"asNeeded,omitempty"`    // Indicates whether the supplement is only taken when needed within a specific dosing schedule.
	AsNeededFor *CodeableConcept `bson:",omitempty" json:"asNeededFor,omitempty"` // Indicates whether the supplement is only taken based on a precondition for taking the supplement.
}

func (out *NutritionOrderEnteralFormula) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["maxVolumeToDeliver"]) > 0 {
		if err := go1.Unmarshal(asMap["maxVolumeToDeliver"], &out.MaxVolumeToDeliver); err != nil {
			return err
		}

	}
	if len(asMap["baseFormulaProductName"]) > 0 {
		if err := go1.Unmarshal(asMap["baseFormulaProductName"], &out.BaseFormulaProductName); err != nil {
			return err
		}

	}
	if len(asMap["deliveryDevice"]) > 0 {
		if err := go1.Unmarshal(asMap["deliveryDevice"], &out.DeliveryDevice); err != nil {
			return err
		}

	}
	if len(asMap["routeOfAdministration"]) > 0 {
		if err := go1.Unmarshal(asMap["routeOfAdministration"], &out.RouteOfAdministration); err != nil {
			return err
		}

	}
	if len(asMap["baseFormulaType"]) > 0 {
		if err := go1.Unmarshal(asMap["baseFormulaType"], &out.BaseFormulaType); err != nil {
			return err
		}

	}
	if len(asMap["additive"]) > 0 {
		if err := go1.Unmarshal(asMap["additive"], &out.Additive); err != nil {
			return err
		}

	}
	if len(asMap["caloricDensity"]) > 0 {
		if err := go1.Unmarshal(asMap["caloricDensity"], &out.CaloricDensity); err != nil {
			return err
		}

	}
	if len(asMap["administration"]) > 0 {
		if err := go1.Unmarshal(asMap["administration"], &out.Administration); err != nil {
			return err
		}

	}
	if len(asMap["administrationInstruction"]) > 0 {
		if err := go1.Unmarshal(asMap["administrationInstruction"], &out.AdministrationInstruction); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type NutritionOrderEnteralFormula struct {
	MaxVolumeToDeliver        *Quantity                                   `bson:",omitempty" json:"maxVolumeToDeliver,omitempty"`     // The maximum total quantity of formula that may be administered to a subject over the period of time, e.g. 1440 mL over 24 hours.
	BaseFormulaProductName    *string                                     `bson:",omitempty" json:"baseFormulaProductName,omitempty"` // The product or brand name of the enteral or infant formula product such as "ACME Adult Standard Formula".
	DeliveryDevice            []*CodeableReference                        `bson:",omitempty" json:"deliveryDevice,omitempty"`         // The intended type of device that is to be used for the administration of the enteral formula.
	RouteOfAdministration     *CodeableConcept                            `bson:",omitempty" json:"routeOfAdministration,omitempty"`  // The route or physiological path of administration into the patient's gastrointestinal  tract for purposes of providing the formula feeding, e.g. nasogastric tube.
	BaseFormulaType           *CodeableReference                          `bson:",omitempty" json:"baseFormulaType,omitempty"`        // The type of enteral or infant formula such as an adult standard formula with fiber or a soy-based infant formula.
	Additive                  *NutritionOrderEnteralFormulaAdditive       `binding:"omitempty" bson:",omitempty"`
	CaloricDensity            *Quantity                                   `bson:",omitempty" json:"caloricDensity,omitempty"` // The amount of energy (calories) that the formula should provide per specified volume, typically per mL or fluid oz.  For example, an infant may require a formula that provides 24 calories per fluid ounce or an adult may require an enteral formula that provides 1.5 calorie/mL.
	Administration            *NutritionOrderEnteralFormulaAdministration `binding:"omitempty" bson:",omitempty"`
	AdministrationInstruction *string                                     `bson:",omitempty" json:"administrationInstruction,omitempty"` // Free text formula administration, feeding instructions or additional instructions or information.
	Id                        *string                                     `bson:"_id,omitempty" json:"id,omitempty"`                     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension                 []*Extension                                `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension         []*Extension                                `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *NutritionOrderEnteralFormulaAdditive) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["productName"]) > 0 {
		if err := go1.Unmarshal(asMap["productName"], &out.ProductName); err != nil {
			return err
		}

	}
	return nil
}

type NutritionOrderEnteralFormulaAdditive struct {
	Quantity          *Quantity    `bson:",omitempty" json:"quantity,omitempty"`          // The amount of additive to be given in addition or to be mixed in with the base formula.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type        *CodeableReference `bson:",omitempty" json:"type,omitempty"`        // Indicates the type of modular component such as protein, carbohydrate, fat or fiber to be provided in addition to or mixed with the base formula.
	ProductName *string            `bson:",omitempty" json:"productName,omitempty"` // The product or brand name of the type of modular component to be added to the formula.
}

func (out *NutritionOrderEnteralFormulaAdministration) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["schedule"]) > 0 {
		if err := go1.Unmarshal(asMap["schedule"], &out.Schedule); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["rateQuantity"], &out.RateQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["rateRatio"], &out.RateRatio); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type NutritionOrderEnteralFormulaAdministration struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Schedule *NutritionOrderEnteralFormulaAdministrationSchedule `binding:"omitempty" bson:",omitempty"`
	Quantity *Quantity                                           `bson:",omitempty" json:"quantity,omitempty"` // The volume of formula to provide to the patient per the specified administration schedule.
	NutritionOrderEnteralFormulaAdministrationRatex
	Id *string `bson:"_id,omitempty" json:"id,omitempty"` // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *NutritionOrderEnteralFormulaAdministrationSchedule) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["timing"]) > 0 {
		if err := go1.Unmarshal(asMap["timing"], &out.Timing); err != nil {
			return err
		}

	}
	if len(asMap["asNeeded"]) > 0 {
		if err := go1.Unmarshal(asMap["asNeeded"], &out.AsNeeded); err != nil {
			return err
		}

	}
	if len(asMap["asNeededFor"]) > 0 {
		if err := go1.Unmarshal(asMap["asNeededFor"], &out.AsNeededFor); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type NutritionOrderEnteralFormulaAdministrationSchedule struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Timing      []*Timing        `bson:",omitempty" json:"timing,omitempty"`      // The time period and frequency at which the enteral formula should be given.  The enteral formula should be given for the combination of all schedules if more than one schedule is present.
	AsNeeded    *bool            `bson:",omitempty" json:"asNeeded,omitempty"`    // Indicates whether the enteral formula is only taken when needed within a specific dosing schedule.
	AsNeededFor *CodeableConcept `bson:",omitempty" json:"asNeededFor,omitempty"` // Indicates whether the enteral formula is only taken based on a precondition for taking the enteral formula.
	Id          *string          `bson:"_id,omitempty" json:"id,omitempty"`       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}
type NutritionOrderEnteralFormulaAdministrationRatex struct {
	RateQuantity Quantity `bson:",omitempty" json:"rateQuantity,omitempty"`
	RateRatio    Ratio    `bson:",omitempty" json:"rateRatio,omitempty"`
}

func (out *NutritionProduct) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"NutritionProduct\"" {
		return fmt.Errorf("resourceType is not %s", "NutritionProduct")
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["ingredient"]) > 0 {
		if err := go1.Unmarshal(asMap["ingredient"], &out.Ingredient); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["manufacturer"]) > 0 {
		if err := go1.Unmarshal(asMap["manufacturer"], &out.Manufacturer); err != nil {
			return err
		}

	}
	if len(asMap["knownAllergen"]) > 0 {
		if err := go1.Unmarshal(asMap["knownAllergen"], &out.KnownAllergen); err != nil {
			return err
		}

	}
	if len(asMap["instance"]) > 0 {
		if err := go1.Unmarshal(asMap["instance"], &out.Instance); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["nutrient"]) > 0 {
		if err := go1.Unmarshal(asMap["nutrient"], &out.Nutrient); err != nil {
			return err
		}

	}
	if len(asMap["characteristic"]) > 0 {
		if err := go1.Unmarshal(asMap["characteristic"], &out.Characteristic); err != nil {
			return err
		}

	}
	return nil
}

type NutritionProduct struct {
	Extension         []*Extension                `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Code              *CodeableConcept            `bson:",omitempty" json:"code,omitempty"`      // The code assigned to the product, for example a USDA NDB number, a USDA FDC ID number, or a Langual code.
	Ingredient        *NutritionProductIngredient `binding:"omitempty" bson:",omitempty"`
	Id                *primitive.ObjectID         `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language          *string                     `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	ModifierExtension []*Extension                `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Status         *string                         `binding:"required" bson:",omitempty" json:"status,omitempty"` // The current state of the product.
	Note           []*Annotation                   `bson:",omitempty" json:"note,omitempty"`                      // Comments made about the product.
	ImplicitRules  *string                         `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text           *Narrative                      `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Manufacturer   []*Reference                    `bson:",omitempty" json:"manufacturer,omitempty"`              // The organisation (manufacturer, representative or legal authorization holder) that is responsible for the device.
	KnownAllergen  []*CodeableReference            `bson:",omitempty" json:"knownAllergen,omitempty"`             // Allergens that are known or suspected to be a part of this nutrition product.
	Instance       *NutritionProductInstance       `binding:"omitempty" bson:",omitempty"`
	Meta           *Meta                           `bson:",omitempty" json:"meta,omitempty"`      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Contained      []*Resource                     `bson:",omitempty" json:"contained,omitempty"` // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Category       []*CodeableConcept              `bson:",omitempty" json:"category,omitempty"`  // Nutrition products can have different classifications - according to its nutritional properties, preparation methods, etc.
	Nutrient       *NutritionProductNutrient       `binding:"omitempty" bson:",omitempty"`
	Characteristic *NutritionProductCharacteristic `binding:"omitempty" bson:",omitempty"`
	ResourceType   string                          `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *NutritionProductIngredient) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
		return err
	}

	if len(asMap["amount"]) > 0 {
		if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
			return err
		}

	}
	return nil
}

type NutritionProductIngredient struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Item   *CodeableReference `binding:"required" bson:",omitempty" json:"item,omitempty"` // The ingredient contained in the product.
	Amount []*Ratio           `bson:",omitempty" json:"amount,omitempty"`                  // The amount of ingredient that is in the product.
}

func (out *NutritionProductInstance) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["useBy"]) > 0 {
		if err := go1.Unmarshal(asMap["useBy"], &out.UseBy); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["lotNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["lotNumber"], &out.LotNumber); err != nil {
			return err
		}

	}
	if len(asMap["expiry"]) > 0 {
		if err := go1.Unmarshal(asMap["expiry"], &out.Expiry); err != nil {
			return err
		}

	}
	if len(asMap["biologicalSourceEvent"]) > 0 {
		if err := go1.Unmarshal(asMap["biologicalSourceEvent"], &out.BiologicalSourceEvent); err != nil {
			return err
		}

	}
	return nil
}

type NutritionProductInstance struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier            []*Identifier `bson:",omitempty" json:"identifier,omitempty"`            // The identifier for the physical instance, typically a serial number or manufacturer number.
	Name                  *string       `bson:",omitempty" json:"name,omitempty"`                  // The name for the specific product.
	UseBy                 *DateTime     `bson:",omitempty" json:"useBy,omitempty"`                 // The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed.
	Quantity              *Quantity     `bson:",omitempty" json:"quantity,omitempty"`              // The amount of items or instances that the resource considers, for instance when referring to 2 identical units together.
	LotNumber             *string       `bson:",omitempty" json:"lotNumber,omitempty"`             // The identification of the batch or lot of the product.
	Expiry                *DateTime     `bson:",omitempty" json:"expiry,omitempty"`                // The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed.
	BiologicalSourceEvent *Identifier   `bson:",omitempty" json:"biologicalSourceEvent,omitempty"` // An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled.
}

func (out *NutritionProductNutrient) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["item"]) > 0 {
		if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
			return err
		}

	}
	if len(asMap["amount"]) > 0 {
		if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
			return err
		}

	}
	return nil
}

type NutritionProductNutrient struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Item   *CodeableReference `bson:",omitempty" json:"item,omitempty"`   // The (relevant) nutrients in the product.
	Amount []*Ratio           `bson:",omitempty" json:"amount,omitempty"` // The amount of nutrient expressed in one or more units: X per pack / per serving / per dose.
}

func (out *NutritionProductCharacteristic) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBase64Binary"], &out.ValueBase64Binary); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	return nil
}

type NutritionProductCharacteristic struct {
	NutritionProductCharacteristicValuex
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // A code specifying which characteristic of the product is being described (for example, colour, shape).
}
type NutritionProductCharacteristicValuex struct {
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueString          string          `bson:",omitempty" json:"valueString,omitempty"`
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueBase64Binary    Base64Binary    `bson:",omitempty" json:"valueBase64Binary,omitempty"`
	ValueAttachment      Attachment      `bson:",omitempty" json:"valueAttachment,omitempty"`
	ValueBoolean         bool            `bson:",omitempty" json:"valueBoolean,omitempty"`
}

func (out *Observation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Observation\"" {
		return fmt.Errorf("resourceType is not %s", "Observation")
	}
	if len(asMap["referenceRange"]) > 0 {
		if err := go1.Unmarshal(asMap["referenceRange"], &out.ReferenceRange); err != nil {
			return err
		}

	}
	if len(asMap["component"]) > 0 {
		if err := go1.Unmarshal(asMap["component"], &out.Component); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["method"]) > 0 {
		if err := go1.Unmarshal(asMap["method"], &out.Method); err != nil {
			return err
		}

	}
	if len(asMap["specimen"]) > 0 {
		if err := go1.Unmarshal(asMap["specimen"], &out.Specimen); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if len(asMap["focus"]) > 0 {
		if err := go1.Unmarshal(asMap["focus"], &out.Focus); err != nil {
			return err
		}

	}
	if len(asMap["hasMember"]) > 0 {
		if err := go1.Unmarshal(asMap["hasMember"], &out.HasMember); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["instantiatesCanonical"], &out.InstantiatesCanonical); err == nil {
	} else if err := go1.Unmarshal(asMap["instantiatesReference"], &out.InstantiatesReference); err == nil {
	} else {

	}
	if len(asMap["triggeredBy"]) > 0 {
		if err := go1.Unmarshal(asMap["triggeredBy"], &out.TriggeredBy); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["issued"]) > 0 {
		if err := go1.Unmarshal(asMap["issued"], &out.Issued); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRatio"], &out.ValueRatio); err == nil {
	} else if err := go1.Unmarshal(asMap["valueSampledData"], &out.ValueSampledData); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTime"], &out.ValueTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDateTime"], &out.ValueDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valuePeriod"], &out.ValuePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["valueReference"], &out.ValueReference); err == nil {
	} else {

	}
	if len(asMap["interpretation"]) > 0 {
		if err := go1.Unmarshal(asMap["interpretation"], &out.Interpretation); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["effectiveDateTime"], &out.EffectiveDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["effectiveTiming"], &out.EffectiveTiming); err == nil {
	} else if err := go1.Unmarshal(asMap["effectiveInstant"], &out.EffectiveInstant); err == nil {
	} else {

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["bodySite"]) > 0 {
		if err := go1.Unmarshal(asMap["bodySite"], &out.BodySite); err != nil {
			return err
		}

	}
	if len(asMap["dataAbsentReason"]) > 0 {
		if err := go1.Unmarshal(asMap["dataAbsentReason"], &out.DataAbsentReason); err != nil {
			return err
		}

	}
	if len(asMap["bodyStructure"]) > 0 {
		if err := go1.Unmarshal(asMap["bodyStructure"], &out.BodyStructure); err != nil {
			return err
		}

	}
	if len(asMap["device"]) > 0 {
		if err := go1.Unmarshal(asMap["device"], &out.Device); err != nil {
			return err
		}

	}
	if len(asMap["derivedFrom"]) > 0 {
		if err := go1.Unmarshal(asMap["derivedFrom"], &out.DerivedFrom); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	return nil
}

type Observation struct {
	ReferenceRange *ObservationReferenceRange `binding:"omitempty" bson:",omitempty"`
	Component      *ObservationComponent      `binding:"omitempty" bson:",omitempty"`
	Extension      []*Extension               `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Method         *CodeableConcept           `bson:",omitempty" json:"method,omitempty"`                  // Indicates the mechanism used to perform the observation.
	Specimen       *Reference                 `bson:",omitempty" json:"specimen,omitempty"`                // The specimen that was used when this observation was made.
	BasedOn        []*Reference               `bson:",omitempty" json:"basedOn,omitempty"`                 // A plan, proposal or order that is fulfilled in whole or in part by this event.  For example, a MedicationRequest may require a patient to have laboratory test performed before  it is dispensed.
	Code           *CodeableConcept           `binding:"required" bson:",omitempty" json:"code,omitempty"` // Describes what was observed. Sometimes this is called the observation "name".
	PartOf         []*Reference               `bson:",omitempty" json:"partOf,omitempty"`                  // A larger event of which this particular Observation is a component or step.  For example,  an observation as part of a procedure.
	Focus          []*Reference               `bson:",omitempty" json:"focus,omitempty"`                   // The actual focus of an observation when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, fetus, or donor. For example, fetus observations in a mother's record.  The focus of an observation could also be an existing condition,  an intervention, the subject's diet,  another observation of the subject,  or a body structure such as tumor or implanted device.   An example use case would be using the Observation resource to capture whether the mother is trained to change her child's tracheostomy tube. In this example, the child is the patient of record and the mother is the focus.
	HasMember      []*Reference               `bson:",omitempty" json:"hasMember,omitempty"`               // This observation is a group observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.
	Id             *primitive.ObjectID        `bson:"_id,omitempty" json:"id,omitempty"`                   // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ObservationInstantiatesx
	TriggeredBy       *ObservationTriggeredBy `binding:"omitempty" bson:",omitempty"`
	Status            *string                 `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of the result value.
	Encounter         *Reference              `bson:",omitempty" json:"encounter,omitempty"`                 // The healthcare event  (e.g. a patient and healthcare provider interaction) during which this observation is made.
	ImplicitRules     *string                 `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ModifierExtension []*Extension            `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier []*Identifier `bson:",omitempty" json:"identifier,omitempty"` // A unique identifier assigned to this observation.
	Issued     *time.Time    `bson:",omitempty" json:"issued,omitempty"`     // The date and time this version of the observation was made available to providers, typically after the results have been reviewed and verified.
	ObservationValuex
	Interpretation []*CodeableConcept `bson:",omitempty" json:"interpretation,omitempty"` // A categorical assessment of an observation value.  For example, high, low, normal.
	Note           []*Annotation      `bson:",omitempty" json:"note,omitempty"`           // Comments about the observation or the results.
	Meta           *Meta              `bson:",omitempty" json:"meta,omitempty"`           // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Subject        *Reference         `bson:",omitempty" json:"subject,omitempty"`        // The patient, or group of patients, location, device, organization, procedure or practitioner this observation is about and into whose or what record the observation is placed. If the actual focus of the observation is different from the subject (or a sample of, part, or region of the subject), the `focus` element or the `code` itself specifies the actual focus of the observation.
	ObservationEffectivex
	Category         []*CodeableConcept `bson:",omitempty" json:"category,omitempty"`         // A code that classifies the general type of observation being made.
	Performer        []*Reference       `bson:",omitempty" json:"performer,omitempty"`        // Who was responsible for asserting the observed value as "true".
	BodySite         *CodeableConcept   `bson:",omitempty" json:"bodySite,omitempty"`         // Indicates the site on the subject's body where the observation was made (i.e. the target site).
	DataAbsentReason *CodeableConcept   `bson:",omitempty" json:"dataAbsentReason,omitempty"` // Provides a reason why the expected value in the element Observation.value[x] is missing.
	BodyStructure    *Reference         `bson:",omitempty" json:"bodyStructure,omitempty"`    // Indicates the body structure on the subject's body where the observation was made (i.e. the target site).
	Device           *Reference         `bson:",omitempty" json:"device,omitempty"`           // A reference to the device that generates the measurements or the device settings for the device.
	DerivedFrom      []*Reference       `bson:",omitempty" json:"derivedFrom,omitempty"`      // The target resource that represents a measurement from which this observation value is derived. For example, a calculated anion gap or a fetal measurement based on an ultrasound image.
	Language         *string            `bson:",omitempty" json:"language,omitempty"`         // The base language in which the resource is written.
	Text             *Narrative         `bson:",omitempty" json:"text,omitempty"`             // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained        []*Resource        `bson:",omitempty" json:"contained,omitempty"`        // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ResourceType     string             `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ObservationReferenceRange) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["high"]) > 0 {
		if err := go1.Unmarshal(asMap["high"], &out.High); err != nil {
			return err
		}

	}
	if len(asMap["normalValue"]) > 0 {
		if err := go1.Unmarshal(asMap["normalValue"], &out.NormalValue); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["age"]) > 0 {
		if err := go1.Unmarshal(asMap["age"], &out.Age); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["appliesTo"]) > 0 {
		if err := go1.Unmarshal(asMap["appliesTo"], &out.AppliesTo); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["low"]) > 0 {
		if err := go1.Unmarshal(asMap["low"], &out.Low); err != nil {
			return err
		}

	}
	return nil
}

type ObservationReferenceRange struct {
	High              *Quantity        `bson:",omitempty" json:"high,omitempty"`              // The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3).
	NormalValue       *CodeableConcept `bson:",omitempty" json:"normalValue,omitempty"`       // The value of the normal value of the reference range.
	Type              *CodeableConcept `bson:",omitempty" json:"type,omitempty"`              // Codes to indicate the what part of the targeted reference population it applies to. For example, the normal or therapeutic range.
	Age               *Range           `bson:",omitempty" json:"age,omitempty"`               // The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	AppliesTo []*CodeableConcept `bson:",omitempty" json:"appliesTo,omitempty"` // Codes to indicate the target population this reference range applies to.  For example, a reference range may be based on the normal population or a particular sex or race.  Multiple `appliesTo`  are interpreted as an "AND" of the target populations.  For example, to represent a target population of African American females, both a code of female and a code for African American would be used.
	Text      *string            `bson:",omitempty" json:"text,omitempty"`      // Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of "Negative" or a list or table of "normals".
	Extension []*Extension       `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Low       *Quantity          `bson:",omitempty" json:"low,omitempty"`       // The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3).
}

func (out *ObservationComponent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRatio"], &out.ValueRatio); err == nil {
	} else if err := go1.Unmarshal(asMap["valueSampledData"], &out.ValueSampledData); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTime"], &out.ValueTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDateTime"], &out.ValueDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valuePeriod"], &out.ValuePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["valueReference"], &out.ValueReference); err == nil {
	} else {

	}
	if len(asMap["dataAbsentReason"]) > 0 {
		if err := go1.Unmarshal(asMap["dataAbsentReason"], &out.DataAbsentReason); err != nil {
			return err
		}

	}
	if len(asMap["interpretation"]) > 0 {
		if err := go1.Unmarshal(asMap["interpretation"], &out.Interpretation); err != nil {
			return err
		}

	}
	if len(asMap["referenceRange"]) > 0 {
		if err := go1.Unmarshal(asMap["referenceRange"], &out.ReferenceRange); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	return nil
}

type ObservationComponent struct {
	ObservationComponentValuex
	DataAbsentReason  *CodeableConcept   `bson:",omitempty" json:"dataAbsentReason,omitempty"` // Provides a reason why the expected value in the element Observation.component.value[x] is missing.
	Interpretation    []*CodeableConcept `bson:",omitempty" json:"interpretation,omitempty"`   // A categorical assessment of an observation value.  For example, high, low, normal.
	ReferenceRange    interface{}
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code *CodeableConcept `binding:"required" bson:",omitempty" json:"code,omitempty"` // Describes what was observed. Sometimes this is called the observation "code".
}
type ObservationComponentValuex struct {
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueString          string          `bson:",omitempty" json:"valueString,omitempty"`
	ValueBoolean         bool            `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueInteger         int             `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueRange           Range           `bson:",omitempty" json:"valueRange,omitempty"`
	ValueRatio           Ratio           `bson:",omitempty" json:"valueRatio,omitempty"`
	ValueSampledData     SampledData     `bson:",omitempty" json:"valueSampledData,omitempty"`
	ValueTime            Time            `bson:",omitempty" json:"valueTime,omitempty"`
	ValueDateTime        DateTime        `bson:",omitempty" json:"valueDateTime,omitempty"`
	ValuePeriod          Period          `bson:",omitempty" json:"valuePeriod,omitempty"`
	ValueAttachment      Attachment      `bson:",omitempty" json:"valueAttachment,omitempty"`
	ValueReference       Reference       `bson:",omitempty" json:"valueReference,omitempty"`
}
type ObservationInstantiatesx struct {
	InstantiatesCanonical string    `bson:",omitempty" json:"instantiatesCanonical,omitempty"`
	InstantiatesReference Reference `bson:",omitempty" json:"instantiatesReference,omitempty"`
}

func (out *ObservationTriggeredBy) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["observation"], &out.Observation); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type ObservationTriggeredBy struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Observation *Reference `binding:"required" bson:",omitempty" json:"observation,omitempty"` // Reference to the triggering observation.
	Type        *string    `binding:"required" bson:",omitempty" json:"type,omitempty"`        /*
	The type of trigger.
	Reflex | Repeat | Re-run.
	*/
	Reason    *string      `bson:",omitempty" json:"reason,omitempty"`    // Provides the reason why this observation was performed as a result of the observation(s) referenced.
	Id        *string      `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}
type ObservationValuex struct {
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueString          string          `bson:",omitempty" json:"valueString,omitempty"`
	ValueBoolean         bool            `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueInteger         int             `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueRange           Range           `bson:",omitempty" json:"valueRange,omitempty"`
	ValueRatio           Ratio           `bson:",omitempty" json:"valueRatio,omitempty"`
	ValueSampledData     SampledData     `bson:",omitempty" json:"valueSampledData,omitempty"`
	ValueTime            Time            `bson:",omitempty" json:"valueTime,omitempty"`
	ValueDateTime        DateTime        `bson:",omitempty" json:"valueDateTime,omitempty"`
	ValuePeriod          Period          `bson:",omitempty" json:"valuePeriod,omitempty"`
	ValueAttachment      Attachment      `bson:",omitempty" json:"valueAttachment,omitempty"`
	ValueReference       Reference       `bson:",omitempty" json:"valueReference,omitempty"`
}
type ObservationEffectivex struct {
	EffectiveDateTime DateTime  `bson:",omitempty" json:"effectiveDateTime,omitempty"`
	EffectivePeriod   Period    `bson:",omitempty" json:"effectivePeriod,omitempty"`
	EffectiveTiming   Timing    `bson:",omitempty" json:"effectiveTiming,omitempty"`
	EffectiveInstant  time.Time `bson:",omitempty" json:"effectiveInstant,omitempty"`
}

func (out *ObservationDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ObservationDefinition\"" {
		return fmt.Errorf("resourceType is not %s", "ObservationDefinition")
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["specimen"]) > 0 {
		if err := go1.Unmarshal(asMap["specimen"], &out.Specimen); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["lastReviewDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastReviewDate"], &out.LastReviewDate); err != nil {
			return err
		}

	}
	if len(asMap["derivedFromUri"]) > 0 {
		if err := go1.Unmarshal(asMap["derivedFromUri"], &out.DerivedFromUri); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["permittedDataType"]) > 0 {
		if err := go1.Unmarshal(asMap["permittedDataType"], &out.PermittedDataType); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["multipleResultsAllowed"]) > 0 {
		if err := go1.Unmarshal(asMap["multipleResultsAllowed"], &out.MultipleResultsAllowed); err != nil {
			return err
		}

	}
	if len(asMap["bodySite"]) > 0 {
		if err := go1.Unmarshal(asMap["bodySite"], &out.BodySite); err != nil {
			return err
		}

	}
	if len(asMap["qualifiedValue"]) > 0 {
		if err := go1.Unmarshal(asMap["qualifiedValue"], &out.QualifiedValue); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["approvalDate"]) > 0 {
		if err := go1.Unmarshal(asMap["approvalDate"], &out.ApprovalDate); err != nil {
			return err
		}

	}
	if len(asMap["effectivePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err != nil {
			return err
		}

	}
	if len(asMap["derivedFromCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["derivedFromCanonical"], &out.DerivedFromCanonical); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["preferredReportName"]) > 0 {
		if err := go1.Unmarshal(asMap["preferredReportName"], &out.PreferredReportName); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["permittedUnit"]) > 0 {
		if err := go1.Unmarshal(asMap["permittedUnit"], &out.PermittedUnit); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["method"]) > 0 {
		if err := go1.Unmarshal(asMap["method"], &out.Method); err != nil {
			return err
		}

	}
	if len(asMap["device"]) > 0 {
		if err := go1.Unmarshal(asMap["device"], &out.Device); err != nil {
			return err
		}

	}
	if len(asMap["component"]) > 0 {
		if err := go1.Unmarshal(asMap["component"], &out.Component); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["performerType"]) > 0 {
		if err := go1.Unmarshal(asMap["performerType"], &out.PerformerType); err != nil {
			return err
		}

	}
	if len(asMap["hasMember"]) > 0 {
		if err := go1.Unmarshal(asMap["hasMember"], &out.HasMember); err != nil {
			return err
		}

	}
	return nil
}

type ObservationDefinition struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Title                  *string                              `bson:",omitempty" json:"title,omitempty"`                     // A short, descriptive, user-friendly title for the ObservationDefinition.
	Contact                []*ContactDetail                     `bson:",omitempty" json:"contact,omitempty"`                   // Contact details to assist a user in finding and communicating with the publisher.
	Specimen               []*Reference                         `bson:",omitempty" json:"specimen,omitempty"`                  // The kind of specimen that this type of observation is produced on.
	Status                 *string                              `binding:"required" bson:",omitempty" json:"status,omitempty"` // The current state of the ObservationDefinition.
	Purpose                *string                              `bson:",omitempty" json:"purpose,omitempty"`                   // Explains why this ObservationDefinition is needed and why it has been designed as it has.
	Copyright              *string                              `bson:",omitempty" json:"copyright,omitempty"`                 // Copyright statement relating to the ObservationDefinition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the ObservationDefinition.
	LastReviewDate         *Date                                `bson:",omitempty" json:"lastReviewDate,omitempty"`            // The date on which the asset content was last reviewed. Review happens periodically after that, but doesn't change the original approval date.
	DerivedFromUri         []*string                            `bson:",omitempty" json:"derivedFromUri,omitempty"`            // The URL pointing to an externally-defined observation definition, guideline or other definition that is adhered to in whole or in part by this definition.
	Code                   *CodeableConcept                     `binding:"required" bson:",omitempty" json:"code,omitempty"`   // Describes what will be observed. Sometimes this is called the observation "name".
	PermittedDataType      []*string                            `bson:",omitempty" json:"permittedDataType,omitempty"`         // The data types allowed for the value element of the instance observations conforming to this ObservationDefinition.
	Meta                   *Meta                                `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Experimental           *bool                                `bson:",omitempty" json:"experimental,omitempty"`              // A flag to indicate that this ObservationDefinition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
	Date                   *DateTime                            `bson:",omitempty" json:"date,omitempty"`                      // The date (and optionally time) when the ObservationDefinition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the ObservationDefinition changes.
	UseContext             []*UsageContext                      `bson:",omitempty" json:"useContext,omitempty"`                // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate ObservationDefinition instances.
	CopyrightLabel         *string                              `bson:",omitempty" json:"copyrightLabel,omitempty"`            // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	MultipleResultsAllowed *bool                                `bson:",omitempty" json:"multipleResultsAllowed,omitempty"`    // Multiple results allowed for observations conforming to this ObservationDefinition.
	BodySite               *CodeableConcept                     `bson:",omitempty" json:"bodySite,omitempty"`                  // The site on the subject's body where the  observation is to be made.
	QualifiedValue         *ObservationDefinitionQualifiedValue `binding:"omitempty" bson:",omitempty"`
	Id                     *primitive.ObjectID                  `bson:"_id,omitempty" json:"id,omitempty"` // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ObservationDefinitionVersionAlgorithmx
	ApprovalDate         *Date                           `bson:",omitempty" json:"approvalDate,omitempty"`         // The date on which the asset content was approved by the publisher. Approval happens once when the content is officially approved for usage.
	EffectivePeriod      *Period                         `bson:",omitempty" json:"effectivePeriod,omitempty"`      // The period during which the ObservationDefinition content was or is planned to be effective.
	DerivedFromCanonical []*string                       `bson:",omitempty" json:"derivedFromCanonical,omitempty"` // The canonical URL pointing to another FHIR-defined ObservationDefinition that is adhered to in whole or in part by this definition.
	Subject              []*CodeableConcept              `bson:",omitempty" json:"subject,omitempty"`              // A code that describes the intended kind of subject of Observation instances conforming to this ObservationDefinition.
	PreferredReportName  *string                         `bson:",omitempty" json:"preferredReportName,omitempty"`  // The preferred name to be used when reporting the results of observations conforming to this ObservationDefinition.
	ImplicitRules        *string                         `bson:",omitempty" json:"implicitRules,omitempty"`        // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Extension            []*Extension                    `bson:",omitempty" json:"extension,omitempty"`            // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Version              *string                         `bson:",omitempty" json:"version,omitempty"`              // The identifier that is used to identify this version of the ObservationDefinition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the ObservationDefinition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions are orderable.
	PermittedUnit        []*Coding                       `bson:",omitempty" json:"permittedUnit,omitempty"`        // Units allowed for the valueQuantity element in the instance observations conforming to this ObservationDefinition.
	Text                 *Narrative                      `bson:",omitempty" json:"text,omitempty"`                 // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Name                 *string                         `bson:",omitempty" json:"name,omitempty"`                 // A natural language name identifying the ObservationDefinition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Publisher            *string                         `bson:",omitempty" json:"publisher,omitempty"`            // Helps establish the "authority/credibility" of the ObservationDefinition. May also allow for contact.
	Description          *string                         `bson:",omitempty" json:"description,omitempty"`          // A free text natural language description of the ObservationDefinition from the consumer's perspective.
	Jurisdiction         []*CodeableConcept              `bson:",omitempty" json:"jurisdiction,omitempty"`         // A jurisdiction in which the ObservationDefinition is intended to be used.
	Category             []*CodeableConcept              `bson:",omitempty" json:"category,omitempty"`             // A code that classifies the general type of observation.
	Language             *string                         `bson:",omitempty" json:"language,omitempty"`             // The base language in which the resource is written.
	Url                  *string                         `bson:",omitempty" json:"url,omitempty"`                  // An absolute URL that is used to identify this ObservationDefinition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this ObservationDefinition is (or will be) published. The URL SHOULD include the major version of the ObservationDefinition. For more information see Technical and Business Versions.
	Identifier           *Identifier                     `bson:",omitempty" json:"identifier,omitempty"`           // Business identifiers assigned to this ObservationDefinition. by the performer and/or other systems. These identifiers remain constant as the resource is updated and propagates from server to server.
	Method               *CodeableConcept                `bson:",omitempty" json:"method,omitempty"`               // The method or technique used to perform the observation.
	Device               []*Reference                    `bson:",omitempty" json:"device,omitempty"`               // The measurement model of device or actual device used to produce observations of this type.
	Component            *ObservationDefinitionComponent `binding:"omitempty" bson:",omitempty"`
	Contained            []*Resource                     `bson:",omitempty" json:"contained,omitempty"`     // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	PerformerType        *CodeableConcept                `bson:",omitempty" json:"performerType,omitempty"` // The type of individual/organization/device that is expected to act upon instances of this definition.
	HasMember            []*Reference                    `bson:",omitempty" json:"hasMember,omitempty"`     // This ObservationDefinition defines a group  observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.
	ResourceType         string                          `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ObservationDefinitionQualifiedValue) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["age"]) > 0 {
		if err := go1.Unmarshal(asMap["age"], &out.Age); err != nil {
			return err
		}

	}
	if len(asMap["range"]) > 0 {
		if err := go1.Unmarshal(asMap["range"], &out.Range); err != nil {
			return err
		}

	}
	if len(asMap["validCodedValueSet"]) > 0 {
		if err := go1.Unmarshal(asMap["validCodedValueSet"], &out.ValidCodedValueSet); err != nil {
			return err
		}

	}
	if len(asMap["context"]) > 0 {
		if err := go1.Unmarshal(asMap["context"], &out.Context); err != nil {
			return err
		}

	}
	if len(asMap["abnormalCodedValueSet"]) > 0 {
		if err := go1.Unmarshal(asMap["abnormalCodedValueSet"], &out.AbnormalCodedValueSet); err != nil {
			return err
		}

	}
	if len(asMap["rangeCategory"]) > 0 {
		if err := go1.Unmarshal(asMap["rangeCategory"], &out.RangeCategory); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["appliesTo"]) > 0 {
		if err := go1.Unmarshal(asMap["appliesTo"], &out.AppliesTo); err != nil {
			return err
		}

	}
	if len(asMap["gender"]) > 0 {
		if err := go1.Unmarshal(asMap["gender"], &out.Gender); err != nil {
			return err
		}

	}
	if len(asMap["normalCodedValueSet"]) > 0 {
		if err := go1.Unmarshal(asMap["normalCodedValueSet"], &out.NormalCodedValueSet); err != nil {
			return err
		}

	}
	if len(asMap["criticalCodedValueSet"]) > 0 {
		if err := go1.Unmarshal(asMap["criticalCodedValueSet"], &out.CriticalCodedValueSet); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["gestationalAge"]) > 0 {
		if err := go1.Unmarshal(asMap["gestationalAge"], &out.GestationalAge); err != nil {
			return err
		}

	}
	if len(asMap["condition"]) > 0 {
		if err := go1.Unmarshal(asMap["condition"], &out.Condition); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ObservationDefinitionQualifiedValue struct {
	Age                   *Range             `bson:",omitempty" json:"age,omitempty"`                   // The age range this  set of qualified values applies to.
	Range                 *Range             `bson:",omitempty" json:"range,omitempty"`                 // The range of values defined for continuous or ordinal observations that match the criteria of this set of qualified values.
	ValidCodedValueSet    *string            `bson:",omitempty" json:"validCodedValueSet,omitempty"`    // The set of valid coded results for qualitative observations  that match the criteria of this set of qualified values.
	Context               *CodeableConcept   `bson:",omitempty" json:"context,omitempty"`               // A concept defining the context for this set of qualified values.
	AbnormalCodedValueSet *string            `bson:",omitempty" json:"abnormalCodedValueSet,omitempty"` // The set of abnormal coded results for qualitative observations  that match the criteria of this set of qualified values.
	RangeCategory         *string            `bson:",omitempty" json:"rangeCategory,omitempty"`         // The category of range of values for continuous or ordinal observations that match the criteria of this set of qualified values.
	Extension             []*Extension       `bson:",omitempty" json:"extension,omitempty"`             // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	AppliesTo             []*CodeableConcept `bson:",omitempty" json:"appliesTo,omitempty"`             // The target population this  set of qualified values applies to.
	Gender                *string            `bson:",omitempty" json:"gender,omitempty"`                // The gender this  set of qualified values applies to.
	NormalCodedValueSet   *string            `bson:",omitempty" json:"normalCodedValueSet,omitempty"`   // The set of normal coded results for qualitative observations  that match the criteria of this set of qualified values.
	CriticalCodedValueSet *string            `bson:",omitempty" json:"criticalCodedValueSet,omitempty"` // The set of critical coded results for qualitative observations  that match the criteria of this set of qualified values.
	Id                    *string            `bson:"_id,omitempty" json:"id,omitempty"`                 // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	GestationalAge        *Range             `bson:",omitempty" json:"gestationalAge,omitempty"`        // The gestational age this  set of qualified values applies to.
	Condition             *string            `bson:",omitempty" json:"condition,omitempty"`             // Text based condition for which the the set of qualified values is valid.
	ModifierExtension     []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"`     /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type ObservationDefinitionVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *ObservationDefinitionComponent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["permittedDataType"]) > 0 {
		if err := go1.Unmarshal(asMap["permittedDataType"], &out.PermittedDataType); err != nil {
			return err
		}

	}
	if len(asMap["permittedUnit"]) > 0 {
		if err := go1.Unmarshal(asMap["permittedUnit"], &out.PermittedUnit); err != nil {
			return err
		}

	}
	if len(asMap["qualifiedValue"]) > 0 {
		if err := go1.Unmarshal(asMap["qualifiedValue"], &out.QualifiedValue); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ObservationDefinitionComponent struct {
	Code              *CodeableConcept `binding:"required" bson:",omitempty" json:"code,omitempty"` // Describes what will be observed.
	PermittedDataType []*string        `bson:",omitempty" json:"permittedDataType,omitempty"`       // The data types allowed for the value element of the instance of this component observations.
	PermittedUnit     []*Coding        `bson:",omitempty" json:"permittedUnit,omitempty"`           // Units allowed for the valueQuantity element in the instance observations conforming to this ObservationDefinition.
	QualifiedValue    interface{}
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *OperationDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"OperationDefinition\"" {
		return fmt.Errorf("resourceType is not %s", "OperationDefinition")
	}
	if len(asMap["parameter"]) > 0 {
		if err := go1.Unmarshal(asMap["parameter"], &out.Parameter); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["base"]) > 0 {
		if err := go1.Unmarshal(asMap["base"], &out.Base); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["system"], &out.System); err != nil {
		return err
	}

	if len(asMap["inputProfile"]) > 0 {
		if err := go1.Unmarshal(asMap["inputProfile"], &out.InputProfile); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["affectsState"]) > 0 {
		if err := go1.Unmarshal(asMap["affectsState"], &out.AffectsState); err != nil {
			return err
		}

	}
	if len(asMap["outputProfile"]) > 0 {
		if err := go1.Unmarshal(asMap["outputProfile"], &out.OutputProfile); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["kind"], &out.Kind); err != nil {
		return err
	}

	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["instance"], &out.Instance); err != nil {
		return err
	}

	if len(asMap["resource"]) > 0 {
		if err := go1.Unmarshal(asMap["resource"], &out.Resource); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["comment"]) > 0 {
		if err := go1.Unmarshal(asMap["comment"], &out.Comment); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["overload"]) > 0 {
		if err := go1.Unmarshal(asMap["overload"], &out.Overload); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	return nil
}

type OperationDefinition struct {
	Parameter     *OperationDefinitionParameter `binding:"omitempty" bson:",omitempty"`
	ImplicitRules *string                       `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained     []*Resource                   `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Version       *string                       `bson:",omitempty" json:"version,omitempty"`                   // The identifier that is used to identify this version of the operation definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the operation definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Date          *DateTime                     `bson:",omitempty" json:"date,omitempty"`                      // The date  (and optionally time) when the operation definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the operation definition changes.
	Publisher     *string                       `bson:",omitempty" json:"publisher,omitempty"`                 // The name of the organization or individual responsible for the release and ongoing maintenance of the operation definition.
	Base          *string                       `bson:",omitempty" json:"base,omitempty"`                      // Indicates that this operation definition is a constraining profile on the base.
	Extension     []*Extension                  `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Name          *string                       `binding:"required" bson:",omitempty" json:"name,omitempty"`   // A natural language name identifying the operation definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Status        *string                       `binding:"required" bson:",omitempty" json:"status,omitempty"` // The current state of this operation definition.
	Experimental  *bool                         `bson:",omitempty" json:"experimental,omitempty"`              // A Boolean value to indicate that this operation definition is authored for testing purposes (or education/evaluation/marketing) and is not intended for genuine usage.
	System        *bool                         `binding:"required" bson:",omitempty" json:"system,omitempty"` // Indicates whether this operation or named query can be invoked at the system level (e.g. without needing to choose a resource type for the context).
	InputProfile  *string                       `bson:",omitempty" json:"inputProfile,omitempty"`              // Additional validation information for the in parameters - a single profile that covers all the parameters. The profile is a constraint on the parameters resource as a whole.
	OperationDefinitionVersionAlgorithmx
	Copyright         *string             `bson:",omitempty" json:"copyright,omitempty"`         // A copyright statement relating to the operation definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the operation definition.
	AffectsState      *bool               `bson:",omitempty" json:"affectsState,omitempty"`      // Whether the operation affects state. Side effects such as producing audit trail entries do not count as 'affecting  state'.
	OutputProfile     *string             `bson:",omitempty" json:"outputProfile,omitempty"`     // Additional validation information for the out parameters - a single profile that covers all the parameters. The profile is a constraint on the parameters resource.
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier     []*Identifier                `bson:",omitempty" json:"identifier,omitempty"`                  // A formal identifier that is used to identify this implementation guide when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Kind           *string                      `binding:"required" bson:",omitempty" json:"kind,omitempty"`     // Whether this is an operation or a named query.
	Description    *string                      `bson:",omitempty" json:"description,omitempty"`                 // A free text natural language description of the operation definition from a consumer's perspective.
	Instance       *bool                        `binding:"required" bson:",omitempty" json:"instance,omitempty"` // Indicates whether this operation can be invoked on a particular instance of one of the given types.
	Resource       []*string                    `bson:",omitempty" json:"resource,omitempty"`                    // The types on which this operation can be executed.
	Text           *Narrative                   `bson:",omitempty" json:"text,omitempty"`                        // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Title          *string                      `bson:",omitempty" json:"title,omitempty"`                       // A short, descriptive, user-friendly title for the operation definition.
	Purpose        *string                      `bson:",omitempty" json:"purpose,omitempty"`                     // Explanation of why this operation definition is needed and why it has been designed as it has.
	CopyrightLabel *string                      `bson:",omitempty" json:"copyrightLabel,omitempty"`              // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Code           *string                      `binding:"required" bson:",omitempty" json:"code,omitempty"`     // The label that is recommended to be used in the URL for this operation. In some cases, servers may need to use a different CapabilityStatement operation.name to differentiate between multiple SearchParameters that happen to have the same code.
	Comment        *string                      `bson:",omitempty" json:"comment,omitempty"`                     // Additional information about how to use this operation or named query.
	Meta           *Meta                        `bson:",omitempty" json:"meta,omitempty"`                        // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	UseContext     []*UsageContext              `bson:",omitempty" json:"useContext,omitempty"`                  // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate operation definition.
	Type           *bool                        `binding:"required" bson:",omitempty" json:"type,omitempty"`     // Indicates whether this operation or named query can be invoked at the resource type level for any given resource type level (e.g. without needing to choose a specific resource id for the context).
	Url            *string                      `bson:",omitempty" json:"url,omitempty"`                         // An absolute URI that is used to identify this operation definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this operation definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the operation definition is stored on different servers.
	Jurisdiction   []*CodeableConcept           `bson:",omitempty" json:"jurisdiction,omitempty"`                // A legal or geographic region in which the operation definition is intended to be used.
	Overload       *OperationDefinitionOverload `binding:"omitempty" bson:",omitempty"`
	Language       *string                      `bson:",omitempty" json:"language,omitempty"` // The base language in which the resource is written.
	Contact        []*ContactDetail             `bson:",omitempty" json:"contact,omitempty"`  // Contact details to assist a user in finding and communicating with the publisher.
	ResourceType   string                       `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *OperationDefinitionParameter) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["allowedType"]) > 0 {
		if err := go1.Unmarshal(asMap["allowedType"], &out.AllowedType); err != nil {
			return err
		}

	}
	if len(asMap["searchType"]) > 0 {
		if err := go1.Unmarshal(asMap["searchType"], &out.SearchType); err != nil {
			return err
		}

	}
	if len(asMap["binding"]) > 0 {
		if err := go1.Unmarshal(asMap["binding"], &out.Binding); err != nil {
			return err
		}

	}
	if len(asMap["referencedFrom"]) > 0 {
		if err := go1.Unmarshal(asMap["referencedFrom"], &out.ReferencedFrom); err != nil {
			return err
		}

	}
	if len(asMap["part"]) > 0 {
		if err := go1.Unmarshal(asMap["part"], &out.Part); err != nil {
			return err
		}

	}
	if len(asMap["scope"]) > 0 {
		if err := go1.Unmarshal(asMap["scope"], &out.Scope); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["min"], &out.Min); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["max"], &out.Max); err != nil {
		return err
	}

	if len(asMap["documentation"]) > 0 {
		if err := go1.Unmarshal(asMap["documentation"], &out.Documentation); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["use"], &out.Use); err != nil {
		return err
	}

	if len(asMap["targetProfile"]) > 0 {
		if err := go1.Unmarshal(asMap["targetProfile"], &out.TargetProfile); err != nil {
			return err
		}

	}
	return nil
}

type OperationDefinitionParameter struct {
	Id                *string                                     `bson:"_id,omitempty" json:"id,omitempty"`       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Type              *string                                     `bson:",omitempty" json:"type,omitempty"`        // The type for this parameter.
	AllowedType       []*string                                   `bson:",omitempty" json:"allowedType,omitempty"` // Support for polymorphic types. If the parameter type is abstract, this element lists allowed sub-types for the parameter.
	SearchType        *string                                     `bson:",omitempty" json:"searchType,omitempty"`  // How the parameter is understood if/when it used as search parameter. This is only used if the parameter is a string.
	Binding           *OperationDefinitionParameterBinding        `binding:"omitempty" bson:",omitempty"`
	ReferencedFrom    *OperationDefinitionParameterReferencedFrom `binding:"omitempty" bson:",omitempty"`
	Part              interface{}
	Scope             []*string    `bson:",omitempty" json:"scope,omitempty"`                   // If present, indicates that the parameter applies when the operation is being invoked at the specified level.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Name              *string      `binding:"required" bson:",omitempty" json:"name,omitempty"` // The name of used to identify the parameter.
	Min               *int         `binding:"required" bson:",omitempty" json:"min,omitempty"`  // The minimum number of times this parameter SHALL appear in the request or response.
	Max               *string      `binding:"required" bson:",omitempty" json:"max,omitempty"`  // The maximum number of times this element is permitted to appear in the request or response.
	Documentation     *string      `bson:",omitempty" json:"documentation,omitempty"`           // Describes the meaning or use of this parameter.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`       /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Use           *string   `binding:"required" bson:",omitempty" json:"use,omitempty"` // Whether this is an input or an output parameter.
	TargetProfile []*string `bson:",omitempty" json:"targetProfile,omitempty"`          // Used when the type is "Reference" or "canonical", and identifies a profile structure or implementation Guide that applies to the target of the reference this parameter refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.
}

func (out *OperationDefinitionParameterBinding) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["strength"], &out.Strength); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueSet"], &out.ValueSet); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type OperationDefinitionParameterBinding struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Strength  *string      `binding:"required" bson:",omitempty" json:"strength,omitempty"` // Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
	ValueSet  *string      `binding:"required" bson:",omitempty" json:"valueSet,omitempty"` // Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
	Id        *string      `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *OperationDefinitionParameterReferencedFrom) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
		return err
	}

	if len(asMap["sourceId"]) > 0 {
		if err := go1.Unmarshal(asMap["sourceId"], &out.SourceId); err != nil {
			return err
		}

	}
	return nil
}

type OperationDefinitionParameterReferencedFrom struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Source   *string `binding:"required" bson:",omitempty" json:"source,omitempty"` // The name of the parameter or dot-separated path of parameter names pointing to the resource parameter that is expected to contain a reference to this resource.
	SourceId *string `bson:",omitempty" json:"sourceId,omitempty"`                  // The id of the element in the referencing resource that is expected to resolve to this resource.
}
type OperationDefinitionVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *OperationDefinitionOverload) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["parameterName"]) > 0 {
		if err := go1.Unmarshal(asMap["parameterName"], &out.ParameterName); err != nil {
			return err
		}

	}
	if len(asMap["comment"]) > 0 {
		if err := go1.Unmarshal(asMap["comment"], &out.Comment); err != nil {
			return err
		}

	}
	return nil
}

type OperationDefinitionOverload struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ParameterName []*string `bson:",omitempty" json:"parameterName,omitempty"` // Name of parameter to include in overload.
	Comment       *string   `bson:",omitempty" json:"comment,omitempty"`       // Comments to go on overload.
}

func (out *OperationOutcome) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"OperationOutcome\"" {
		return fmt.Errorf("resourceType is not %s", "OperationOutcome")
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["issue"], &out.Issue); err != nil {
		return err
	}

	return nil
}

type OperationOutcome struct {
	Extension         []*Extension        `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta              *Meta               `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules     *string             `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language          *string             `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Contained         []*Resource         `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Text              *Narrative          `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Issue        *OperationOutcomeIssue `binding:"omitempty" bson:",omitempty"`
	ResourceType string                 `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *OperationOutcomeIssue) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["severity"], &out.Severity); err != nil {
		return err
	}

	if len(asMap["details"]) > 0 {
		if err := go1.Unmarshal(asMap["details"], &out.Details); err != nil {
			return err
		}

	}
	if len(asMap["diagnostics"]) > 0 {
		if err := go1.Unmarshal(asMap["diagnostics"], &out.Diagnostics); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["expression"]) > 0 {
		if err := go1.Unmarshal(asMap["expression"], &out.Expression); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	return nil
}

type OperationOutcomeIssue struct {
	Id          *string          `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension   []*Extension     `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Severity    *string          `binding:"required" bson:",omitempty" json:"severity,omitempty"` // Indicates whether the issue indicates a variation from successful processing.
	Details     *CodeableConcept `bson:",omitempty" json:"details,omitempty"`                     // Additional details about the error. This may be a text description of the error or a system code that identifies the error.
	Diagnostics *string          `bson:",omitempty" json:"diagnostics,omitempty"`                 // Additional diagnostic information about the issue.
	Location    []*string        `bson:",omitempty" json:"location,omitempty"`                    /*
	This element is deprecated because it is XML specific. It is replaced by issue.expression, which is format independent, and simpler to parse.

	For resource issues, this will be a simple XPath limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.  For HTTP errors, will be "http." + the parameter name.
	*/
	Expression        []*string    `bson:",omitempty" json:"expression,omitempty"`        // A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code *string `binding:"required" bson:",omitempty" json:"code,omitempty"` // Describes the type of the issue. The system that creates an OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may additional provide its own code for the error in the details element.
}

func (out *Organization) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Organization\"" {
		return fmt.Errorf("resourceType is not %s", "Organization")
	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["alias"]) > 0 {
		if err := go1.Unmarshal(asMap["alias"], &out.Alias); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["qualification"]) > 0 {
		if err := go1.Unmarshal(asMap["qualification"], &out.Qualification); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["endpoint"]) > 0 {
		if err := go1.Unmarshal(asMap["endpoint"], &out.Endpoint); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["active"]) > 0 {
		if err := go1.Unmarshal(asMap["active"], &out.Active); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type Organization struct {
	Type              []*CodeableConcept         `bson:",omitempty" json:"type,omitempty"`        // The kind(s) of organization that this is.
	Alias             []*string                  `bson:",omitempty" json:"alias,omitempty"`       // A list of alternate names that the organization is known as, or was known as in the past.
	Description       *string                    `bson:",omitempty" json:"description,omitempty"` // Description of the organization, which helps provide additional general context on the organization to ensure that the correct organization is selected.
	Qualification     *OrganizationQualification `binding:"omitempty" bson:",omitempty"`
	Meta              *Meta                      `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Identifier        []*Identifier              `bson:",omitempty" json:"identifier,omitempty"`        // Identifier for the organization that is used to identify the organization across multiple disparate systems.
	PartOf            *Reference                 `bson:",omitempty" json:"partOf,omitempty"`            // The organization of which this organization forms a part.
	ModifierExtension []*Extension               `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Endpoint      []*Reference             `bson:",omitempty" json:"endpoint,omitempty"`      // Technical endpoints providing access to services operated for the organization.
	Extension     []*Extension             `bson:",omitempty" json:"extension,omitempty"`     // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ImplicitRules *string                  `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language      *string                  `bson:",omitempty" json:"language,omitempty"`      // The base language in which the resource is written.
	Text          *Narrative               `bson:",omitempty" json:"text,omitempty"`          // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained     []*Resource              `bson:",omitempty" json:"contained,omitempty"`     // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Active        *bool                    `bson:",omitempty" json:"active,omitempty"`        // Whether the organization's record is still in active use.
	Name          *string                  `bson:",omitempty" json:"name,omitempty"`          // A name associated with the organization.
	Contact       []*ExtendedContactDetail `bson:",omitempty" json:"contact,omitempty"`       // The contact details of communication devices available relevant to the specific Organization. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.
	Id            *primitive.ObjectID      `bson:"_id,omitempty" json:"id,omitempty"`         // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ResourceType  string                   `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *OrganizationQualification) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["issuer"]) > 0 {
		if err := go1.Unmarshal(asMap["issuer"], &out.Issuer); err != nil {
			return err
		}

	}
	return nil
}

type OrganizationQualification struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier []*Identifier    `bson:",omitempty" json:"identifier,omitempty"`              // An identifier allocated to this qualification for this organization.
	Code       *CodeableConcept `binding:"required" bson:",omitempty" json:"code,omitempty"` // Coded representation of the qualification.
	Period     *Period          `bson:",omitempty" json:"period,omitempty"`                  // Period during which the qualification is valid.
	Issuer     *Reference       `bson:",omitempty" json:"issuer,omitempty"`                  // Organization that regulates and issues the qualification.
}

func (out *OrganizationAffiliation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"OrganizationAffiliation\"" {
		return fmt.Errorf("resourceType is not %s", "OrganizationAffiliation")
	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["participatingOrganization"]) > 0 {
		if err := go1.Unmarshal(asMap["participatingOrganization"], &out.ParticipatingOrganization); err != nil {
			return err
		}

	}
	if len(asMap["network"]) > 0 {
		if err := go1.Unmarshal(asMap["network"], &out.Network); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["healthcareService"]) > 0 {
		if err := go1.Unmarshal(asMap["healthcareService"], &out.HealthcareService); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["endpoint"]) > 0 {
		if err := go1.Unmarshal(asMap["endpoint"], &out.Endpoint); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["active"]) > 0 {
		if err := go1.Unmarshal(asMap["active"], &out.Active); err != nil {
			return err
		}

	}
	if len(asMap["organization"]) > 0 {
		if err := go1.Unmarshal(asMap["organization"], &out.Organization); err != nil {
			return err
		}

	}
	if len(asMap["specialty"]) > 0 {
		if err := go1.Unmarshal(asMap["specialty"], &out.Specialty); err != nil {
			return err
		}

	}
	return nil
}

type OrganizationAffiliation struct {
	Contained                 []*Resource  `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension                 []*Extension `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ParticipatingOrganization *Reference   `bson:",omitempty" json:"participatingOrganization,omitempty"` // The Participating Organization provides/performs the role(s) defined by the code to the Primary Organization (e.g. providing services or is a member of).
	Network                   []*Reference `bson:",omitempty" json:"network,omitempty"`                   // The network in which the participatingOrganization provides the role's services (if defined) at the indicated locations (if defined).
	Language                  *string      `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Text                      *Narrative   `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ModifierExtension         []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier        []*Identifier            `bson:",omitempty" json:"identifier,omitempty"`        // Business identifiers that are specific to this role.
	HealthcareService []*Reference             `bson:",omitempty" json:"healthcareService,omitempty"` // Healthcare services provided through the role.
	Contact           []*ExtendedContactDetail `bson:",omitempty" json:"contact,omitempty"`           // The contact details of communication devices available at the participatingOrganization relevant to this Affiliation.
	Id                *primitive.ObjectID      `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ImplicitRules     *string                  `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Period            *Period                  `bson:",omitempty" json:"period,omitempty"`            // The period during which the participatingOrganization is affiliated with the primary organization.
	Code              []*CodeableConcept       `bson:",omitempty" json:"code,omitempty"`              // Definition of the role the participatingOrganization plays in the association.
	Location          []*Reference             `bson:",omitempty" json:"location,omitempty"`          // The location(s) at which the role occurs.
	Endpoint          []*Reference             `bson:",omitempty" json:"endpoint,omitempty"`          // Technical endpoints providing access to services operated for this role.
	Meta              *Meta                    `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Active            *bool                    `bson:",omitempty" json:"active,omitempty"`            // Whether this organization affiliation record is in active use.
	Organization      *Reference               `bson:",omitempty" json:"organization,omitempty"`      // Organization where the role is available (primary organization/has members).
	Specialty         []*CodeableConcept       `bson:",omitempty" json:"specialty,omitempty"`         // Specific specialty of the participatingOrganization in the context of the role.
	ResourceType      string                   `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *PackagedProductDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"PackagedProductDefinition\"" {
		return fmt.Errorf("resourceType is not %s", "PackagedProductDefinition")
	}
	if len(asMap["attachedDocument"]) > 0 {
		if err := go1.Unmarshal(asMap["attachedDocument"], &out.AttachedDocument); err != nil {
			return err
		}

	}
	if len(asMap["packaging"]) > 0 {
		if err := go1.Unmarshal(asMap["packaging"], &out.Packaging); err != nil {
			return err
		}

	}
	if len(asMap["characteristic"]) > 0 {
		if err := go1.Unmarshal(asMap["characteristic"], &out.Characteristic); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["manufacturer"]) > 0 {
		if err := go1.Unmarshal(asMap["manufacturer"], &out.Manufacturer); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["legalStatusOfSupply"]) > 0 {
		if err := go1.Unmarshal(asMap["legalStatusOfSupply"], &out.LegalStatusOfSupply); err != nil {
			return err
		}

	}
	if len(asMap["marketingStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["marketingStatus"], &out.MarketingStatus); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["statusDate"]) > 0 {
		if err := go1.Unmarshal(asMap["statusDate"], &out.StatusDate); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["containedItemQuantity"]) > 0 {
		if err := go1.Unmarshal(asMap["containedItemQuantity"], &out.ContainedItemQuantity); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["packageFor"]) > 0 {
		if err := go1.Unmarshal(asMap["packageFor"], &out.PackageFor); err != nil {
			return err
		}

	}
	if len(asMap["copackagedIndicator"]) > 0 {
		if err := go1.Unmarshal(asMap["copackagedIndicator"], &out.CopackagedIndicator); err != nil {
			return err
		}

	}
	return nil
}

type PackagedProductDefinition struct {
	AttachedDocument  []*Reference                        `bson:",omitempty" json:"attachedDocument,omitempty"` // Additional information or supporting documentation about the packaged product.
	Packaging         *PackagedProductDefinitionPackaging `binding:"omitempty" bson:",omitempty"`
	Characteristic    interface{}
	Language          *string      `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Text              *Narrative   `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Manufacturer          []*Reference                                  `bson:",omitempty" json:"manufacturer,omitempty"` // Manufacturer of this package type. When there are multiple it means these are all possible manufacturers.
	Description           *string                                       `bson:",omitempty" json:"description,omitempty"`  // Textual description. Note that this is not the name of the package or product.
	LegalStatusOfSupply   *PackagedProductDefinitionLegalStatusOfSupply `binding:"omitempty" bson:",omitempty"`
	MarketingStatus       []*MarketingStatus                            `bson:",omitempty" json:"marketingStatus,omitempty"`       // Allows specifying that an item is on the market for sale, or that it is not available, and the dates and locations associated.
	Identifier            []*Identifier                                 `bson:",omitempty" json:"identifier,omitempty"`            // A unique identifier for this package as whole - not the the content of the package. Unique instance identifiers assigned to a package by manufacturers, regulators, drug catalogue custodians or other organizations.
	Name                  *string                                       `bson:",omitempty" json:"name,omitempty"`                  // A name for this package. Typically what it would be listed as in a drug formulary or catalogue, inventory etc.
	Type                  *CodeableConcept                              `bson:",omitempty" json:"type,omitempty"`                  // A high level category e.g. medicinal product, raw material, shipping/transport container, etc.
	Status                *CodeableConcept                              `bson:",omitempty" json:"status,omitempty"`                // The status within the lifecycle of this item. A high level status, this is not intended to duplicate details carried elsewhere such as legal status, or authorization or marketing status.
	StatusDate            *DateTime                                     `bson:",omitempty" json:"statusDate,omitempty"`            // The date at which the given status became applicable.
	Meta                  *Meta                                         `bson:",omitempty" json:"meta,omitempty"`                  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules         *string                                       `bson:",omitempty" json:"implicitRules,omitempty"`         // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ContainedItemQuantity []*Quantity                                   `bson:",omitempty" json:"containedItemQuantity,omitempty"` // A total of the complete count of contained items of a particular type/form, independent of sub-packaging or organization. This can be considered as the pack size. This attribute differs from containedItem.amount in that it can give a single aggregated count of all tablet types in a pack, even when these are different manufactured items. For example a pill pack of 21 tablets plus 7 sugar tablets, can be denoted here as '28 tablets'. This attribute is repeatable so that the different item types in one pack type can be counted (e.g. a count of vials and count of syringes). Each repeat must have different units, so that it is clear what the different sets of counted items are, and it is not intended to allow different counts of similar items (e.g. not '2 tubes and 3 tubes'). Repeats are not to be used to represent different pack sizes (e.g. 20 pack vs. 50 pack) - which would be different instances of this resource.
	Id                    *primitive.ObjectID                           `bson:"_id,omitempty" json:"id,omitempty"`                 // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Contained             []*Resource                                   `bson:",omitempty" json:"contained,omitempty"`             // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	PackageFor            []*Reference                                  `bson:",omitempty" json:"packageFor,omitempty"`            // The product this package model relates to, not the contents of the package (for which see package.containedItem).
	CopackagedIndicator   *bool                                         `bson:",omitempty" json:"copackagedIndicator,omitempty"`   // Identifies if the package contains different items, such as when a drug product is supplied with another item e.g. a diluent or adjuvant.
	ResourceType          string                                        `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *PackagedProductDefinitionPackaging) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["shelfLifeStorage"]) > 0 {
		if err := go1.Unmarshal(asMap["shelfLifeStorage"], &out.ShelfLifeStorage); err != nil {
			return err
		}

	}
	if len(asMap["manufacturer"]) > 0 {
		if err := go1.Unmarshal(asMap["manufacturer"], &out.Manufacturer); err != nil {
			return err
		}

	}
	if len(asMap["property"]) > 0 {
		if err := go1.Unmarshal(asMap["property"], &out.Property); err != nil {
			return err
		}

	}
	if len(asMap["containedItem"]) > 0 {
		if err := go1.Unmarshal(asMap["containedItem"], &out.ContainedItem); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["packaging"]) > 0 {
		if err := go1.Unmarshal(asMap["packaging"], &out.Packaging); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["componentPart"]) > 0 {
		if err := go1.Unmarshal(asMap["componentPart"], &out.ComponentPart); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["material"]) > 0 {
		if err := go1.Unmarshal(asMap["material"], &out.Material); err != nil {
			return err
		}

	}
	if len(asMap["alternateMaterial"]) > 0 {
		if err := go1.Unmarshal(asMap["alternateMaterial"], &out.AlternateMaterial); err != nil {
			return err
		}

	}
	return nil
}

type PackagedProductDefinitionPackaging struct {
	Id                *string                                          `bson:"_id,omitempty" json:"id,omitempty"`            // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Type              *CodeableConcept                                 `bson:",omitempty" json:"type,omitempty"`             // The physical type of the container of the items.
	ShelfLifeStorage  []*ProductShelfLife                              `bson:",omitempty" json:"shelfLifeStorage,omitempty"` // Shelf Life and storage information.
	Manufacturer      []*Reference                                     `bson:",omitempty" json:"manufacturer,omitempty"`     // Manufacturer of this packaging item. When there are multiple values each one is a potential manufacturer of this packaging item.
	Property          *PackagedProductDefinitionPackagingProperty      `binding:"omitempty" bson:",omitempty"`
	ContainedItem     *PackagedProductDefinitionPackagingContainedItem `binding:"omitempty" bson:",omitempty"`
	ModifierExtension []*Extension                                     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Packaging         interface{}
	Extension         []*Extension       `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Identifier        []*Identifier      `bson:",omitempty" json:"identifier,omitempty"`        // A business identifier that is specific to this particular part of the packaging, often assigned by the manufacturer. Including possibly Data Carrier Identifier (a GS1 barcode).
	ComponentPart     *bool              `bson:",omitempty" json:"componentPart,omitempty"`     // Is this a part of the packaging (e.g. a cap or bottle stopper), rather than the packaging itself (e.g. a bottle or vial). The latter type are designed be a container, but the former are not.
	Quantity          *int               `bson:",omitempty" json:"quantity,omitempty"`          // The quantity of packaging items contained at this layer of the package. This does not relate to the number of contained items but relates solely to the number of packaging items. When looking at the outermost layer it is always 1. If there are two boxes within, at the next layer it would be 2.
	Material          []*CodeableConcept `bson:",omitempty" json:"material,omitempty"`          // Material type of the package item.
	AlternateMaterial []*CodeableConcept `bson:",omitempty" json:"alternateMaterial,omitempty"` // A possible alternate material for this part of the packaging, that is allowed to be used instead of the usual material (e.g. different types of plastic for a blister sleeve).
}

func (out *PackagedProductDefinitionPackagingProperty) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDate"], &out.ValueDate); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else {

	}
	return nil
}

type PackagedProductDefinitionPackagingProperty struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // A code expressing the type of characteristic.
	PackagedProductDefinitionPackagingPropertyValuex
}
type PackagedProductDefinitionPackagingPropertyValuex struct {
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueDate            Date            `bson:",omitempty" json:"valueDate,omitempty"`
	ValueBoolean         bool            `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueAttachment      Attachment      `bson:",omitempty" json:"valueAttachment,omitempty"`
}

func (out *PackagedProductDefinitionPackagingContainedItem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
		return err
	}

	if len(asMap["amount"]) > 0 {
		if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type PackagedProductDefinitionPackagingContainedItem struct {
	Item              *CodeableReference `binding:"required" bson:",omitempty" json:"item,omitempty"` // The actual item(s) of medication, as manufactured, or a device (typically, but not necessarily, a co-packaged one), or other medically related item (such as food, biologicals, raw materials, medical fluids, gases etc.), as contained in the package. This also allows another whole packaged product to be included, which is solely for the case where a package of other entire packages is wanted - such as a wholesale or distribution pack (for layers within one package, use PackagedProductDefinition.packaging.packaging).
	Amount            *Quantity          `bson:",omitempty" json:"amount,omitempty"`                  // The number of this type of item within this packaging or for continuous items such as liquids it is the quantity (for example 25ml). See also PackagedProductDefinition.containedItemQuantity (especially the long definition).
	Id                *string            `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension       `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"`       /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *PackagedProductDefinitionLegalStatusOfSupply) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	return nil
}

type PackagedProductDefinitionLegalStatusOfSupply struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code         *CodeableConcept `bson:",omitempty" json:"code,omitempty"`         // The actual status of supply. Conveys in what situation this package type may be supplied for use.
	Jurisdiction *CodeableConcept `bson:",omitempty" json:"jurisdiction,omitempty"` // The place where the legal status of supply applies. When not specified, this indicates it is unknown in this context.
}

func (out *Parameters) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Parameters\"" {
		return fmt.Errorf("resourceType is not %s", "Parameters")
	}
	if len(asMap["parameter"]) > 0 {
		if err := go1.Unmarshal(asMap["parameter"], &out.Parameter); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	return nil
}

type Parameters struct {
	Parameter     *ParametersParameter `binding:"omitempty" bson:",omitempty"`
	Id            *primitive.ObjectID  `bson:"_id,omitempty" json:"id,omitempty"`         // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta          *Meta                `bson:",omitempty" json:"meta,omitempty"`          // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules *string              `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language      *string              `bson:",omitempty" json:"language,omitempty"`      // The base language in which the resource is written.
	ResourceType  string               `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ParametersParameter) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["part"]) > 0 {
		if err := go1.Unmarshal(asMap["part"], &out.Part); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueBase64Binary"], &out.ValueBase64Binary); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCanonical"], &out.ValueCanonical); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCode"], &out.ValueCode); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDate"], &out.ValueDate); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDateTime"], &out.ValueDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDecimal"], &out.ValueDecimal); err == nil {
	} else if err := go1.Unmarshal(asMap["valueId"], &out.ValueId); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInstant"], &out.ValueInstant); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger64"], &out.ValueInteger64); err == nil {
	} else if err := go1.Unmarshal(asMap["valueMarkdown"], &out.ValueMarkdown); err == nil {
	} else if err := go1.Unmarshal(asMap["valueOid"], &out.ValueOid); err == nil {
	} else if err := go1.Unmarshal(asMap["valuePositiveInt"], &out.ValuePositiveInt); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTime"], &out.ValueTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUnsignedInt"], &out.ValueUnsignedInt); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUri"], &out.ValueUri); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUrl"], &out.ValueUrl); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUuid"], &out.ValueUuid); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAddress"], &out.ValueAddress); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAge"], &out.ValueAge); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAnnotation"], &out.ValueAnnotation); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCodeableReference"], &out.ValueCodeableReference); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCoding"], &out.ValueCoding); err == nil {
	} else if err := go1.Unmarshal(asMap["valueContactPoint"], &out.ValueContactPoint); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCount"], &out.ValueCount); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDistance"], &out.ValueDistance); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDuration"], &out.ValueDuration); err == nil {
	} else if err := go1.Unmarshal(asMap["valueHumanName"], &out.ValueHumanName); err == nil {
	} else if err := go1.Unmarshal(asMap["valueIdentifier"], &out.ValueIdentifier); err == nil {
	} else if err := go1.Unmarshal(asMap["valueMoney"], &out.ValueMoney); err == nil {
	} else if err := go1.Unmarshal(asMap["valuePeriod"], &out.ValuePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRatio"], &out.ValueRatio); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRatioRange"], &out.ValueRatioRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueReference"], &out.ValueReference); err == nil {
	} else if err := go1.Unmarshal(asMap["valueSampledData"], &out.ValueSampledData); err == nil {
	} else if err := go1.Unmarshal(asMap["valueSignature"], &out.ValueSignature); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTiming"], &out.ValueTiming); err == nil {
	} else if err := go1.Unmarshal(asMap["valueContactDetail"], &out.ValueContactDetail); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDataRequirement"], &out.ValueDataRequirement); err == nil {
	} else if err := go1.Unmarshal(asMap["valueExpression"], &out.ValueExpression); err == nil {
	} else if err := go1.Unmarshal(asMap["valueParameterDefinition"], &out.ValueParameterDefinition); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRelatedArtifact"], &out.ValueRelatedArtifact); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTriggerDefinition"], &out.ValueTriggerDefinition); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUsageContext"], &out.ValueUsageContext); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAvailability"], &out.ValueAvailability); err == nil {
	} else if err := go1.Unmarshal(asMap["valueExtendedContactDetail"], &out.ValueExtendedContactDetail); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDosage"], &out.ValueDosage); err == nil {
	} else if err := go1.Unmarshal(asMap["valueMeta"], &out.ValueMeta); err == nil {
	} else {

	}
	if len(asMap["resource"]) > 0 {
		if err := go1.Unmarshal(asMap["resource"], &out.Resource); err != nil {
			return err
		}

	}
	return nil
}

type ParametersParameter struct {
	Part              interface{}
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name *string `binding:"required" bson:",omitempty" json:"name,omitempty"` // The name of the parameter (reference to the operation definition).
	ParametersParameterValuex
	Resource *Resource `bson:",omitempty" json:"resource,omitempty"` // Conveys the content if the parameter is a whole resource.
}
type ParametersParameterValuex struct {
	ValueBase64Binary          Base64Binary          `bson:",omitempty" json:"valueBase64Binary,omitempty"`
	ValueBoolean               bool                  `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueCanonical             string                `bson:",omitempty" json:"valueCanonical,omitempty"`
	ValueCode                  string                `bson:",omitempty" json:"valueCode,omitempty"`
	ValueDate                  Date                  `bson:",omitempty" json:"valueDate,omitempty"`
	ValueDateTime              DateTime              `bson:",omitempty" json:"valueDateTime,omitempty"`
	ValueDecimal               float64               `bson:",omitempty" json:"valueDecimal,omitempty"`
	ValueId                    *primitive.ObjectID   `bson:",omitempty" json:"valueId,omitempty"`
	ValueInstant               time.Time             `bson:",omitempty" json:"valueInstant,omitempty"`
	ValueInteger               int                   `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueInteger64             int64                 `bson:",omitempty" json:"valueInteger64,omitempty"`
	ValueMarkdown              string                `bson:",omitempty" json:"valueMarkdown,omitempty"`
	ValueOid                   string                `bson:",omitempty" json:"valueOid,omitempty"`
	ValuePositiveInt           int                   `bson:",omitempty" json:"valuePositiveInt,omitempty"`
	ValueString                string                `bson:",omitempty" json:"valueString,omitempty"`
	ValueTime                  Time                  `bson:",omitempty" json:"valueTime,omitempty"`
	ValueUnsignedInt           int                   `bson:",omitempty" json:"valueUnsignedInt,omitempty"`
	ValueUri                   string                `bson:",omitempty" json:"valueUri,omitempty"`
	ValueUrl                   url.URL               `bson:",omitempty" json:"valueUrl,omitempty"`
	ValueUuid                  uuid.UUID             `bson:",omitempty" json:"valueUuid,omitempty"`
	ValueAddress               Address               `bson:",omitempty" json:"valueAddress,omitempty"`
	ValueAge                   Age                   `bson:",omitempty" json:"valueAge,omitempty"`
	ValueAnnotation            Annotation            `bson:",omitempty" json:"valueAnnotation,omitempty"`
	ValueAttachment            Attachment            `bson:",omitempty" json:"valueAttachment,omitempty"`
	ValueCodeableConcept       CodeableConcept       `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueCodeableReference     CodeableReference     `bson:",omitempty" json:"valueCodeableReference,omitempty"`
	ValueCoding                Coding                `bson:",omitempty" json:"valueCoding,omitempty"`
	ValueContactPoint          ContactPoint          `bson:",omitempty" json:"valueContactPoint,omitempty"`
	ValueCount                 Count                 `bson:",omitempty" json:"valueCount,omitempty"`
	ValueDistance              Distance              `bson:",omitempty" json:"valueDistance,omitempty"`
	ValueDuration              Duration              `bson:",omitempty" json:"valueDuration,omitempty"`
	ValueHumanName             HumanName             `bson:",omitempty" json:"valueHumanName,omitempty"`
	ValueIdentifier            Identifier            `bson:",omitempty" json:"valueIdentifier,omitempty"`
	ValueMoney                 Money                 `bson:",omitempty" json:"valueMoney,omitempty"`
	ValuePeriod                Period                `bson:",omitempty" json:"valuePeriod,omitempty"`
	ValueQuantity              Quantity              `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueRange                 Range                 `bson:",omitempty" json:"valueRange,omitempty"`
	ValueRatio                 Ratio                 `bson:",omitempty" json:"valueRatio,omitempty"`
	ValueRatioRange            RatioRange            `bson:",omitempty" json:"valueRatioRange,omitempty"`
	ValueReference             Reference             `bson:",omitempty" json:"valueReference,omitempty"`
	ValueSampledData           SampledData           `bson:",omitempty" json:"valueSampledData,omitempty"`
	ValueSignature             Signature             `bson:",omitempty" json:"valueSignature,omitempty"`
	ValueTiming                Timing                `bson:",omitempty" json:"valueTiming,omitempty"`
	ValueContactDetail         ContactDetail         `bson:",omitempty" json:"valueContactDetail,omitempty"`
	ValueDataRequirement       DataRequirement       `bson:",omitempty" json:"valueDataRequirement,omitempty"`
	ValueExpression            Expression            `bson:",omitempty" json:"valueExpression,omitempty"`
	ValueParameterDefinition   ParameterDefinition   `bson:",omitempty" json:"valueParameterDefinition,omitempty"`
	ValueRelatedArtifact       RelatedArtifact       `bson:",omitempty" json:"valueRelatedArtifact,omitempty"`
	ValueTriggerDefinition     TriggerDefinition     `bson:",omitempty" json:"valueTriggerDefinition,omitempty"`
	ValueUsageContext          UsageContext          `bson:",omitempty" json:"valueUsageContext,omitempty"`
	ValueAvailability          Availability          `bson:",omitempty" json:"valueAvailability,omitempty"`
	ValueExtendedContactDetail ExtendedContactDetail `bson:",omitempty" json:"valueExtendedContactDetail,omitempty"`
	ValueDosage                Dosage                `bson:",omitempty" json:"valueDosage,omitempty"`
	ValueMeta                  Meta                  `bson:",omitempty" json:"valueMeta,omitempty"`
}

func (out *Patient) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Patient\"" {
		return fmt.Errorf("resourceType is not %s", "Patient")
	}
	if len(asMap["gender"]) > 0 {
		if err := go1.Unmarshal(asMap["gender"], &out.Gender); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["deceasedBoolean"], &out.DeceasedBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["deceasedDateTime"], &out.DeceasedDateTime); err == nil {
	} else {

	}
	if len(asMap["generalPractitioner"]) > 0 {
		if err := go1.Unmarshal(asMap["generalPractitioner"], &out.GeneralPractitioner); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["telecom"]) > 0 {
		if err := go1.Unmarshal(asMap["telecom"], &out.Telecom); err != nil {
			return err
		}

	}
	if len(asMap["active"]) > 0 {
		if err := go1.Unmarshal(asMap["active"], &out.Active); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["address"]) > 0 {
		if err := go1.Unmarshal(asMap["address"], &out.Address); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["birthDate"]) > 0 {
		if err := go1.Unmarshal(asMap["birthDate"], &out.BirthDate); err != nil {
			return err
		}

	}
	if len(asMap["maritalStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["maritalStatus"], &out.MaritalStatus); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["multipleBirthBoolean"], &out.MultipleBirthBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["multipleBirthInteger"], &out.MultipleBirthInteger); err == nil {
	} else {

	}
	if len(asMap["photo"]) > 0 {
		if err := go1.Unmarshal(asMap["photo"], &out.Photo); err != nil {
			return err
		}

	}
	if len(asMap["link"]) > 0 {
		if err := go1.Unmarshal(asMap["link"], &out.Link); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["communication"]) > 0 {
		if err := go1.Unmarshal(asMap["communication"], &out.Communication); err != nil {
			return err
		}

	}
	if len(asMap["managingOrganization"]) > 0 {
		if err := go1.Unmarshal(asMap["managingOrganization"], &out.ManagingOrganization); err != nil {
			return err
		}

	}
	return nil
}

type Patient struct {
	Gender *string `bson:",omitempty" json:"gender,omitempty"` // Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.
	PatientDeceasedx
	GeneralPractitioner []*Reference        `bson:",omitempty" json:"generalPractitioner,omitempty"` // Patient's nominated care provider.
	Id                  *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`               // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Extension           []*Extension        `bson:",omitempty" json:"extension,omitempty"`           // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension   []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"`   /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Telecom []*ContactPoint `bson:",omitempty" json:"telecom,omitempty"` // A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.
	Active  *bool           `bson:",omitempty" json:"active,omitempty"`  /*
	Whether this patient record is in active use.
	Many systems use this property to mark as non-current patients, such as those that have not been seen for a period of time based on an organization's business rules.

	It is often used to filter patient lists to exclude inactive patients

	Deceased patients may also be marked as inactive for the same reasons, but may be active for some time after death.
	*/
	Name          []*HumanName     `bson:",omitempty" json:"name,omitempty"`    // A name associated with the individual.
	Address       []*Address       `bson:",omitempty" json:"address,omitempty"` // An address for the individual.
	Contact       *PatientContact  `binding:"omitempty" bson:",omitempty"`
	Meta          *Meta            `bson:",omitempty" json:"meta,omitempty"`          // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language      *string          `bson:",omitempty" json:"language,omitempty"`      // The base language in which the resource is written.
	Contained     []*Resource      `bson:",omitempty" json:"contained,omitempty"`     // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Identifier    []*Identifier    `bson:",omitempty" json:"identifier,omitempty"`    // An identifier for this patient.
	BirthDate     *Date            `bson:",omitempty" json:"birthDate,omitempty"`     // The date of birth for the individual.
	MaritalStatus *CodeableConcept `bson:",omitempty" json:"maritalStatus,omitempty"` // This field contains a patient's most recent marital (civil) status.
	PatientMultipleBirthx
	Photo                []*Attachment         `bson:",omitempty" json:"photo,omitempty"` // Image of the patient.
	Link                 *PatientLink          `binding:"omitempty" bson:",omitempty"`
	ImplicitRules        *string               `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text                 *Narrative            `bson:",omitempty" json:"text,omitempty"`          // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Communication        *PatientCommunication `binding:"omitempty" bson:",omitempty"`
	ManagingOrganization *Reference            `bson:",omitempty" json:"managingOrganization,omitempty"` // Organization that is the custodian of the patient record.
	ResourceType         string                `binding:"omitempty" bson:"-" json:"resourceType"`
}
type PatientDeceasedx struct {
	DeceasedBoolean  bool     `bson:",omitempty" json:"deceasedBoolean,omitempty"`
	DeceasedDateTime DateTime `bson:",omitempty" json:"deceasedDateTime,omitempty"`
}

func (out *PatientContact) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["relationship"]) > 0 {
		if err := go1.Unmarshal(asMap["relationship"], &out.Relationship); err != nil {
			return err
		}

	}
	if len(asMap["gender"]) > 0 {
		if err := go1.Unmarshal(asMap["gender"], &out.Gender); err != nil {
			return err
		}

	}
	if len(asMap["organization"]) > 0 {
		if err := go1.Unmarshal(asMap["organization"], &out.Organization); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["telecom"]) > 0 {
		if err := go1.Unmarshal(asMap["telecom"], &out.Telecom); err != nil {
			return err
		}

	}
	if len(asMap["address"]) > 0 {
		if err := go1.Unmarshal(asMap["address"], &out.Address); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type PatientContact struct {
	Relationship      []*CodeableConcept `bson:",omitempty" json:"relationship,omitempty"`      // The nature of the relationship between the patient and the contact person.
	Gender            *string            `bson:",omitempty" json:"gender,omitempty"`            // Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes.
	Organization      *Reference         `bson:",omitempty" json:"organization,omitempty"`      // Organization on behalf of which the contact is acting or for which the contact is working.
	Period            *Period            `bson:",omitempty" json:"period,omitempty"`            // The period during which this contact person or organization is valid to be contacted relating to this patient.
	Extension         []*Extension       `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name    *HumanName      `bson:",omitempty" json:"name,omitempty"`    // A name associated with the contact person.
	Telecom []*ContactPoint `bson:",omitempty" json:"telecom,omitempty"` // A contact detail for the person, e.g. a telephone number or an email address.
	Address *Address        `bson:",omitempty" json:"address,omitempty"` // Address for the contact person.
	Id      *string         `bson:"_id,omitempty" json:"id,omitempty"`   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}
type PatientMultipleBirthx struct {
	MultipleBirthBoolean bool `bson:",omitempty" json:"multipleBirthBoolean,omitempty"`
	MultipleBirthInteger int  `bson:",omitempty" json:"multipleBirthInteger,omitempty"`
}

func (out *PatientLink) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["other"], &out.Other); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	return nil
}

type PatientLink struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Other *Reference `binding:"required" bson:",omitempty" json:"other,omitempty"` // Link to a Patient or RelatedPerson resource that concerns the same actual individual.
	Type  *string    `binding:"required" bson:",omitempty" json:"type,omitempty"`  // The type of link between this patient resource and another patient resource.
}

func (out *PatientCommunication) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["preferred"]) > 0 {
		if err := go1.Unmarshal(asMap["preferred"], &out.Preferred); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
		return err
	}

	return nil
}

type PatientCommunication struct {
	Preferred         *bool        `bson:",omitempty" json:"preferred,omitempty"`         // Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Language *CodeableConcept `binding:"required" bson:",omitempty" json:"language,omitempty"` // The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-AU" for Australian English.
}

func (out *PaymentNotice) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"PaymentNotice\"" {
		return fmt.Errorf("resourceType is not %s", "PaymentNotice")
	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["created"], &out.Created); err != nil {
		return err
	}

	if len(asMap["payee"]) > 0 {
		if err := go1.Unmarshal(asMap["payee"], &out.Payee); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["recipient"], &out.Recipient); err != nil {
		return err
	}

	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["payment"]) > 0 {
		if err := go1.Unmarshal(asMap["payment"], &out.Payment); err != nil {
			return err
		}

	}
	if len(asMap["paymentStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["paymentStatus"], &out.PaymentStatus); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["request"]) > 0 {
		if err := go1.Unmarshal(asMap["request"], &out.Request); err != nil {
			return err
		}

	}
	if len(asMap["response"]) > 0 {
		if err := go1.Unmarshal(asMap["response"], &out.Response); err != nil {
			return err
		}

	}
	if len(asMap["paymentDate"]) > 0 {
		if err := go1.Unmarshal(asMap["paymentDate"], &out.PaymentDate); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["reporter"]) > 0 {
		if err := go1.Unmarshal(asMap["reporter"], &out.Reporter); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
		return err
	}

	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	return nil
}

type PaymentNotice struct {
	Identifier        []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`                   // A unique identifier assigned to this payment notice.
	Created           *DateTime           `binding:"required" bson:",omitempty" json:"created,omitempty"`   // The date when this resource was created.
	Payee             *Reference          `bson:",omitempty" json:"payee,omitempty"`                        // The party who will receive or has received payment that is the subject of this notification.
	Recipient         *Reference          `binding:"required" bson:",omitempty" json:"recipient,omitempty"` // The party who is notified of the payment status.
	Extension         []*Extension        `bson:",omitempty" json:"extension,omitempty"`                    // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Payment           *Reference          `bson:",omitempty" json:"payment,omitempty"`                      // A reference to the payment which is the subject of this notice.
	PaymentStatus     *CodeableConcept    `bson:",omitempty" json:"paymentStatus,omitempty"`                // A code indicating whether payment has been sent or cleared.
	Meta              *Meta               `bson:",omitempty" json:"meta,omitempty"`                         // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language          *string             `bson:",omitempty" json:"language,omitempty"`                     // The base language in which the resource is written.
	Contained         []*Resource         `bson:",omitempty" json:"contained,omitempty"`                    // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Status            *string             `binding:"required" bson:",omitempty" json:"status,omitempty"`    // The status of the resource instance.
	Request           *Reference          `bson:",omitempty" json:"request,omitempty"`                      // Reference of resource for which payment is being made.
	Response          *Reference          `bson:",omitempty" json:"response,omitempty"`                     // Reference of response to resource for which payment is being made.
	PaymentDate       *Date               `bson:",omitempty" json:"paymentDate,omitempty"`                  // The date when the above payment action occurred.
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                        // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Text              *Narrative          `bson:",omitempty" json:"text,omitempty"`                         // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"`            /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Reporter      *Reference `bson:",omitempty" json:"reporter,omitempty"`                  // The party who reports the payment notice.
	Amount        *Money     `binding:"required" bson:",omitempty" json:"amount,omitempty"` // The amount sent to the payee.
	ImplicitRules *string    `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ResourceType  string     `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *PaymentReconciliation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"PaymentReconciliation\"" {
		return fmt.Errorf("resourceType is not %s", "PaymentReconciliation")
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["kind"]) > 0 {
		if err := go1.Unmarshal(asMap["kind"], &out.Kind); err != nil {
			return err
		}

	}
	if len(asMap["enterer"]) > 0 {
		if err := go1.Unmarshal(asMap["enterer"], &out.Enterer); err != nil {
			return err
		}

	}
	if len(asMap["authorization"]) > 0 {
		if err := go1.Unmarshal(asMap["authorization"], &out.Authorization); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["paymentIssuer"]) > 0 {
		if err := go1.Unmarshal(asMap["paymentIssuer"], &out.PaymentIssuer); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["processNote"]) > 0 {
		if err := go1.Unmarshal(asMap["processNote"], &out.ProcessNote); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["expirationDate"]) > 0 {
		if err := go1.Unmarshal(asMap["expirationDate"], &out.ExpirationDate); err != nil {
			return err
		}

	}
	if len(asMap["processor"]) > 0 {
		if err := go1.Unmarshal(asMap["processor"], &out.Processor); err != nil {
			return err
		}

	}
	if len(asMap["referenceNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["referenceNumber"], &out.ReferenceNumber); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
		return err
	}

	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["request"]) > 0 {
		if err := go1.Unmarshal(asMap["request"], &out.Request); err != nil {
			return err
		}

	}
	if len(asMap["requestor"]) > 0 {
		if err := go1.Unmarshal(asMap["requestor"], &out.Requestor); err != nil {
			return err
		}

	}
	if len(asMap["disposition"]) > 0 {
		if err := go1.Unmarshal(asMap["disposition"], &out.Disposition); err != nil {
			return err
		}

	}
	if len(asMap["tenderedAmount"]) > 0 {
		if err := go1.Unmarshal(asMap["tenderedAmount"], &out.TenderedAmount); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
		return err
	}

	if len(asMap["accountNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["accountNumber"], &out.AccountNumber); err != nil {
			return err
		}

	}
	if len(asMap["paymentIdentifier"]) > 0 {
		if err := go1.Unmarshal(asMap["paymentIdentifier"], &out.PaymentIdentifier); err != nil {
			return err
		}

	}
	if len(asMap["allocation"]) > 0 {
		if err := go1.Unmarshal(asMap["allocation"], &out.Allocation); err != nil {
			return err
		}

	}
	if len(asMap["formCode"]) > 0 {
		if err := go1.Unmarshal(asMap["formCode"], &out.FormCode); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["outcome"]) > 0 {
		if err := go1.Unmarshal(asMap["outcome"], &out.Outcome); err != nil {
			return err
		}

	}
	if len(asMap["method"]) > 0 {
		if err := go1.Unmarshal(asMap["method"], &out.Method); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["created"], &out.Created); err != nil {
		return err
	}

	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["issuerType"]) > 0 {
		if err := go1.Unmarshal(asMap["issuerType"], &out.IssuerType); err != nil {
			return err
		}

	}
	if len(asMap["cardBrand"]) > 0 {
		if err := go1.Unmarshal(asMap["cardBrand"], &out.CardBrand); err != nil {
			return err
		}

	}
	if len(asMap["returnedAmount"]) > 0 {
		if err := go1.Unmarshal(asMap["returnedAmount"], &out.ReturnedAmount); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type PaymentReconciliation struct {
	Extension         []*Extension                      `bson:",omitempty" json:"extension,omitempty"`     // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Kind              *CodeableConcept                  `bson:",omitempty" json:"kind,omitempty"`          // The workflow or activity which gave rise to or during which the payment ocurred such as a kiosk, deposit on account, periodic payment etc.
	Enterer           *Reference                        `bson:",omitempty" json:"enterer,omitempty"`       // Payment enterer if not the actual payment issuer.
	Authorization     *string                           `bson:",omitempty" json:"authorization,omitempty"` // An alphanumeric issued by the processor to confirm the successful issuance of payment.
	Id                *primitive.ObjectID               `bson:"_id,omitempty" json:"id,omitempty"`         // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	PaymentIssuer     *Reference                        `bson:",omitempty" json:"paymentIssuer,omitempty"` // The party who generated the payment.
	Location          *Reference                        `bson:",omitempty" json:"location,omitempty"`      // The location of the site or device for electronic transfers or physical location for cash payments.
	ProcessNote       *PaymentReconciliationProcessNote `binding:"omitempty" bson:",omitempty"`
	Contained         []*Resource                       `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Meta              *Meta                             `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Identifier        []*Identifier                     `bson:",omitempty" json:"identifier,omitempty"`                // A unique identifier assigned to this payment reconciliation.
	Type              *CodeableConcept                  `binding:"required" bson:",omitempty" json:"type,omitempty"`   // Code to indicate the nature of the payment such as payment, adjustment.
	ExpirationDate    *Date                             `bson:",omitempty" json:"expirationDate,omitempty"`            // The year and month (YYYY-MM) when the instrument, typically card, expires.
	Processor         *string                           `bson:",omitempty" json:"processor,omitempty"`                 // The name of the card processor, etf processor, bank for checks.
	ReferenceNumber   *string                           `bson:",omitempty" json:"referenceNumber,omitempty"`           // The check number, eft reference, car processor reference.
	Amount            *Money                            `binding:"required" bson:",omitempty" json:"amount,omitempty"` // Total payment amount as indicated on the financial instrument.
	ImplicitRules     *string                           `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Request           *Reference                        `bson:",omitempty" json:"request,omitempty"`                   // Original request resource reference.
	Requestor         *Reference                        `bson:",omitempty" json:"requestor,omitempty"`                 // The practitioner who is responsible for the services rendered to the patient.
	Disposition       *string                           `bson:",omitempty" json:"disposition,omitempty"`               // A human readable description of the status of the request for the reconciliation.
	TenderedAmount    *Money                            `bson:",omitempty" json:"tenderedAmount,omitempty"`            // The amount offered by the issuer, typically applies to cash when the issuer provides an amount in bank note denominations equal to or excess of the amount actually being paid.
	Language          *string                           `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Status            *string                           `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of the resource instance.
	Date              *Date                             `binding:"required" bson:",omitempty" json:"date,omitempty"`   // The date of payment as indicated on the financial instrument.
	AccountNumber     *string                           `bson:",omitempty" json:"accountNumber,omitempty"`             // A portion of the account number, often the last 4 digits, used for verification not charging purposes.
	PaymentIdentifier *Identifier                       `bson:",omitempty" json:"paymentIdentifier,omitempty"`         // Issuer's unique identifier for the payment instrument.
	Allocation        *PaymentReconciliationAllocation  `binding:"omitempty" bson:",omitempty"`
	FormCode          *CodeableConcept                  `bson:",omitempty" json:"formCode,omitempty"`                   // A code for the form to be used for printing the content.
	Text              *Narrative                        `bson:",omitempty" json:"text,omitempty"`                       // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Outcome           *string                           `bson:",omitempty" json:"outcome,omitempty"`                    // The outcome of a request for a reconciliation.
	Method            *CodeableConcept                  `bson:",omitempty" json:"method,omitempty"`                     // The means of payment such as check, card cash, or electronic funds transfer.
	Created           *DateTime                         `binding:"required" bson:",omitempty" json:"created,omitempty"` // The date when the resource was created.
	Period            *Period                           `bson:",omitempty" json:"period,omitempty"`                     // The period of time for which payments have been gathered into this bulk payment for settlement.
	IssuerType        *CodeableConcept                  `bson:",omitempty" json:"issuerType,omitempty"`                 // The type of the source such as patient or insurance.
	CardBrand         *string                           `bson:",omitempty" json:"cardBrand,omitempty"`                  // The card brand such as debit, Visa, Amex etc. used if a card is the method of payment.
	ReturnedAmount    *Money                            `bson:",omitempty" json:"returnedAmount,omitempty"`             // The amount returned by the receiver which is excess to the amount payable, often referred to as 'change'.
	ModifierExtension []*Extension                      `bson:",omitempty" json:"modifierExtension,omitempty"`          /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ResourceType string `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *PaymentReconciliationProcessNote) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	return nil
}

type PaymentReconciliationProcessNote struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *string `bson:",omitempty" json:"type,omitempty"` // The business purpose of the note text.
	Text *string `bson:",omitempty" json:"text,omitempty"` // The explanation or description associated with the processing.
}

func (out *PaymentReconciliationAllocation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["target"]) > 0 {
		if err := go1.Unmarshal(asMap["target"], &out.Target); err != nil {
			return err
		}

	}
	if len(asMap["payee"]) > 0 {
		if err := go1.Unmarshal(asMap["payee"], &out.Payee); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["responsible"]) > 0 {
		if err := go1.Unmarshal(asMap["responsible"], &out.Responsible); err != nil {
			return err
		}

	}
	if len(asMap["submitter"]) > 0 {
		if err := go1.Unmarshal(asMap["submitter"], &out.Submitter); err != nil {
			return err
		}

	}
	if len(asMap["amount"]) > 0 {
		if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["targetItemString"], &out.TargetItemString); err == nil {
	} else if err := go1.Unmarshal(asMap["targetItemIdentifier"], &out.TargetItemIdentifier); err == nil {
	} else if err := go1.Unmarshal(asMap["targetItemPositiveInt"], &out.TargetItemPositiveInt); err == nil {
	} else {

	}
	if len(asMap["account"]) > 0 {
		if err := go1.Unmarshal(asMap["account"], &out.Account); err != nil {
			return err
		}

	}
	if len(asMap["response"]) > 0 {
		if err := go1.Unmarshal(asMap["response"], &out.Response); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["predecessor"]) > 0 {
		if err := go1.Unmarshal(asMap["predecessor"], &out.Predecessor); err != nil {
			return err
		}

	}
	return nil
}

type PaymentReconciliationAllocation struct {
	Type              *CodeableConcept `bson:",omitempty" json:"type,omitempty"`              // Code to indicate the nature of the payment.
	Date              *Date            `bson:",omitempty" json:"date,omitempty"`              // The date from the response resource containing a commitment to pay.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Target            *Reference       `bson:",omitempty" json:"target,omitempty"`            // Specific resource to which the payment/adjustment/advance applies.
	Payee             *Reference       `bson:",omitempty" json:"payee,omitempty"`             // The party which is receiving the payment.
	Identifier        *Identifier      `bson:",omitempty" json:"identifier,omitempty"`        // Unique identifier for the current payment item for the referenced payable.
	Responsible       *Reference       `bson:",omitempty" json:"responsible,omitempty"`       // A reference to the individual who is responsible for inquiries regarding the response and its payment.
	Submitter         *Reference       `bson:",omitempty" json:"submitter,omitempty"`         // The party which submitted the claim or financial transaction.
	Amount            *Money           `bson:",omitempty" json:"amount,omitempty"`            // The monetary amount allocated from the total payment to the payable.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Encounter *Reference `bson:",omitempty" json:"encounter,omitempty"` // The Encounter to which this payment applies, may be completed by the receiver, used for search.
	PaymentReconciliationAllocationTargetItemx
	Account     *Reference  `bson:",omitempty" json:"account,omitempty"`     // The Account to which this payment applies, may be completed by the receiver, used for search.
	Response    *Reference  `bson:",omitempty" json:"response,omitempty"`    // A resource, such as a ClaimResponse, which contains a commitment to payment.
	Id          *string     `bson:"_id,omitempty" json:"id,omitempty"`       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Predecessor *Identifier `bson:",omitempty" json:"predecessor,omitempty"` // Unique identifier for the prior payment item for the referenced payable.
}
type PaymentReconciliationAllocationTargetItemx struct {
	TargetItemString      string     `bson:",omitempty" json:"targetItemString,omitempty"`
	TargetItemIdentifier  Identifier `bson:",omitempty" json:"targetItemIdentifier,omitempty"`
	TargetItemPositiveInt int        `bson:",omitempty" json:"targetItemPositiveInt,omitempty"`
}

func (out *Permission) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Permission\"" {
		return fmt.Errorf("resourceType is not %s", "Permission")
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["validity"]) > 0 {
		if err := go1.Unmarshal(asMap["validity"], &out.Validity); err != nil {
			return err
		}

	}
	if len(asMap["justification"]) > 0 {
		if err := go1.Unmarshal(asMap["justification"], &out.Justification); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["asserter"]) > 0 {
		if err := go1.Unmarshal(asMap["asserter"], &out.Asserter); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["combining"], &out.Combining); err != nil {
		return err
	}

	if len(asMap["rule"]) > 0 {
		if err := go1.Unmarshal(asMap["rule"], &out.Rule); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	return nil
}

type Permission struct {
	Extension         []*Extension             `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Date              []*DateTime              `bson:",omitempty" json:"date,omitempty"`                      // The date that permission was asserted.
	Language          *string                  `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Status            *string                  `binding:"required" bson:",omitempty" json:"status,omitempty"` // Status.
	Validity          *Period                  `bson:",omitempty" json:"validity,omitempty"`                  // The period in which the permission is active.
	Justification     *PermissionJustification `binding:"omitempty" bson:",omitempty"`
	Id                *primitive.ObjectID      `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta              *Meta                    `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Text              *Narrative               `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained         []*Resource              `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension []*Extension             `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Asserter      *Reference      `bson:",omitempty" json:"asserter,omitempty"`                     // The person or entity that asserts the permission.
	Combining     *string         `binding:"required" bson:",omitempty" json:"combining,omitempty"` // Defines a procedure for arriving at an access decision given the set of rules.
	Rule          *PermissionRule `binding:"omitempty" bson:",omitempty"`
	ImplicitRules *string         `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ResourceType  string          `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *PermissionJustification) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["basis"]) > 0 {
		if err := go1.Unmarshal(asMap["basis"], &out.Basis); err != nil {
			return err
		}

	}
	if len(asMap["evidence"]) > 0 {
		if err := go1.Unmarshal(asMap["evidence"], &out.Evidence); err != nil {
			return err
		}

	}
	return nil
}

type PermissionJustification struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Basis    []*CodeableConcept `bson:",omitempty" json:"basis,omitempty"`    // This would be a codeableconcept, or a coding, which can be constrained to , for example, the 6 grounds for processing in GDPR.
	Evidence []*Reference       `bson:",omitempty" json:"evidence,omitempty"` // Justifing rational.
}

func (out *PermissionRule) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["activity"]) > 0 {
		if err := go1.Unmarshal(asMap["activity"], &out.Activity); err != nil {
			return err
		}

	}
	if len(asMap["limit"]) > 0 {
		if err := go1.Unmarshal(asMap["limit"], &out.Limit); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["data"]) > 0 {
		if err := go1.Unmarshal(asMap["data"], &out.Data); err != nil {
			return err
		}

	}
	return nil
}

type PermissionRule struct {
	Activity          *PermissionRuleActivity `binding:"omitempty" bson:",omitempty"`
	Limit             []*CodeableConcept      `bson:",omitempty" json:"limit,omitempty"`             // What limits apply to the use of the data.
	Id                *string                 `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension            `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension            `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *string             `bson:",omitempty" json:"type,omitempty"` // deny | permit.
	Data *PermissionRuleData `binding:"omitempty" bson:",omitempty"`
}

func (out *PermissionRuleActivity) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["actor"]) > 0 {
		if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
			return err
		}

	}
	if len(asMap["action"]) > 0 {
		if err := go1.Unmarshal(asMap["action"], &out.Action); err != nil {
			return err
		}

	}
	return nil
}

type PermissionRuleActivity struct {
	Purpose           []*CodeableConcept `bson:",omitempty" json:"purpose,omitempty"`           // The purpose for which the permission is given.
	Id                *string            `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension       `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Actor  []*Reference       `bson:",omitempty" json:"actor,omitempty"`  // The actor(s) authorized for the defined activity.
	Action []*CodeableConcept `bson:",omitempty" json:"action,omitempty"` // Actions controlled by this Rule.
}

func (out *PermissionRuleData) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["resource"]) > 0 {
		if err := go1.Unmarshal(asMap["resource"], &out.Resource); err != nil {
			return err
		}

	}
	if len(asMap["security"]) > 0 {
		if err := go1.Unmarshal(asMap["security"], &out.Security); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["expression"]) > 0 {
		if err := go1.Unmarshal(asMap["expression"], &out.Expression); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type PermissionRuleData struct {
	Resource          *PermissionRuleDataResource `binding:"omitempty" bson:",omitempty"`
	Security          []*Coding                   `bson:",omitempty" json:"security,omitempty"`          // The data in scope are those with the given codes present in that data .meta.security element.
	Period            []*Period                   `bson:",omitempty" json:"period,omitempty"`            // Clinical or Operational Relevant period of time that bounds the data controlled by this rule.
	Expression        *Expression                 `bson:",omitempty" json:"expression,omitempty"`        // Used when other data selection elements are insufficient.
	Id                *string                     `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *PermissionRuleDataResource) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["meaning"], &out.Meaning); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type PermissionRuleDataResource struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Meaning   *string      `binding:"required" bson:",omitempty" json:"meaning,omitempty"`   // How the resource reference is interpreted when testing consent restrictions.
	Reference *Reference   `binding:"required" bson:",omitempty" json:"reference,omitempty"` // A reference to a specific resource that defines which resources are covered by this consent.
	Id        *string      `bson:"_id,omitempty" json:"id,omitempty"`                        // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"`                    // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *Person) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Person\"" {
		return fmt.Errorf("resourceType is not %s", "Person")
	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["telecom"]) > 0 {
		if err := go1.Unmarshal(asMap["telecom"], &out.Telecom); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["active"]) > 0 {
		if err := go1.Unmarshal(asMap["active"], &out.Active); err != nil {
			return err
		}

	}
	if len(asMap["gender"]) > 0 {
		if err := go1.Unmarshal(asMap["gender"], &out.Gender); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["deceasedBoolean"], &out.DeceasedBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["deceasedDateTime"], &out.DeceasedDateTime); err == nil {
	} else {

	}
	if len(asMap["managingOrganization"]) > 0 {
		if err := go1.Unmarshal(asMap["managingOrganization"], &out.ManagingOrganization); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["birthDate"]) > 0 {
		if err := go1.Unmarshal(asMap["birthDate"], &out.BirthDate); err != nil {
			return err
		}

	}
	if len(asMap["maritalStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["maritalStatus"], &out.MaritalStatus); err != nil {
			return err
		}

	}
	if len(asMap["communication"]) > 0 {
		if err := go1.Unmarshal(asMap["communication"], &out.Communication); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["address"]) > 0 {
		if err := go1.Unmarshal(asMap["address"], &out.Address); err != nil {
			return err
		}

	}
	if len(asMap["photo"]) > 0 {
		if err := go1.Unmarshal(asMap["photo"], &out.Photo); err != nil {
			return err
		}

	}
	if len(asMap["link"]) > 0 {
		if err := go1.Unmarshal(asMap["link"], &out.Link); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	return nil
}

type Person struct {
	ImplicitRules *string         `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Extension     []*Extension    `bson:",omitempty" json:"extension,omitempty"`     // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Telecom       []*ContactPoint `bson:",omitempty" json:"telecom,omitempty"`       // A contact detail for the person, e.g. a telephone number or an email address.
	Meta          *Meta           `bson:",omitempty" json:"meta,omitempty"`          // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Text          *Narrative      `bson:",omitempty" json:"text,omitempty"`          // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Active        *bool           `bson:",omitempty" json:"active,omitempty"`        // Whether this person's record is in active use.
	Gender        *string         `bson:",omitempty" json:"gender,omitempty"`        // Administrative Gender.
	PersonDeceasedx
	ManagingOrganization *Reference           `bson:",omitempty" json:"managingOrganization,omitempty"` // The organization that is the custodian of the person record.
	Id                   *primitive.ObjectID  `bson:"_id,omitempty" json:"id,omitempty"`                // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Identifier           []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`           // Identifier for a person within a particular scope.
	BirthDate            *Date                `bson:",omitempty" json:"birthDate,omitempty"`            // The birth date for the person.
	MaritalStatus        *CodeableConcept     `bson:",omitempty" json:"maritalStatus,omitempty"`        // This field contains a person's most recent marital (civil) status.
	Communication        *PersonCommunication `binding:"omitempty" bson:",omitempty"`
	Language             *string              `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	ModifierExtension    []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name         []*HumanName  `bson:",omitempty" json:"name,omitempty"`    // A name associated with the person.
	Address      []*Address    `bson:",omitempty" json:"address,omitempty"` // One or more addresses for the person.
	Photo        []*Attachment `bson:",omitempty" json:"photo,omitempty"`   // An image that can be displayed as a thumbnail of the person to enhance the identification of the individual.
	Link         *PersonLink   `binding:"omitempty" bson:",omitempty"`
	Contained    []*Resource   `bson:",omitempty" json:"contained,omitempty"` // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ResourceType string        `binding:"omitempty" bson:"-" json:"resourceType"`
}
type PersonDeceasedx struct {
	DeceasedBoolean  bool     `bson:",omitempty" json:"deceasedBoolean,omitempty"`
	DeceasedDateTime DateTime `bson:",omitempty" json:"deceasedDateTime,omitempty"`
}

func (out *PersonCommunication) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
		return err
	}

	if len(asMap["preferred"]) > 0 {
		if err := go1.Unmarshal(asMap["preferred"], &out.Preferred); err != nil {
			return err
		}

	}
	return nil
}

type PersonCommunication struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Language  *CodeableConcept `binding:"required" bson:",omitempty" json:"language,omitempty"` // The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-AU" for Australian English.
	Preferred *bool            `bson:",omitempty" json:"preferred,omitempty"`                   // Indicates whether or not the person prefers this language (over other languages he masters up a certain level).
}

func (out *PersonLink) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["target"], &out.Target); err != nil {
		return err
	}

	if len(asMap["assurance"]) > 0 {
		if err := go1.Unmarshal(asMap["assurance"], &out.Assurance); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type PersonLink struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Target    *Reference `binding:"required" bson:",omitempty" json:"target,omitempty"` // The resource to which this actual person is associated.
	Assurance *string    `bson:",omitempty" json:"assurance,omitempty"`                 // Level of assurance that this link is associated with the target resource.
	Id        *string    `bson:"_id,omitempty" json:"id,omitempty"`                     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *PlanDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"PlanDefinition\"" {
		return fmt.Errorf("resourceType is not %s", "PlanDefinition")
	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["subjectCodeableConcept"], &out.SubjectCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["subjectReference"], &out.SubjectReference); err == nil {
	} else if err := go1.Unmarshal(asMap["subjectCanonical"], &out.SubjectCanonical); err == nil {
	} else {

	}
	if len(asMap["topic"]) > 0 {
		if err := go1.Unmarshal(asMap["topic"], &out.Topic); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["goal"]) > 0 {
		if err := go1.Unmarshal(asMap["goal"], &out.Goal); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["effectivePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["subtitle"]) > 0 {
		if err := go1.Unmarshal(asMap["subtitle"], &out.Subtitle); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["approvalDate"]) > 0 {
		if err := go1.Unmarshal(asMap["approvalDate"], &out.ApprovalDate); err != nil {
			return err
		}

	}
	if len(asMap["relatedArtifact"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedArtifact"], &out.RelatedArtifact); err != nil {
			return err
		}

	}
	if len(asMap["action"]) > 0 {
		if err := go1.Unmarshal(asMap["action"], &out.Action); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["asNeededBoolean"], &out.AsNeededBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["asNeededCodeableConcept"], &out.AsNeededCodeableConcept); err == nil {
	} else {

	}
	if len(asMap["library"]) > 0 {
		if err := go1.Unmarshal(asMap["library"], &out.Library); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["endorser"]) > 0 {
		if err := go1.Unmarshal(asMap["endorser"], &out.Endorser); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["editor"]) > 0 {
		if err := go1.Unmarshal(asMap["editor"], &out.Editor); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["lastReviewDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastReviewDate"], &out.LastReviewDate); err != nil {
			return err
		}

	}
	if len(asMap["reviewer"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewer"], &out.Reviewer); err != nil {
			return err
		}

	}
	if len(asMap["actor"]) > 0 {
		if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["usage"]) > 0 {
		if err := go1.Unmarshal(asMap["usage"], &out.Usage); err != nil {
			return err
		}

	}
	return nil
}

type PlanDefinition struct {
	ImplicitRules *string `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Name          *string `bson:",omitempty" json:"name,omitempty"`                      // A natural language name identifying the plan definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Status        *string `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this plan definition. Enables tracking the life-cycle of the content.
	PlanDefinitionSubjectx
	Topic             []*CodeableConcept  `bson:",omitempty" json:"topic,omitempty"`     // Descriptive topics related to the content of the plan definition. Topics provide a high-level categorization of the definition that can be useful for filtering and searching.
	Text              *Narrative          `bson:",omitempty" json:"text,omitempty"`      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension         []*Extension        `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Goal              *PlanDefinitionGoal `binding:"omitempty" bson:",omitempty"`
	Purpose           *string             `bson:",omitempty" json:"purpose,omitempty"`           // Explanation of why this plan definition is needed and why it has been designed as it has.
	EffectivePeriod   *Period             `bson:",omitempty" json:"effectivePeriod,omitempty"`   // The period during which the plan definition content was or is planned to be in active use.
	Contained         []*Resource         `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Version         *string               `bson:",omitempty" json:"version,omitempty"`         // The identifier that is used to identify this version of the plan definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the plan definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
	Subtitle        *string               `bson:",omitempty" json:"subtitle,omitempty"`        // An explanatory or alternate title for the plan definition giving additional information about its content.
	Description     *string               `bson:",omitempty" json:"description,omitempty"`     // A free text natural language description of the plan definition from a consumer's perspective.
	Id              *primitive.ObjectID   `bson:"_id,omitempty" json:"id,omitempty"`           // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ApprovalDate    *Date                 `bson:",omitempty" json:"approvalDate,omitempty"`    // The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
	RelatedArtifact []*RelatedArtifact    `bson:",omitempty" json:"relatedArtifact,omitempty"` // Related artifacts such as additional documentation, justification, or bibliographic references.
	Action          *PlanDefinitionAction `binding:"omitempty" bson:",omitempty"`
	PlanDefinitionAsNeededx
	Library      []*string        `bson:",omitempty" json:"library,omitempty"`      // A reference to a Library resource containing any formal logic used by the plan definition.
	Language     *string          `bson:",omitempty" json:"language,omitempty"`     // The base language in which the resource is written.
	Experimental *bool            `bson:",omitempty" json:"experimental,omitempty"` // A Boolean value to indicate that this plan definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Publisher    *string          `bson:",omitempty" json:"publisher,omitempty"`    // The name of the organization or individual responsible for the release and ongoing maintenance of the plan definition.
	Copyright    *string          `bson:",omitempty" json:"copyright,omitempty"`    // A copyright statement relating to the plan definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the plan definition.
	Endorser     []*ContactDetail `bson:",omitempty" json:"endorser,omitempty"`     // An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.
	PlanDefinitionVersionAlgorithmx
	Contact        []*ContactDetail     `bson:",omitempty" json:"contact,omitempty"`        // Contact details to assist a user in finding and communicating with the publisher.
	Jurisdiction   []*CodeableConcept   `bson:",omitempty" json:"jurisdiction,omitempty"`   // A legal or geographic region in which the plan definition is intended to be used.
	CopyrightLabel *string              `bson:",omitempty" json:"copyrightLabel,omitempty"` // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Editor         []*ContactDetail     `bson:",omitempty" json:"editor,omitempty"`         // An individual or organization primarily responsible for internal coherence of the content.
	Identifier     []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`     // A formal identifier that is used to identify this plan definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Type           *CodeableConcept     `bson:",omitempty" json:"type,omitempty"`           // A high-level category for the plan definition that distinguishes the kinds of systems that would be interested in the plan definition.
	UseContext     []*UsageContext      `bson:",omitempty" json:"useContext,omitempty"`     // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate plan definition instances.
	Author         []*ContactDetail     `bson:",omitempty" json:"author,omitempty"`         // An individiual or organization primarily involved in the creation and maintenance of the content.
	LastReviewDate *Date                `bson:",omitempty" json:"lastReviewDate,omitempty"` // The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
	Reviewer       []*ContactDetail     `bson:",omitempty" json:"reviewer,omitempty"`       // An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.
	Actor          *PlanDefinitionActor `binding:"omitempty" bson:",omitempty"`
	Meta           *Meta                `bson:",omitempty" json:"meta,omitempty"`  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Url            *string              `bson:",omitempty" json:"url,omitempty"`   // An absolute URI that is used to identify this plan definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this plan definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the plan definition is stored on different servers.
	Title          *string              `bson:",omitempty" json:"title,omitempty"` // A short, descriptive, user-friendly title for the plan definition.
	Date           *DateTime            `bson:",omitempty" json:"date,omitempty"`  // The date  (and optionally time) when the plan definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the plan definition changes.
	Usage          *string              `bson:",omitempty" json:"usage,omitempty"` // A detailed description of how the plan definition is used from a clinical perspective.
	ResourceType   string               `binding:"omitempty" bson:"-" json:"resourceType"`
}
type PlanDefinitionSubjectx struct {
	SubjectCodeableConcept CodeableConcept `bson:",omitempty" json:"subjectCodeableConcept,omitempty"`
	SubjectReference       Reference       `bson:",omitempty" json:"subjectReference,omitempty"`
	SubjectCanonical       string          `bson:",omitempty" json:"subjectCanonical,omitempty"`
}

func (out *PlanDefinitionGoal) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["target"]) > 0 {
		if err := go1.Unmarshal(asMap["target"], &out.Target); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
		return err
	}

	if len(asMap["start"]) > 0 {
		if err := go1.Unmarshal(asMap["start"], &out.Start); err != nil {
			return err
		}

	}
	if len(asMap["addresses"]) > 0 {
		if err := go1.Unmarshal(asMap["addresses"], &out.Addresses); err != nil {
			return err
		}

	}
	if len(asMap["documentation"]) > 0 {
		if err := go1.Unmarshal(asMap["documentation"], &out.Documentation); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	return nil
}

type PlanDefinitionGoal struct {
	Target            *PlanDefinitionGoalTarget `binding:"omitempty" bson:",omitempty"`
	Id                *string                   `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension []*Extension              `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Category      *CodeableConcept   `bson:",omitempty" json:"category,omitempty"`                       // Indicates a category the goal falls within.
	Description   *CodeableConcept   `binding:"required" bson:",omitempty" json:"description,omitempty"` // Human-readable and/or coded description of a specific desired objective of care, such as "control blood pressure" or "negotiate an obstacle course" or "dance with child at wedding".
	Start         *CodeableConcept   `bson:",omitempty" json:"start,omitempty"`                          // The event after which the goal should begin being pursued.
	Addresses     []*CodeableConcept `bson:",omitempty" json:"addresses,omitempty"`                      // Identifies problems, conditions, issues, or concerns the goal is intended to address.
	Documentation []*RelatedArtifact `bson:",omitempty" json:"documentation,omitempty"`                  // Didactic or other informational resources associated with the goal that provide further supporting information about the goal. Information resources can include inline text commentary and links to web resources.
	Extension     []*Extension       `bson:",omitempty" json:"extension,omitempty"`                      // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Priority      *CodeableConcept   `bson:",omitempty" json:"priority,omitempty"`                       // Identifies the expected level of importance associated with reaching/sustaining the defined goal.
}

func (out *PlanDefinitionGoalTarget) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["detailQuantity"], &out.DetailQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["detailRange"], &out.DetailRange); err == nil {
	} else if err := go1.Unmarshal(asMap["detailCodeableConcept"], &out.DetailCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["detailString"], &out.DetailString); err == nil {
	} else if err := go1.Unmarshal(asMap["detailBoolean"], &out.DetailBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["detailInteger"], &out.DetailInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["detailRatio"], &out.DetailRatio); err == nil {
	} else {

	}
	if len(asMap["due"]) > 0 {
		if err := go1.Unmarshal(asMap["due"], &out.Due); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["measure"]) > 0 {
		if err := go1.Unmarshal(asMap["measure"], &out.Measure); err != nil {
			return err
		}

	}
	return nil
}

type PlanDefinitionGoalTarget struct {
	PlanDefinitionGoalTargetDetailx
	Due               *Duration    `bson:",omitempty" json:"due,omitempty"`               // Indicates the timeframe after the start of the goal in which the goal should be met.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Measure *CodeableConcept `bson:",omitempty" json:"measure,omitempty"` // The parameter whose value is to be tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
}
type PlanDefinitionGoalTargetDetailx struct {
	DetailQuantity        Quantity        `bson:",omitempty" json:"detailQuantity,omitempty"`
	DetailRange           Range           `bson:",omitempty" json:"detailRange,omitempty"`
	DetailCodeableConcept CodeableConcept `bson:",omitempty" json:"detailCodeableConcept,omitempty"`
	DetailString          string          `bson:",omitempty" json:"detailString,omitempty"`
	DetailBoolean         bool            `bson:",omitempty" json:"detailBoolean,omitempty"`
	DetailInteger         int             `bson:",omitempty" json:"detailInteger,omitempty"`
	DetailRatio           Ratio           `bson:",omitempty" json:"detailRatio,omitempty"`
}

func (out *PlanDefinitionAction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["textEquivalent"]) > 0 {
		if err := go1.Unmarshal(asMap["textEquivalent"], &out.TextEquivalent); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subjectCodeableConcept"], &out.SubjectCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["subjectReference"], &out.SubjectReference); err == nil {
	} else if err := go1.Unmarshal(asMap["subjectCanonical"], &out.SubjectCanonical); err == nil {
	} else {

	}
	if len(asMap["condition"]) > 0 {
		if err := go1.Unmarshal(asMap["condition"], &out.Condition); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["linkId"]) > 0 {
		if err := go1.Unmarshal(asMap["linkId"], &out.LinkId); err != nil {
			return err
		}

	}
	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	if len(asMap["goalId"]) > 0 {
		if err := go1.Unmarshal(asMap["goalId"], &out.GoalId); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["timingAge"], &out.TimingAge); err == nil {
	} else if err := go1.Unmarshal(asMap["timingDuration"], &out.TimingDuration); err == nil {
	} else if err := go1.Unmarshal(asMap["timingRange"], &out.TimingRange); err == nil {
	} else if err := go1.Unmarshal(asMap["timingTiming"], &out.TimingTiming); err == nil {
	} else {

	}
	if len(asMap["groupingBehavior"]) > 0 {
		if err := go1.Unmarshal(asMap["groupingBehavior"], &out.GroupingBehavior); err != nil {
			return err
		}

	}
	if len(asMap["selectionBehavior"]) > 0 {
		if err := go1.Unmarshal(asMap["selectionBehavior"], &out.SelectionBehavior); err != nil {
			return err
		}

	}
	if len(asMap["prefix"]) > 0 {
		if err := go1.Unmarshal(asMap["prefix"], &out.Prefix); err != nil {
			return err
		}

	}
	if len(asMap["relatedAction"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedAction"], &out.RelatedAction); err != nil {
			return err
		}

	}
	if len(asMap["requiredBehavior"]) > 0 {
		if err := go1.Unmarshal(asMap["requiredBehavior"], &out.RequiredBehavior); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["participant"]) > 0 {
		if err := go1.Unmarshal(asMap["participant"], &out.Participant); err != nil {
			return err
		}

	}
	if len(asMap["action"]) > 0 {
		if err := go1.Unmarshal(asMap["action"], &out.Action); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["trigger"]) > 0 {
		if err := go1.Unmarshal(asMap["trigger"], &out.Trigger); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["transform"]) > 0 {
		if err := go1.Unmarshal(asMap["transform"], &out.Transform); err != nil {
			return err
		}

	}
	if len(asMap["output"]) > 0 {
		if err := go1.Unmarshal(asMap["output"], &out.Output); err != nil {
			return err
		}

	}
	if len(asMap["dynamicValue"]) > 0 {
		if err := go1.Unmarshal(asMap["dynamicValue"], &out.DynamicValue); err != nil {
			return err
		}

	}
	if len(asMap["documentation"]) > 0 {
		if err := go1.Unmarshal(asMap["documentation"], &out.Documentation); err != nil {
			return err
		}

	}
	if len(asMap["input"]) > 0 {
		if err := go1.Unmarshal(asMap["input"], &out.Input); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["precheckBehavior"]) > 0 {
		if err := go1.Unmarshal(asMap["precheckBehavior"], &out.PrecheckBehavior); err != nil {
			return err
		}

	}
	if len(asMap["cardinalityBehavior"]) > 0 {
		if err := go1.Unmarshal(asMap["cardinalityBehavior"], &out.CardinalityBehavior); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["definitionCanonical"], &out.DefinitionCanonical); err == nil {
	} else if err := go1.Unmarshal(asMap["definitionUri"], &out.DefinitionUri); err == nil {
	} else {

	}
	return nil
}

type PlanDefinitionAction struct {
	TextEquivalent *string            `bson:",omitempty" json:"textEquivalent,omitempty"` // A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.
	Reason         []*CodeableConcept `bson:",omitempty" json:"reason,omitempty"`         // A description of why this action is necessary or appropriate.
	PlanDefinitionActionSubjectx
	Condition         *PlanDefinitionActionCondition `binding:"omitempty" bson:",omitempty"`
	ModifierExtension []*Extension                   `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	LinkId   *string                `bson:",omitempty" json:"linkId,omitempty"`   // An identifier that is unique within the PlanDefinition to allow linkage within the realized CarePlan and/or RequestOrchestration.
	Priority *string                `bson:",omitempty" json:"priority,omitempty"` // Indicates how quickly the action should be addressed with respect to other actions.
	GoalId   []**primitive.ObjectID `bson:",omitempty" json:"goalId,omitempty"`   // Identifies goals that this action supports. The reference must be to a goal element defined within this plan definition. In pharmaceutical quality, a goal represents acceptance criteria (Goal) for a given action (Test), so the goalId would be the unique id of a defined goal element establishing the acceptance criteria for the action.
	PlanDefinitionActionTimingx
	GroupingBehavior    *string                            `bson:",omitempty" json:"groupingBehavior,omitempty"`  // Defines the grouping behavior for the action and its children.
	SelectionBehavior   *string                            `bson:",omitempty" json:"selectionBehavior,omitempty"` // Defines the selection behavior for the action and its children.
	Prefix              *string                            `bson:",omitempty" json:"prefix,omitempty"`            // A user-visible prefix for the action. For example a section or item numbering such as 1. or A.
	RelatedAction       *PlanDefinitionActionRelatedAction `binding:"omitempty" bson:",omitempty"`
	RequiredBehavior    *string                            `bson:",omitempty" json:"requiredBehavior,omitempty"` // Defines the required behavior for the action.
	Extension           []*Extension                       `bson:",omitempty" json:"extension,omitempty"`        // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Title               *string                            `bson:",omitempty" json:"title,omitempty"`            // The textual description of the action displayed to a user. For example, when the action is a test to be performed, the title would be the title of the test such as Assay by HPLC.
	Participant         *PlanDefinitionActionParticipant   `binding:"omitempty" bson:",omitempty"`
	Action              interface{}
	Id                  *string                           `bson:"_id,omitempty" json:"id,omitempty"`       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Description         *string                           `bson:",omitempty" json:"description,omitempty"` // A brief description of the action used to provide a summary to display to the user.
	Code                *CodeableConcept                  `bson:",omitempty" json:"code,omitempty"`        // A code that provides a meaning, grouping, or classification for the action or action group. For example, a section may have a LOINC code for the section of a documentation template. In pharmaceutical quality, an action (Test) such as pH could be classified as a physical property.
	Trigger             []*TriggerDefinition              `bson:",omitempty" json:"trigger,omitempty"`     // A description of when the action should be triggered. When multiple triggers are specified on an action, any triggering event invokes the action.
	Location            *CodeableReference                `bson:",omitempty" json:"location,omitempty"`    // Identifies the facility where the action will occur; e.g. home, hospital, specific clinic, etc.
	Transform           *string                           `bson:",omitempty" json:"transform,omitempty"`   // A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
	Output              *PlanDefinitionActionOutput       `binding:"omitempty" bson:",omitempty"`
	DynamicValue        *PlanDefinitionActionDynamicValue `binding:"omitempty" bson:",omitempty"`
	Documentation       []*RelatedArtifact                `bson:",omitempty" json:"documentation,omitempty"` // Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
	Input               *PlanDefinitionActionInput        `binding:"omitempty" bson:",omitempty"`
	Type                *CodeableConcept                  `bson:",omitempty" json:"type,omitempty"`                // The type of action to perform (create, update, remove).
	PrecheckBehavior    *string                           `bson:",omitempty" json:"precheckBehavior,omitempty"`    // Defines whether the action should usually be preselected.
	CardinalityBehavior *string                           `bson:",omitempty" json:"cardinalityBehavior,omitempty"` // Defines whether the action can be selected multiple times.
	PlanDefinitionActionDefinitionx
}
type PlanDefinitionActionSubjectx struct {
	SubjectCodeableConcept CodeableConcept `bson:",omitempty" json:"subjectCodeableConcept,omitempty"`
	SubjectReference       Reference       `bson:",omitempty" json:"subjectReference,omitempty"`
	SubjectCanonical       string          `bson:",omitempty" json:"subjectCanonical,omitempty"`
}

func (out *PlanDefinitionActionCondition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["kind"], &out.Kind); err != nil {
		return err
	}

	if len(asMap["expression"]) > 0 {
		if err := go1.Unmarshal(asMap["expression"], &out.Expression); err != nil {
			return err
		}

	}
	return nil
}

type PlanDefinitionActionCondition struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Kind       *string     `binding:"required" bson:",omitempty" json:"kind,omitempty"` // The kind of condition.
	Expression *Expression `bson:",omitempty" json:"expression,omitempty"`              // An expression that returns true or false, indicating whether the condition is satisfied.
}
type PlanDefinitionActionTimingx struct {
	TimingAge      Age      `bson:",omitempty" json:"timingAge,omitempty"`
	TimingDuration Duration `bson:",omitempty" json:"timingDuration,omitempty"`
	TimingRange    Range    `bson:",omitempty" json:"timingRange,omitempty"`
	TimingTiming   Timing   `bson:",omitempty" json:"timingTiming,omitempty"`
}

func (out *PlanDefinitionActionRelatedAction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["targetId"], &out.TargetId); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["relationship"], &out.Relationship); err != nil {
		return err
	}

	if len(asMap["endRelationship"]) > 0 {
		if err := go1.Unmarshal(asMap["endRelationship"], &out.EndRelationship); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["offsetDuration"], &out.OffsetDuration); err == nil {
	} else if err := go1.Unmarshal(asMap["offsetRange"], &out.OffsetRange); err == nil {
	} else {

	}
	return nil
}

type PlanDefinitionActionRelatedAction struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	TargetId        **primitive.ObjectID `binding:"required" bson:",omitempty" json:"targetId,omitempty"`     // The element id of the target related action.
	Relationship    *string              `binding:"required" bson:",omitempty" json:"relationship,omitempty"` // The relationship of the start of this action to the related action.
	EndRelationship *string              `bson:",omitempty" json:"endRelationship,omitempty"`                 // The relationship of the end of this action to the related action.
	PlanDefinitionActionRelatedActionOffsetx
}
type PlanDefinitionActionRelatedActionOffsetx struct {
	OffsetDuration Duration `bson:",omitempty" json:"offsetDuration,omitempty"`
	OffsetRange    Range    `bson:",omitempty" json:"offsetRange,omitempty"`
}

func (out *PlanDefinitionActionParticipant) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["typeCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["typeCanonical"], &out.TypeCanonical); err != nil {
			return err
		}

	}
	if len(asMap["typeReference"]) > 0 {
		if err := go1.Unmarshal(asMap["typeReference"], &out.TypeReference); err != nil {
			return err
		}

	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["actorId"]) > 0 {
		if err := go1.Unmarshal(asMap["actorId"], &out.ActorId); err != nil {
			return err
		}

	}
	if len(asMap["role"]) > 0 {
		if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type PlanDefinitionActionParticipant struct {
	Type              *string          `bson:",omitempty" json:"type,omitempty"`              // The type of participant in the action.
	TypeCanonical     *string          `bson:",omitempty" json:"typeCanonical,omitempty"`     // The type of participant in the action.
	TypeReference     *Reference       `bson:",omitempty" json:"typeReference,omitempty"`     // The type of participant in the action.
	Function          *CodeableConcept `bson:",omitempty" json:"function,omitempty"`          // Indicates how the actor will be involved in the action - author, reviewer, witness, etc.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ActorId           *string          `bson:",omitempty" json:"actorId,omitempty"`           // A reference to the id element of the actor who will participate in this action.
	Role              *CodeableConcept `bson:",omitempty" json:"role,omitempty"`              // The role the participant should play in performing the described action.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *PlanDefinitionActionOutput) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["requirement"]) > 0 {
		if err := go1.Unmarshal(asMap["requirement"], &out.Requirement); err != nil {
			return err
		}

	}
	if len(asMap["relatedData"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedData"], &out.RelatedData); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	return nil
}

type PlanDefinitionActionOutput struct {
	Requirement       *DataRequirement `bson:",omitempty" json:"requirement,omitempty"`       // Defines the data that results as output from the action.
	RelatedData       *string          `bson:",omitempty" json:"relatedData,omitempty"`       // Points to an existing input or output element that is results as output from the action.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Title *string `bson:",omitempty" json:"title,omitempty"` // A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers.
}

func (out *PlanDefinitionActionDynamicValue) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["path"]) > 0 {
		if err := go1.Unmarshal(asMap["path"], &out.Path); err != nil {
			return err
		}

	}
	if len(asMap["expression"]) > 0 {
		if err := go1.Unmarshal(asMap["expression"], &out.Expression); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type PlanDefinitionActionDynamicValue struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Path       *string      `bson:",omitempty" json:"path,omitempty"`       // The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolvable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
	Expression *Expression  `bson:",omitempty" json:"expression,omitempty"` // An expression specifying the value of the customized element.
	Id         *string      `bson:"_id,omitempty" json:"id,omitempty"`      // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension  []*Extension `bson:",omitempty" json:"extension,omitempty"`  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *PlanDefinitionActionInput) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["relatedData"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedData"], &out.RelatedData); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["requirement"]) > 0 {
		if err := go1.Unmarshal(asMap["requirement"], &out.Requirement); err != nil {
			return err
		}

	}
	return nil
}

type PlanDefinitionActionInput struct {
	RelatedData       **primitive.ObjectID `bson:",omitempty" json:"relatedData,omitempty"`       // Points to an existing input or output element that provides data to this input.
	Id                *string              `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension         `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Title       *string          `bson:",omitempty" json:"title,omitempty"`       // A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers.
	Requirement *DataRequirement `bson:",omitempty" json:"requirement,omitempty"` // Defines the data that is to be provided as input to the action.
}
type PlanDefinitionActionDefinitionx struct {
	DefinitionCanonical string `bson:",omitempty" json:"definitionCanonical,omitempty"`
	DefinitionUri       string `bson:",omitempty" json:"definitionUri,omitempty"`
}
type PlanDefinitionAsNeededx struct {
	AsNeededBoolean         bool            `bson:",omitempty" json:"asNeededBoolean,omitempty"`
	AsNeededCodeableConcept CodeableConcept `bson:",omitempty" json:"asNeededCodeableConcept,omitempty"`
}
type PlanDefinitionVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *PlanDefinitionActor) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["option"], &out.Option); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type PlanDefinitionActor struct {
	Title             *string                    `bson:",omitempty" json:"title,omitempty"`       // A descriptive label for the actor.
	Description       *string                    `bson:",omitempty" json:"description,omitempty"` // A description of how the actor fits into the overall actions of the plan definition.
	Option            *PlanDefinitionActorOption `binding:"omitempty" bson:",omitempty"`
	Id                *string                    `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension               `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension               `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *PlanDefinitionActorOption) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["typeCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["typeCanonical"], &out.TypeCanonical); err != nil {
			return err
		}

	}
	if len(asMap["typeReference"]) > 0 {
		if err := go1.Unmarshal(asMap["typeReference"], &out.TypeReference); err != nil {
			return err
		}

	}
	if len(asMap["role"]) > 0 {
		if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
			return err
		}

	}
	return nil
}

type PlanDefinitionActorOption struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type          *string          `bson:",omitempty" json:"type,omitempty"`          // The type of participant in the action.
	TypeCanonical *string          `bson:",omitempty" json:"typeCanonical,omitempty"` // The type of participant in the action.
	TypeReference *Reference       `bson:",omitempty" json:"typeReference,omitempty"` // The type of participant in the action.
	Role          *CodeableConcept `bson:",omitempty" json:"role,omitempty"`          // The role the participant should play in performing the described action.
}

func (out *Practitioner) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Practitioner\"" {
		return fmt.Errorf("resourceType is not %s", "Practitioner")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["active"]) > 0 {
		if err := go1.Unmarshal(asMap["active"], &out.Active); err != nil {
			return err
		}

	}
	if len(asMap["telecom"]) > 0 {
		if err := go1.Unmarshal(asMap["telecom"], &out.Telecom); err != nil {
			return err
		}

	}
	if len(asMap["gender"]) > 0 {
		if err := go1.Unmarshal(asMap["gender"], &out.Gender); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["deceasedBoolean"], &out.DeceasedBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["deceasedDateTime"], &out.DeceasedDateTime); err == nil {
	} else {

	}
	if len(asMap["photo"]) > 0 {
		if err := go1.Unmarshal(asMap["photo"], &out.Photo); err != nil {
			return err
		}

	}
	if len(asMap["qualification"]) > 0 {
		if err := go1.Unmarshal(asMap["qualification"], &out.Qualification); err != nil {
			return err
		}

	}
	if len(asMap["communication"]) > 0 {
		if err := go1.Unmarshal(asMap["communication"], &out.Communication); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["birthDate"]) > 0 {
		if err := go1.Unmarshal(asMap["birthDate"], &out.BirthDate); err != nil {
			return err
		}

	}
	if len(asMap["address"]) > 0 {
		if err := go1.Unmarshal(asMap["address"], &out.Address); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type Practitioner struct {
	Id         *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language   *string             `bson:",omitempty" json:"language,omitempty"`   // The base language in which the resource is written.
	Name       []*HumanName        `bson:",omitempty" json:"name,omitempty"`       // The name(s) associated with the practitioner.
	Active     *bool               `bson:",omitempty" json:"active,omitempty"`     // Whether this practitioner's record is in active use.
	Telecom    []*ContactPoint     `bson:",omitempty" json:"telecom,omitempty"`    // A contact detail for the practitioner, e.g. a telephone number or an email address.
	Gender     *string             `bson:",omitempty" json:"gender,omitempty"`     // Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
	Identifier []*Identifier       `bson:",omitempty" json:"identifier,omitempty"` // An identifier that applies to this person in this role.
	PractitionerDeceasedx
	Photo             []*Attachment              `bson:",omitempty" json:"photo,omitempty"` // Image of the person.
	Qualification     *PractitionerQualification `binding:"omitempty" bson:",omitempty"`
	Communication     *PractitionerCommunication `binding:"omitempty" bson:",omitempty"`
	ImplicitRules     *string                    `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text              *Narrative                 `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ModifierExtension []*Extension               `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	BirthDate    *Date        `bson:",omitempty" json:"birthDate,omitempty"` // The date of birth for the practitioner.
	Address      []*Address   `bson:",omitempty" json:"address,omitempty"`   // Address(es) of the practitioner that are not role specific (typically home address). Work addresses are not typically entered in this property as they are usually role dependent.
	Meta         *Meta        `bson:",omitempty" json:"meta,omitempty"`      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Contained    []*Resource  `bson:",omitempty" json:"contained,omitempty"` // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension    []*Extension `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ResourceType string       `binding:"omitempty" bson:"-" json:"resourceType"`
}
type PractitionerDeceasedx struct {
	DeceasedBoolean  bool     `bson:",omitempty" json:"deceasedBoolean,omitempty"`
	DeceasedDateTime DateTime `bson:",omitempty" json:"deceasedDateTime,omitempty"`
}

func (out *PractitionerQualification) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["issuer"]) > 0 {
		if err := go1.Unmarshal(asMap["issuer"], &out.Issuer); err != nil {
			return err
		}

	}
	return nil
}

type PractitionerQualification struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier []*Identifier    `bson:",omitempty" json:"identifier,omitempty"`              // An identifier that applies to this person's qualification.
	Code       *CodeableConcept `binding:"required" bson:",omitempty" json:"code,omitempty"` // Coded representation of the qualification.
	Period     *Period          `bson:",omitempty" json:"period,omitempty"`                  // Period during which the qualification is valid.
	Issuer     *Reference       `bson:",omitempty" json:"issuer,omitempty"`                  // Organization that regulates and issues the qualification.
}

func (out *PractitionerCommunication) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["preferred"]) > 0 {
		if err := go1.Unmarshal(asMap["preferred"], &out.Preferred); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
		return err
	}

	return nil
}

type PractitionerCommunication struct {
	Preferred         *bool        `bson:",omitempty" json:"preferred,omitempty"`         // Indicates whether or not the person prefers this language (over other languages he masters up a certain level).
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Language *CodeableConcept `binding:"required" bson:",omitempty" json:"language,omitempty"` // The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-AU" for Australian English.
}

func (out *PractitionerRole) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"PractitionerRole\"" {
		return fmt.Errorf("resourceType is not %s", "PractitionerRole")
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["practitioner"]) > 0 {
		if err := go1.Unmarshal(asMap["practitioner"], &out.Practitioner); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["healthcareService"]) > 0 {
		if err := go1.Unmarshal(asMap["healthcareService"], &out.HealthcareService); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["active"]) > 0 {
		if err := go1.Unmarshal(asMap["active"], &out.Active); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["endpoint"]) > 0 {
		if err := go1.Unmarshal(asMap["endpoint"], &out.Endpoint); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["organization"]) > 0 {
		if err := go1.Unmarshal(asMap["organization"], &out.Organization); err != nil {
			return err
		}

	}
	if len(asMap["specialty"]) > 0 {
		if err := go1.Unmarshal(asMap["specialty"], &out.Specialty); err != nil {
			return err
		}

	}
	if len(asMap["characteristic"]) > 0 {
		if err := go1.Unmarshal(asMap["characteristic"], &out.Characteristic); err != nil {
			return err
		}

	}
	if len(asMap["availability"]) > 0 {
		if err := go1.Unmarshal(asMap["availability"], &out.Availability); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["communication"]) > 0 {
		if err := go1.Unmarshal(asMap["communication"], &out.Communication); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	return nil
}

type PractitionerRole struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Period            *Period                  `bson:",omitempty" json:"period,omitempty"`            // The period during which the person is authorized to act as a practitioner in these role(s) for the organization.
	Practitioner      *Reference               `bson:",omitempty" json:"practitioner,omitempty"`      // Practitioner that is able to provide the defined services for the organization.
	Location          []*Reference             `bson:",omitempty" json:"location,omitempty"`          // The location(s) at which this practitioner provides care.
	HealthcareService []*Reference             `bson:",omitempty" json:"healthcareService,omitempty"` // The list of healthcare services that this worker provides for this role's Organization/Location(s).
	Contact           []*ExtendedContactDetail `bson:",omitempty" json:"contact,omitempty"`           // The contact details of communication devices available relevant to the specific PractitionerRole. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.
	Text              *Narrative               `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Language          *string                  `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Active            *bool                    `bson:",omitempty" json:"active,omitempty"`            //  Whether this practitioner role record is in active use. Some systems may use this property to mark non-active practitioners, such as those that are not currently employed.
	Code              []*CodeableConcept       `bson:",omitempty" json:"code,omitempty"`              // Roles which this practitioner is authorized to perform for the organization.
	Endpoint          []*Reference             `bson:",omitempty" json:"endpoint,omitempty"`          //  Technical endpoints providing access to services operated for the practitioner with this role. Commonly used for locating scheduling services, or identifying where to send referrals electronically.
	Id                *primitive.ObjectID      `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Contained         []*Resource              `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension         []*Extension             `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Identifier        []*Identifier            `bson:",omitempty" json:"identifier,omitempty"`        // Business Identifiers that are specific to a role/location.
	Organization      *Reference               `bson:",omitempty" json:"organization,omitempty"`      // The organization where the Practitioner performs the roles associated.
	Specialty         []*CodeableConcept       `bson:",omitempty" json:"specialty,omitempty"`         // The specialty of a practitioner that describes the functional role they are practicing at a given organization or location.
	Characteristic    []*CodeableConcept       `bson:",omitempty" json:"characteristic,omitempty"`    // Collection of characteristics (attributes).
	Availability      []*Availability          `bson:",omitempty" json:"availability,omitempty"`      // A collection of times the practitioner is available or performing this role at the location and/or healthcareservice.
	ImplicitRules     *string                  `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Communication     []*CodeableConcept       `bson:",omitempty" json:"communication,omitempty"`     // A language the practitioner can use in patient communication. The practitioner may know several languages (listed in practitioner.communication), however these are the languages that could be advertised in a directory for a patient to search.
	Meta              *Meta                    `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ResourceType      string                   `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *Procedure) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Procedure\"" {
		return fmt.Errorf("resourceType is not %s", "Procedure")
	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesUri"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesUri"], &out.InstantiatesUri); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["reportedBoolean"], &out.ReportedBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["reportedReference"], &out.ReportedReference); err == nil {
	} else {

	}
	if len(asMap["followUp"]) > 0 {
		if err := go1.Unmarshal(asMap["followUp"], &out.FollowUp); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["bodySite"]) > 0 {
		if err := go1.Unmarshal(asMap["bodySite"], &out.BodySite); err != nil {
			return err
		}

	}
	if len(asMap["outcome"]) > 0 {
		if err := go1.Unmarshal(asMap["outcome"], &out.Outcome); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["report"]) > 0 {
		if err := go1.Unmarshal(asMap["report"], &out.Report); err != nil {
			return err
		}

	}
	if len(asMap["complication"]) > 0 {
		if err := go1.Unmarshal(asMap["complication"], &out.Complication); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["occurrenceDateTime"], &out.OccurrenceDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrencePeriod"], &out.OccurrencePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrenceString"], &out.OccurrenceString); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrenceAge"], &out.OccurrenceAge); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrenceRange"], &out.OccurrenceRange); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrenceTiming"], &out.OccurrenceTiming); err == nil {
	} else {

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesCanonical"], &out.InstantiatesCanonical); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["supportingInfo"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInfo"], &out.SupportingInfo); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["statusReason"]) > 0 {
		if err := go1.Unmarshal(asMap["statusReason"], &out.StatusReason); err != nil {
			return err
		}

	}
	if len(asMap["focus"]) > 0 {
		if err := go1.Unmarshal(asMap["focus"], &out.Focus); err != nil {
			return err
		}

	}
	if len(asMap["recorded"]) > 0 {
		if err := go1.Unmarshal(asMap["recorded"], &out.Recorded); err != nil {
			return err
		}

	}
	if len(asMap["focalDevice"]) > 0 {
		if err := go1.Unmarshal(asMap["focalDevice"], &out.FocalDevice); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["recorder"]) > 0 {
		if err := go1.Unmarshal(asMap["recorder"], &out.Recorder); err != nil {
			return err
		}

	}
	if len(asMap["used"]) > 0 {
		if err := go1.Unmarshal(asMap["used"], &out.Used); err != nil {
			return err
		}

	}
	return nil
}

type Procedure struct {
	Contained       []*Resource `bson:",omitempty" json:"contained,omitempty"`       // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	InstantiatesUri []*string   `bson:",omitempty" json:"instantiatesUri,omitempty"` // The URL pointing to an externally maintained protocol, guideline, order set or other definition that is adhered to in whole or in part by this Procedure.
	ProcedureReportedx
	FollowUp          []*CodeableConcept   `bson:",omitempty" json:"followUp,omitempty"` // If the procedure required specific follow up - e.g. removal of sutures. The follow up may be represented as a simple note or could potentially be more complex, in which case the CarePlan resource can be used.
	Note              []*Annotation        `bson:",omitempty" json:"note,omitempty"`     // Any other notes and comments about the procedure.
	BasedOn           []*Reference         `bson:",omitempty" json:"basedOn,omitempty"`  // A reference to a resource that contains details of the request for this procedure.
	BodySite          []*CodeableConcept   `bson:",omitempty" json:"bodySite,omitempty"` // Detailed and structured anatomical location information. Multiple locations are allowed - e.g. multiple punch biopsies of a lesion.
	Outcome           *CodeableConcept     `bson:",omitempty" json:"outcome,omitempty"`  // The outcome of the procedure - did it resolve the reasons for the procedure being performed?
	Meta              *Meta                `bson:",omitempty" json:"meta,omitempty"`     // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	PartOf            []*Reference         `bson:",omitempty" json:"partOf,omitempty"`   // A larger event of which this particular procedure is a component or step.
	Category          []*CodeableConcept   `bson:",omitempty" json:"category,omitempty"` // A code that classifies the procedure for searching, sorting and display purposes (e.g. "Surgical Procedure").
	Performer         *ProcedurePerformer  `binding:"omitempty" bson:",omitempty"`
	Report            []*Reference         `bson:",omitempty" json:"report,omitempty"`            // This could be a histology result, pathology report, surgical report, etc.
	Complication      []*CodeableReference `bson:",omitempty" json:"complication,omitempty"`      // Any complications that occurred during the procedure, or in the immediate post-performance period. These are generally tracked separately from the notes, which will typically describe the procedure itself rather than any 'post procedure' issues.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code      *CodeableConcept `bson:",omitempty" json:"code,omitempty"`                       // The specific procedure that is performed. Use text if the exact nature of the procedure cannot be coded (e.g. "Laparoscopic Appendectomy").
	Subject   *Reference       `binding:"required" bson:",omitempty" json:"subject,omitempty"` // On whom or on what the procedure was performed. This is usually an individual human, but can also be performed on animals, groups of humans or animals, organizations or practitioners (for licensing), locations or devices (for safety inspections or regulatory authorizations).  If the actual focus of the procedure is different from the subject, the focus element specifies the actual focus of the procedure.
	Encounter *Reference       `bson:",omitempty" json:"encounter,omitempty"`                  // The Encounter during which this Procedure was created or performed or to which the creation of this record is tightly associated.
	ProcedureOccurrencex
	Location              *Reference            `bson:",omitempty" json:"location,omitempty"`                  // The location where the procedure actually happened.  E.g. a newborn at home, a tracheostomy at a restaurant.
	Reason                []*CodeableReference  `bson:",omitempty" json:"reason,omitempty"`                    // The coded reason or reference why the procedure was performed. This may be a coded entity of some type, be present as text, or be a reference to one of several resources that justify the procedure.
	Identifier            []*Identifier         `bson:",omitempty" json:"identifier,omitempty"`                // Business identifiers assigned to this procedure by the performer or other systems which remain constant as the resource is updated and is propagated from server to server.
	InstantiatesCanonical []*string             `bson:",omitempty" json:"instantiatesCanonical,omitempty"`     // The URL pointing to a FHIR-defined protocol, guideline, order set or other definition that is adhered to in whole or in part by this Procedure.
	Status                *string               `binding:"required" bson:",omitempty" json:"status,omitempty"` // A code specifying the state of the procedure. Generally, this will be the in-progress or completed state.
	SupportingInfo        []*Reference          `bson:",omitempty" json:"supportingInfo,omitempty"`            // Other resources from the patient record that may be relevant to the procedure.  The information from these resources was either used to create the instance or is provided to help with its interpretation. This extension should not be used if more specific inline elements or extensions are available.
	Id                    *primitive.ObjectID   `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language              *string               `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Text                  *Narrative            `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	StatusReason          *CodeableConcept      `bson:",omitempty" json:"statusReason,omitempty"`              // Captures the reason for the current state of the procedure.
	Focus                 *Reference            `bson:",omitempty" json:"focus,omitempty"`                     // Who is the target of the procedure when it is not the subject of record only.  If focus is not present, then subject is the focus.  If focus is present and the subject is one of the targets of the procedure, include subject as a focus as well. If focus is present and the subject is not included in focus, it implies that the procedure was only targeted on the focus. For example, when a caregiver is given education for a patient, the caregiver would be the focus and the procedure record is associated with the subject (e.g. patient).  For example, use focus when recording the target of the education, training, or counseling is the parent or relative of a patient.
	Recorded              *DateTime             `bson:",omitempty" json:"recorded,omitempty"`                  // The date the occurrence of the procedure was first captured in the record regardless of Procedure.status (potentially after the occurrence of the event).
	FocalDevice           *ProcedureFocalDevice `binding:"omitempty" bson:",omitempty"`
	ImplicitRules         *string               `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Extension             []*Extension          `bson:",omitempty" json:"extension,omitempty"`     // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Recorder              *Reference            `bson:",omitempty" json:"recorder,omitempty"`      // Individual who recorded the record and takes responsibility for its content.
	Used                  []*CodeableReference  `bson:",omitempty" json:"used,omitempty"`          // Identifies medications, devices and any other substance used as part of the procedure.
	ResourceType          string                `binding:"omitempty" bson:"-" json:"resourceType"`
}
type ProcedureReportedx struct {
	ReportedBoolean   bool      `bson:",omitempty" json:"reportedBoolean,omitempty"`
	ReportedReference Reference `bson:",omitempty" json:"reportedReference,omitempty"`
}

func (out *ProcedurePerformer) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
		return err
	}

	if len(asMap["onBehalfOf"]) > 0 {
		if err := go1.Unmarshal(asMap["onBehalfOf"], &out.OnBehalfOf); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	return nil
}

type ProcedurePerformer struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Function   *CodeableConcept `bson:",omitempty" json:"function,omitempty"`                 // Distinguishes the type of involvement of the performer in the procedure. For example, surgeon, anaesthetist, endoscopist.
	Actor      *Reference       `binding:"required" bson:",omitempty" json:"actor,omitempty"` // Indicates who or what performed the procedure.
	OnBehalfOf *Reference       `bson:",omitempty" json:"onBehalfOf,omitempty"`               // The Organization the Patient, RelatedPerson, Device, CareTeam, and HealthcareService was acting on behalf of.
	Period     *Period          `bson:",omitempty" json:"period,omitempty"`                   // Time period during which the performer performed the procedure.
}
type ProcedureOccurrencex struct {
	OccurrenceDateTime DateTime `bson:",omitempty" json:"occurrenceDateTime,omitempty"`
	OccurrencePeriod   Period   `bson:",omitempty" json:"occurrencePeriod,omitempty"`
	OccurrenceString   string   `bson:",omitempty" json:"occurrenceString,omitempty"`
	OccurrenceAge      Age      `bson:",omitempty" json:"occurrenceAge,omitempty"`
	OccurrenceRange    Range    `bson:",omitempty" json:"occurrenceRange,omitempty"`
	OccurrenceTiming   Timing   `bson:",omitempty" json:"occurrenceTiming,omitempty"`
}

func (out *ProcedureFocalDevice) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["action"]) > 0 {
		if err := go1.Unmarshal(asMap["action"], &out.Action); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["manipulated"], &out.Manipulated); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ProcedureFocalDevice struct {
	Action            *CodeableConcept `bson:",omitempty" json:"action,omitempty"`                         // The kind of change that happened to the device during the procedure.
	Manipulated       *Reference       `binding:"required" bson:",omitempty" json:"manipulated,omitempty"` // The device that was manipulated (changed) during the procedure.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`                          // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`                      // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`              /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *Provenance) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Provenance\"" {
		return fmt.Errorf("resourceType is not %s", "Provenance")
	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["authorization"]) > 0 {
		if err := go1.Unmarshal(asMap["authorization"], &out.Authorization); err != nil {
			return err
		}

	}
	if len(asMap["activity"]) > 0 {
		if err := go1.Unmarshal(asMap["activity"], &out.Activity); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["recorded"]) > 0 {
		if err := go1.Unmarshal(asMap["recorded"], &out.Recorded); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["signature"]) > 0 {
		if err := go1.Unmarshal(asMap["signature"], &out.Signature); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["policy"]) > 0 {
		if err := go1.Unmarshal(asMap["policy"], &out.Policy); err != nil {
			return err
		}

	}
	if len(asMap["patient"]) > 0 {
		if err := go1.Unmarshal(asMap["patient"], &out.Patient); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["agent"], &out.Agent); err != nil {
		return err
	}

	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["occurredPeriod"], &out.OccurredPeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["occurredDateTime"], &out.OccurredDateTime); err == nil {
	} else {

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["entity"]) > 0 {
		if err := go1.Unmarshal(asMap["entity"], &out.Entity); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["target"], &out.Target); err != nil {
		return err
	}

	return nil
}

type Provenance struct {
	Language          *string              `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Extension         []*Extension         `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Authorization     []*CodeableReference `bson:",omitempty" json:"authorization,omitempty"`     // The authorization (e.g., PurposeOfUse) that was used during the event being recorded.
	Activity          *CodeableConcept     `bson:",omitempty" json:"activity,omitempty"`          // An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.
	ImplicitRules     *string              `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text              *Narrative           `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Recorded          *time.Time           `bson:",omitempty" json:"recorded,omitempty"`          // The instant of time at which the activity was recorded.
	Location          *Reference           `bson:",omitempty" json:"location,omitempty"`          // Where the activity occurred, if relevant.
	Signature         []*Signature         `bson:",omitempty" json:"signature,omitempty"`         // A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated.
	Id                *primitive.ObjectID  `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Contained         []*Resource          `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Policy  []*string        `bson:",omitempty" json:"policy,omitempty"`  // Policy or plan the activity was defined by. Typically, a single activity may have multiple applicable policy documents, such as patient consent, guarantor funding, etc.
	Patient *Reference       `bson:",omitempty" json:"patient,omitempty"` // The patient element is available to enable deterministic tracking of activities that involve the patient as the subject of the data used in an activity.
	Agent   *ProvenanceAgent `binding:"omitempty" bson:",omitempty"`
	Meta    *Meta            `bson:",omitempty" json:"meta,omitempty"` // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ProvenanceOccurredx
	BasedOn      []*Reference      `bson:",omitempty" json:"basedOn,omitempty"`   // Allows tracing of authorizatino for the events and tracking whether proposals/recommendations were acted upon.
	Encounter    *Reference        `bson:",omitempty" json:"encounter,omitempty"` // This will typically be the encounter the event occurred, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission lab tests).
	Entity       *ProvenanceEntity `binding:"omitempty" bson:",omitempty"`
	Target       []*Reference      `binding:"required" bson:",omitempty" json:"target,omitempty"` // The Reference(s) that were generated or updated by  the activity described in this resource. A provenance can point to more than one target if multiple resources were created/updated by the same activity.
	ResourceType string            `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ProvenanceAgent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["onBehalfOf"]) > 0 {
		if err := go1.Unmarshal(asMap["onBehalfOf"], &out.OnBehalfOf); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["role"]) > 0 {
		if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["who"], &out.Who); err != nil {
		return err
	}

	return nil
}

type ProvenanceAgent struct {
	OnBehalfOf        *Reference   `bson:",omitempty" json:"onBehalfOf,omitempty"`        // The agent that delegated authority to perform the activity performed by the agent.who element.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept   `bson:",omitempty" json:"type,omitempty"`                   // The Functional Role of the agent with respect to the activity.
	Role []*CodeableConcept `bson:",omitempty" json:"role,omitempty"`                   // The structural roles of the agent indicating the agent's competency. The security role enabling the agent with respect to the activity.
	Who  *Reference         `binding:"required" bson:",omitempty" json:"who,omitempty"` // Indicates who or what performed in the event.
}
type ProvenanceOccurredx struct {
	OccurredPeriod   Period   `bson:",omitempty" json:"occurredPeriod,omitempty"`
	OccurredDateTime DateTime `bson:",omitempty" json:"occurredDateTime,omitempty"`
}

func (out *ProvenanceEntity) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["what"], &out.What); err != nil {
		return err
	}

	if len(asMap["agent"]) > 0 {
		if err := go1.Unmarshal(asMap["agent"], &out.Agent); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
		return err
	}

	return nil
}

type ProvenanceEntity struct {
	What              *Reference `binding:"required" bson:",omitempty" json:"what,omitempty"` // Identity of the  Entity used. May be a logical or physical uri and maybe absolute or relative.
	Agent             interface{}
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Role *string `binding:"required" bson:",omitempty" json:"role,omitempty"` // How the entity was used during the activity.
}

func (out *Questionnaire) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Questionnaire\"" {
		return fmt.Errorf("resourceType is not %s", "Questionnaire")
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["lastReviewDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastReviewDate"], &out.LastReviewDate); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["derivedFrom"]) > 0 {
		if err := go1.Unmarshal(asMap["derivedFrom"], &out.DerivedFrom); err != nil {
			return err
		}

	}
	if len(asMap["item"]) > 0 {
		if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["effectivePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["approvalDate"]) > 0 {
		if err := go1.Unmarshal(asMap["approvalDate"], &out.ApprovalDate); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["subjectType"]) > 0 {
		if err := go1.Unmarshal(asMap["subjectType"], &out.SubjectType); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	return nil
}

type Questionnaire struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier     []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`     // A formal identifier that is used to identify this questionnaire when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Version        *string             `bson:",omitempty" json:"version,omitempty"`        // The identifier that is used to identify this version of the questionnaire when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the questionnaire author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Title          *string             `bson:",omitempty" json:"title,omitempty"`          // A short, descriptive, user-friendly title for the questionnaire.
	Id             *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`          // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Extension      []*Extension        `bson:",omitempty" json:"extension,omitempty"`      // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Experimental   *bool               `bson:",omitempty" json:"experimental,omitempty"`   // A Boolean value to indicate that this questionnaire is authored for testing purposes (or education/evaluation/marketing) and is not intended for genuine usage.
	LastReviewDate *Date               `bson:",omitempty" json:"lastReviewDate,omitempty"` // The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
	QuestionnaireVersionAlgorithmx
	Name            *string            `bson:",omitempty" json:"name,omitempty"`        // A natural language name identifying the questionnaire. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Publisher       *string            `bson:",omitempty" json:"publisher,omitempty"`   // The name of the organization or individual responsible for the release and ongoing maintenance of the questionnaire.
	Meta            *Meta              `bson:",omitempty" json:"meta,omitempty"`        // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	DerivedFrom     []*string          `bson:",omitempty" json:"derivedFrom,omitempty"` // The URL of a Questionnaire that this Questionnaire is based on.
	Item            *QuestionnaireItem `binding:"omitempty" bson:",omitempty"`
	Date            *DateTime          `bson:",omitempty" json:"date,omitempty"`                      // The date  (and optionally time) when the questionnaire was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the questionnaire changes.
	Description     *string            `bson:",omitempty" json:"description,omitempty"`               // A free text natural language description of the questionnaire from a consumer's perspective.
	Text            *Narrative         `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Url             *string            `bson:",omitempty" json:"url,omitempty"`                       // An absolute URI that is used to identify this questionnaire when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this questionnaire is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the questionnaire is stored on different servers.
	UseContext      []*UsageContext    `bson:",omitempty" json:"useContext,omitempty"`                // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate questionnaires.
	Purpose         *string            `bson:",omitempty" json:"purpose,omitempty"`                   // Explanation of why this questionnaire is needed and why it has been designed as it has.
	Copyright       *string            `bson:",omitempty" json:"copyright,omitempty"`                 // A copyright statement relating to the questionnaire and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the questionnaire.
	EffectivePeriod *Period            `bson:",omitempty" json:"effectivePeriod,omitempty"`           // The period during which the questionnaire content was or is planned to be in active use.
	Contained       []*Resource        `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Status          *string            `binding:"required" bson:",omitempty" json:"status,omitempty"` // The current state of this questionnaire.
	Contact         []*ContactDetail   `bson:",omitempty" json:"contact,omitempty"`                   // Contact details to assist a user in finding and communicating with the publisher.
	CopyrightLabel  *string            `bson:",omitempty" json:"copyrightLabel,omitempty"`            // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	ApprovalDate    *Date              `bson:",omitempty" json:"approvalDate,omitempty"`              // The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
	Code            []*Coding          `bson:",omitempty" json:"code,omitempty"`                      // An identifier for this collection of questions in a particular terminology such as LOINC.
	ImplicitRules   *string            `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language        *string            `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	SubjectType     []*string          `bson:",omitempty" json:"subjectType,omitempty"`               // The types of subjects that can be the subject of responses created for the questionnaire.
	Jurisdiction    []*CodeableConcept `bson:",omitempty" json:"jurisdiction,omitempty"`              // A legal or geographic region in which the questionnaire is intended to be used.
	ResourceType    string             `binding:"omitempty" bson:"-" json:"resourceType"`
}
type QuestionnaireVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *QuestionnaireItem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["enableBehavior"]) > 0 {
		if err := go1.Unmarshal(asMap["enableBehavior"], &out.EnableBehavior); err != nil {
			return err
		}

	}
	if len(asMap["maxLength"]) > 0 {
		if err := go1.Unmarshal(asMap["maxLength"], &out.MaxLength); err != nil {
			return err
		}

	}
	if len(asMap["answerConstraint"]) > 0 {
		if err := go1.Unmarshal(asMap["answerConstraint"], &out.AnswerConstraint); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["linkId"], &out.LinkId); err != nil {
		return err
	}

	if len(asMap["prefix"]) > 0 {
		if err := go1.Unmarshal(asMap["prefix"], &out.Prefix); err != nil {
			return err
		}

	}
	if len(asMap["enableWhen"]) > 0 {
		if err := go1.Unmarshal(asMap["enableWhen"], &out.EnableWhen); err != nil {
			return err
		}

	}
	if len(asMap["repeats"]) > 0 {
		if err := go1.Unmarshal(asMap["repeats"], &out.Repeats); err != nil {
			return err
		}

	}
	if len(asMap["readOnly"]) > 0 {
		if err := go1.Unmarshal(asMap["readOnly"], &out.ReadOnly); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["required"]) > 0 {
		if err := go1.Unmarshal(asMap["required"], &out.Required); err != nil {
			return err
		}

	}
	if len(asMap["answerOption"]) > 0 {
		if err := go1.Unmarshal(asMap["answerOption"], &out.AnswerOption); err != nil {
			return err
		}

	}
	if len(asMap["initial"]) > 0 {
		if err := go1.Unmarshal(asMap["initial"], &out.Initial); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["definition"]) > 0 {
		if err := go1.Unmarshal(asMap["definition"], &out.Definition); err != nil {
			return err
		}

	}
	if len(asMap["disabledDisplay"]) > 0 {
		if err := go1.Unmarshal(asMap["disabledDisplay"], &out.DisabledDisplay); err != nil {
			return err
		}

	}
	if len(asMap["answerValueSet"]) > 0 {
		if err := go1.Unmarshal(asMap["answerValueSet"], &out.AnswerValueSet); err != nil {
			return err
		}

	}
	if len(asMap["item"]) > 0 {
		if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type QuestionnaireItem struct {
	EnableBehavior    *string                        `bson:",omitempty" json:"enableBehavior,omitempty"`            // Controls how multiple enableWhen values are interpreted -  whether all or any must be true.
	MaxLength         *int                           `bson:",omitempty" json:"maxLength,omitempty"`                 // The maximum number of characters that are permitted in the answer to be considered a "valid" QuestionnaireResponse.
	AnswerConstraint  *string                        `bson:",omitempty" json:"answerConstraint,omitempty"`          // For items that have a defined set of allowed answers (via answerOption or answerValueSet), indicates whether values *other* than those specified can be selected.
	Type              *string                        `binding:"required" bson:",omitempty" json:"type,omitempty"`   // The type of questionnaire item this is - whether text for display, a grouping of other items or a particular type of data to be captured (string, integer, Coding, etc.).
	LinkId            *string                        `binding:"required" bson:",omitempty" json:"linkId,omitempty"` // An identifier that is unique within the Questionnaire allowing linkage to the equivalent item in a QuestionnaireResponse resource.
	Prefix            *string                        `bson:",omitempty" json:"prefix,omitempty"`                    // A short label for a particular group, question or set of display text within the questionnaire used for reference by the individual completing the questionnaire.
	EnableWhen        *QuestionnaireItemEnableWhen   `binding:"omitempty" bson:",omitempty"`
	Repeats           *bool                          `bson:",omitempty" json:"repeats,omitempty"`   // An indication, if true, that a QuestionnaireResponse for this item may include multiple answers associated with a single instance of this item (for question-type items) or multiple repetitions of the item (for group-type items).
	ReadOnly          *bool                          `bson:",omitempty" json:"readOnly,omitempty"`  // An indication, when true, that the value cannot be changed by a human respondent to the Questionnaire.
	Extension         []*Extension                   `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Code              []*Coding                      `bson:",omitempty" json:"code,omitempty"`      // A terminology code that corresponds to this group or question (e.g. a code from LOINC, which defines many questions and answers).
	Text              *string                        `bson:",omitempty" json:"text,omitempty"`      // The name of a section, the text of a question or text content for a display item.
	Required          *bool                          `bson:",omitempty" json:"required,omitempty"`  // An indication, if true, that the item must be present in a "completed" QuestionnaireResponse.  If false, the item may be skipped when answering the questionnaire.
	AnswerOption      *QuestionnaireItemAnswerOption `binding:"omitempty" bson:",omitempty"`
	Initial           *QuestionnaireItemInitial      `binding:"omitempty" bson:",omitempty"`
	Id                *string                        `bson:"_id,omitempty" json:"id,omitempty"`           // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Definition        *string                        `bson:",omitempty" json:"definition,omitempty"`      // This element is a URI that refers to an [ElementDefinition](elementdefinition.html) or to an [ObservationDefinition](observationdefinition.html) that provides information about this item, including information that might otherwise be included in the instance of the Questionnaire resource. A detailed description of the construction of the URI is shown in [Comments](questionnaire.html#definition), below.
	DisabledDisplay   *string                        `bson:",omitempty" json:"disabledDisplay,omitempty"` // Indicates if and how items that are disabled (because enableWhen evaluates to 'false') should be displayed.
	AnswerValueSet    *string                        `bson:",omitempty" json:"answerValueSet,omitempty"`  // A reference to a value set containing a list of values representing permitted answers for a question.
	Item              interface{}
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *QuestionnaireItemEnableWhen) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["question"], &out.Question); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["operator"], &out.Operator); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["answerBoolean"], &out.AnswerBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["answerDecimal"], &out.AnswerDecimal); err == nil {
	} else if err := go1.Unmarshal(asMap["answerInteger"], &out.AnswerInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["answerDate"], &out.AnswerDate); err == nil {
	} else if err := go1.Unmarshal(asMap["answerDateTime"], &out.AnswerDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["answerTime"], &out.AnswerTime); err == nil {
	} else if err := go1.Unmarshal(asMap["answerString"], &out.AnswerString); err == nil {
	} else if err := go1.Unmarshal(asMap["answerCoding"], &out.AnswerCoding); err == nil {
	} else if err := go1.Unmarshal(asMap["answerQuantity"], &out.AnswerQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["answerReference"], &out.AnswerReference); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "answer[x]")
	}
	return nil
}

type QuestionnaireItemEnableWhen struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Question *string `binding:"required" bson:",omitempty" json:"question,omitempty"` // The linkId for the question whose answer (or lack of answer) governs whether this item is enabled.
	Operator *string `binding:"required" bson:",omitempty" json:"operator,omitempty"` // Specifies the criteria by which the question is enabled.
	QuestionnaireItemEnableWhenAnswerx
}
type QuestionnaireItemEnableWhenAnswerx struct {
	AnswerBoolean   bool      `bson:",omitempty" json:"answerBoolean,omitempty"`
	AnswerDecimal   float64   `bson:",omitempty" json:"answerDecimal,omitempty"`
	AnswerInteger   int       `bson:",omitempty" json:"answerInteger,omitempty"`
	AnswerDate      Date      `bson:",omitempty" json:"answerDate,omitempty"`
	AnswerDateTime  DateTime  `bson:",omitempty" json:"answerDateTime,omitempty"`
	AnswerTime      Time      `bson:",omitempty" json:"answerTime,omitempty"`
	AnswerString    string    `bson:",omitempty" json:"answerString,omitempty"`
	AnswerCoding    Coding    `bson:",omitempty" json:"answerCoding,omitempty"`
	AnswerQuantity  Quantity  `bson:",omitempty" json:"answerQuantity,omitempty"`
	AnswerReference Reference `bson:",omitempty" json:"answerReference,omitempty"`
}

func (out *QuestionnaireItemAnswerOption) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDate"], &out.ValueDate); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTime"], &out.ValueTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCoding"], &out.ValueCoding); err == nil {
	} else if err := go1.Unmarshal(asMap["valueReference"], &out.ValueReference); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	if len(asMap["initialSelected"]) > 0 {
		if err := go1.Unmarshal(asMap["initialSelected"], &out.InitialSelected); err != nil {
			return err
		}

	}
	return nil
}

type QuestionnaireItemAnswerOption struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	QuestionnaireItemAnswerOptionValuex
	InitialSelected *bool `bson:",omitempty" json:"initialSelected,omitempty"` // Indicates whether the answer value is selected when the list of possible answers is initially shown.
}
type QuestionnaireItemAnswerOptionValuex struct {
	ValueInteger   int       `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueDate      Date      `bson:",omitempty" json:"valueDate,omitempty"`
	ValueTime      Time      `bson:",omitempty" json:"valueTime,omitempty"`
	ValueString    string    `bson:",omitempty" json:"valueString,omitempty"`
	ValueCoding    Coding    `bson:",omitempty" json:"valueCoding,omitempty"`
	ValueReference Reference `bson:",omitempty" json:"valueReference,omitempty"`
}

func (out *QuestionnaireItemInitial) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDecimal"], &out.ValueDecimal); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDate"], &out.ValueDate); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDateTime"], &out.ValueDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTime"], &out.ValueTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUri"], &out.ValueUri); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCoding"], &out.ValueCoding); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueReference"], &out.ValueReference); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type QuestionnaireItemInitial struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	QuestionnaireItemInitialValuex
	Id *string `bson:"_id,omitempty" json:"id,omitempty"` // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}
type QuestionnaireItemInitialValuex struct {
	ValueBoolean    bool       `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueDecimal    float64    `bson:",omitempty" json:"valueDecimal,omitempty"`
	ValueInteger    int        `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueDate       Date       `bson:",omitempty" json:"valueDate,omitempty"`
	ValueDateTime   DateTime   `bson:",omitempty" json:"valueDateTime,omitempty"`
	ValueTime       Time       `bson:",omitempty" json:"valueTime,omitempty"`
	ValueString     string     `bson:",omitempty" json:"valueString,omitempty"`
	ValueUri        string     `bson:",omitempty" json:"valueUri,omitempty"`
	ValueAttachment Attachment `bson:",omitempty" json:"valueAttachment,omitempty"`
	ValueCoding     Coding     `bson:",omitempty" json:"valueCoding,omitempty"`
	ValueQuantity   Quantity   `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueReference  Reference  `bson:",omitempty" json:"valueReference,omitempty"`
}

func (out *QuestionnaireResponse) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"QuestionnaireResponse\"" {
		return fmt.Errorf("resourceType is not %s", "QuestionnaireResponse")
	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["item"]) > 0 {
		if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["authored"]) > 0 {
		if err := go1.Unmarshal(asMap["authored"], &out.Authored); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["questionnaire"], &out.Questionnaire); err != nil {
		return err
	}

	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["source"]) > 0 {
		if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	return nil
}

type QuestionnaireResponse struct {
	Contained         []*Resource                `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Status            *string                    `binding:"required" bson:",omitempty" json:"status,omitempty"` // The current state of the questionnaire response.
	Item              *QuestionnaireResponseItem `binding:"omitempty" bson:",omitempty"`
	Meta              *Meta                      `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Text              *Narrative                 `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension         []*Extension               `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Language          *string                    `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	ImplicitRules     *string                    `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ModifierExtension []*Extension               `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier    []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`                       // Business identifiers assigned to this questionnaire response by the performer and/or other systems.  These identifiers remain constant as the resource is updated and propagates from server to server.
	Encounter     *Reference          `bson:",omitempty" json:"encounter,omitempty"`                        // The Encounter during which this questionnaire response was created or to which the creation of this record is tightly associated.
	Authored      *DateTime           `bson:",omitempty" json:"authored,omitempty"`                         // The date and/or time that this questionnaire response was last modified by the user - e.g. changing answers or revising status.
	Id            *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                            // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	PartOf        []*Reference        `bson:",omitempty" json:"partOf,omitempty"`                           // A procedure or observation that this questionnaire was performed as part of the execution of.  For example, the surgery a checklist was executed as part of.
	Questionnaire *string             `binding:"required" bson:",omitempty" json:"questionnaire,omitempty"` // The Questionnaire that defines and organizes the questions for which answers are being provided.
	Subject       *Reference          `bson:",omitempty" json:"subject,omitempty"`                          // The subject of the questionnaire response.  This could be a patient, organization, practitioner, device, etc.  This is who/what the answers apply to, but is not necessarily the source of information.
	Author        *Reference          `bson:",omitempty" json:"author,omitempty"`                           // The individual or device that received the answers to the questions in the QuestionnaireResponse and recorded them in the system.
	Source        *Reference          `bson:",omitempty" json:"source,omitempty"`                           // The individual or device that answered the questions about the subject.
	BasedOn       []*Reference        `bson:",omitempty" json:"basedOn,omitempty"`                          // A plan, proposal or order that is fulfilled in whole or in part by this questionnaire response.  For example, a ServiceRequest seeking an intake assessment or a decision support recommendation to assess for post-partum depression.
	ResourceType  string              `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *QuestionnaireResponseItem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["answer"]) > 0 {
		if err := go1.Unmarshal(asMap["answer"], &out.Answer); err != nil {
			return err
		}

	}
	if len(asMap["item"]) > 0 {
		if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["linkId"], &out.LinkId); err != nil {
		return err
	}

	if len(asMap["definition"]) > 0 {
		if err := go1.Unmarshal(asMap["definition"], &out.Definition); err != nil {
			return err
		}

	}
	return nil
}

type QuestionnaireResponseItem struct {
	Text              *string                          `bson:",omitempty" json:"text,omitempty"` // Text that is displayed above the contents of the group or as the text of the question being answered.
	Answer            *QuestionnaireResponseItemAnswer `binding:"omitempty" bson:",omitempty"`
	Item              interface{}
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	LinkId     *string `binding:"required" bson:",omitempty" json:"linkId,omitempty"` // The item from the Questionnaire that corresponds to this item in the QuestionnaireResponse resource.
	Definition *string `bson:",omitempty" json:"definition,omitempty"`                // A reference to an [ElementDefinition](elementdefinition.html) that provides the details for the item.
}

func (out *QuestionnaireResponseItemAnswer) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDecimal"], &out.ValueDecimal); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDate"], &out.ValueDate); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDateTime"], &out.ValueDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTime"], &out.ValueTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUri"], &out.ValueUri); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCoding"], &out.ValueCoding); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueReference"], &out.ValueReference); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	if len(asMap["item"]) > 0 {
		if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type QuestionnaireResponseItemAnswer struct {
	QuestionnaireResponseItemAnswerValuex
	Item              interface{}
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type QuestionnaireResponseItemAnswerValuex struct {
	ValueBoolean    bool       `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueDecimal    float64    `bson:",omitempty" json:"valueDecimal,omitempty"`
	ValueInteger    int        `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueDate       Date       `bson:",omitempty" json:"valueDate,omitempty"`
	ValueDateTime   DateTime   `bson:",omitempty" json:"valueDateTime,omitempty"`
	ValueTime       Time       `bson:",omitempty" json:"valueTime,omitempty"`
	ValueString     string     `bson:",omitempty" json:"valueString,omitempty"`
	ValueUri        string     `bson:",omitempty" json:"valueUri,omitempty"`
	ValueAttachment Attachment `bson:",omitempty" json:"valueAttachment,omitempty"`
	ValueCoding     Coding     `bson:",omitempty" json:"valueCoding,omitempty"`
	ValueQuantity   Quantity   `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueReference  Reference  `bson:",omitempty" json:"valueReference,omitempty"`
}

func (out *RegulatedAuthorization) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"RegulatedAuthorization\"" {
		return fmt.Errorf("resourceType is not %s", "RegulatedAuthorization")
	}
	if len(asMap["indication"]) > 0 {
		if err := go1.Unmarshal(asMap["indication"], &out.Indication); err != nil {
			return err
		}

	}
	if len(asMap["basis"]) > 0 {
		if err := go1.Unmarshal(asMap["basis"], &out.Basis); err != nil {
			return err
		}

	}
	if len(asMap["holder"]) > 0 {
		if err := go1.Unmarshal(asMap["holder"], &out.Holder); err != nil {
			return err
		}

	}
	if len(asMap["regulator"]) > 0 {
		if err := go1.Unmarshal(asMap["regulator"], &out.Regulator); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["region"]) > 0 {
		if err := go1.Unmarshal(asMap["region"], &out.Region); err != nil {
			return err
		}

	}
	if len(asMap["statusDate"]) > 0 {
		if err := go1.Unmarshal(asMap["statusDate"], &out.StatusDate); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["attachedDocument"]) > 0 {
		if err := go1.Unmarshal(asMap["attachedDocument"], &out.AttachedDocument); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["case"]) > 0 {
		if err := go1.Unmarshal(asMap["case"], &out.Case); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["intendedUse"]) > 0 {
		if err := go1.Unmarshal(asMap["intendedUse"], &out.IntendedUse); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["validityPeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["validityPeriod"], &out.ValidityPeriod); err != nil {
			return err
		}

	}
	return nil
}

type RegulatedAuthorization struct {
	Indication        []*CodeableReference        `bson:",omitempty" json:"indication,omitempty"`       // Condition for which the use of the regulated product applies.
	Basis             []*CodeableConcept          `bson:",omitempty" json:"basis,omitempty"`            // The legal or regulatory framework against which this authorization is granted, or other reasons for it.
	Holder            *Reference                  `bson:",omitempty" json:"holder,omitempty"`           // The organization that has been granted this authorization, by some authoritative body (the 'regulator').
	Regulator         *Reference                  `bson:",omitempty" json:"regulator,omitempty"`        // The regulatory authority or authorizing body granting the authorization. For example, European Medicines Agency (EMA), Food and Drug Administration (FDA), Health Canada (HC), etc.
	Description       *string                     `bson:",omitempty" json:"description,omitempty"`      // General textual supporting information.
	Region            []*CodeableConcept          `bson:",omitempty" json:"region,omitempty"`           // The territory (e.g., country, jurisdiction etc.) in which the authorization has been granted.
	StatusDate        *DateTime                   `bson:",omitempty" json:"statusDate,omitempty"`       // The date at which the current status was assigned.
	Contained         []*Resource                 `bson:",omitempty" json:"contained,omitempty"`        // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension         []*Extension                `bson:",omitempty" json:"extension,omitempty"`        // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Identifier        []*Identifier               `bson:",omitempty" json:"identifier,omitempty"`       // Business identifier for the authorization, typically assigned by the authorizing body.
	Status            *CodeableConcept            `bson:",omitempty" json:"status,omitempty"`           // The status that is authorised e.g. approved. Intermediate states and actions can be tracked with cases and applications.
	AttachedDocument  []*Reference                `bson:",omitempty" json:"attachedDocument,omitempty"` // Additional information or supporting documentation about the authorization.
	Id                *primitive.ObjectID         `bson:"_id,omitempty" json:"id,omitempty"`            // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language          *string                     `bson:",omitempty" json:"language,omitempty"`         // The base language in which the resource is written.
	Text              *Narrative                  `bson:",omitempty" json:"text,omitempty"`             // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Case              *RegulatedAuthorizationCase `binding:"omitempty" bson:",omitempty"`
	Meta              *Meta                       `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules     *string                     `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Type              *CodeableConcept            `bson:",omitempty" json:"type,omitempty"`              // Overall type of this authorization, for example drug marketing approval, orphan drug designation.
	IntendedUse       *CodeableConcept            `bson:",omitempty" json:"intendedUse,omitempty"`       // The intended use of the product, e.g. prevention, treatment, diagnosis.
	ModifierExtension []*Extension                `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Subject        []*Reference `bson:",omitempty" json:"subject,omitempty"`        // The product type, treatment, facility or activity that is being authorized.
	ValidityPeriod *Period      `bson:",omitempty" json:"validityPeriod,omitempty"` // The time period in which the regulatory approval, clearance or licencing is in effect. As an example, a Marketing Authorization includes the date of authorization and/or an expiration date.
	ResourceType   string       `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *RegulatedAuthorizationCase) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["application"]) > 0 {
		if err := go1.Unmarshal(asMap["application"], &out.Application); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["datePeriod"], &out.DatePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["dateDateTime"], &out.DateDateTime); err == nil {
	} else {

	}
	return nil
}

type RegulatedAuthorizationCase struct {
	Application       interface{}
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier *Identifier      `bson:",omitempty" json:"identifier,omitempty"` // Identifier by which this case can be referenced.
	Type       *CodeableConcept `bson:",omitempty" json:"type,omitempty"`       // The defining type of case.
	Status     *CodeableConcept `bson:",omitempty" json:"status,omitempty"`     // The status associated with the case.
	RegulatedAuthorizationCaseDatex
}
type RegulatedAuthorizationCaseDatex struct {
	DatePeriod   Period   `bson:",omitempty" json:"datePeriod,omitempty"`
	DateDateTime DateTime `bson:",omitempty" json:"dateDateTime,omitempty"`
}

func (out *RelatedPerson) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"RelatedPerson\"" {
		return fmt.Errorf("resourceType is not %s", "RelatedPerson")
	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["telecom"]) > 0 {
		if err := go1.Unmarshal(asMap["telecom"], &out.Telecom); err != nil {
			return err
		}

	}
	if len(asMap["birthDate"]) > 0 {
		if err := go1.Unmarshal(asMap["birthDate"], &out.BirthDate); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["relationship"]) > 0 {
		if err := go1.Unmarshal(asMap["relationship"], &out.Relationship); err != nil {
			return err
		}

	}
	if len(asMap["gender"]) > 0 {
		if err := go1.Unmarshal(asMap["gender"], &out.Gender); err != nil {
			return err
		}

	}
	if len(asMap["photo"]) > 0 {
		if err := go1.Unmarshal(asMap["photo"], &out.Photo); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["communication"]) > 0 {
		if err := go1.Unmarshal(asMap["communication"], &out.Communication); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["active"]) > 0 {
		if err := go1.Unmarshal(asMap["active"], &out.Active); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["patient"], &out.Patient); err != nil {
		return err
	}

	if len(asMap["address"]) > 0 {
		if err := go1.Unmarshal(asMap["address"], &out.Address); err != nil {
			return err
		}

	}
	return nil
}

type RelatedPerson struct {
	ImplicitRules     *string         `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Name              []*HumanName    `bson:",omitempty" json:"name,omitempty"`              // A name associated with the person.
	Telecom           []*ContactPoint `bson:",omitempty" json:"telecom,omitempty"`           // A contact detail for the person, e.g. a telephone number or an email address.
	BirthDate         *Date           `bson:",omitempty" json:"birthDate,omitempty"`         // The date on which the related person was born.
	Text              *Narrative      `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained         []*Resource     `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension         []*Extension    `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension    `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Relationship  []*CodeableConcept          `bson:",omitempty" json:"relationship,omitempty"` // The nature of the relationship between the related person and the patient.
	Gender        *string                     `bson:",omitempty" json:"gender,omitempty"`       // Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
	Photo         []*Attachment               `bson:",omitempty" json:"photo,omitempty"`        // Image of the person.
	Id            *primitive.ObjectID         `bson:"_id,omitempty" json:"id,omitempty"`        // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta          *Meta                       `bson:",omitempty" json:"meta,omitempty"`         // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language      *string                     `bson:",omitempty" json:"language,omitempty"`     // The base language in which the resource is written.
	Period        *Period                     `bson:",omitempty" json:"period,omitempty"`       // The period of time during which this relationship is or was active. If there are no dates defined, then the interval is unknown.
	Communication *RelatedPersonCommunication `binding:"omitempty" bson:",omitempty"`
	Identifier    []*Identifier               `bson:",omitempty" json:"identifier,omitempty"`                 // Identifier for a person within a particular scope.
	Active        *bool                       `bson:",omitempty" json:"active,omitempty"`                     // Whether this related person record is in active use.
	Patient       *Reference                  `binding:"required" bson:",omitempty" json:"patient,omitempty"` // The patient this person is related to.
	Address       []*Address                  `bson:",omitempty" json:"address,omitempty"`                    // Address where the related person can be contacted or visited.
	ResourceType  string                      `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *RelatedPersonCommunication) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
		return err
	}

	if len(asMap["preferred"]) > 0 {
		if err := go1.Unmarshal(asMap["preferred"], &out.Preferred); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type RelatedPersonCommunication struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Language  *CodeableConcept `binding:"required" bson:",omitempty" json:"language,omitempty"` // The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-AU" for Australian English.
	Preferred *bool            `bson:",omitempty" json:"preferred,omitempty"`                   // Indicates whether or not the related person prefers this language (over other languages he or she masters up a certain level).
	Id        *string          `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension     `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *RequestOrchestration) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"RequestOrchestration\"" {
		return fmt.Errorf("resourceType is not %s", "RequestOrchestration")
	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["intent"], &out.Intent); err != nil {
		return err
	}

	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["replaces"]) > 0 {
		if err := go1.Unmarshal(asMap["replaces"], &out.Replaces); err != nil {
			return err
		}

	}
	if len(asMap["groupIdentifier"]) > 0 {
		if err := go1.Unmarshal(asMap["groupIdentifier"], &out.GroupIdentifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["authoredOn"]) > 0 {
		if err := go1.Unmarshal(asMap["authoredOn"], &out.AuthoredOn); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	if len(asMap["goal"]) > 0 {
		if err := go1.Unmarshal(asMap["goal"], &out.Goal); err != nil {
			return err
		}

	}
	if len(asMap["action"]) > 0 {
		if err := go1.Unmarshal(asMap["action"], &out.Action); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesCanonical"], &out.InstantiatesCanonical); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesUri"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesUri"], &out.InstantiatesUri); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	return nil
}

type RequestOrchestration struct {
	ImplicitRules     *string      `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language          *string      `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	BasedOn               []*Reference                `bson:",omitempty" json:"basedOn,omitempty"`                   // A plan, proposal or order that is fulfilled in whole or in part by this request.
	Intent                *string                     `binding:"required" bson:",omitempty" json:"intent,omitempty"` // Indicates the level of authority/intentionality associated with the request and where the request fits into the workflow chain.
	Author                *Reference                  `bson:",omitempty" json:"author,omitempty"`                    // Provides a reference to the author of the request orchestration.
	Reason                []*CodeableReference        `bson:",omitempty" json:"reason,omitempty"`                    // Describes the reason for the request orchestration in coded or textual form.
	Meta                  *Meta                       `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Note                  []*Annotation               `bson:",omitempty" json:"note,omitempty"`                      // Provides a mechanism to communicate additional information about the response.
	Identifier            []*Identifier               `bson:",omitempty" json:"identifier,omitempty"`                // Allows a service to provide a unique, business identifier for the request.
	Replaces              []*Reference                `bson:",omitempty" json:"replaces,omitempty"`                  // Completed or terminated request(s) whose function is taken by this new request.
	GroupIdentifier       *Identifier                 `bson:",omitempty" json:"groupIdentifier,omitempty"`           // A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.
	Status                *string                     `binding:"required" bson:",omitempty" json:"status,omitempty"` // The current state of the request. For request orchestrations, the status reflects the status of all the requests in the orchestration.
	Code                  *CodeableConcept            `bson:",omitempty" json:"code,omitempty"`                      // A code that identifies what the overall request orchestration is.
	AuthoredOn            *DateTime                   `bson:",omitempty" json:"authoredOn,omitempty"`                // Indicates when the request orchestration was created.
	Id                    *primitive.ObjectID         `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Priority              *string                     `bson:",omitempty" json:"priority,omitempty"`                  // Indicates how quickly the request should be addressed with respect to other requests.
	Goal                  []*Reference                `bson:",omitempty" json:"goal,omitempty"`                      // Goals that are intended to be achieved by following the requests in this RequestOrchestration.
	Action                *RequestOrchestrationAction `binding:"omitempty" bson:",omitempty"`
	Contained             []*Resource                 `bson:",omitempty" json:"contained,omitempty"`             // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension             []*Extension                `bson:",omitempty" json:"extension,omitempty"`             // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	InstantiatesCanonical []*string                   `bson:",omitempty" json:"instantiatesCanonical,omitempty"` // A canonical URL referencing a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
	InstantiatesUri       []*string                   `bson:",omitempty" json:"instantiatesUri,omitempty"`       // A URL referencing an externally defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
	Subject               *Reference                  `bson:",omitempty" json:"subject,omitempty"`               // The subject for which the request orchestration was created.
	Encounter             *Reference                  `bson:",omitempty" json:"encounter,omitempty"`             // Describes the context of the request orchestration, if any.
	Text                  *Narrative                  `bson:",omitempty" json:"text,omitempty"`                  // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ResourceType          string                      `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *RequestOrchestrationAction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["goal"]) > 0 {
		if err := go1.Unmarshal(asMap["goal"], &out.Goal); err != nil {
			return err
		}

	}
	if len(asMap["condition"]) > 0 {
		if err := go1.Unmarshal(asMap["condition"], &out.Condition); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["transform"]) > 0 {
		if err := go1.Unmarshal(asMap["transform"], &out.Transform); err != nil {
			return err
		}

	}
	if len(asMap["selectionBehavior"]) > 0 {
		if err := go1.Unmarshal(asMap["selectionBehavior"], &out.SelectionBehavior); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["requiredBehavior"]) > 0 {
		if err := go1.Unmarshal(asMap["requiredBehavior"], &out.RequiredBehavior); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["linkId"]) > 0 {
		if err := go1.Unmarshal(asMap["linkId"], &out.LinkId); err != nil {
			return err
		}

	}
	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	if len(asMap["documentation"]) > 0 {
		if err := go1.Unmarshal(asMap["documentation"], &out.Documentation); err != nil {
			return err
		}

	}
	if len(asMap["input"]) > 0 {
		if err := go1.Unmarshal(asMap["input"], &out.Input); err != nil {
			return err
		}

	}
	if len(asMap["precheckBehavior"]) > 0 {
		if err := go1.Unmarshal(asMap["precheckBehavior"], &out.PrecheckBehavior); err != nil {
			return err
		}

	}
	if len(asMap["cardinalityBehavior"]) > 0 {
		if err := go1.Unmarshal(asMap["cardinalityBehavior"], &out.CardinalityBehavior); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["definitionCanonical"], &out.DefinitionCanonical); err == nil {
	} else if err := go1.Unmarshal(asMap["definitionUri"], &out.DefinitionUri); err == nil {
	} else {

	}
	if len(asMap["relatedAction"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedAction"], &out.RelatedAction); err != nil {
			return err
		}

	}
	if len(asMap["participant"]) > 0 {
		if err := go1.Unmarshal(asMap["participant"], &out.Participant); err != nil {
			return err
		}

	}
	if len(asMap["dynamicValue"]) > 0 {
		if err := go1.Unmarshal(asMap["dynamicValue"], &out.DynamicValue); err != nil {
			return err
		}

	}
	if len(asMap["prefix"]) > 0 {
		if err := go1.Unmarshal(asMap["prefix"], &out.Prefix); err != nil {
			return err
		}

	}
	if len(asMap["textEquivalent"]) > 0 {
		if err := go1.Unmarshal(asMap["textEquivalent"], &out.TextEquivalent); err != nil {
			return err
		}

	}
	if len(asMap["output"]) > 0 {
		if err := go1.Unmarshal(asMap["output"], &out.Output); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["timingDateTime"], &out.TimingDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["timingAge"], &out.TimingAge); err == nil {
	} else if err := go1.Unmarshal(asMap["timingPeriod"], &out.TimingPeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["timingDuration"], &out.TimingDuration); err == nil {
	} else if err := go1.Unmarshal(asMap["timingRange"], &out.TimingRange); err == nil {
	} else if err := go1.Unmarshal(asMap["timingTiming"], &out.TimingTiming); err == nil {
	} else {

	}
	if len(asMap["groupingBehavior"]) > 0 {
		if err := go1.Unmarshal(asMap["groupingBehavior"], &out.GroupingBehavior); err != nil {
			return err
		}

	}
	if len(asMap["resource"]) > 0 {
		if err := go1.Unmarshal(asMap["resource"], &out.Resource); err != nil {
			return err
		}

	}
	if len(asMap["action"]) > 0 {
		if err := go1.Unmarshal(asMap["action"], &out.Action); err != nil {
			return err
		}

	}
	return nil
}

type RequestOrchestrationAction struct {
	Title             *string                              `bson:",omitempty" json:"title,omitempty"`       // The title of the action displayed to a user.
	Description       *string                              `bson:",omitempty" json:"description,omitempty"` // A short description of the action used to provide a summary to display to the user.
	Goal              []*Reference                         `bson:",omitempty" json:"goal,omitempty"`        // Goals that are intended to be achieved by following the requests in this action.
	Condition         *RequestOrchestrationActionCondition `binding:"omitempty" bson:",omitempty"`
	Location          *CodeableReference                   `bson:",omitempty" json:"location,omitempty"`          // Identifies the facility where the action will occur; e.g. home, hospital, specific clinic, etc.
	Transform         *string                              `bson:",omitempty" json:"transform,omitempty"`         // A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
	SelectionBehavior *string                              `bson:",omitempty" json:"selectionBehavior,omitempty"` // Defines the selection behavior for the action and its children.
	Id                *string                              `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Code              []*CodeableConcept                   `bson:",omitempty" json:"code,omitempty"`              // A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a section of a documentation template.
	Type              *CodeableConcept                     `bson:",omitempty" json:"type,omitempty"`              // The type of action to perform (create, update, remove).
	RequiredBehavior  *string                              `bson:",omitempty" json:"requiredBehavior,omitempty"`  // Defines expectations around whether an action is required.
	Extension         []*Extension                         `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	LinkId              *string                          `bson:",omitempty" json:"linkId,omitempty"`        // The linkId of the action from the PlanDefinition that corresponds to this action in the RequestOrchestration resource.
	Priority            *string                          `bson:",omitempty" json:"priority,omitempty"`      // Indicates how quickly the action should be addressed with respect to other actions.
	Documentation       []*RelatedArtifact               `bson:",omitempty" json:"documentation,omitempty"` // Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
	Input               *RequestOrchestrationActionInput `binding:"omitempty" bson:",omitempty"`
	PrecheckBehavior    *string                          `bson:",omitempty" json:"precheckBehavior,omitempty"`    // Defines whether the action should usually be preselected.
	CardinalityBehavior *string                          `bson:",omitempty" json:"cardinalityBehavior,omitempty"` // Defines whether the action can be selected multiple times.
	RequestOrchestrationActionDefinitionx
	RelatedAction  *RequestOrchestrationActionRelatedAction `binding:"omitempty" bson:",omitempty"`
	Participant    *RequestOrchestrationActionParticipant   `binding:"omitempty" bson:",omitempty"`
	DynamicValue   *RequestOrchestrationActionDynamicValue  `binding:"omitempty" bson:",omitempty"`
	Prefix         *string                                  `bson:",omitempty" json:"prefix,omitempty"`         // A user-visible prefix for the action. For example a section or item numbering such as 1. or A.
	TextEquivalent *string                                  `bson:",omitempty" json:"textEquivalent,omitempty"` // A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.
	Output         *RequestOrchestrationActionOutput        `binding:"omitempty" bson:",omitempty"`
	RequestOrchestrationActionTimingx
	GroupingBehavior *string    `bson:",omitempty" json:"groupingBehavior,omitempty"` // Defines the grouping behavior for the action and its children.
	Resource         *Reference `bson:",omitempty" json:"resource,omitempty"`         // The resource that is the target of the action (e.g. CommunicationRequest).
	Action           interface{}
}

func (out *RequestOrchestrationActionCondition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["kind"], &out.Kind); err != nil {
		return err
	}

	if len(asMap["expression"]) > 0 {
		if err := go1.Unmarshal(asMap["expression"], &out.Expression); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type RequestOrchestrationActionCondition struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Kind       *string      `binding:"required" bson:",omitempty" json:"kind,omitempty"` // The kind of condition.
	Expression *Expression  `bson:",omitempty" json:"expression,omitempty"`              // An expression that returns true or false, indicating whether or not the condition is satisfied.
	Id         *string      `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension  []*Extension `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *RequestOrchestrationActionInput) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["requirement"]) > 0 {
		if err := go1.Unmarshal(asMap["requirement"], &out.Requirement); err != nil {
			return err
		}

	}
	if len(asMap["relatedData"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedData"], &out.RelatedData); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type RequestOrchestrationActionInput struct {
	Title             *string              `bson:",omitempty" json:"title,omitempty"`             // A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers.
	Requirement       *DataRequirement     `bson:",omitempty" json:"requirement,omitempty"`       // Defines the data that is to be provided as input to the action.
	RelatedData       **primitive.ObjectID `bson:",omitempty" json:"relatedData,omitempty"`       // Points to an existing input or output element that provides data to this input.
	Id                *string              `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension         `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type RequestOrchestrationActionDefinitionx struct {
	DefinitionCanonical string `bson:",omitempty" json:"definitionCanonical,omitempty"`
	DefinitionUri       string `bson:",omitempty" json:"definitionUri,omitempty"`
}

func (out *RequestOrchestrationActionRelatedAction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["targetId"], &out.TargetId); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["relationship"], &out.Relationship); err != nil {
		return err
	}

	if len(asMap["endRelationship"]) > 0 {
		if err := go1.Unmarshal(asMap["endRelationship"], &out.EndRelationship); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["offsetDuration"], &out.OffsetDuration); err == nil {
	} else if err := go1.Unmarshal(asMap["offsetRange"], &out.OffsetRange); err == nil {
	} else {

	}
	return nil
}

type RequestOrchestrationActionRelatedAction struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	TargetId        **primitive.ObjectID `binding:"required" bson:",omitempty" json:"targetId,omitempty"`     // The element id of the target related action.
	Relationship    *string              `binding:"required" bson:",omitempty" json:"relationship,omitempty"` // The relationship of this action to the related action.
	EndRelationship *string              `bson:",omitempty" json:"endRelationship,omitempty"`                 // The relationship of the end of this action to the related action.
	RequestOrchestrationActionRelatedActionOffsetx
}
type RequestOrchestrationActionRelatedActionOffsetx struct {
	OffsetDuration Duration `bson:",omitempty" json:"offsetDuration,omitempty"`
	OffsetRange    Range    `bson:",omitempty" json:"offsetRange,omitempty"`
}

func (out *RequestOrchestrationActionParticipant) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["actorCanonical"], &out.ActorCanonical); err == nil {
	} else if err := go1.Unmarshal(asMap["actorReference"], &out.ActorReference); err == nil {
	} else {

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["typeReference"]) > 0 {
		if err := go1.Unmarshal(asMap["typeReference"], &out.TypeReference); err != nil {
			return err
		}

	}
	if len(asMap["role"]) > 0 {
		if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
			return err
		}

	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["typeCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["typeCanonical"], &out.TypeCanonical); err != nil {
			return err
		}

	}
	return nil
}

type RequestOrchestrationActionParticipant struct {
	RequestOrchestrationActionParticipantActorx
	Type              *string          `bson:",omitempty" json:"type,omitempty"`              // The type of participant in the action.
	TypeReference     *Reference       `bson:",omitempty" json:"typeReference,omitempty"`     // The type of participant in the action.
	Role              *CodeableConcept `bson:",omitempty" json:"role,omitempty"`              // The role the participant should play in performing the described action.
	Function          *CodeableConcept `bson:",omitempty" json:"function,omitempty"`          // Indicates how the actor will be involved in the action - author, reviewer, witness, etc.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	TypeCanonical *string `bson:",omitempty" json:"typeCanonical,omitempty"` // The type of participant in the action.
}
type RequestOrchestrationActionParticipantActorx struct {
	ActorCanonical string    `bson:",omitempty" json:"actorCanonical,omitempty"`
	ActorReference Reference `bson:",omitempty" json:"actorReference,omitempty"`
}

func (out *RequestOrchestrationActionDynamicValue) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["path"]) > 0 {
		if err := go1.Unmarshal(asMap["path"], &out.Path); err != nil {
			return err
		}

	}
	if len(asMap["expression"]) > 0 {
		if err := go1.Unmarshal(asMap["expression"], &out.Expression); err != nil {
			return err
		}

	}
	return nil
}

type RequestOrchestrationActionDynamicValue struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Path       *string     `bson:",omitempty" json:"path,omitempty"`       // The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolvable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
	Expression *Expression `bson:",omitempty" json:"expression,omitempty"` // An expression specifying the value of the customized element.
}

func (out *RequestOrchestrationActionOutput) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["requirement"]) > 0 {
		if err := go1.Unmarshal(asMap["requirement"], &out.Requirement); err != nil {
			return err
		}

	}
	if len(asMap["relatedData"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedData"], &out.RelatedData); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type RequestOrchestrationActionOutput struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Title       *string          `bson:",omitempty" json:"title,omitempty"`       // A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers.
	Requirement *DataRequirement `bson:",omitempty" json:"requirement,omitempty"` // Defines the data that results as output from the action.
	RelatedData *string          `bson:",omitempty" json:"relatedData,omitempty"` // Points to an existing input or output element that is results as output from the action.
	Id          *string          `bson:"_id,omitempty" json:"id,omitempty"`       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension   []*Extension     `bson:",omitempty" json:"extension,omitempty"`   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}
type RequestOrchestrationActionTimingx struct {
	TimingDateTime DateTime `bson:",omitempty" json:"timingDateTime,omitempty"`
	TimingAge      Age      `bson:",omitempty" json:"timingAge,omitempty"`
	TimingPeriod   Period   `bson:",omitempty" json:"timingPeriod,omitempty"`
	TimingDuration Duration `bson:",omitempty" json:"timingDuration,omitempty"`
	TimingRange    Range    `bson:",omitempty" json:"timingRange,omitempty"`
	TimingTiming   Timing   `bson:",omitempty" json:"timingTiming,omitempty"`
}

func (out *Requirements) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Requirements\"" {
		return fmt.Errorf("resourceType is not %s", "Requirements")
	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["statement"]) > 0 {
		if err := go1.Unmarshal(asMap["statement"], &out.Statement); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["reference"]) > 0 {
		if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["derivedFrom"]) > 0 {
		if err := go1.Unmarshal(asMap["derivedFrom"], &out.DerivedFrom); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["actor"]) > 0 {
		if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	return nil
}

type Requirements struct {
	Text              *Narrative             `bson:",omitempty" json:"text,omitempty"`        // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Publisher         *string                `bson:",omitempty" json:"publisher,omitempty"`   // The name of the organization or individual responsible for the release and ongoing maintenance of the Requirements.
	Description       *string                `bson:",omitempty" json:"description,omitempty"` // A free text natural language description of the requirements.
	Statement         *RequirementsStatement `binding:"omitempty" bson:",omitempty"`
	Meta              *Meta                  `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language          *string                `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Identifier        []*Identifier          `bson:",omitempty" json:"identifier,omitempty"`        // A formal identifier that is used to identify this Requirements when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Version           *string                `bson:",omitempty" json:"version,omitempty"`           // The identifier that is used to identify this version of the Requirements when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the Requirements author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Title             *string                `bson:",omitempty" json:"title,omitempty"`             // A short, descriptive, user-friendly title for the Requirements.
	Reference         []*url.URL             `bson:",omitempty" json:"reference,omitempty"`         // A reference to another artifact that created this set of requirements. This could be a Profile, etc., or external regulation, or business requirements expressed elsewhere.
	ImplicitRules     *string                `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Experimental      *bool                  `bson:",omitempty" json:"experimental,omitempty"`      // A Boolean value to indicate that this Requirements is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	UseContext        []*UsageContext        `bson:",omitempty" json:"useContext,omitempty"`        // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate Requirements instances.
	CopyrightLabel    *string                `bson:",omitempty" json:"copyrightLabel,omitempty"`    // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	DerivedFrom       []*string              `bson:",omitempty" json:"derivedFrom,omitempty"`       // Another set of Requirements that this set of Requirements builds on and updates.
	Id                *primitive.ObjectID    `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Date              *DateTime              `bson:",omitempty" json:"date,omitempty"`              // The date  (and optionally time) when the Requirements was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the Requirements changes.
	Contact           []*ContactDetail       `bson:",omitempty" json:"contact,omitempty"`           // Contact details to assist a user in finding and communicating with the publisher.
	Copyright         *string                `bson:",omitempty" json:"copyright,omitempty"`         // A copyright statement relating to the Requirements and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the Requirements.
	Actor             []*string              `bson:",omitempty" json:"actor,omitempty"`             // An actor these requirements are in regard to.
	Contained         []*Resource            `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension []*Extension           `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Status    *string      `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this Requirements. Enables tracking the life-cycle of the content.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Url       *string      `bson:",omitempty" json:"url,omitempty"`                       // An absolute URI that is used to identify this Requirements when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this Requirements is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the Requirements is stored on different servers.
	RequirementsVersionAlgorithmx
	Jurisdiction []*CodeableConcept `bson:",omitempty" json:"jurisdiction,omitempty"` // A legal or geographic region in which the Requirements is intended to be used.
	Name         *string            `bson:",omitempty" json:"name,omitempty"`         // A natural language name identifying the Requirements. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Purpose      *string            `bson:",omitempty" json:"purpose,omitempty"`      // Explanation of why this Requirements is needed and why it has been designed as it has.
	ResourceType string             `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *RequirementsStatement) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["conformance"]) > 0 {
		if err := go1.Unmarshal(asMap["conformance"], &out.Conformance); err != nil {
			return err
		}

	}
	if len(asMap["parent"]) > 0 {
		if err := go1.Unmarshal(asMap["parent"], &out.Parent); err != nil {
			return err
		}

	}
	if len(asMap["source"]) > 0 {
		if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
			return err
		}

	}
	if len(asMap["conditionality"]) > 0 {
		if err := go1.Unmarshal(asMap["conditionality"], &out.Conditionality); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["requirement"], &out.Requirement); err != nil {
		return err
	}

	if len(asMap["derivedFrom"]) > 0 {
		if err := go1.Unmarshal(asMap["derivedFrom"], &out.DerivedFrom); err != nil {
			return err
		}

	}
	if len(asMap["satisfiedBy"]) > 0 {
		if err := go1.Unmarshal(asMap["satisfiedBy"], &out.SatisfiedBy); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["key"], &out.Key); err != nil {
		return err
	}

	if len(asMap["label"]) > 0 {
		if err := go1.Unmarshal(asMap["label"], &out.Label); err != nil {
			return err
		}

	}
	if len(asMap["reference"]) > 0 {
		if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
			return err
		}

	}
	return nil
}

type RequirementsStatement struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Conformance    []*string            `bson:",omitempty" json:"conformance,omitempty"`                    // A short human usable label for this statement.
	Parent         *string              `bson:",omitempty" json:"parent,omitempty"`                         // A larger requirement that this requirement helps to refine and enable.
	Source         []*Reference         `bson:",omitempty" json:"source,omitempty"`                         // Who asked for this statement to be a requirement. By default, it's assumed that the publisher knows who it is if it matters.
	Conditionality *bool                `bson:",omitempty" json:"conditionality,omitempty"`                 // This boolean flag is set to true of the text of the requirement is conditional on something e.g. it includes lanauage like 'if x then y'. This conditionality flag is introduced for purposes of filtering and colour highlighting etc.
	Requirement    *string              `binding:"required" bson:",omitempty" json:"requirement,omitempty"` // The actual requirement for human consumption.
	DerivedFrom    *string              `bson:",omitempty" json:"derivedFrom,omitempty"`                    // Another statement on one of the requirements that this requirement clarifies or restricts.
	SatisfiedBy    []*url.URL           `bson:",omitempty" json:"satisfiedBy,omitempty"`                    // A reference to another artifact that satisfies this requirement. This could be a Profile, extension, or an element in one of those, or a CapabilityStatement, OperationDefinition, SearchParameter, CodeSystem(/code), ValueSet, Libary etc.
	Id             *string              `bson:"_id,omitempty" json:"id,omitempty"`                          // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension      []*Extension         `bson:",omitempty" json:"extension,omitempty"`                      // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Key            **primitive.ObjectID `binding:"required" bson:",omitempty" json:"key,omitempty"`         // Key that identifies this statement (unique within this resource).
	Label          *string              `bson:",omitempty" json:"label,omitempty"`                          // A short human usable label for this statement.
	Reference      []*url.URL           `bson:",omitempty" json:"reference,omitempty"`                      // A reference to another artifact that created this requirement. This could be a Profile, etc., or external regulation, or business requirements expressed elsewhere.
}
type RequirementsVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *ResearchStudy) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ResearchStudy\"" {
		return fmt.Errorf("resourceType is not %s", "ResearchStudy")
	}
	if len(asMap["descriptionSummary"]) > 0 {
		if err := go1.Unmarshal(asMap["descriptionSummary"], &out.DescriptionSummary); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["protocol"]) > 0 {
		if err := go1.Unmarshal(asMap["protocol"], &out.Protocol); err != nil {
			return err
		}

	}
	if len(asMap["condition"]) > 0 {
		if err := go1.Unmarshal(asMap["condition"], &out.Condition); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if len(asMap["objective"]) > 0 {
		if err := go1.Unmarshal(asMap["objective"], &out.Objective); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["region"]) > 0 {
		if err := go1.Unmarshal(asMap["region"], &out.Region); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["recruitment"]) > 0 {
		if err := go1.Unmarshal(asMap["recruitment"], &out.Recruitment); err != nil {
			return err
		}

	}
	if len(asMap["comparisonGroup"]) > 0 {
		if err := go1.Unmarshal(asMap["comparisonGroup"], &out.ComparisonGroup); err != nil {
			return err
		}

	}
	if len(asMap["result"]) > 0 {
		if err := go1.Unmarshal(asMap["result"], &out.Result); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["keyword"]) > 0 {
		if err := go1.Unmarshal(asMap["keyword"], &out.Keyword); err != nil {
			return err
		}

	}
	if len(asMap["classifier"]) > 0 {
		if err := go1.Unmarshal(asMap["classifier"], &out.Classifier); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["site"]) > 0 {
		if err := go1.Unmarshal(asMap["site"], &out.Site); err != nil {
			return err
		}

	}
	if len(asMap["progressStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["progressStatus"], &out.ProgressStatus); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["label"]) > 0 {
		if err := go1.Unmarshal(asMap["label"], &out.Label); err != nil {
			return err
		}

	}
	if len(asMap["relatedArtifact"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedArtifact"], &out.RelatedArtifact); err != nil {
			return err
		}

	}
	if len(asMap["primaryPurposeType"]) > 0 {
		if err := go1.Unmarshal(asMap["primaryPurposeType"], &out.PrimaryPurposeType); err != nil {
			return err
		}

	}
	if len(asMap["studyDesign"]) > 0 {
		if err := go1.Unmarshal(asMap["studyDesign"], &out.StudyDesign); err != nil {
			return err
		}

	}
	if len(asMap["focus"]) > 0 {
		if err := go1.Unmarshal(asMap["focus"], &out.Focus); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["associatedParty"]) > 0 {
		if err := go1.Unmarshal(asMap["associatedParty"], &out.AssociatedParty); err != nil {
			return err
		}

	}
	if len(asMap["outcomeMeasure"]) > 0 {
		if err := go1.Unmarshal(asMap["outcomeMeasure"], &out.OutcomeMeasure); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["phase"]) > 0 {
		if err := go1.Unmarshal(asMap["phase"], &out.Phase); err != nil {
			return err
		}

	}
	if len(asMap["whyStopped"]) > 0 {
		if err := go1.Unmarshal(asMap["whyStopped"], &out.WhyStopped); err != nil {
			return err
		}

	}
	return nil
}

type ResearchStudy struct {
	DescriptionSummary *string            `bson:",omitempty" json:"descriptionSummary,omitempty"` // A brief text for explaining the study.
	Name               *string            `bson:",omitempty" json:"name,omitempty"`               // Name for this study (computer friendly).
	Title              *string            `bson:",omitempty" json:"title,omitempty"`              // The human readable name of the research study.
	Protocol           []*Reference       `bson:",omitempty" json:"protocol,omitempty"`           // The set of steps expected to be performed as part of the execution of the study.
	Condition          []*CodeableConcept `bson:",omitempty" json:"condition,omitempty"`          // The condition that is the focus of the study.  For example, In a study to examine risk factors for Lupus, might have as an inclusion criterion "healthy volunteer", but the target condition code would be a Lupus SNOMED code.
	Description        *string            `bson:",omitempty" json:"description,omitempty"`        // A detailed and human-readable narrative of the study. E.g., study abstract.
	Language           *string            `bson:",omitempty" json:"language,omitempty"`           // The base language in which the resource is written.
	ModifierExtension  []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"`  /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	PartOf             []*Reference                  `bson:",omitempty" json:"partOf,omitempty"` // A larger research study of which this particular study is a component or step.
	Objective          *ResearchStudyObjective       `binding:"omitempty" bson:",omitempty"`
	ImplicitRules      *string                       `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Region             []*CodeableConcept            `bson:",omitempty" json:"region,omitempty"`        // A country, state or other area where the study is taking place rather than its precise geographic location or address.
	Note               []*Annotation                 `bson:",omitempty" json:"note,omitempty"`          // Comments made about the study by the performer, subject or other participants.
	Recruitment        *ResearchStudyRecruitment     `binding:"omitempty" bson:",omitempty"`
	ComparisonGroup    *ResearchStudyComparisonGroup `binding:"omitempty" bson:",omitempty"`
	Result             []*Reference                  `bson:",omitempty" json:"result,omitempty"`     // Link to one or more sets of results generated by the study.  Could also link to a research registry holding the results such as ClinicalTrials.gov.
	Id                 *primitive.ObjectID           `bson:"_id,omitempty" json:"id,omitempty"`      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Text               *Narrative                    `bson:",omitempty" json:"text,omitempty"`       // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Keyword            []*CodeableConcept            `bson:",omitempty" json:"keyword,omitempty"`    // Key terms to aid in searching for or filtering the study.
	Classifier         []*CodeableConcept            `bson:",omitempty" json:"classifier,omitempty"` // Additional grouping mechanism or categorization of a research study. Example: FDA regulated device, FDA regulated drug, MPG Paragraph 23b (a German legal requirement), IRB-exempt, etc. Implementation Note: do not use the classifier element to support existing semantics that are already supported thru explicit elements in the resource.
	Date               *DateTime                     `bson:",omitempty" json:"date,omitempty"`       // The date (and optionally time) when the ResearchStudy Resource was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the ResearchStudy Resource changes.
	Site               []*Reference                  `bson:",omitempty" json:"site,omitempty"`       // A facility in which study activities are conducted.
	ProgressStatus     *ResearchStudyProgressStatus  `binding:"omitempty" bson:",omitempty"`
	Identifier         []*Identifier                 `bson:",omitempty" json:"identifier,omitempty"` // Identifiers assigned to this research study by the sponsor or other systems.
	Version            *string                       `bson:",omitempty" json:"version,omitempty"`    // The business version for the study record.
	Label              *ResearchStudyLabel           `binding:"omitempty" bson:",omitempty"`
	RelatedArtifact    []*RelatedArtifact            `bson:",omitempty" json:"relatedArtifact,omitempty"`           // Citations, references, URLs and other related documents.  When using relatedArtifact to share URLs, the relatedArtifact.type will often be set to one of "documentation" or "supported-with" and the URL value will often be in relatedArtifact.document.url but another possible location is relatedArtifact.resource when it is a canonical URL.
	PrimaryPurposeType *CodeableConcept              `bson:",omitempty" json:"primaryPurposeType,omitempty"`        // The type of study based upon the intent of the study activities. A classification of the intent of the study.
	StudyDesign        []*CodeableConcept            `bson:",omitempty" json:"studyDesign,omitempty"`               // Codes categorizing the type of study such as investigational vs. observational, type of blinding, type of randomization, safety vs. efficacy, etc.
	Focus              []*CodeableReference          `bson:",omitempty" json:"focus,omitempty"`                     // The medication(s), food(s), therapy(ies), device(s) or other concerns or interventions that the study is seeking to gain more information about.
	Period             *Period                       `bson:",omitempty" json:"period,omitempty"`                    // Identifies the start date and the expected (or actual, depending on status) end date for the study.
	Contained          []*Resource                   `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension          []*Extension                  `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Url                *string                       `bson:",omitempty" json:"url,omitempty"`                       // Canonical identifier for this study resource, represented as a globally unique URI.
	Status             *string                       `binding:"required" bson:",omitempty" json:"status,omitempty"` // The publication state of the resource (not of the study).
	AssociatedParty    *ResearchStudyAssociatedParty `binding:"omitempty" bson:",omitempty"`
	OutcomeMeasure     *ResearchStudyOutcomeMeasure  `binding:"omitempty" bson:",omitempty"`
	Meta               *Meta                         `bson:",omitempty" json:"meta,omitempty"`       // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Phase              *CodeableConcept              `bson:",omitempty" json:"phase,omitempty"`      // The stage in the progression of a therapy from initial experimental use in humans in clinical trials to post-market evaluation.
	WhyStopped         *CodeableConcept              `bson:",omitempty" json:"whyStopped,omitempty"` // A description and/or code explaining the premature termination of the study.
	ResourceType       string                        `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ResearchStudyObjective) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	return nil
}

type ResearchStudyObjective struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name        *string          `bson:",omitempty" json:"name,omitempty"`        // Unique, human-readable label for this objective of the study.
	Type        *CodeableConcept `bson:",omitempty" json:"type,omitempty"`        // The kind of study objective.
	Description *string          `bson:",omitempty" json:"description,omitempty"` // Free text description of the objective of the study.  This is what the study is trying to achieve rather than how it is going to achieve it (see ResearchStudy.description).
}

func (out *ResearchStudyRecruitment) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["targetNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["targetNumber"], &out.TargetNumber); err != nil {
			return err
		}

	}
	if len(asMap["actualNumber"]) > 0 {
		if err := go1.Unmarshal(asMap["actualNumber"], &out.ActualNumber); err != nil {
			return err
		}

	}
	if len(asMap["eligibility"]) > 0 {
		if err := go1.Unmarshal(asMap["eligibility"], &out.Eligibility); err != nil {
			return err
		}

	}
	if len(asMap["actualGroup"]) > 0 {
		if err := go1.Unmarshal(asMap["actualGroup"], &out.ActualGroup); err != nil {
			return err
		}

	}
	return nil
}

type ResearchStudyRecruitment struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	TargetNumber *int       `bson:",omitempty" json:"targetNumber,omitempty"` // Estimated total number of participants to be enrolled.
	ActualNumber *int       `bson:",omitempty" json:"actualNumber,omitempty"` // Actual total number of participants enrolled in study.
	Eligibility  *Reference `bson:",omitempty" json:"eligibility,omitempty"`  // Inclusion and exclusion criteria.
	ActualGroup  *Reference `bson:",omitempty" json:"actualGroup,omitempty"`  // Group of participants who were enrolled in study.
}

func (out *ResearchStudyComparisonGroup) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["linkId"]) > 0 {
		if err := go1.Unmarshal(asMap["linkId"], &out.LinkId); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if len(asMap["intendedExposure"]) > 0 {
		if err := go1.Unmarshal(asMap["intendedExposure"], &out.IntendedExposure); err != nil {
			return err
		}

	}
	if len(asMap["observedGroup"]) > 0 {
		if err := go1.Unmarshal(asMap["observedGroup"], &out.ObservedGroup); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type ResearchStudyComparisonGroup struct {
	Type              *CodeableConcept `bson:",omitempty" json:"type,omitempty"`              // Categorization of study comparisonGroup, e.g. experimental, active comparator, placebo comparater.
	Description       *string          `bson:",omitempty" json:"description,omitempty"`       // A succinct description of the path through the study that would be followed by a subject adhering to this comparisonGroup.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Extension        []*Extension         `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	LinkId           **primitive.ObjectID `bson:",omitempty" json:"linkId,omitempty"`                  // Allows the comparisonGroup for the study and the comparisonGroup for the subject to be linked easily.
	Name             *string              `binding:"required" bson:",omitempty" json:"name,omitempty"` // Unique, human-readable label for this comparisonGroup of the study.
	IntendedExposure []*Reference         `bson:",omitempty" json:"intendedExposure,omitempty"`        // Interventions or exposures in this comparisonGroup or cohort.
	ObservedGroup    *Reference           `bson:",omitempty" json:"observedGroup,omitempty"`           // Group of participants who were enrolled in study comparisonGroup.
	Id               *string              `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *ResearchStudyProgressStatus) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["state"], &out.State); err != nil {
		return err
	}

	if len(asMap["actual"]) > 0 {
		if err := go1.Unmarshal(asMap["actual"], &out.Actual); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type ResearchStudyProgressStatus struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	State     *CodeableConcept `binding:"required" bson:",omitempty" json:"state,omitempty"` // Label for status or state (e.g. recruitment status).
	Actual    *bool            `bson:",omitempty" json:"actual,omitempty"`                   // An indication of whether or not the date is a known date when the state changed or will change. A value of true indicates a known date. A value of false indicates an estimated date.
	Period    *Period          `bson:",omitempty" json:"period,omitempty"`                   // Date range.
	Id        *string          `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension     `bson:",omitempty" json:"extension,omitempty"`                // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *ResearchStudyLabel) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["value"]) > 0 {
		if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
			return err
		}

	}
	return nil
}

type ResearchStudyLabel struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type  *CodeableConcept `bson:",omitempty" json:"type,omitempty"`  // Kind of name.
	Value *string          `bson:",omitempty" json:"value,omitempty"` // The name.
}

func (out *ResearchStudyAssociatedParty) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
		return err
	}

	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["classifier"]) > 0 {
		if err := go1.Unmarshal(asMap["classifier"], &out.Classifier); err != nil {
			return err
		}

	}
	if len(asMap["party"]) > 0 {
		if err := go1.Unmarshal(asMap["party"], &out.Party); err != nil {
			return err
		}

	}
	return nil
}

type ResearchStudyAssociatedParty struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name       *string            `bson:",omitempty" json:"name,omitempty"`                    // Name of associated party.
	Role       *CodeableConcept   `binding:"required" bson:",omitempty" json:"role,omitempty"` // Type of association.
	Period     []*Period          `bson:",omitempty" json:"period,omitempty"`                  // Identifies the start date and the end date of the associated party in the role.
	Classifier []*CodeableConcept `bson:",omitempty" json:"classifier,omitempty"`              // A categorization other than role for the associated party.
	Party      *Reference         `bson:",omitempty" json:"party,omitempty"`                   // Individual or organization associated with study (use practitionerRole to specify their organisation).
}

func (out *ResearchStudyOutcomeMeasure) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["reference"]) > 0 {
		if err := go1.Unmarshal(asMap["reference"], &out.Reference); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	return nil
}

type ResearchStudyOutcomeMeasure struct {
	Description       *string      `bson:",omitempty" json:"description,omitempty"`       // Description of the outcome.
	Reference         *Reference   `bson:",omitempty" json:"reference,omitempty"`         // Structured outcome definition.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name *string            `bson:",omitempty" json:"name,omitempty"` // Label for the outcome.
	Type []*CodeableConcept `bson:",omitempty" json:"type,omitempty"` // The parameter or characteristic being assessed as one of the values by which the study is assessed.
}

func (out *ResearchSubject) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ResearchSubject\"" {
		return fmt.Errorf("resourceType is not %s", "ResearchSubject")
	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["progress"]) > 0 {
		if err := go1.Unmarshal(asMap["progress"], &out.Progress); err != nil {
			return err
		}

	}
	if len(asMap["actualComparisonGroup"]) > 0 {
		if err := go1.Unmarshal(asMap["actualComparisonGroup"], &out.ActualComparisonGroup); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["consent"]) > 0 {
		if err := go1.Unmarshal(asMap["consent"], &out.Consent); err != nil {
			return err
		}

	}
	if len(asMap["assignedComparisonGroup"]) > 0 {
		if err := go1.Unmarshal(asMap["assignedComparisonGroup"], &out.AssignedComparisonGroup); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["study"], &out.Study); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	return nil
}

type ResearchSubject struct {
	ImplicitRules         *string                  `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text                  *Narrative               `bson:",omitempty" json:"text,omitempty"`          // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Progress              *ResearchSubjectProgress `binding:"omitempty" bson:",omitempty"`
	ActualComparisonGroup **primitive.ObjectID     `bson:",omitempty" json:"actualComparisonGroup,omitempty"` // The name of the arm in the study the subject actually followed as part of this study.
	Language              *string                  `bson:",omitempty" json:"language,omitempty"`              // The base language in which the resource is written.
	ModifierExtension     []*Extension             `bson:",omitempty" json:"modifierExtension,omitempty"`     /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Consent                 []*Reference         `bson:",omitempty" json:"consent,omitempty"`                    // A record of the patient's informed agreement to participate in the study.
	AssignedComparisonGroup **primitive.ObjectID `bson:",omitempty" json:"assignedComparisonGroup,omitempty"`    // The name of the arm in the study the subject is expected to follow as part of this study.
	Id                      *primitive.ObjectID  `bson:"_id,omitempty" json:"id,omitempty"`                      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta                    *Meta                `bson:",omitempty" json:"meta,omitempty"`                       // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Identifier              []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`                 // Identifiers assigned to this research subject for a study.
	Study                   *Reference           `binding:"required" bson:",omitempty" json:"study,omitempty"`   // Reference to the study the subject is participating in.
	Subject                 *Reference           `binding:"required" bson:",omitempty" json:"subject,omitempty"` // The record of the person, animal or other entity involved in the study.
	Contained               []*Resource          `bson:",omitempty" json:"contained,omitempty"`                  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension               []*Extension         `bson:",omitempty" json:"extension,omitempty"`                  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Status                  *string              `binding:"required" bson:",omitempty" json:"status,omitempty"`  // The publication state of the resource (not of the subject).
	Period                  *Period              `bson:",omitempty" json:"period,omitempty"`                     // The dates the subject began and ended their participation in the study.
	ResourceType            string               `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ResearchSubjectProgress) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["milestone"]) > 0 {
		if err := go1.Unmarshal(asMap["milestone"], &out.Milestone); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["subjectState"]) > 0 {
		if err := go1.Unmarshal(asMap["subjectState"], &out.SubjectState); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["startDate"]) > 0 {
		if err := go1.Unmarshal(asMap["startDate"], &out.StartDate); err != nil {
			return err
		}

	}
	if len(asMap["endDate"]) > 0 {
		if err := go1.Unmarshal(asMap["endDate"], &out.EndDate); err != nil {
			return err
		}

	}
	return nil
}

type ResearchSubjectProgress struct {
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Type              *CodeableConcept `bson:",omitempty" json:"type,omitempty"`              // Identifies the aspect of the subject's journey that the state refers to.
	Milestone         *CodeableConcept `bson:",omitempty" json:"milestone,omitempty"`         // The milestones the subject has passed through.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	SubjectState *CodeableConcept `bson:",omitempty" json:"subjectState,omitempty"` // The current state of the subject.
	Reason       *CodeableConcept `bson:",omitempty" json:"reason,omitempty"`       // The reason for the state change.  If coded it should follow the formal subject state model.
	StartDate    *DateTime        `bson:",omitempty" json:"startDate,omitempty"`    // The date when the new status started.
	EndDate      *DateTime        `bson:",omitempty" json:"endDate,omitempty"`      // The date when the state ended.
}

func (out *RiskAssessment) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"RiskAssessment\"" {
		return fmt.Errorf("resourceType is not %s", "RiskAssessment")
	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["mitigation"]) > 0 {
		if err := go1.Unmarshal(asMap["mitigation"], &out.Mitigation); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["parent"]) > 0 {
		if err := go1.Unmarshal(asMap["parent"], &out.Parent); err != nil {
			return err
		}

	}
	if len(asMap["method"]) > 0 {
		if err := go1.Unmarshal(asMap["method"], &out.Method); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["basis"]) > 0 {
		if err := go1.Unmarshal(asMap["basis"], &out.Basis); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["prediction"]) > 0 {
		if err := go1.Unmarshal(asMap["prediction"], &out.Prediction); err != nil {
			return err
		}

	}
	if len(asMap["condition"]) > 0 {
		if err := go1.Unmarshal(asMap["condition"], &out.Condition); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["occurrenceDateTime"], &out.OccurrenceDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrencePeriod"], &out.OccurrencePeriod); err == nil {
	} else {

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	return nil
}

type RiskAssessment struct {
	Performer         *Reference           `bson:",omitempty" json:"performer,omitempty"`                  // The provider, patient, related person, or software application that performed the assessment.
	Mitigation        *string              `bson:",omitempty" json:"mitigation,omitempty"`                 // A description of the steps that might be taken to reduce the identified risk(s).
	Note              []*Annotation        `bson:",omitempty" json:"note,omitempty"`                       // Additional comments about the risk assessment.
	Language          *string              `bson:",omitempty" json:"language,omitempty"`                   // The base language in which the resource is written.
	Subject           *Reference           `binding:"required" bson:",omitempty" json:"subject,omitempty"` // The patient or group the risk assessment applies to.
	Encounter         *Reference           `bson:",omitempty" json:"encounter,omitempty"`                  // The encounter where the assessment was performed.
	BasedOn           *Reference           `bson:",omitempty" json:"basedOn,omitempty"`                    // A reference to the request that is fulfilled by this risk assessment.
	Parent            *Reference           `bson:",omitempty" json:"parent,omitempty"`                     // A reference to a resource that this risk assessment is part of, such as a Procedure.
	Method            *CodeableConcept     `bson:",omitempty" json:"method,omitempty"`                     // The algorithm, process or mechanism used to evaluate the risk.
	Reason            []*CodeableReference `bson:",omitempty" json:"reason,omitempty"`                     // The reason the risk assessment was performed.
	Basis             []*Reference         `bson:",omitempty" json:"basis,omitempty"`                      // Indicates the source data considered as part of the assessment (for example, FamilyHistory, Observations, Procedures, Conditions, etc.).
	Id                *primitive.ObjectID  `bson:"_id,omitempty" json:"id,omitempty"`                      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Text              *Narrative           `bson:",omitempty" json:"text,omitempty"`                       // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"`          /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Prediction *RiskAssessmentPrediction `binding:"omitempty" bson:",omitempty"`
	Condition  *Reference                `bson:",omitempty" json:"condition,omitempty"`  // For assessments or prognosis specific to a particular condition, indicates the condition being assessed.
	Identifier []*Identifier             `bson:",omitempty" json:"identifier,omitempty"` // Business identifier assigned to the risk assessment.
	Code       *CodeableConcept          `bson:",omitempty" json:"code,omitempty"`       // The type of the risk assessment performed.
	RiskAssessmentOccurrencex
	Extension     []*Extension `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Status        *string      `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of the RiskAssessment, using the same statuses as an Observation.
	Meta          *Meta        `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules *string      `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained     []*Resource  `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ResourceType  string       `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *RiskAssessmentPrediction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["outcome"]) > 0 {
		if err := go1.Unmarshal(asMap["outcome"], &out.Outcome); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["probabilityDecimal"], &out.ProbabilityDecimal); err == nil {
	} else if err := go1.Unmarshal(asMap["probabilityRange"], &out.ProbabilityRange); err == nil {
	} else {

	}
	if len(asMap["relativeRisk"]) > 0 {
		if err := go1.Unmarshal(asMap["relativeRisk"], &out.RelativeRisk); err != nil {
			return err
		}

	}
	if len(asMap["rationale"]) > 0 {
		if err := go1.Unmarshal(asMap["rationale"], &out.Rationale); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["qualitativeRisk"]) > 0 {
		if err := go1.Unmarshal(asMap["qualitativeRisk"], &out.QualitativeRisk); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["whenPeriod"], &out.WhenPeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["whenRange"], &out.WhenRange); err == nil {
	} else {

	}
	return nil
}

type RiskAssessmentPrediction struct {
	Outcome *CodeableConcept `bson:",omitempty" json:"outcome,omitempty"` // One of the potential outcomes for the patient (e.g. remission, death,  a particular condition).
	RiskAssessmentPredictionProbabilityx
	RelativeRisk      *float64     `bson:",omitempty" json:"relativeRisk,omitempty"`      // Indicates the risk for this particular subject (with their specific characteristics) divided by the risk of the population in general.  (Numbers greater than 1 = higher risk than the population, numbers less than 1 = lower risk.).
	Rationale         *string      `bson:",omitempty" json:"rationale,omitempty"`         // Additional information explaining the basis for the prediction.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	QualitativeRisk *CodeableConcept `bson:",omitempty" json:"qualitativeRisk,omitempty"` // Indicates how likely the outcome is (in the specified timeframe), expressed as a qualitative value (e.g. low, medium, or high).
	RiskAssessmentPredictionWhenx
}
type RiskAssessmentPredictionProbabilityx struct {
	ProbabilityDecimal float64 `bson:",omitempty" json:"probabilityDecimal,omitempty"`
	ProbabilityRange   Range   `bson:",omitempty" json:"probabilityRange,omitempty"`
}
type RiskAssessmentPredictionWhenx struct {
	WhenPeriod Period `bson:",omitempty" json:"whenPeriod,omitempty"`
	WhenRange  Range  `bson:",omitempty" json:"whenRange,omitempty"`
}
type RiskAssessmentOccurrencex struct {
	OccurrenceDateTime DateTime `bson:",omitempty" json:"occurrenceDateTime,omitempty"`
	OccurrencePeriod   Period   `bson:",omitempty" json:"occurrencePeriod,omitempty"`
}

func (out *Schedule) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Schedule\"" {
		return fmt.Errorf("resourceType is not %s", "Schedule")
	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["serviceCategory"]) > 0 {
		if err := go1.Unmarshal(asMap["serviceCategory"], &out.ServiceCategory); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["specialty"]) > 0 {
		if err := go1.Unmarshal(asMap["specialty"], &out.Specialty); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
		return err
	}

	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["active"]) > 0 {
		if err := go1.Unmarshal(asMap["active"], &out.Active); err != nil {
			return err
		}

	}
	if len(asMap["serviceType"]) > 0 {
		if err := go1.Unmarshal(asMap["serviceType"], &out.ServiceType); err != nil {
			return err
		}

	}
	if len(asMap["planningHorizon"]) > 0 {
		if err := go1.Unmarshal(asMap["planningHorizon"], &out.PlanningHorizon); err != nil {
			return err
		}

	}
	if len(asMap["comment"]) > 0 {
		if err := go1.Unmarshal(asMap["comment"], &out.Comment); err != nil {
			return err
		}

	}
	return nil
}

type Schedule struct {
	Language          *string             `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Contained         []*Resource         `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta              *Meta               `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules     *string             `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text              *Narrative          `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ServiceCategory []*CodeableConcept   `bson:",omitempty" json:"serviceCategory,omitempty"`          // A broad categorization of the service that is to be performed during this appointment.
	Identifier      []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`               // External Ids for this item.
	Specialty       []*CodeableConcept   `bson:",omitempty" json:"specialty,omitempty"`                // The specialty of a practitioner that would be required to perform the service requested in this appointment.
	Name            *string              `bson:",omitempty" json:"name,omitempty"`                     // Further description of the schedule as it would be presented to a consumer while searching.
	Actor           []*Reference         `binding:"required" bson:",omitempty" json:"actor,omitempty"` // Slots that reference this schedule resource provide the availability details to these referenced resource(s).
	Extension       []*Extension         `bson:",omitempty" json:"extension,omitempty"`                // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Active          *bool                `bson:",omitempty" json:"active,omitempty"`                   // Whether this schedule record is in active use or should not be used (such as was entered in error).
	ServiceType     []*CodeableReference `bson:",omitempty" json:"serviceType,omitempty"`              // The specific service that is to be performed during this appointment.
	PlanningHorizon *Period              `bson:",omitempty" json:"planningHorizon,omitempty"`          // The period of time that the slots that reference this Schedule resource cover (even if none exist). These  cover the amount of time that an organization's planning horizon; the interval for which they are currently accepting appointments. This does not define a "template" for planning outside these dates.
	Comment         *string              `bson:",omitempty" json:"comment,omitempty"`                  // Comments on the availability to describe any extended information. Such as custom constraints on the slots that may be associated.
	ResourceType    string               `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *SearchParameter) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"SearchParameter\"" {
		return fmt.Errorf("resourceType is not %s", "SearchParameter")
	}
	if len(asMap["multipleOr"]) > 0 {
		if err := go1.Unmarshal(asMap["multipleOr"], &out.MultipleOr); err != nil {
			return err
		}

	}
	if len(asMap["chain"]) > 0 {
		if err := go1.Unmarshal(asMap["chain"], &out.Chain); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
		return err
	}

	if len(asMap["derivedFrom"]) > 0 {
		if err := go1.Unmarshal(asMap["derivedFrom"], &out.DerivedFrom); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["base"], &out.Base); err != nil {
		return err
	}

	if len(asMap["constraint"]) > 0 {
		if err := go1.Unmarshal(asMap["constraint"], &out.Constraint); err != nil {
			return err
		}

	}
	if len(asMap["modifier"]) > 0 {
		if err := go1.Unmarshal(asMap["modifier"], &out.Modifier); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["expression"]) > 0 {
		if err := go1.Unmarshal(asMap["expression"], &out.Expression); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["target"]) > 0 {
		if err := go1.Unmarshal(asMap["target"], &out.Target); err != nil {
			return err
		}

	}
	if len(asMap["component"]) > 0 {
		if err := go1.Unmarshal(asMap["component"], &out.Component); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
		return err
	}

	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["multipleAnd"]) > 0 {
		if err := go1.Unmarshal(asMap["multipleAnd"], &out.MultipleAnd); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["processingMode"]) > 0 {
		if err := go1.Unmarshal(asMap["processingMode"], &out.ProcessingMode); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["comparator"]) > 0 {
		if err := go1.Unmarshal(asMap["comparator"], &out.Comparator); err != nil {
			return err
		}

	}
	return nil
}

type SearchParameter struct {
	MultipleOr        *bool              `bson:",omitempty" json:"multipleOr,omitempty"`                // Whether multiple values are allowed for each time the parameter exists. Values are separated by commas, and the parameter matches if any of the values match.
	Chain             []*string          `bson:",omitempty" json:"chain,omitempty"`                     // Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from SearchParameter.code for a parameter on the target resource type.
	Text              *Narrative         `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Url               *string            `binding:"required" bson:",omitempty" json:"url,omitempty"`    // An absolute URI that is used to identify this search parameter when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this search parameter is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the search parameter is stored on different servers.
	DerivedFrom       *string            `bson:",omitempty" json:"derivedFrom,omitempty"`               // Where this search parameter is originally defined. If a derivedFrom is provided, then the details in the search parameter must be consistent with the definition from which it is defined. i.e. the parameter should have the same meaning, and (usually) the functionality should be a proper subset of the underlying search parameter.
	Jurisdiction      []*CodeableConcept `bson:",omitempty" json:"jurisdiction,omitempty"`              // A legal or geographic region in which the search parameter is intended to be used.
	Copyright         *string            `bson:",omitempty" json:"copyright,omitempty"`                 // A copyright statement relating to the search parameter and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the search parameter.
	Base              []*string          `binding:"required" bson:",omitempty" json:"base,omitempty"`   // The base resource type(s) that this search parameter can be used against.
	Constraint        *string            `bson:",omitempty" json:"constraint,omitempty"`                // FHIRPath expression that defines/sets a complex constraint for when this SearchParameter is applicable.
	Modifier          []*string          `bson:",omitempty" json:"modifier,omitempty"`                  // A modifier supported for the search parameter.
	Meta              *Meta              `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Version           *string            `bson:",omitempty" json:"version,omitempty"`                   // The identifier that is used to identify this version of the search parameter when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the search parameter author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Name              *string            `binding:"required" bson:",omitempty" json:"name,omitempty"`   // A natural language name identifying the search parameter. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Status            *string            `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this search parameter. Enables tracking the life-cycle of the content.
	UseContext        []*UsageContext    `bson:",omitempty" json:"useContext,omitempty"`                // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate search parameter instances.
	Expression        *string            `bson:",omitempty" json:"expression,omitempty"`                // A FHIRPath expression that returns a set of elements for the search parameter.
	Contained         []*Resource        `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension         []*Extension       `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	SearchParameterVersionAlgorithmx
	Title          *string                   `bson:",omitempty" json:"title,omitempty"`                   // A short, descriptive, user-friendly title for the search parameter.
	Id             *primitive.ObjectID       `bson:"_id,omitempty" json:"id,omitempty"`                   // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ImplicitRules  *string                   `bson:",omitempty" json:"implicitRules,omitempty"`           // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language       *string                   `bson:",omitempty" json:"language,omitempty"`                // The base language in which the resource is written.
	Purpose        *string                   `bson:",omitempty" json:"purpose,omitempty"`                 // Explanation of why this search parameter is needed and why it has been designed as it has.
	Type           *string                   `binding:"required" bson:",omitempty" json:"type,omitempty"` // The type of value that a search parameter may contain, and how the content is interpreted.
	Target         []*string                 `bson:",omitempty" json:"target,omitempty"`                  // Types of resource (if a resource is referenced).
	Component      *SearchParameterComponent `binding:"omitempty" bson:",omitempty"`
	Experimental   *bool                     `bson:",omitempty" json:"experimental,omitempty"`                   // A Boolean value to indicate that this search parameter is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Date           *DateTime                 `bson:",omitempty" json:"date,omitempty"`                           // The date  (and optionally time) when the search parameter was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the search parameter changes.
	Description    *string                   `binding:"required" bson:",omitempty" json:"description,omitempty"` // And how it used.
	Publisher      *string                   `bson:",omitempty" json:"publisher,omitempty"`                      // The name of the organization or individual tresponsible for the release and ongoing maintenance of the search parameter.
	Code           *string                   `binding:"required" bson:",omitempty" json:"code,omitempty"`        // The label that is recommended to be used in the URL or the parameter name in a parameters resource for this search parameter.  In some cases, servers may need to use a different CapabilityStatement searchParam.name to differentiate between multiple SearchParameters that happen to have the same code.
	MultipleAnd    *bool                     `bson:",omitempty" json:"multipleAnd,omitempty"`                    // Whether multiple parameters are allowed - e.g. more than one parameter with the same name. The search matches if all the parameters match.
	CopyrightLabel *string                   `bson:",omitempty" json:"copyrightLabel,omitempty"`                 // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	ProcessingMode *string                   `bson:",omitempty" json:"processingMode,omitempty"`                 // How the search parameter relates to the set of elements returned by evaluating the expression query.
	Identifier     []*Identifier             `bson:",omitempty" json:"identifier,omitempty"`                     // A formal identifier that is used to identify this search parameter when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Contact        []*ContactDetail          `bson:",omitempty" json:"contact,omitempty"`                        // Contact details to assist a user in finding and communicating with the publisher.
	Comparator     []*string                 `bson:",omitempty" json:"comparator,omitempty"`                     // Comparators supported for the search parameter.
	ResourceType   string                    `binding:"omitempty" bson:"-" json:"resourceType"`
}
type SearchParameterVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *SearchParameterComponent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["definition"], &out.Definition); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["expression"], &out.Expression); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type SearchParameterComponent struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Definition *string      `binding:"required" bson:",omitempty" json:"definition,omitempty"` // The definition of the search parameter that describes this part.
	Expression *string      `binding:"required" bson:",omitempty" json:"expression,omitempty"` // A sub-expression that defines how to extract values for this component from the output of the main SearchParameter.expression.
	Id         *string      `bson:"_id,omitempty" json:"id,omitempty"`                         // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension  []*Extension `bson:",omitempty" json:"extension,omitempty"`                     // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *ServiceRequest) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ServiceRequest\"" {
		return fmt.Errorf("resourceType is not %s", "ServiceRequest")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
		return err
	}

	if len(asMap["patientInstruction"]) > 0 {
		if err := go1.Unmarshal(asMap["patientInstruction"], &out.PatientInstruction); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["doNotPerform"]) > 0 {
		if err := go1.Unmarshal(asMap["doNotPerform"], &out.DoNotPerform); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["requester"]) > 0 {
		if err := go1.Unmarshal(asMap["requester"], &out.Requester); err != nil {
			return err
		}

	}
	if len(asMap["insurance"]) > 0 {
		if err := go1.Unmarshal(asMap["insurance"], &out.Insurance); err != nil {
			return err
		}

	}
	if len(asMap["bodySite"]) > 0 {
		if err := go1.Unmarshal(asMap["bodySite"], &out.BodySite); err != nil {
			return err
		}

	}
	if len(asMap["specimen"]) > 0 {
		if err := go1.Unmarshal(asMap["specimen"], &out.Specimen); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesUri"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesUri"], &out.InstantiatesUri); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["intent"], &out.Intent); err != nil {
		return err
	}

	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["supportingInfo"]) > 0 {
		if err := go1.Unmarshal(asMap["supportingInfo"], &out.SupportingInfo); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["authoredOn"]) > 0 {
		if err := go1.Unmarshal(asMap["authoredOn"], &out.AuthoredOn); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesCanonical"], &out.InstantiatesCanonical); err != nil {
			return err
		}

	}
	if len(asMap["replaces"]) > 0 {
		if err := go1.Unmarshal(asMap["replaces"], &out.Replaces); err != nil {
			return err
		}

	}
	if len(asMap["orderDetail"]) > 0 {
		if err := go1.Unmarshal(asMap["orderDetail"], &out.OrderDetail); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["quantityQuantity"], &out.QuantityQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["quantityRatio"], &out.QuantityRatio); err == nil {
	} else if err := go1.Unmarshal(asMap["quantityRange"], &out.QuantityRange); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["occurrenceDateTime"], &out.OccurrenceDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrencePeriod"], &out.OccurrencePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrenceTiming"], &out.OccurrenceTiming); err == nil {
	} else {

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["bodyStructure"]) > 0 {
		if err := go1.Unmarshal(asMap["bodyStructure"], &out.BodyStructure); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["requisition"]) > 0 {
		if err := go1.Unmarshal(asMap["requisition"], &out.Requisition); err != nil {
			return err
		}

	}
	if len(asMap["focus"]) > 0 {
		if err := go1.Unmarshal(asMap["focus"], &out.Focus); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["relevantHistory"]) > 0 {
		if err := go1.Unmarshal(asMap["relevantHistory"], &out.RelevantHistory); err != nil {
			return err
		}

	}
	if len(asMap["performerType"]) > 0 {
		if err := go1.Unmarshal(asMap["performerType"], &out.PerformerType); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["asNeededBoolean"], &out.AsNeededBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["asNeededCodeableConcept"], &out.AsNeededCodeableConcept); err == nil {
	} else {

	}
	return nil
}

type ServiceRequest struct {
	Id                 *primitive.ObjectID               `bson:"_id,omitempty" json:"id,omitempty"`                      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Extension          []*Extension                      `bson:",omitempty" json:"extension,omitempty"`                  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Priority           *string                           `bson:",omitempty" json:"priority,omitempty"`                   // Indicates how quickly the ServiceRequest should be addressed with respect to other requests.
	Subject            *Reference                        `binding:"required" bson:",omitempty" json:"subject,omitempty"` // On whom or what the service is to be performed. This is usually a human patient, but can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).
	PatientInstruction *ServiceRequestPatientInstruction `binding:"omitempty" bson:",omitempty"`
	Language           *string                           `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	DoNotPerform       *bool                             `bson:",omitempty" json:"doNotPerform,omitempty"`      // Set this to true if the record is saying that the service/procedure should NOT be performed.
	Encounter          *Reference                        `bson:",omitempty" json:"encounter,omitempty"`         // An encounter that provides additional information about the healthcare context in which this request is made.
	Requester          *Reference                        `bson:",omitempty" json:"requester,omitempty"`         // The individual who initiated the request and has responsibility for its activation.
	Insurance          []*Reference                      `bson:",omitempty" json:"insurance,omitempty"`         // Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be needed for delivering the requested service.
	BodySite           []*CodeableConcept                `bson:",omitempty" json:"bodySite,omitempty"`          // Anatomic location where the procedure should be performed. This is the target site.
	Specimen           []*Reference                      `bson:",omitempty" json:"specimen,omitempty"`          // One or more specimens that the laboratory procedure will use.
	ModifierExtension  []*Extension                      `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	InstantiatesUri       []*string                  `bson:",omitempty" json:"instantiatesUri,omitempty"`           // The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
	Intent                *string                    `binding:"required" bson:",omitempty" json:"intent,omitempty"` // Whether the request is a proposal, plan, an original order or a reflex order.
	Code                  *CodeableReference         `bson:",omitempty" json:"code,omitempty"`                      // A code or reference that identifies a particular service (i.e., procedure, diagnostic investigation, or panel of investigations) that have been requested.
	Performer             []*Reference               `bson:",omitempty" json:"performer,omitempty"`                 // The desired performer for doing the requested service.  For example, the surgeon, dermatopathologist, endoscopist, etc.
	SupportingInfo        []*CodeableReference       `bson:",omitempty" json:"supportingInfo,omitempty"`            // Additional clinical information about the patient or specimen that may influence the services or their interpretations.     This information includes diagnosis, clinical findings and other observations.  In laboratory ordering these are typically referred to as "ask at order entry questions (AOEs)".  This includes observations explicitly requested by the producer (filler) to provide context or supporting information needed to complete the order. For example,  reporting the amount of inspired oxygen for blood gas measurements.
	ImplicitRules         *string                    `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	AuthoredOn            *DateTime                  `bson:",omitempty" json:"authoredOn,omitempty"`                // When the request transitioned to being actionable.
	Note                  []*Annotation              `bson:",omitempty" json:"note,omitempty"`                      // Any other notes and comments made about the service request. For example, internal billing notes.
	InstantiatesCanonical []*string                  `bson:",omitempty" json:"instantiatesCanonical,omitempty"`     // The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
	Replaces              []*Reference               `bson:",omitempty" json:"replaces,omitempty"`                  // The request takes the place of the referenced completed or terminated request(s).
	OrderDetail           *ServiceRequestOrderDetail `binding:"omitempty" bson:",omitempty"`
	BasedOn               []*Reference               `bson:",omitempty" json:"basedOn,omitempty"` // Plan/proposal/order fulfilled by this request.
	ServiceRequestQuantityx
	ServiceRequestOccurrencex
	Reason          []*CodeableReference `bson:",omitempty" json:"reason,omitempty"`                    // An explanation or justification for why this service is being requested in coded or textual form.   This is often for billing purposes.  May relate to the resources referred to in `supportingInfo`.
	BodyStructure   *Reference           `bson:",omitempty" json:"bodyStructure,omitempty"`             // Anatomic location where the procedure should be performed. This is the target site.
	Text            *Narrative           `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Requisition     *Identifier          `bson:",omitempty" json:"requisition,omitempty"`               // A shared identifier common to all service requests that were authorized more or less simultaneously by a single author, representing the composite or group identifier.
	Focus           []*Reference         `bson:",omitempty" json:"focus,omitempty"`                     // The actual focus of a service request when it is not the subject of record representing something or someone associated with the subject such as a spouse, parent, fetus, or donor. The focus of a service request could also be an existing condition,  an intervention, the subject's diet,  another service request on the subject,  or a body structure such as tumor or implanted device.
	Location        []*CodeableReference `bson:",omitempty" json:"location,omitempty"`                  // The preferred location(s) where the procedure should actually happen in coded or free text form. E.g. at home or nursing day care center.
	RelevantHistory []*Reference         `bson:",omitempty" json:"relevantHistory,omitempty"`           // Key events in the history of the request.
	PerformerType   *CodeableConcept     `bson:",omitempty" json:"performerType,omitempty"`             // Desired type of performer for doing the requested service.
	Meta            *Meta                `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Contained       []*Resource          `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Identifier      []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`                // Identifiers assigned to this order instance by the orderer and/or the receiver and/or order fulfiller.
	Status          *string              `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of the order.
	Category        []*CodeableConcept   `bson:",omitempty" json:"category,omitempty"`                  // A code that classifies the service for searching, sorting and display purposes (e.g. "Surgical Procedure").
	ServiceRequestAsNeededx
	ResourceType string `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *ServiceRequestPatientInstruction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["instructionMarkdown"], &out.InstructionMarkdown); err == nil {
	} else if err := go1.Unmarshal(asMap["instructionReference"], &out.InstructionReference); err == nil {
	} else {

	}
	return nil
}

type ServiceRequestPatientInstruction struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ServiceRequestPatientInstructionInstructionx
}
type ServiceRequestPatientInstructionInstructionx struct {
	InstructionMarkdown  string    `bson:",omitempty" json:"instructionMarkdown,omitempty"`
	InstructionReference Reference `bson:",omitempty" json:"instructionReference,omitempty"`
}

func (out *ServiceRequestOrderDetail) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["parameterFocus"]) > 0 {
		if err := go1.Unmarshal(asMap["parameterFocus"], &out.ParameterFocus); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["parameter"], &out.Parameter); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type ServiceRequestOrderDetail struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ParameterFocus *CodeableReference                  `bson:",omitempty" json:"parameterFocus,omitempty"` // Indicates the context of the order details by reference.
	Parameter      *ServiceRequestOrderDetailParameter `binding:"omitempty" bson:",omitempty"`
	Id             *string                             `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension      []*Extension                        `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *ServiceRequestOrderDetailParameter) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRatio"], &out.ValueRatio); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valuePeriod"], &out.ValuePeriod); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	return nil
}

type ServiceRequestOrderDetailParameter struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code *CodeableConcept `binding:"required" bson:",omitempty" json:"code,omitempty"` // A value representing the additional detail or instructions for the order (e.g., catheter insertion, body elevation, descriptive device configuration and/or setting instructions).
	ServiceRequestOrderDetailParameterValuex
}
type ServiceRequestOrderDetailParameterValuex struct {
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueRatio           Ratio           `bson:",omitempty" json:"valueRatio,omitempty"`
	ValueRange           Range           `bson:",omitempty" json:"valueRange,omitempty"`
	ValueBoolean         bool            `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueString          string          `bson:",omitempty" json:"valueString,omitempty"`
	ValuePeriod          Period          `bson:",omitempty" json:"valuePeriod,omitempty"`
}
type ServiceRequestQuantityx struct {
	QuantityQuantity Quantity `bson:",omitempty" json:"quantityQuantity,omitempty"`
	QuantityRatio    Ratio    `bson:",omitempty" json:"quantityRatio,omitempty"`
	QuantityRange    Range    `bson:",omitempty" json:"quantityRange,omitempty"`
}
type ServiceRequestOccurrencex struct {
	OccurrenceDateTime DateTime `bson:",omitempty" json:"occurrenceDateTime,omitempty"`
	OccurrencePeriod   Period   `bson:",omitempty" json:"occurrencePeriod,omitempty"`
	OccurrenceTiming   Timing   `bson:",omitempty" json:"occurrenceTiming,omitempty"`
}
type ServiceRequestAsNeededx struct {
	AsNeededBoolean         bool            `bson:",omitempty" json:"asNeededBoolean,omitempty"`
	AsNeededCodeableConcept CodeableConcept `bson:",omitempty" json:"asNeededCodeableConcept,omitempty"`
}

func (out *Slot) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Slot\"" {
		return fmt.Errorf("resourceType is not %s", "Slot")
	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["specialty"]) > 0 {
		if err := go1.Unmarshal(asMap["specialty"], &out.Specialty); err != nil {
			return err
		}

	}
	if len(asMap["appointmentType"]) > 0 {
		if err := go1.Unmarshal(asMap["appointmentType"], &out.AppointmentType); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["serviceCategory"]) > 0 {
		if err := go1.Unmarshal(asMap["serviceCategory"], &out.ServiceCategory); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["start"], &out.Start); err != nil {
		return err
	}

	if len(asMap["comment"]) > 0 {
		if err := go1.Unmarshal(asMap["comment"], &out.Comment); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["schedule"], &out.Schedule); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["end"], &out.End); err != nil {
		return err
	}

	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["serviceType"]) > 0 {
		if err := go1.Unmarshal(asMap["serviceType"], &out.ServiceType); err != nil {
			return err
		}

	}
	if len(asMap["overbooked"]) > 0 {
		if err := go1.Unmarshal(asMap["overbooked"], &out.Overbooked); err != nil {
			return err
		}

	}
	return nil
}

type Slot struct {
	Meta              *Meta              `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Extension         []*Extension       `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Specialty         []*CodeableConcept `bson:",omitempty" json:"specialty,omitempty"`         // The specialty of a practitioner that would be required to perform the service requested in this appointment.
	AppointmentType   []*CodeableConcept `bson:",omitempty" json:"appointmentType,omitempty"`   // The style of appointment or patient that may be booked in the slot (not service type).
	Text              *Narrative         `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ServiceCategory []*CodeableConcept   `bson:",omitempty" json:"serviceCategory,omitempty"`             // A broad categorization of the service that is to be performed during this appointment.
	Start           *time.Time           `binding:"required" bson:",omitempty" json:"start,omitempty"`    // Date/Time that the slot is to begin.
	Comment         *string              `bson:",omitempty" json:"comment,omitempty"`                     // Comments on the slot to describe any extended information. Such as custom constraints on the slot.
	Id              *primitive.ObjectID  `bson:"_id,omitempty" json:"id,omitempty"`                       // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language        *string              `bson:",omitempty" json:"language,omitempty"`                    // The base language in which the resource is written.
	Schedule        *Reference           `binding:"required" bson:",omitempty" json:"schedule,omitempty"` // The schedule resource that this slot defines an interval of status information.
	Status          *string              `binding:"required" bson:",omitempty" json:"status,omitempty"`   // busy | free | busy-unavailable | busy-tentative | entered-in-error.
	End             *time.Time           `binding:"required" bson:",omitempty" json:"end,omitempty"`      // Date/Time that the slot is to conclude.
	ImplicitRules   *string              `bson:",omitempty" json:"implicitRules,omitempty"`               // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained       []*Resource          `bson:",omitempty" json:"contained,omitempty"`                   // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Identifier      []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`                  // External Ids for this item.
	ServiceType     []*CodeableReference `bson:",omitempty" json:"serviceType,omitempty"`                 // The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the Schedule resource.
	Overbooked      *bool                `bson:",omitempty" json:"overbooked,omitempty"`                  // This slot has already been overbooked, appointments are unlikely to be accepted for this time.
	ResourceType    string               `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *Specimen) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Specimen\"" {
		return fmt.Errorf("resourceType is not %s", "Specimen")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["condition"]) > 0 {
		if err := go1.Unmarshal(asMap["condition"], &out.Condition); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["parent"]) > 0 {
		if err := go1.Unmarshal(asMap["parent"], &out.Parent); err != nil {
			return err
		}

	}
	if len(asMap["combined"]) > 0 {
		if err := go1.Unmarshal(asMap["combined"], &out.Combined); err != nil {
			return err
		}

	}
	if len(asMap["feature"]) > 0 {
		if err := go1.Unmarshal(asMap["feature"], &out.Feature); err != nil {
			return err
		}

	}
	if len(asMap["container"]) > 0 {
		if err := go1.Unmarshal(asMap["container"], &out.Container); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["accessionIdentifier"]) > 0 {
		if err := go1.Unmarshal(asMap["accessionIdentifier"], &out.AccessionIdentifier); err != nil {
			return err
		}

	}
	if len(asMap["subject"]) > 0 {
		if err := go1.Unmarshal(asMap["subject"], &out.Subject); err != nil {
			return err
		}

	}
	if len(asMap["role"]) > 0 {
		if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
			return err
		}

	}
	if len(asMap["collection"]) > 0 {
		if err := go1.Unmarshal(asMap["collection"], &out.Collection); err != nil {
			return err
		}

	}
	if len(asMap["processing"]) > 0 {
		if err := go1.Unmarshal(asMap["processing"], &out.Processing); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["receivedTime"]) > 0 {
		if err := go1.Unmarshal(asMap["receivedTime"], &out.ReceivedTime); err != nil {
			return err
		}

	}
	if len(asMap["request"]) > 0 {
		if err := go1.Unmarshal(asMap["request"], &out.Request); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	return nil
}

type Specimen struct {
	Id                  *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta                *Meta               `bson:",omitempty" json:"meta,omitempty"`      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Type                *CodeableConcept    `bson:",omitempty" json:"type,omitempty"`      // The kind of material that forms the specimen.
	Condition           []*CodeableConcept  `bson:",omitempty" json:"condition,omitempty"` // A mode or state of being that describes the nature of the specimen.
	Language            *string             `bson:",omitempty" json:"language,omitempty"`  // The base language in which the resource is written.
	Status              *string             `bson:",omitempty" json:"status,omitempty"`    // The availability of the specimen.
	Parent              []*Reference        `bson:",omitempty" json:"parent,omitempty"`    // Reference to the parent (source) specimen which is used when the specimen was either derived from or a component of another specimen.
	Combined            *string             `bson:",omitempty" json:"combined,omitempty"`  // This element signifies if the specimen is part of a group or pooled.
	Feature             *SpecimenFeature    `binding:"omitempty" bson:",omitempty"`
	Container           *SpecimenContainer  `binding:"omitempty" bson:",omitempty"`
	Text                *Narrative          `bson:",omitempty" json:"text,omitempty"`                // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension           []*Extension        `bson:",omitempty" json:"extension,omitempty"`           // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Identifier          []*Identifier       `bson:",omitempty" json:"identifier,omitempty"`          // Id for specimen.
	AccessionIdentifier *Identifier         `bson:",omitempty" json:"accessionIdentifier,omitempty"` // The identifier assigned by the lab when accessioning specimen(s). This is not necessarily the same as the specimen identifier, depending on local lab procedures.
	Subject             *Reference          `bson:",omitempty" json:"subject,omitempty"`             // Where the specimen came from. This may be from patient(s), from a location (e.g., the source of an environmental sample), or a sampling of a substance, a biologically-derived product, or a device.
	Role                []*CodeableConcept  `bson:",omitempty" json:"role,omitempty"`                // The role or reason for the specimen in the testing workflow.
	Collection          *SpecimenCollection `binding:"omitempty" bson:",omitempty"`
	Processing          *SpecimenProcessing `binding:"omitempty" bson:",omitempty"`
	ImplicitRules       *string             `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained           []*Resource         `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension   []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ReceivedTime *DateTime     `bson:",omitempty" json:"receivedTime,omitempty"` // Time when specimen is received by the testing laboratory for processing or testing.
	Request      []*Reference  `bson:",omitempty" json:"request,omitempty"`      // Details concerning a service request that required a specimen to be collected.
	Note         []*Annotation `bson:",omitempty" json:"note,omitempty"`         // To communicate any details or issues about the specimen or during the specimen collection. (for example: broken vial, sent with patient, frozen).
	ResourceType string        `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *SpecimenFeature) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
		return err
	}

	return nil
}

type SpecimenFeature struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type        *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"`        // The landmark or feature being highlighted.
	Description *string          `binding:"required" bson:",omitempty" json:"description,omitempty"` // Description of the feature of the specimen.
}

func (out *SpecimenContainer) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["device"], &out.Device); err != nil {
		return err
	}

	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["specimenQuantity"]) > 0 {
		if err := go1.Unmarshal(asMap["specimenQuantity"], &out.SpecimenQuantity); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type SpecimenContainer struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Device           *Reference `binding:"required" bson:",omitempty" json:"device,omitempty"` // The device resource for the the container holding the specimen. If the container is in a holder then the referenced device will point to a parent device.
	Location         *Reference `bson:",omitempty" json:"location,omitempty"`                  // The location of the container holding the specimen.
	SpecimenQuantity *Quantity  `bson:",omitempty" json:"specimenQuantity,omitempty"`          // The quantity of specimen in the container; may be volume, dimensions, or other appropriate measurements, depending on the specimen type.
	Id               *string    `bson:"_id,omitempty" json:"id,omitempty"`                     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *SpecimenCollection) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["collectedDateTime"], &out.CollectedDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["collectedPeriod"], &out.CollectedPeriod); err == nil {
	} else {

	}
	if len(asMap["duration"]) > 0 {
		if err := go1.Unmarshal(asMap["duration"], &out.Duration); err != nil {
			return err
		}

	}
	if len(asMap["method"]) > 0 {
		if err := go1.Unmarshal(asMap["method"], &out.Method); err != nil {
			return err
		}

	}
	if len(asMap["device"]) > 0 {
		if err := go1.Unmarshal(asMap["device"], &out.Device); err != nil {
			return err
		}

	}
	if len(asMap["procedure"]) > 0 {
		if err := go1.Unmarshal(asMap["procedure"], &out.Procedure); err != nil {
			return err
		}

	}
	if len(asMap["bodySite"]) > 0 {
		if err := go1.Unmarshal(asMap["bodySite"], &out.BodySite); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["fastingStatusCodeableConcept"], &out.FastingStatusCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["fastingStatusDuration"], &out.FastingStatusDuration); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["collector"]) > 0 {
		if err := go1.Unmarshal(asMap["collector"], &out.Collector); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	return nil
}

type SpecimenCollection struct {
	SpecimenCollectionCollectedx
	Duration  *Duration          `bson:",omitempty" json:"duration,omitempty"`  // The span of time over which the collection of a specimen occurred.
	Method    *CodeableConcept   `bson:",omitempty" json:"method,omitempty"`    // A coded value specifying the technique that is used to perform the procedure.
	Device    *CodeableReference `bson:",omitempty" json:"device,omitempty"`    // A coded value specifying the technique that is used to perform the procedure.
	Procedure *Reference         `bson:",omitempty" json:"procedure,omitempty"` // The procedure event during which the specimen was collected (e.g. the surgery leading to the collection of a pathology sample).
	BodySite  *CodeableReference `bson:",omitempty" json:"bodySite,omitempty"`  // Anatomical location from which the specimen was collected (if subject is a patient). This is the target site.  This element is not used for environmental specimens.
	SpecimenCollectionFastingStatusx
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Collector *Reference `bson:",omitempty" json:"collector,omitempty"` // Person who collected the specimen.
	Quantity  *Quantity  `bson:",omitempty" json:"quantity,omitempty"`  // The quantity of specimen collected; for instance the volume of a blood sample, or the physical measurement of an anatomic pathology sample.
}
type SpecimenCollectionCollectedx struct {
	CollectedDateTime DateTime `bson:",omitempty" json:"collectedDateTime,omitempty"`
	CollectedPeriod   Period   `bson:",omitempty" json:"collectedPeriod,omitempty"`
}
type SpecimenCollectionFastingStatusx struct {
	FastingStatusCodeableConcept CodeableConcept `bson:",omitempty" json:"fastingStatusCodeableConcept,omitempty"`
	FastingStatusDuration        Duration        `bson:",omitempty" json:"fastingStatusDuration,omitempty"`
}

func (out *SpecimenProcessing) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["method"]) > 0 {
		if err := go1.Unmarshal(asMap["method"], &out.Method); err != nil {
			return err
		}

	}
	if len(asMap["additive"]) > 0 {
		if err := go1.Unmarshal(asMap["additive"], &out.Additive); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["timeDateTime"], &out.TimeDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["timePeriod"], &out.TimePeriod); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type SpecimenProcessing struct {
	Description *string          `bson:",omitempty" json:"description,omitempty"` // Textual description of procedure.
	Method      *CodeableConcept `bson:",omitempty" json:"method,omitempty"`      // A coded value specifying the method used to process the specimen.
	Additive    []*Reference     `bson:",omitempty" json:"additive,omitempty"`    // Material used in the processing step.
	SpecimenProcessingTimex
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type SpecimenProcessingTimex struct {
	TimeDateTime DateTime `bson:",omitempty" json:"timeDateTime,omitempty"`
	TimePeriod   Period   `bson:",omitempty" json:"timePeriod,omitempty"`
}

func (out *SpecimenDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"SpecimenDefinition\"" {
		return fmt.Errorf("resourceType is not %s", "SpecimenDefinition")
	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["collection"]) > 0 {
		if err := go1.Unmarshal(asMap["collection"], &out.Collection); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["approvalDate"]) > 0 {
		if err := go1.Unmarshal(asMap["approvalDate"], &out.ApprovalDate); err != nil {
			return err
		}

	}
	if len(asMap["typeTested"]) > 0 {
		if err := go1.Unmarshal(asMap["typeTested"], &out.TypeTested); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subjectCodeableConcept"], &out.SubjectCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["subjectReference"], &out.SubjectReference); err == nil {
	} else {

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["timeAspect"]) > 0 {
		if err := go1.Unmarshal(asMap["timeAspect"], &out.TimeAspect); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["derivedFromUri"]) > 0 {
		if err := go1.Unmarshal(asMap["derivedFromUri"], &out.DerivedFromUri); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["lastReviewDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastReviewDate"], &out.LastReviewDate); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["effectivePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err != nil {
			return err
		}

	}
	if len(asMap["patientPreparation"]) > 0 {
		if err := go1.Unmarshal(asMap["patientPreparation"], &out.PatientPreparation); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["derivedFromCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["derivedFromCanonical"], &out.DerivedFromCanonical); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["typeCollected"]) > 0 {
		if err := go1.Unmarshal(asMap["typeCollected"], &out.TypeCollected); err != nil {
			return err
		}

	}
	return nil
}

type SpecimenDefinition struct {
	Text              *Narrative         `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Collection        []*CodeableConcept `bson:",omitempty" json:"collection,omitempty"`        // The action to be performed for collecting the specimen.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier     *Identifier     `bson:",omitempty" json:"identifier,omitempty"`                // A business identifier assigned to this SpecimenDefinition.
	Status         *string         `binding:"required" bson:",omitempty" json:"status,omitempty"` // The current state of theSpecimenDefinition.
	UseContext     []*UsageContext `bson:",omitempty" json:"useContext,omitempty"`                // The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of specimen definitions.
	CopyrightLabel *string         `bson:",omitempty" json:"copyrightLabel,omitempty"`            // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	SpecimenDefinitionVersionAlgorithmx
	Jurisdiction []*CodeableConcept            `bson:",omitempty" json:"jurisdiction,omitempty"` // A jurisdiction in which the SpecimenDefinition is intended to be used.
	ApprovalDate *Date                         `bson:",omitempty" json:"approvalDate,omitempty"` // The date on which the asset content was approved by the publisher. Approval happens once when the content is officially approved for usage.
	TypeTested   *SpecimenDefinitionTypeTested `binding:"omitempty" bson:",omitempty"`
	Id           *primitive.ObjectID           `bson:"_id,omitempty" json:"id,omitempty"`     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Name         *string                       `bson:",omitempty" json:"name,omitempty"`      // A natural language name identifying the {{title}}. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Date         *DateTime                     `bson:",omitempty" json:"date,omitempty"`      // For draft definitions, indicates the date of initial creation. For active definitions, represents the date of activation. For withdrawn definitions, indicates the date of withdrawal.
	Publisher    *string                       `bson:",omitempty" json:"publisher,omitempty"` // Helps establish the "authority/credibility" of the SpecimenDefinition. May also allow for contact.
	Contact      []*ContactDetail              `bson:",omitempty" json:"contact,omitempty"`   // Contact details to assist a user in finding and communicating with the publisher.
	SpecimenDefinitionSubjectx
	Description          *string            `bson:",omitempty" json:"description,omitempty"`          // A free text natural language description of the SpecimenDefinition from the consumer's perspective.
	TimeAspect           *string            `bson:",omitempty" json:"timeAspect,omitempty"`           // Time aspect of specimen collection (duration or offset).
	Meta                 *Meta              `bson:",omitempty" json:"meta,omitempty"`                 // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules        *string            `bson:",omitempty" json:"implicitRules,omitempty"`        // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained            []*Resource        `bson:",omitempty" json:"contained,omitempty"`            // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	DerivedFromUri       []*string          `bson:",omitempty" json:"derivedFromUri,omitempty"`       // The URL pointing to an externally-defined type of specimen, guideline or other definition that is adhered to in whole or in part by this definition.
	Experimental         *bool              `bson:",omitempty" json:"experimental,omitempty"`         // A flag to indicate that this SpecimenDefinition is not authored for  genuine usage.
	Language             *string            `bson:",omitempty" json:"language,omitempty"`             // The base language in which the resource is written.
	Title                *string            `bson:",omitempty" json:"title,omitempty"`                // A short, descriptive, user-friendly title for the SpecimenDefinition.
	LastReviewDate       *Date              `bson:",omitempty" json:"lastReviewDate,omitempty"`       // The date on which the asset content was last reviewed. Review happens periodically after that, but doesn't change the original approval date.
	Extension            []*Extension       `bson:",omitempty" json:"extension,omitempty"`            // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Copyright            *string            `bson:",omitempty" json:"copyright,omitempty"`            // Copyright statement relating to the SpecimenDefinition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the SpecimenDefinition.
	EffectivePeriod      *Period            `bson:",omitempty" json:"effectivePeriod,omitempty"`      // The period during which the SpecimenDefinition content was or is planned to be effective.
	PatientPreparation   []*CodeableConcept `bson:",omitempty" json:"patientPreparation,omitempty"`   // Preparation of the patient for specimen collection.
	Url                  *string            `bson:",omitempty" json:"url,omitempty"`                  // An absolute URL that is used to identify this SpecimenDefinition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this SpecimenDefinition is (or will be) published. The URL SHOULD include the major version of the SpecimenDefinition. For more information see Technical and Business Versions.
	Version              *string            `bson:",omitempty" json:"version,omitempty"`              // The identifier that is used to identify this version of the SpecimenDefinition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the SpecimenDefinition author and is not expected to be globally unique.
	DerivedFromCanonical []*string          `bson:",omitempty" json:"derivedFromCanonical,omitempty"` // The canonical URL pointing to another FHIR-defined SpecimenDefinition that is adhered to in whole or in part by this definition.
	Purpose              *string            `bson:",omitempty" json:"purpose,omitempty"`              // Explains why this SpecimeDefinition is needed and why it has been designed as it has.
	TypeCollected        *CodeableConcept   `bson:",omitempty" json:"typeCollected,omitempty"`        // The kind of material to be collected.
	ResourceType         string             `binding:"omitempty" bson:"-" json:"resourceType"`
}
type SpecimenDefinitionVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *SpecimenDefinitionTypeTested) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["retentionTime"]) > 0 {
		if err := go1.Unmarshal(asMap["retentionTime"], &out.RetentionTime); err != nil {
			return err
		}

	}
	if len(asMap["singleUse"]) > 0 {
		if err := go1.Unmarshal(asMap["singleUse"], &out.SingleUse); err != nil {
			return err
		}

	}
	if len(asMap["rejectionCriterion"]) > 0 {
		if err := go1.Unmarshal(asMap["rejectionCriterion"], &out.RejectionCriterion); err != nil {
			return err
		}

	}
	if len(asMap["handling"]) > 0 {
		if err := go1.Unmarshal(asMap["handling"], &out.Handling); err != nil {
			return err
		}

	}
	if len(asMap["isDerived"]) > 0 {
		if err := go1.Unmarshal(asMap["isDerived"], &out.IsDerived); err != nil {
			return err
		}

	}
	if len(asMap["container"]) > 0 {
		if err := go1.Unmarshal(asMap["container"], &out.Container); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["preference"], &out.Preference); err != nil {
		return err
	}

	if len(asMap["requirement"]) > 0 {
		if err := go1.Unmarshal(asMap["requirement"], &out.Requirement); err != nil {
			return err
		}

	}
	if len(asMap["testingDestination"]) > 0 {
		if err := go1.Unmarshal(asMap["testingDestination"], &out.TestingDestination); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type SpecimenDefinitionTypeTested struct {
	RetentionTime      *Duration                              `bson:",omitempty" json:"retentionTime,omitempty"`      // The usual time that a specimen of this kind is retained after the ordered tests are completed, for the purpose of additional testing.
	SingleUse          *bool                                  `bson:",omitempty" json:"singleUse,omitempty"`          // Specimen can be used by only one test or panel if the value is "true".
	RejectionCriterion []*CodeableConcept                     `bson:",omitempty" json:"rejectionCriterion,omitempty"` // Criterion for rejection of the specimen in its container by the laboratory.
	Handling           *SpecimenDefinitionTypeTestedHandling  `binding:"omitempty" bson:",omitempty"`
	IsDerived          *bool                                  `bson:",omitempty" json:"isDerived,omitempty"` // Primary of secondary specimen.
	Container          *SpecimenDefinitionTypeTestedContainer `binding:"omitempty" bson:",omitempty"`
	ModifierExtension  []*Extension                           `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type               *CodeableConcept   `bson:",omitempty" json:"type,omitempty"`                          // The kind of specimen conditioned for testing expected by lab.
	Preference         *string            `binding:"required" bson:",omitempty" json:"preference,omitempty"` // The preference for this type of conditioned specimen.
	Requirement        *string            `bson:",omitempty" json:"requirement,omitempty"`                   // Requirements for delivery and special handling of this kind of conditioned specimen.
	TestingDestination []*CodeableConcept `bson:",omitempty" json:"testingDestination,omitempty"`            // Where the specimen will be tested: e.g., lab, sector, device or any combination of these.
	Id                 *string            `bson:"_id,omitempty" json:"id,omitempty"`                         // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension          []*Extension       `bson:",omitempty" json:"extension,omitempty"`                     // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *SpecimenDefinitionTypeTestedHandling) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["temperatureQualifier"]) > 0 {
		if err := go1.Unmarshal(asMap["temperatureQualifier"], &out.TemperatureQualifier); err != nil {
			return err
		}

	}
	if len(asMap["temperatureRange"]) > 0 {
		if err := go1.Unmarshal(asMap["temperatureRange"], &out.TemperatureRange); err != nil {
			return err
		}

	}
	if len(asMap["maxDuration"]) > 0 {
		if err := go1.Unmarshal(asMap["maxDuration"], &out.MaxDuration); err != nil {
			return err
		}

	}
	if len(asMap["instruction"]) > 0 {
		if err := go1.Unmarshal(asMap["instruction"], &out.Instruction); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type SpecimenDefinitionTypeTestedHandling struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	TemperatureQualifier *CodeableConcept `bson:",omitempty" json:"temperatureQualifier,omitempty"` // It qualifies the interval of temperature, which characterizes an occurrence of handling. Conditions that are not related to temperature may be handled in the instruction element.
	TemperatureRange     *Range           `bson:",omitempty" json:"temperatureRange,omitempty"`     // The temperature interval for this set of handling instructions.
	MaxDuration          *Duration        `bson:",omitempty" json:"maxDuration,omitempty"`          // The maximum time interval of preservation of the specimen with these conditions.
	Instruction          *string          `bson:",omitempty" json:"instruction,omitempty"`          // Additional textual instructions for the preservation or transport of the specimen. For instance, 'Protect from light exposure'.
	Id                   *string          `bson:"_id,omitempty" json:"id,omitempty"`                // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *SpecimenDefinitionTypeTestedContainer) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["material"]) > 0 {
		if err := go1.Unmarshal(asMap["material"], &out.Material); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["cap"]) > 0 {
		if err := go1.Unmarshal(asMap["cap"], &out.Cap); err != nil {
			return err
		}

	}
	if len(asMap["capacity"]) > 0 {
		if err := go1.Unmarshal(asMap["capacity"], &out.Capacity); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["minimumVolumeQuantity"], &out.MinimumVolumeQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["minimumVolumeString"], &out.MinimumVolumeString); err == nil {
	} else {

	}
	if len(asMap["additive"]) > 0 {
		if err := go1.Unmarshal(asMap["additive"], &out.Additive); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["preparation"]) > 0 {
		if err := go1.Unmarshal(asMap["preparation"], &out.Preparation); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type SpecimenDefinitionTypeTestedContainer struct {
	Extension []*Extension     `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Material  *CodeableConcept `bson:",omitempty" json:"material,omitempty"`  // The type of material of the container.
	Type      *CodeableConcept `bson:",omitempty" json:"type,omitempty"`      // The type of container used to contain this kind of specimen.
	Cap       *CodeableConcept `bson:",omitempty" json:"cap,omitempty"`       // Color of container cap.
	Capacity  *Quantity        `bson:",omitempty" json:"capacity,omitempty"`  // The capacity (volume or other measure) of this kind of container.
	SpecimenDefinitionTypeTestedContainerMinimumVolumex
	Additive          *SpecimenDefinitionTypeTestedContainerAdditive `binding:"omitempty" bson:",omitempty"`
	Id                *string                                        `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Description       *string                                        `bson:",omitempty" json:"description,omitempty"`       // The textual description of the kind of container.
	Preparation       *string                                        `bson:",omitempty" json:"preparation,omitempty"`       // Special processing that should be applied to the container for this kind of specimen.
	ModifierExtension []*Extension                                   `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type SpecimenDefinitionTypeTestedContainerMinimumVolumex struct {
	MinimumVolumeQuantity Quantity `bson:",omitempty" json:"minimumVolumeQuantity,omitempty"`
	MinimumVolumeString   string   `bson:",omitempty" json:"minimumVolumeString,omitempty"`
}

func (out *SpecimenDefinitionTypeTestedContainerAdditive) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["additiveCodeableConcept"], &out.AdditiveCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["additiveReference"], &out.AdditiveReference); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "additive[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type SpecimenDefinitionTypeTestedContainerAdditive struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	SpecimenDefinitionTypeTestedContainerAdditiveAdditivex
	Id        *string      `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}
type SpecimenDefinitionTypeTestedContainerAdditiveAdditivex struct {
	AdditiveCodeableConcept CodeableConcept `bson:",omitempty" json:"additiveCodeableConcept,omitempty"`
	AdditiveReference       Reference       `bson:",omitempty" json:"additiveReference,omitempty"`
}
type SpecimenDefinitionSubjectx struct {
	SubjectCodeableConcept CodeableConcept `bson:",omitempty" json:"subjectCodeableConcept,omitempty"`
	SubjectReference       Reference       `bson:",omitempty" json:"subjectReference,omitempty"`
}

func (out *StructureDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"StructureDefinition\"" {
		return fmt.Errorf("resourceType is not %s", "StructureDefinition")
	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["baseDefinition"]) > 0 {
		if err := go1.Unmarshal(asMap["baseDefinition"], &out.BaseDefinition); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
		return err
	}

	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["snapshot"]) > 0 {
		if err := go1.Unmarshal(asMap["snapshot"], &out.Snapshot); err != nil {
			return err
		}

	}
	if len(asMap["differential"]) > 0 {
		if err := go1.Unmarshal(asMap["differential"], &out.Differential); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["fhirVersion"]) > 0 {
		if err := go1.Unmarshal(asMap["fhirVersion"], &out.FhirVersion); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["kind"], &out.Kind); err != nil {
		return err
	}

	if len(asMap["contextInvariant"]) > 0 {
		if err := go1.Unmarshal(asMap["contextInvariant"], &out.ContextInvariant); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["keyword"]) > 0 {
		if err := go1.Unmarshal(asMap["keyword"], &out.Keyword); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["mapping"]) > 0 {
		if err := go1.Unmarshal(asMap["mapping"], &out.Mapping); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["abstract"], &out.Abstract); err != nil {
		return err
	}

	if len(asMap["derivation"]) > 0 {
		if err := go1.Unmarshal(asMap["derivation"], &out.Derivation); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["context"]) > 0 {
		if err := go1.Unmarshal(asMap["context"], &out.Context); err != nil {
			return err
		}

	}
	return nil
}

type StructureDefinition struct {
	Text              *Narrative   `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	StructureDefinitionVersionAlgorithmx
	Purpose          *string                          `bson:",omitempty" json:"purpose,omitempty"`                   // Explanation of why this structure definition is needed and why it has been designed as it has.
	Type             *string                          `binding:"required" bson:",omitempty" json:"type,omitempty"`   // The type this structure describes. If the derivation kind is 'specialization' then this is the master definition for a type, and there is always one of these (a data type, an extension, a resource, including abstract ones). Otherwise the structure definition is a constraint on the stated type (and in this case, the type cannot be an abstract type).  References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models, where they are required.
	BaseDefinition   *string                          `bson:",omitempty" json:"baseDefinition,omitempty"`            // An absolute URI that is the base structure from which this type is derived, either by specialization or constraint.
	Identifier       []*Identifier                    `bson:",omitempty" json:"identifier,omitempty"`                // A formal identifier that is used to identify this structure definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Status           *string                          `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this structure definition. Enables tracking the life-cycle of the content.
	Experimental     *bool                            `bson:",omitempty" json:"experimental,omitempty"`              // A Boolean value to indicate that this structure definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Description      *string                          `bson:",omitempty" json:"description,omitempty"`               // A free text natural language description of the structure definition from a consumer's perspective.
	Url              *string                          `binding:"required" bson:",omitempty" json:"url,omitempty"`    // An absolute URI that is used to identify this structure definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this structure definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the structure definition is stored on different servers.
	Copyright        *string                          `bson:",omitempty" json:"copyright,omitempty"`                 // A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure definition.  The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.
	Snapshot         *StructureDefinitionSnapshot     `binding:"omitempty" bson:",omitempty"`
	Differential     *StructureDefinitionDifferential `binding:"omitempty" bson:",omitempty"`
	Contained        []*Resource                      `bson:",omitempty" json:"contained,omitempty"`               // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Publisher        *string                          `bson:",omitempty" json:"publisher,omitempty"`               // The name of the organization or individual responsible for the release and ongoing maintenance of the structure definition.
	Contact          []*ContactDetail                 `bson:",omitempty" json:"contact,omitempty"`                 // Contact details to assist a user in finding and communicating with the publisher.
	FhirVersion      *string                          `bson:",omitempty" json:"fhirVersion,omitempty"`             // The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.6.0. for this version.
	Kind             *string                          `binding:"required" bson:",omitempty" json:"kind,omitempty"` // Defines the kind of structure that this definition is describing.
	ContextInvariant []*string                        `bson:",omitempty" json:"contextInvariant,omitempty"`        // A set of rules as FHIRPath Invariants about when the extension can be used (e.g. co-occurrence variants for the extension). All the rules must be true.
	Id               *primitive.ObjectID              `bson:"_id,omitempty" json:"id,omitempty"`                   // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Date             *DateTime                        `bson:",omitempty" json:"date,omitempty"`                    // The date  (and optionally time) when the structure definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure definition changes.
	UseContext       []*UsageContext                  `bson:",omitempty" json:"useContext,omitempty"`              // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure definition instances.
	CopyrightLabel   *string                          `bson:",omitempty" json:"copyrightLabel,omitempty"`          // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Jurisdiction     []*CodeableConcept               `bson:",omitempty" json:"jurisdiction,omitempty"`            // A legal or geographic region in which the structure definition is intended to be used.
	Keyword          []*Coding                        `bson:",omitempty" json:"keyword,omitempty"`                 // (DEPRECATED) A set of key words or terms from external terminologies that may be used to assist with indexing and searching of templates nby describing the use of this structure definition, or the content it describes.
	Meta             *Meta                            `bson:",omitempty" json:"meta,omitempty"`                    // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language         *string                          `bson:",omitempty" json:"language,omitempty"`                // The base language in which the resource is written.
	Name             *string                          `binding:"required" bson:",omitempty" json:"name,omitempty"` // A natural language name identifying the structure definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Title            *string                          `bson:",omitempty" json:"title,omitempty"`                   // A short, descriptive, user-friendly title for the structure definition.
	ImplicitRules    *string                          `bson:",omitempty" json:"implicitRules,omitempty"`           // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Mapping          *StructureDefinitionMapping      `binding:"omitempty" bson:",omitempty"`
	Abstract         *bool                            `binding:"required" bson:",omitempty" json:"abstract,omitempty"` // Whether structure this definition describes is abstract or not  - that is, whether the structure is not intended to be instantiated. For Resources and Data types, abstract types will never be exchanged  between systems.
	Derivation       *string                          `bson:",omitempty" json:"derivation,omitempty"`                  // How the type relates to the baseDefinition.
	Version          *string                          `bson:",omitempty" json:"version,omitempty"`                     // The identifier that is used to identify this version of the structure definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure definition author and is not expected to be globally unique. There is no expectation that versions can be placed in a lexicographical sequence, so authors are encouraged to populate the StructureDefinition.versionAlgorithm[x] element to enable comparisons. If there is no managed version available, authors can consider using ISO date/time syntax (e.g., '2023-01-01').
	Context          *StructureDefinitionContext      `binding:"omitempty" bson:",omitempty"`
	ResourceType     string                           `binding:"omitempty" bson:"-" json:"resourceType"`
}
type StructureDefinitionVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *StructureDefinitionSnapshot) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["element"], &out.Element); err != nil {
		return err
	}

	return nil
}

type StructureDefinitionSnapshot struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Element []ElementDefinition `binding:"required" bson:",omitempty" json:"element,omitempty"` // Captures constraints on each element within the resource.
}

func (out *StructureDefinitionDifferential) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["element"], &out.Element); err != nil {
		return err
	}

	return nil
}

type StructureDefinitionDifferential struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Element []*ElementDefinition `binding:"required" bson:",omitempty" json:"element,omitempty"` // Captures constraints on each element within the resource.
}

func (out *StructureDefinitionMapping) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["identity"], &out.Identity); err != nil {
		return err
	}

	if len(asMap["uri"]) > 0 {
		if err := go1.Unmarshal(asMap["uri"], &out.Uri); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["comment"]) > 0 {
		if err := go1.Unmarshal(asMap["comment"], &out.Comment); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type StructureDefinitionMapping struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identity  **primitive.ObjectID `binding:"required" bson:",omitempty" json:"identity,omitempty"` // An Internal id that is used to identify this mapping set when specific mappings are made.
	Uri       *string              `bson:",omitempty" json:"uri,omitempty"`                         // An absolute URI that identifies the specification that this mapping is expressed to.
	Name      *string              `bson:",omitempty" json:"name,omitempty"`                        // A name for the specification that is being mapped to.
	Comment   *string              `bson:",omitempty" json:"comment,omitempty"`                     // Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.
	Id        *string              `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension         `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *StructureDefinitionContext) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["expression"], &out.Expression); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type StructureDefinitionContext struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type       *string      `binding:"required" bson:",omitempty" json:"type,omitempty"`       // Defines how to interpret the expression that defines what the context of the extension is.
	Expression *string      `binding:"required" bson:",omitempty" json:"expression,omitempty"` // An expression that defines where an extension can be used in resources.
	Id         *string      `bson:"_id,omitempty" json:"id,omitempty"`                         // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension  []*Extension `bson:",omitempty" json:"extension,omitempty"`                     // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *StructureMap) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"StructureMap\"" {
		return fmt.Errorf("resourceType is not %s", "StructureMap")
	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["structure"]) > 0 {
		if err := go1.Unmarshal(asMap["structure"], &out.Structure); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
		return err
	}

	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["group"], &out.Group); err != nil {
		return err
	}

	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["import"]) > 0 {
		if err := go1.Unmarshal(asMap["import"], &out.Import); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["const"]) > 0 {
		if err := go1.Unmarshal(asMap["const"], &out.Const); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	return nil
}

type StructureMap struct {
	Identifier        []*Identifier      `bson:",omitempty" json:"identifier,omitempty"`        // A formal identifier that is used to identify this structure map when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Version           *string            `bson:",omitempty" json:"version,omitempty"`           // The identifier that is used to identify this version of the structure map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Jurisdiction      []*CodeableConcept `bson:",omitempty" json:"jurisdiction,omitempty"`      // A legal or geographic region in which the structure map is intended to be used.
	Language          *string            `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Contained         []*Resource        `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Title          *string                `bson:",omitempty" json:"title,omitempty"`          // A short, descriptive, user-friendly title for the structure map.
	CopyrightLabel *string                `bson:",omitempty" json:"copyrightLabel,omitempty"` // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Id             *primitive.ObjectID    `bson:"_id,omitempty" json:"id,omitempty"`          // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Experimental   *bool                  `bson:",omitempty" json:"experimental,omitempty"`   // A Boolean value to indicate that this structure map is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	UseContext     []*UsageContext        `bson:",omitempty" json:"useContext,omitempty"`     // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure map instances.
	Structure      *StructureMapStructure `binding:"omitempty" bson:",omitempty"`
	Url            *string                `binding:"required" bson:",omitempty" json:"url,omitempty"` // An absolute URI that is used to identify this structure map when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this structure map is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the structure map is stored on different servers.
	Copyright      *string                `bson:",omitempty" json:"copyright,omitempty"`              // A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure map.
	Group          *StructureMapGroup     `binding:"omitempty" bson:",omitempty"`
	Text           *Narrative             `bson:",omitempty" json:"text,omitempty"`      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension      []*Extension           `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Import         []*string              `bson:",omitempty" json:"import,omitempty"`    // Other maps used by this map (canonical URLs).
	Contact        []*ContactDetail       `bson:",omitempty" json:"contact,omitempty"`   // Contact details to assist a user in finding and communicating with the publisher.
	Const          *StructureMapConst     `binding:"omitempty" bson:",omitempty"`
	Meta           *Meta                  `bson:",omitempty" json:"meta,omitempty"`          // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules  *string                `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	StructureMapVersionAlgorithmx
	Name         *string   `binding:"required" bson:",omitempty" json:"name,omitempty"`   // A natural language name identifying the structure map. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Date         *DateTime `bson:",omitempty" json:"date,omitempty"`                      // The date  (and optionally time) when the structure map was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure map changes.
	Status       *string   `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this structure map. Enables tracking the life-cycle of the content.
	Publisher    *string   `bson:",omitempty" json:"publisher,omitempty"`                 // The name of the organization or individual responsible for the release and ongoing maintenance of the structure map.
	Description  *string   `bson:",omitempty" json:"description,omitempty"`               // A free text natural language description of the structure map from a consumer's perspective.
	Purpose      *string   `bson:",omitempty" json:"purpose,omitempty"`                   // Explanation of why this structure map is needed and why it has been designed as it has.
	ResourceType string    `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *StructureMapStructure) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["mode"], &out.Mode); err != nil {
		return err
	}

	if len(asMap["alias"]) > 0 {
		if err := go1.Unmarshal(asMap["alias"], &out.Alias); err != nil {
			return err
		}

	}
	if len(asMap["documentation"]) > 0 {
		if err := go1.Unmarshal(asMap["documentation"], &out.Documentation); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
		return err
	}

	return nil
}

type StructureMapStructure struct {
	Mode              *string      `binding:"required" bson:",omitempty" json:"mode,omitempty"` // How the referenced structure is used in this mapping.
	Alias             *string      `bson:",omitempty" json:"alias,omitempty"`                   // The name used for this type in the map.
	Documentation     *string      `bson:",omitempty" json:"documentation,omitempty"`           // Documentation that describes how the structure is used in the mapping.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`       /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Url *string `binding:"required" bson:",omitempty" json:"url,omitempty"` // The canonical reference to the structure.
}

func (out *StructureMapGroup) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["extends"]) > 0 {
		if err := go1.Unmarshal(asMap["extends"], &out.Extends); err != nil {
			return err
		}

	}
	if len(asMap["documentation"]) > 0 {
		if err := go1.Unmarshal(asMap["documentation"], &out.Documentation); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["input"], &out.Input); err != nil {
		return err
	}

	if len(asMap["rule"]) > 0 {
		if err := go1.Unmarshal(asMap["rule"], &out.Rule); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if len(asMap["typeMode"]) > 0 {
		if err := go1.Unmarshal(asMap["typeMode"], &out.TypeMode); err != nil {
			return err
		}

	}
	return nil
}

type StructureMapGroup struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Extends       **primitive.ObjectID    `bson:",omitempty" json:"extends,omitempty"`       // Another group that this group adds rules to.
	Documentation *string                 `bson:",omitempty" json:"documentation,omitempty"` // Additional supporting documentation that explains the purpose of the group and the types of mappings within it.
	Input         *StructureMapGroupInput `binding:"omitempty" bson:",omitempty"`
	Rule          *StructureMapGroupRule  `binding:"omitempty" bson:",omitempty"`
	Name          **primitive.ObjectID    `binding:"required" bson:",omitempty" json:"name,omitempty"` // A unique name for the group for the convenience of human readers.
	TypeMode      *string                 `bson:",omitempty" json:"typeMode,omitempty"`                // If this is the default rule set to apply for the source type or this combination of types.
}

func (out *StructureMapGroupInput) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["mode"], &out.Mode); err != nil {
		return err
	}

	if len(asMap["documentation"]) > 0 {
		if err := go1.Unmarshal(asMap["documentation"], &out.Documentation); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	return nil
}

type StructureMapGroupInput struct {
	Type              *string      `bson:",omitempty" json:"type,omitempty"`                    // Type for this instance of data.
	Mode              *string      `binding:"required" bson:",omitempty" json:"mode,omitempty"` // Mode for this instance of data.
	Documentation     *string      `bson:",omitempty" json:"documentation,omitempty"`           // Documentation for this instance of data.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`       /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name **primitive.ObjectID `binding:"required" bson:",omitempty" json:"name,omitempty"` // Name for this instance of data.
}

func (out *StructureMapGroupRule) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["rule"]) > 0 {
		if err := go1.Unmarshal(asMap["rule"], &out.Rule); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["target"]) > 0 {
		if err := go1.Unmarshal(asMap["target"], &out.Target); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
		return err
	}

	if len(asMap["dependent"]) > 0 {
		if err := go1.Unmarshal(asMap["dependent"], &out.Dependent); err != nil {
			return err
		}

	}
	if len(asMap["documentation"]) > 0 {
		if err := go1.Unmarshal(asMap["documentation"], &out.Documentation); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type StructureMapGroupRule struct {
	Rule              interface{}
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Target        *StructureMapGroupRuleTarget    `binding:"omitempty" bson:",omitempty"`
	Name          **primitive.ObjectID            `bson:",omitempty" json:"name,omitempty"` // Name of the rule for internal references.
	Source        *StructureMapGroupRuleSource    `binding:"omitempty" bson:",omitempty"`
	Dependent     *StructureMapGroupRuleDependent `binding:"omitempty" bson:",omitempty"`
	Documentation *string                         `bson:",omitempty" json:"documentation,omitempty"` // Documentation for this instance of data.
	Id            *string                         `bson:"_id,omitempty" json:"id,omitempty"`         // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension     []*Extension                    `bson:",omitempty" json:"extension,omitempty"`     // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *StructureMapGroupRuleTarget) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["listRuleId"]) > 0 {
		if err := go1.Unmarshal(asMap["listRuleId"], &out.ListRuleId); err != nil {
			return err
		}

	}
	if len(asMap["transform"]) > 0 {
		if err := go1.Unmarshal(asMap["transform"], &out.Transform); err != nil {
			return err
		}

	}
	if len(asMap["parameter"]) > 0 {
		if err := go1.Unmarshal(asMap["parameter"], &out.Parameter); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["variable"]) > 0 {
		if err := go1.Unmarshal(asMap["variable"], &out.Variable); err != nil {
			return err
		}

	}
	if len(asMap["listMode"]) > 0 {
		if err := go1.Unmarshal(asMap["listMode"], &out.ListMode); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["context"]) > 0 {
		if err := go1.Unmarshal(asMap["context"], &out.Context); err != nil {
			return err
		}

	}
	if len(asMap["element"]) > 0 {
		if err := go1.Unmarshal(asMap["element"], &out.Element); err != nil {
			return err
		}

	}
	return nil
}

type StructureMapGroupRuleTarget struct {
	ListRuleId        **primitive.ObjectID                  `bson:",omitempty" json:"listRuleId,omitempty"` // Internal rule reference for shared list items.
	Transform         *string                               `bson:",omitempty" json:"transform,omitempty"`  // How the data is copied / created.
	Parameter         *StructureMapGroupRuleTargetParameter `binding:"omitempty" bson:",omitempty"`
	Id                *string                               `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                          `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Variable          **primitive.ObjectID                  `bson:",omitempty" json:"variable,omitempty"`          // Named context for field, if desired, and a field is specified.
	ListMode          []*string                             `bson:",omitempty" json:"listMode,omitempty"`          // If field is a list, how to manage the list.
	ModifierExtension []*Extension                          `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Context *string `bson:",omitempty" json:"context,omitempty"` // Variable this rule applies to.
	Element *string `bson:",omitempty" json:"element,omitempty"` // Field to create in the context.
}

func (out *StructureMapGroupRuleTargetParameter) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["valueId"], &out.ValueId); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDecimal"], &out.ValueDecimal); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDate"], &out.ValueDate); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTime"], &out.ValueTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDateTime"], &out.ValueDateTime); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	return nil
}

type StructureMapGroupRuleTargetParameter struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	StructureMapGroupRuleTargetParameterValuex
}
type StructureMapGroupRuleTargetParameterValuex struct {
	ValueId       *primitive.ObjectID `bson:",omitempty" json:"valueId,omitempty"`
	ValueString   string              `bson:",omitempty" json:"valueString,omitempty"`
	ValueBoolean  bool                `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueInteger  int                 `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueDecimal  float64             `bson:",omitempty" json:"valueDecimal,omitempty"`
	ValueDate     Date                `bson:",omitempty" json:"valueDate,omitempty"`
	ValueTime     Time                `bson:",omitempty" json:"valueTime,omitempty"`
	ValueDateTime DateTime            `bson:",omitempty" json:"valueDateTime,omitempty"`
}

func (out *StructureMapGroupRuleSource) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["context"], &out.Context); err != nil {
		return err
	}

	if len(asMap["min"]) > 0 {
		if err := go1.Unmarshal(asMap["min"], &out.Min); err != nil {
			return err
		}

	}
	if len(asMap["max"]) > 0 {
		if err := go1.Unmarshal(asMap["max"], &out.Max); err != nil {
			return err
		}

	}
	if len(asMap["defaultValue"]) > 0 {
		if err := go1.Unmarshal(asMap["defaultValue"], &out.DefaultValue); err != nil {
			return err
		}

	}
	if len(asMap["element"]) > 0 {
		if err := go1.Unmarshal(asMap["element"], &out.Element); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["variable"]) > 0 {
		if err := go1.Unmarshal(asMap["variable"], &out.Variable); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["listMode"]) > 0 {
		if err := go1.Unmarshal(asMap["listMode"], &out.ListMode); err != nil {
			return err
		}

	}
	if len(asMap["condition"]) > 0 {
		if err := go1.Unmarshal(asMap["condition"], &out.Condition); err != nil {
			return err
		}

	}
	if len(asMap["check"]) > 0 {
		if err := go1.Unmarshal(asMap["check"], &out.Check); err != nil {
			return err
		}

	}
	if len(asMap["logMessage"]) > 0 {
		if err := go1.Unmarshal(asMap["logMessage"], &out.LogMessage); err != nil {
			return err
		}

	}
	return nil
}

type StructureMapGroupRuleSource struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Context      **primitive.ObjectID `binding:"required" bson:",omitempty" json:"context,omitempty"` // Type or variable this rule applies to.
	Min          *int                 `bson:",omitempty" json:"min,omitempty"`                        // Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content.
	Max          *string              `bson:",omitempty" json:"max,omitempty"`                        // Specified maximum cardinality for the element - a number or a "*". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value).
	DefaultValue *string              `bson:",omitempty" json:"defaultValue,omitempty"`               // A value to use if there is no existing value in the source object.
	Element      *string              `bson:",omitempty" json:"element,omitempty"`                    // Optional field for this source.
	Extension    []*Extension         `bson:",omitempty" json:"extension,omitempty"`                  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Type         *string              `bson:",omitempty" json:"type,omitempty"`                       // Specified type for the element. This works as a condition on the mapping - use for polymorphic elements.
	Variable     **primitive.ObjectID `bson:",omitempty" json:"variable,omitempty"`                   // Named context for field, if a field is specified.
	Id           *string              `bson:"_id,omitempty" json:"id,omitempty"`                      // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ListMode     *string              `bson:",omitempty" json:"listMode,omitempty"`                   // How to handle the list mode for this element.
	Condition    *string              `bson:",omitempty" json:"condition,omitempty"`                  // FHIRPath expression  - must be true or the rule does not apply.
	Check        *string              `bson:",omitempty" json:"check,omitempty"`                      // FHIRPath expression  - must be true or the mapping engine throws an error instead of completing.
	LogMessage   *string              `bson:",omitempty" json:"logMessage,omitempty"`                 // A FHIRPath expression which specifies a message to put in the transform log when content matching the source rule is found.
}

func (out *StructureMapGroupRuleDependent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["parameter"], &out.Parameter); err != nil {
		return err
	}

	return nil
}

type StructureMapGroupRuleDependent struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name      **primitive.ObjectID `binding:"required" bson:",omitempty" json:"name,omitempty"` // Name of a rule or group to apply.
	Parameter interface{}
}

func (out *StructureMapConst) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["value"]) > 0 {
		if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type StructureMapConst struct {
	Name              **primitive.ObjectID `bson:",omitempty" json:"name,omitempty"`              // Other maps used by this map (canonical URLs).
	Value             *string              `bson:",omitempty" json:"value,omitempty"`             // A FHIRPath expression that is the value of this variable.
	Id                *string              `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension         `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type StructureMapVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *Subscription) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Subscription\"" {
		return fmt.Errorf("resourceType is not %s", "Subscription")
	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["parameter"]) > 0 {
		if err := go1.Unmarshal(asMap["parameter"], &out.Parameter); err != nil {
			return err
		}

	}
	if len(asMap["content"]) > 0 {
		if err := go1.Unmarshal(asMap["content"], &out.Content); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["end"]) > 0 {
		if err := go1.Unmarshal(asMap["end"], &out.End); err != nil {
			return err
		}

	}
	if len(asMap["managingEntity"]) > 0 {
		if err := go1.Unmarshal(asMap["managingEntity"], &out.ManagingEntity); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["filterBy"]) > 0 {
		if err := go1.Unmarshal(asMap["filterBy"], &out.FilterBy); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["channelType"], &out.ChannelType); err != nil {
		return err
	}

	if len(asMap["timeout"]) > 0 {
		if err := go1.Unmarshal(asMap["timeout"], &out.Timeout); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["endpoint"]) > 0 {
		if err := go1.Unmarshal(asMap["endpoint"], &out.Endpoint); err != nil {
			return err
		}

	}
	if len(asMap["heartbeatPeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["heartbeatPeriod"], &out.HeartbeatPeriod); err != nil {
			return err
		}

	}
	if len(asMap["contentType"]) > 0 {
		if err := go1.Unmarshal(asMap["contentType"], &out.ContentType); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["topic"], &out.Topic); err != nil {
		return err
	}

	if len(asMap["maxCount"]) > 0 {
		if err := go1.Unmarshal(asMap["maxCount"], &out.MaxCount); err != nil {
			return err
		}

	}
	return nil
}

type Subscription struct {
	Contained         []*Resource            `bson:",omitempty" json:"contained,omitempty"` // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Id                *primitive.ObjectID    `bson:"_id,omitempty" json:"id,omitempty"`     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Text              *Narrative             `bson:",omitempty" json:"text,omitempty"`      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Parameter         *SubscriptionParameter `binding:"omitempty" bson:",omitempty"`
	Content           *string                `bson:",omitempty" json:"content,omitempty"`                   // How much of the resource content to deliver in the notification payload. The choices are an empty payload, only the resource id, or the full resource content.
	Status            *string                `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of the subscription, which marks the server state for managing the subscription.
	Contact           []*ContactPoint        `bson:",omitempty" json:"contact,omitempty"`                   // Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
	End               *time.Time             `bson:",omitempty" json:"end,omitempty"`                       // The time for the server to turn the subscription off.
	ManagingEntity    *Reference             `bson:",omitempty" json:"managingEntity,omitempty"`            // Entity with authorization to make subsequent revisions to the Subscription and also determines what data the subscription is authorized to disclose.
	ImplicitRules     *string                `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Extension         []*Extension           `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension           `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name            *string               `bson:",omitempty" json:"name,omitempty"` // A natural language name identifying the subscription.
	FilterBy        *SubscriptionFilterBy `binding:"omitempty" bson:",omitempty"`
	ChannelType     *Coding               `binding:"required" bson:",omitempty" json:"channelType,omitempty"` // The type of channel to send notifications on.
	Timeout         *int                  `bson:",omitempty" json:"timeout,omitempty"`                        // If present, the maximum amount of time a server will allow before failing a notification attempt.
	Reason          *string               `bson:",omitempty" json:"reason,omitempty"`                         // A description of why this subscription is defined.
	Endpoint        *url.URL              `bson:",omitempty" json:"endpoint,omitempty"`                       // The url that describes the actual end-point to send notifications to.
	HeartbeatPeriod *int                  `bson:",omitempty" json:"heartbeatPeriod,omitempty"`                // If present, a 'heartbeat' notification (keep-alive) is sent via this channel with an interval period equal to this elements integer value in seconds.  If not present, a heartbeat notification is not sent.
	ContentType     *string               `bson:",omitempty" json:"contentType,omitempty"`                    /*
	The MIME type to send the payload in - e.g., `application/fhir+xml` or `application/fhir+json`. Note that:

	* clients may request notifications in a specific FHIR version by using the [FHIR Version Parameter](http.html#version-parameter) - e.g., `application/fhir+json; fhirVersion=4.0`.

	* additional MIME types can be allowed by channels - e.g., `text/plain` and `text/html` are defined by the Email channel.
	*/
	Meta         *Meta         `bson:",omitempty" json:"meta,omitempty"`                     // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language     *string       `bson:",omitempty" json:"language,omitempty"`                 // The base language in which the resource is written.
	Identifier   []*Identifier `bson:",omitempty" json:"identifier,omitempty"`               // A formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Topic        *string       `binding:"required" bson:",omitempty" json:"topic,omitempty"` // The reference to the subscription topic to be notified about.
	MaxCount     *int          `bson:",omitempty" json:"maxCount,omitempty"`                 // If present, the maximum number of events that will be included in a notification bundle. Note that this is not a strict limit on the number of entries in a bundle, as dependent resources can be included.
	ResourceType string        `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *SubscriptionParameter) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type SubscriptionParameter struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name      *string      `binding:"required" bson:",omitempty" json:"name,omitempty"`  // Parameter name for information passed to the channel for notifications, for example in the case of a REST hook wanting to pass through an authorization header, the name would be Authorization.
	Value     *string      `binding:"required" bson:",omitempty" json:"value,omitempty"` // Parameter value for information passed to the channel for notifications, for example in the case of a REST hook wanting to pass through an authorization header, the value would be `Bearer 0193...`.
	Id        *string      `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"`                // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *SubscriptionFilterBy) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["resourceType"]) > 0 {
		if err := go1.Unmarshal(asMap["resourceType"], &out.ResourceType); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["filterParameter"], &out.FilterParameter); err != nil {
		return err
	}

	if len(asMap["comparator"]) > 0 {
		if err := go1.Unmarshal(asMap["comparator"], &out.Comparator); err != nil {
			return err
		}

	}
	if len(asMap["modifier"]) > 0 {
		if err := go1.Unmarshal(asMap["modifier"], &out.Modifier); err != nil {
			return err
		}

	}
	return nil
}

type SubscriptionFilterBy struct {
	Value             *string      `binding:"required" bson:",omitempty" json:"value,omitempty"` // The literal value or resource path as is legal in search - for example, `Patient/123` or `le1950`.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`        /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	ResourceType    *string `bson:",omitempty" json:"resourceType,omitempty"`                       // A resource listed in the `SubscriptionTopic` this `Subscription` references (`SubscriptionTopic.canFilterBy.resource`). This element can be used to differentiate filters for topics that include more than one resource type.
	FilterParameter *string `binding:"required" bson:",omitempty" json:"filterParameter,omitempty"` // The filter as defined in the `SubscriptionTopic.canFilterBy.filterParameter` element.
	Comparator      *string `bson:",omitempty" json:"comparator,omitempty"`                         // Comparator applied to this filter parameter.
	Modifier        *string `bson:",omitempty" json:"modifier,omitempty"`                           // Modifier applied to this filter parameter.
}

func (out *SubscriptionStatus) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"SubscriptionStatus\"" {
		return fmt.Errorf("resourceType is not %s", "SubscriptionStatus")
	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["error"]) > 0 {
		if err := go1.Unmarshal(asMap["error"], &out.Error); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["eventsSinceSubscriptionStart"]) > 0 {
		if err := go1.Unmarshal(asMap["eventsSinceSubscriptionStart"], &out.EventsSinceSubscriptionStart); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["subscription"], &out.Subscription); err != nil {
		return err
	}

	if len(asMap["topic"]) > 0 {
		if err := go1.Unmarshal(asMap["topic"], &out.Topic); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["notificationEvent"]) > 0 {
		if err := go1.Unmarshal(asMap["notificationEvent"], &out.NotificationEvent); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	return nil
}

type SubscriptionStatus struct {
	ImplicitRules     *string            `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text              *Narrative         `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Error             []*CodeableConcept `bson:",omitempty" json:"error,omitempty"`             // A record of errors that occurred when the server processed a notification.
	Language          *string            `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Contained         []*Resource        `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	EventsSinceSubscriptionStart *int64                               `bson:",omitempty" json:"eventsSinceSubscriptionStart,omitempty"`    // The total number of actual events which have been generated since the Subscription was created (inclusive of this notification) - regardless of how many have been successfully communicated.  This number is NOT incremented for handshake and heartbeat notifications.
	Subscription                 *Reference                           `binding:"required" bson:",omitempty" json:"subscription,omitempty"` // The reference to the Subscription which generated this notification.
	Topic                        *string                              `bson:",omitempty" json:"topic,omitempty"`                           // The reference to the SubscriptionTopic for the Subscription which generated this notification.
	Id                           *primitive.ObjectID                  `bson:"_id,omitempty" json:"id,omitempty"`                           // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta                         *Meta                                `bson:",omitempty" json:"meta,omitempty"`                            // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Status                       *string                              `bson:",omitempty" json:"status,omitempty"`                          // The status of the subscription, which marks the server state for managing the subscription.
	NotificationEvent            *SubscriptionStatusNotificationEvent `binding:"omitempty" bson:",omitempty"`
	Extension                    []*Extension                         `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Type                         *string                              `binding:"required" bson:",omitempty" json:"type,omitempty"` // The type of event being conveyed with this notification.
	ResourceType                 string                               `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *SubscriptionStatusNotificationEvent) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["eventNumber"], &out.EventNumber); err != nil {
		return err
	}

	if len(asMap["timestamp"]) > 0 {
		if err := go1.Unmarshal(asMap["timestamp"], &out.Timestamp); err != nil {
			return err
		}

	}
	if len(asMap["focus"]) > 0 {
		if err := go1.Unmarshal(asMap["focus"], &out.Focus); err != nil {
			return err
		}

	}
	if len(asMap["additionalContext"]) > 0 {
		if err := go1.Unmarshal(asMap["additionalContext"], &out.AdditionalContext); err != nil {
			return err
		}

	}
	return nil
}

type SubscriptionStatusNotificationEvent struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	EventNumber       *int64       `binding:"required" bson:",omitempty" json:"eventNumber,omitempty"` // Either the sequential number of this event in this subscription context or a relative event number for this notification.
	Timestamp         *time.Time   `bson:",omitempty" json:"timestamp,omitempty"`                      // The actual time this event occurred on the server.
	Focus             *Reference   `bson:",omitempty" json:"focus,omitempty"`                          // The focus of this event. While this will usually be a reference to the focus resource of the event, it MAY contain a reference to a non-FHIR object.
	AdditionalContext []*Reference `bson:",omitempty" json:"additionalContext,omitempty"`              // Additional context information for this event. Generally, this will contain references to additional resources included with the event (e.g., the Patient relevant to an Encounter), however it MAY refer to non-FHIR objects.
}

func (out *SubscriptionTopic) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"SubscriptionTopic\"" {
		return fmt.Errorf("resourceType is not %s", "SubscriptionTopic")
	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["approvalDate"]) > 0 {
		if err := go1.Unmarshal(asMap["approvalDate"], &out.ApprovalDate); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
		return err
	}

	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["resourceTrigger"]) > 0 {
		if err := go1.Unmarshal(asMap["resourceTrigger"], &out.ResourceTrigger); err != nil {
			return err
		}

	}
	if len(asMap["canFilterBy"]) > 0 {
		if err := go1.Unmarshal(asMap["canFilterBy"], &out.CanFilterBy); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["notificationShape"]) > 0 {
		if err := go1.Unmarshal(asMap["notificationShape"], &out.NotificationShape); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["eventTrigger"]) > 0 {
		if err := go1.Unmarshal(asMap["eventTrigger"], &out.EventTrigger); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["lastReviewDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastReviewDate"], &out.LastReviewDate); err != nil {
			return err
		}

	}
	if len(asMap["effectivePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["derivedFrom"]) > 0 {
		if err := go1.Unmarshal(asMap["derivedFrom"], &out.DerivedFrom); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	return nil
}

type SubscriptionTopic struct {
	Name              *string                           `bson:",omitempty" json:"name,omitempty"`                   // A natural language name identifying the subscription topic This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Title             *string                           `bson:",omitempty" json:"title,omitempty"`                  // A short, descriptive, user-friendly title for the subscription topic.  For example, "admission".
	Id                *primitive.ObjectID               `bson:"_id,omitempty" json:"id,omitempty"`                  // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language          *string                           `bson:",omitempty" json:"language,omitempty"`               // The base language in which the resource is written.
	Contained         []*Resource                       `bson:",omitempty" json:"contained,omitempty"`              // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	CopyrightLabel    *string                           `bson:",omitempty" json:"copyrightLabel,omitempty"`         // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	ApprovalDate      *Date                             `bson:",omitempty" json:"approvalDate,omitempty"`           // The date on which the asset content was approved by the publisher. Approval happens once when the content is officially approved for usage.
	ImplicitRules     *string                           `bson:",omitempty" json:"implicitRules,omitempty"`          // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Identifier        []*Identifier                     `bson:",omitempty" json:"identifier,omitempty"`             // Business identifiers assigned to this subscription topic by the performer and/or other systems.  These identifiers remain constant as the resource is updated and propagates from server to server.
	Purpose           *string                           `bson:",omitempty" json:"purpose,omitempty"`                // Explains why this Topic is needed and why it has been designed as it has.
	Contact           []*ContactDetail                  `bson:",omitempty" json:"contact,omitempty"`                // Contact details to assist a user in finding and communicating with the publisher.
	Url               *string                           `binding:"required" bson:",omitempty" json:"url,omitempty"` // An absolute URI that is used to identify this subscription topic when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this subscription topic is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the subscription topic is stored on different servers.
	Version           *string                           `bson:",omitempty" json:"version,omitempty"`                // The identifier that is used to identify this version of the subscription topic when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the Topic author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions are orderable.
	Date              *DateTime                         `bson:",omitempty" json:"date,omitempty"`                   // The date (and optionally time) when the subscription topic was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the subscription topic changes.
	ResourceTrigger   *SubscriptionTopicResourceTrigger `binding:"omitempty" bson:",omitempty"`
	CanFilterBy       *SubscriptionTopicCanFilterBy     `binding:"omitempty" bson:",omitempty"`
	Meta              *Meta                             `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Text              *Narrative                        `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Copyright         *string                           `bson:",omitempty" json:"copyright,omitempty"`         // A copyright statement relating to the SubscriptionTopic and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the SubscriptionTopic.
	ModifierExtension []*Extension                      `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Description       *string                             `bson:",omitempty" json:"description,omitempty"` // A free text natural language description of the Topic from the consumer's perspective.
	NotificationShape *SubscriptionTopicNotificationShape `binding:"omitempty" bson:",omitempty"`
	SubscriptionTopicVersionAlgorithmx
	Status          *string                        `binding:"required" bson:",omitempty" json:"status,omitempty"` // The current state of the SubscriptionTopic.
	EventTrigger    *SubscriptionTopicEventTrigger `binding:"omitempty" bson:",omitempty"`
	Publisher       *string                        `bson:",omitempty" json:"publisher,omitempty"`       // Helps establish the "authority/credibility" of the SubscriptionTopic.  May also allow for contact.
	UseContext      []*UsageContext                `bson:",omitempty" json:"useContext,omitempty"`      // The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of code system definitions.
	Jurisdiction    []*CodeableConcept             `bson:",omitempty" json:"jurisdiction,omitempty"`    // A jurisdiction in which the Topic is intended to be used.
	LastReviewDate  *Date                          `bson:",omitempty" json:"lastReviewDate,omitempty"`  // The date on which the asset content was last reviewed. Review happens periodically after that, but doesn't change the original approval date.
	EffectivePeriod *Period                        `bson:",omitempty" json:"effectivePeriod,omitempty"` // The period during which the SubscriptionTopic content was or is planned to be effective.
	Extension       []*Extension                   `bson:",omitempty" json:"extension,omitempty"`       // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	DerivedFrom     []*string                      `bson:",omitempty" json:"derivedFrom,omitempty"`     // The canonical URL pointing to another FHIR-defined SubscriptionTopic that is adhered to in whole or in part by this SubscriptionTopic.
	Experimental    *bool                          `bson:",omitempty" json:"experimental,omitempty"`    // A flag to indicate that this TopSubscriptionTopicic is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
	ResourceType    string                         `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *SubscriptionTopicResourceTrigger) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["resource"], &out.Resource); err != nil {
		return err
	}

	if len(asMap["supportedInteraction"]) > 0 {
		if err := go1.Unmarshal(asMap["supportedInteraction"], &out.SupportedInteraction); err != nil {
			return err
		}

	}
	if len(asMap["queryCriteria"]) > 0 {
		if err := go1.Unmarshal(asMap["queryCriteria"], &out.QueryCriteria); err != nil {
			return err
		}

	}
	if len(asMap["fhirPathCriteria"]) > 0 {
		if err := go1.Unmarshal(asMap["fhirPathCriteria"], &out.FhirPathCriteria); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type SubscriptionTopicResourceTrigger struct {
	Description          *string                                        `bson:",omitempty" json:"description,omitempty"`                 // The human readable description of this resource trigger for the SubscriptionTopic -  for example, "An Encounter enters the 'in-progress' state".
	Resource             *string                                        `binding:"required" bson:",omitempty" json:"resource,omitempty"` // URL of the Resource that is the type used in this resource trigger.  Relative URLs are relative to the StructureDefinition root of the implemented FHIR version (e.g., http://hl7.org/fhir/StructureDefinition). For example, "Patient" maps to http://hl7.org/fhir/StructureDefinition/Patient.  For more information, see <a href="elementdefinition-definitions.html#ElementDefinition.type.code">ElementDefinition.type.code</a>.
	SupportedInteraction []*string                                      `bson:",omitempty" json:"supportedInteraction,omitempty"`        // The FHIR RESTful interaction which can be used to trigger a notification for the SubscriptionTopic. Multiple values are considered OR joined (e.g., CREATE or UPDATE). If not present, all supported interactions are assumed.
	QueryCriteria        *SubscriptionTopicResourceTriggerQueryCriteria `binding:"omitempty" bson:",omitempty"`
	FhirPathCriteria     *string                                        `bson:",omitempty" json:"fhirPathCriteria,omitempty"`  // The FHIRPath based rules that the server should use to determine when to trigger a notification for this topic.
	Id                   *string                                        `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension            []*Extension                                   `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension    []*Extension                                   `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *SubscriptionTopicResourceTriggerQueryCriteria) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["previous"]) > 0 {
		if err := go1.Unmarshal(asMap["previous"], &out.Previous); err != nil {
			return err
		}

	}
	if len(asMap["resultForCreate"]) > 0 {
		if err := go1.Unmarshal(asMap["resultForCreate"], &out.ResultForCreate); err != nil {
			return err
		}

	}
	if len(asMap["current"]) > 0 {
		if err := go1.Unmarshal(asMap["current"], &out.Current); err != nil {
			return err
		}

	}
	if len(asMap["resultForDelete"]) > 0 {
		if err := go1.Unmarshal(asMap["resultForDelete"], &out.ResultForDelete); err != nil {
			return err
		}

	}
	if len(asMap["requireBoth"]) > 0 {
		if err := go1.Unmarshal(asMap["requireBoth"], &out.RequireBoth); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type SubscriptionTopicResourceTriggerQueryCriteria struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Previous        *string      `bson:",omitempty" json:"previous,omitempty"`        // The FHIR query based rules are applied to the previous resource state (e.g., state before an update).
	ResultForCreate *string      `bson:",omitempty" json:"resultForCreate,omitempty"` // For `create` interactions, should the `previous` criteria count as an automatic pass or an automatic fail. If not present, the testing behavior during `create` interactions is unspecified (server discretion).
	Current         *string      `bson:",omitempty" json:"current,omitempty"`         // The FHIR query based rules are applied to the current resource state (e.g., state after an update).
	ResultForDelete *string      `bson:",omitempty" json:"resultForDelete,omitempty"` // For 'delete' interactions, should the 'current' query criteria count as an automatic pass or an automatic fail. If not present, the testing behavior during `delete` interactions is unspecified (server discretion).
	RequireBoth     *bool        `bson:",omitempty" json:"requireBoth,omitempty"`     // If set to `true`, both the `current` and `previous` query criteria must evaluate `true` to trigger a notification for this topic.  If set to `false` or not present, a notification for this topic will be triggered if either the `current` or `previous` tests evaluate to `true`.
	Id              *string      `bson:"_id,omitempty" json:"id,omitempty"`           // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension       []*Extension `bson:",omitempty" json:"extension,omitempty"`       // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *SubscriptionTopicCanFilterBy) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["resource"]) > 0 {
		if err := go1.Unmarshal(asMap["resource"], &out.Resource); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["filterParameter"], &out.FilterParameter); err != nil {
		return err
	}

	if len(asMap["filterDefinition"]) > 0 {
		if err := go1.Unmarshal(asMap["filterDefinition"], &out.FilterDefinition); err != nil {
			return err
		}

	}
	if len(asMap["modifier"]) > 0 {
		if err := go1.Unmarshal(asMap["modifier"], &out.Modifier); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["comparator"]) > 0 {
		if err := go1.Unmarshal(asMap["comparator"], &out.Comparator); err != nil {
			return err
		}

	}
	return nil
}

type SubscriptionTopicCanFilterBy struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                          // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Resource          *string      `bson:",omitempty" json:"resource,omitempty"`                           // URL of the Resource that is the type used in this filter. This is the "focus" of the topic (or one of them if there are more than one). It will be the same, a generality, or a specificity of SubscriptionTopic.resourceTrigger.resource or SubscriptionTopic.eventTrigger.resource when they are present.
	FilterParameter   *string      `binding:"required" bson:",omitempty" json:"filterParameter,omitempty"` // Either the canonical URL to a search parameter (like "http://hl7.org/fhir/SearchParameter/encounter-patient") or topic-defined parameter (like "hub.event") which is a label for the filter.
	FilterDefinition  *string      `bson:",omitempty" json:"filterDefinition,omitempty"`                   // Either the canonical URL to a search parameter (like "http://hl7.org/fhir/SearchParameter/encounter-patient") or the officially-defined URI for a shared filter concept (like "http://example.org/concepts/shared-common-event").
	Modifier          []*string    `bson:",omitempty" json:"modifier,omitempty"`                           // Modifiers allowed for the filter parameter.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                              // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`                  /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Description *string   `bson:",omitempty" json:"description,omitempty"` // Description of how this filtering parameter is intended to be used.
	Comparator  []*string `bson:",omitempty" json:"comparator,omitempty"`  // Comparators allowed for the filter parameter.
}

func (out *SubscriptionTopicNotificationShape) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["resource"], &out.Resource); err != nil {
		return err
	}

	if len(asMap["include"]) > 0 {
		if err := go1.Unmarshal(asMap["include"], &out.Include); err != nil {
			return err
		}

	}
	if len(asMap["revInclude"]) > 0 {
		if err := go1.Unmarshal(asMap["revInclude"], &out.RevInclude); err != nil {
			return err
		}

	}
	return nil
}

type SubscriptionTopicNotificationShape struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Resource   *string   `binding:"required" bson:",omitempty" json:"resource,omitempty"` // URL of the Resource that is the type used in this shape. This is the 'focus' resource of the topic (or one of them if there are more than one) and the root resource for this shape definition. It will be the same, a generality, or a specificity of SubscriptionTopic.resourceTrigger.resource or SubscriptionTopic.eventTrigger.resource when they are present.
	Include    []*string `bson:",omitempty" json:"include,omitempty"`                     // Search-style _include directives, rooted in the resource for this shape. Servers SHOULD include resources listed here, if they exist and the user is authorized to receive them.  Clients SHOULD be prepared to receive these additional resources, but SHALL function properly without them.
	RevInclude []*string `bson:",omitempty" json:"revInclude,omitempty"`                  // Search-style _revinclude directives, rooted in the resource for this shape. Servers SHOULD include resources listed here, if they exist and the user is authorized to receive them.  Clients SHOULD be prepared to receive these additional resources, but SHALL function properly without them.
}
type SubscriptionTopicVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *SubscriptionTopicEventTrigger) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["event"], &out.Event); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["resource"], &out.Resource); err != nil {
		return err
	}

	return nil
}

type SubscriptionTopicEventTrigger struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Description *string          `bson:",omitempty" json:"description,omitempty"`                 // The human readable description of an event to trigger a notification for the SubscriptionTopic - for example, "Patient Admission, as defined in HL7v2 via message ADT^A01". Multiple values are considered OR joined (e.g., matching any single event listed).
	Event       *CodeableConcept `binding:"required" bson:",omitempty" json:"event,omitempty"`    // A well-defined event which can be used to trigger notifications from the SubscriptionTopic.
	Resource    *string          `binding:"required" bson:",omitempty" json:"resource,omitempty"` // URL of the Resource that is the focus type used in this event trigger.  Relative URLs are relative to the StructureDefinition root of the implemented FHIR version (e.g., http://hl7.org/fhir/StructureDefinition). For example, "Patient" maps to http://hl7.org/fhir/StructureDefinition/Patient.  For more information, see <a href="elementdefinition-definitions.html#ElementDefinition.type.code">ElementDefinition.type.code</a>.
}

func (out *Substance) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Substance\"" {
		return fmt.Errorf("resourceType is not %s", "Substance")
	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["expiry"]) > 0 {
		if err := go1.Unmarshal(asMap["expiry"], &out.Expiry); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["ingredient"]) > 0 {
		if err := go1.Unmarshal(asMap["ingredient"], &out.Ingredient); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["instance"], &out.Instance); err != nil {
		return err
	}

	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type Substance struct {
	Quantity          *Quantity          `bson:",omitempty" json:"quantity,omitempty"`          // The amount of the substance.
	ImplicitRules     *string            `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text              *Narrative         `bson:",omitempty" json:"text,omitempty"`              // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Status            *string            `bson:",omitempty" json:"status,omitempty"`            // A code to indicate if the substance is actively used.
	Category          []*CodeableConcept `bson:",omitempty" json:"category,omitempty"`          // A code that classifies the general type of substance.  This is used  for searching, sorting and display purposes.
	Expiry            *DateTime          `bson:",omitempty" json:"expiry,omitempty"`            // When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.
	ModifierExtension []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier   []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`              // Unique identifier for the substance. For an instance, an identifier associated with the package/container (usually a label affixed directly).
	Code         *CodeableReference   `binding:"required" bson:",omitempty" json:"code,omitempty"` // A code (or set of codes) that identify this substance.
	Description  *string              `bson:",omitempty" json:"description,omitempty"`             // A description of the substance - its appearance, handling requirements, and other usage notes.
	Ingredient   *SubstanceIngredient `binding:"omitempty" bson:",omitempty"`
	Id           *primitive.ObjectID  `bson:"_id,omitempty" json:"id,omitempty"`                       // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta         *Meta                `bson:",omitempty" json:"meta,omitempty"`                        // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language     *string              `bson:",omitempty" json:"language,omitempty"`                    // The base language in which the resource is written.
	Contained    []*Resource          `bson:",omitempty" json:"contained,omitempty"`                   // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Instance     *bool                `binding:"required" bson:",omitempty" json:"instance,omitempty"` // A boolean to indicate if this an instance of a substance or a kind of one (a definition).
	Extension    []*Extension         `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ResourceType string               `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *SubstanceIngredient) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["substanceCodeableConcept"], &out.SubstanceCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["substanceReference"], &out.SubstanceReference); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "substance[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceIngredient struct {
	SubstanceIngredientSubstancex
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Quantity *Ratio `bson:",omitempty" json:"quantity,omitempty"` // The amount of the ingredient in the substance - a concentration ratio.
}
type SubstanceIngredientSubstancex struct {
	SubstanceCodeableConcept CodeableConcept `bson:",omitempty" json:"substanceCodeableConcept,omitempty"`
	SubstanceReference       Reference       `bson:",omitempty" json:"substanceReference,omitempty"`
}

func (out *SubstanceDefinition) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"SubstanceDefinition\"" {
		return fmt.Errorf("resourceType is not %s", "SubstanceDefinition")
	}
	if len(asMap["nucleicAcid"]) > 0 {
		if err := go1.Unmarshal(asMap["nucleicAcid"], &out.NucleicAcid); err != nil {
			return err
		}

	}
	if len(asMap["polymer"]) > 0 {
		if err := go1.Unmarshal(asMap["polymer"], &out.Polymer); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["sourceMaterial"]) > 0 {
		if err := go1.Unmarshal(asMap["sourceMaterial"], &out.SourceMaterial); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["informationSource"]) > 0 {
		if err := go1.Unmarshal(asMap["informationSource"], &out.InformationSource); err != nil {
			return err
		}

	}
	if len(asMap["grade"]) > 0 {
		if err := go1.Unmarshal(asMap["grade"], &out.Grade); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["referenceInformation"]) > 0 {
		if err := go1.Unmarshal(asMap["referenceInformation"], &out.ReferenceInformation); err != nil {
			return err
		}

	}
	if len(asMap["molecularWeight"]) > 0 {
		if err := go1.Unmarshal(asMap["molecularWeight"], &out.MolecularWeight); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["classification"]) > 0 {
		if err := go1.Unmarshal(asMap["classification"], &out.Classification); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["supplier"]) > 0 {
		if err := go1.Unmarshal(asMap["supplier"], &out.Supplier); err != nil {
			return err
		}

	}
	if len(asMap["property"]) > 0 {
		if err := go1.Unmarshal(asMap["property"], &out.Property); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["structure"]) > 0 {
		if err := go1.Unmarshal(asMap["structure"], &out.Structure); err != nil {
			return err
		}

	}
	if len(asMap["protein"]) > 0 {
		if err := go1.Unmarshal(asMap["protein"], &out.Protein); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["manufacturer"]) > 0 {
		if err := go1.Unmarshal(asMap["manufacturer"], &out.Manufacturer); err != nil {
			return err
		}

	}
	if len(asMap["moiety"]) > 0 {
		if err := go1.Unmarshal(asMap["moiety"], &out.Moiety); err != nil {
			return err
		}

	}
	if len(asMap["relationship"]) > 0 {
		if err := go1.Unmarshal(asMap["relationship"], &out.Relationship); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["characterization"]) > 0 {
		if err := go1.Unmarshal(asMap["characterization"], &out.Characterization); err != nil {
			return err
		}

	}
	if len(asMap["domain"]) > 0 {
		if err := go1.Unmarshal(asMap["domain"], &out.Domain); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceDefinition struct {
	NucleicAcid          *Reference                          `bson:",omitempty" json:"nucleicAcid,omitempty"` // Data items specific to nucleic acids.
	Polymer              *Reference                          `bson:",omitempty" json:"polymer,omitempty"`     // Data items specific to polymers.
	Language             *string                             `bson:",omitempty" json:"language,omitempty"`    // The base language in which the resource is written.
	Code                 *SubstanceDefinitionCode            `binding:"omitempty" bson:",omitempty"`
	SourceMaterial       *SubstanceDefinitionSourceMaterial  `binding:"omitempty" bson:",omitempty"`
	Extension            []*Extension                        `bson:",omitempty" json:"extension,omitempty"`            // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	InformationSource    []*Reference                        `bson:",omitempty" json:"informationSource,omitempty"`    // Supporting literature.
	Grade                []*CodeableConcept                  `bson:",omitempty" json:"grade,omitempty"`                // The quality standard, established benchmark, to which substance complies (e.g. USP/NF, Ph. Eur, JP, BP, Company Standard).
	Note                 []*Annotation                       `bson:",omitempty" json:"note,omitempty"`                 // Textual comment about the substance's catalogue or registry record.
	ReferenceInformation *Reference                          `bson:",omitempty" json:"referenceInformation,omitempty"` // General information detailing this substance.
	MolecularWeight      *SubstanceDefinitionMolecularWeight `binding:"omitempty" bson:",omitempty"`
	Contained            []*Resource                         `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension    []*Extension                        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Version          *string                              `bson:",omitempty" json:"version,omitempty"`        // A business level version identifier of the substance.
	Status           *CodeableConcept                     `bson:",omitempty" json:"status,omitempty"`         // Status of substance within the catalogue e.g. active, retired.
	Classification   []*CodeableConcept                   `bson:",omitempty" json:"classification,omitempty"` // A high level categorization, e.g. polymer or nucleic acid, or food, chemical, biological, or a lower level such as the general types of polymer (linear or branch chain) or type of impurity (process related or contaminant).
	Description      *string                              `bson:",omitempty" json:"description,omitempty"`    // Textual description of the substance.
	Supplier         []*Reference                         `bson:",omitempty" json:"supplier,omitempty"`       // An entity that is the source for the substance. It may be different from the manufacturer. Supplier is synonymous to a distributor.
	Property         *SubstanceDefinitionProperty         `binding:"omitempty" bson:",omitempty"`
	ImplicitRules    *string                              `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text             *Narrative                           `bson:",omitempty" json:"text,omitempty"`          // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Structure        *SubstanceDefinitionStructure        `binding:"omitempty" bson:",omitempty"`
	Protein          *Reference                           `bson:",omitempty" json:"protein,omitempty"` // Data items specific to proteins.
	Name             *SubstanceDefinitionName             `binding:"omitempty" bson:",omitempty"`
	Manufacturer     []*Reference                         `bson:",omitempty" json:"manufacturer,omitempty"` // The entity that creates, makes, produces or fabricates the substance. This is a set of potential manufacturers but is not necessarily comprehensive.
	Moiety           *SubstanceDefinitionMoiety           `binding:"omitempty" bson:",omitempty"`
	Relationship     *SubstanceDefinitionRelationship     `binding:"omitempty" bson:",omitempty"`
	Meta             *Meta                                `bson:",omitempty" json:"meta,omitempty"`       // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Identifier       []*Identifier                        `bson:",omitempty" json:"identifier,omitempty"` // Identifier by which this substance is known.
	Id               *primitive.ObjectID                  `bson:"_id,omitempty" json:"id,omitempty"`      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Characterization *SubstanceDefinitionCharacterization `binding:"omitempty" bson:",omitempty"`
	Domain           *CodeableConcept                     `bson:",omitempty" json:"domain,omitempty"` // If the substance applies to human or veterinary use.
	ResourceType     string                               `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *SubstanceDefinitionCode) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["source"]) > 0 {
		if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["statusDate"]) > 0 {
		if err := go1.Unmarshal(asMap["statusDate"], &out.StatusDate); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceDefinitionCode struct {
	Note              []*Annotation `bson:",omitempty" json:"note,omitempty"`              // Any comment can be provided in this field, if necessary.
	Source            []*Reference  `bson:",omitempty" json:"source,omitempty"`            // Supporting literature.
	Id                *string       `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension  `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension  `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code       *CodeableConcept `bson:",omitempty" json:"code,omitempty"`       // The specific code.
	Status     *CodeableConcept `bson:",omitempty" json:"status,omitempty"`     // Status of the code assignment, for example 'provisional', 'approved'.
	StatusDate *DateTime        `bson:",omitempty" json:"statusDate,omitempty"` // The date at which the code status was changed as part of the terminology maintenance.
}

func (out *SubstanceDefinitionSourceMaterial) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["genus"]) > 0 {
		if err := go1.Unmarshal(asMap["genus"], &out.Genus); err != nil {
			return err
		}

	}
	if len(asMap["species"]) > 0 {
		if err := go1.Unmarshal(asMap["species"], &out.Species); err != nil {
			return err
		}

	}
	if len(asMap["part"]) > 0 {
		if err := go1.Unmarshal(asMap["part"], &out.Part); err != nil {
			return err
		}

	}
	if len(asMap["countryOfOrigin"]) > 0 {
		if err := go1.Unmarshal(asMap["countryOfOrigin"], &out.CountryOfOrigin); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceDefinitionSourceMaterial struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type            *CodeableConcept   `bson:",omitempty" json:"type,omitempty"`            // A classification that provides the origin of the raw material. Example: cat hair would be an Animal source type.
	Genus           *CodeableConcept   `bson:",omitempty" json:"genus,omitempty"`           // The genus of an organism, typically referring to the Latin epithet of the genus element of the plant/animal scientific name.
	Species         *CodeableConcept   `bson:",omitempty" json:"species,omitempty"`         // The species of an organism, typically referring to the Latin epithet of the species of the plant/animal.
	Part            *CodeableConcept   `bson:",omitempty" json:"part,omitempty"`            // An anatomical origin of the source material within an organism.
	CountryOfOrigin []*CodeableConcept `bson:",omitempty" json:"countryOfOrigin,omitempty"` // The country or countries where the material is harvested.
}

func (out *SubstanceDefinitionMolecularWeight) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["method"]) > 0 {
		if err := go1.Unmarshal(asMap["method"], &out.Method); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceDefinitionMolecularWeight struct {
	Method            *CodeableConcept `bson:",omitempty" json:"method,omitempty"`                    // The method by which the molecular weight was determined.
	Type              *CodeableConcept `bson:",omitempty" json:"type,omitempty"`                      // Type of molecular weight such as exact, average (also known as. number average), weight average.
	Amount            *Quantity        `binding:"required" bson:",omitempty" json:"amount,omitempty"` // Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`                     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *SubstanceDefinitionProperty) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDate"], &out.ValueDate); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceDefinitionProperty struct {
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // A code expressing the type of property.
	SubstanceDefinitionPropertyValuex
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type SubstanceDefinitionPropertyValuex struct {
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueDate            Date            `bson:",omitempty" json:"valueDate,omitempty"`
	ValueBoolean         bool            `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueAttachment      Attachment      `bson:",omitempty" json:"valueAttachment,omitempty"`
}

func (out *SubstanceDefinitionStructure) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["technique"]) > 0 {
		if err := go1.Unmarshal(asMap["technique"], &out.Technique); err != nil {
			return err
		}

	}
	if len(asMap["representation"]) > 0 {
		if err := go1.Unmarshal(asMap["representation"], &out.Representation); err != nil {
			return err
		}

	}
	if len(asMap["opticalActivity"]) > 0 {
		if err := go1.Unmarshal(asMap["opticalActivity"], &out.OpticalActivity); err != nil {
			return err
		}

	}
	if len(asMap["molecularFormula"]) > 0 {
		if err := go1.Unmarshal(asMap["molecularFormula"], &out.MolecularFormula); err != nil {
			return err
		}

	}
	if len(asMap["molecularFormulaByMoiety"]) > 0 {
		if err := go1.Unmarshal(asMap["molecularFormulaByMoiety"], &out.MolecularFormulaByMoiety); err != nil {
			return err
		}

	}
	if len(asMap["molecularWeight"]) > 0 {
		if err := go1.Unmarshal(asMap["molecularWeight"], &out.MolecularWeight); err != nil {
			return err
		}

	}
	if len(asMap["sourceDocument"]) > 0 {
		if err := go1.Unmarshal(asMap["sourceDocument"], &out.SourceDocument); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["stereochemistry"]) > 0 {
		if err := go1.Unmarshal(asMap["stereochemistry"], &out.Stereochemistry); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceDefinitionStructure struct {
	Extension                []*Extension                                `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Technique                []*CodeableConcept                          `bson:",omitempty" json:"technique,omitempty"` // The method used to elucidate the structure of the drug substance. Examples: X-ray, NMR, Peptide mapping, Ligand binding assay.
	Representation           *SubstanceDefinitionStructureRepresentation `binding:"omitempty" bson:",omitempty"`
	OpticalActivity          *CodeableConcept                            `bson:",omitempty" json:"opticalActivity,omitempty"`          // Optical activity type.
	MolecularFormula         *string                                     `bson:",omitempty" json:"molecularFormula,omitempty"`         // An expression which states the number and type of atoms present in a molecule of a substance.
	MolecularFormulaByMoiety *string                                     `bson:",omitempty" json:"molecularFormulaByMoiety,omitempty"` // Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot.
	MolecularWeight          interface{}
	SourceDocument           []*Reference `bson:",omitempty" json:"sourceDocument,omitempty"`    // The source of information about the structure.
	Id                       *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ModifierExtension        []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Stereochemistry *CodeableConcept `bson:",omitempty" json:"stereochemistry,omitempty"` // Stereochemistry type.
}

func (out *SubstanceDefinitionStructureRepresentation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["representation"]) > 0 {
		if err := go1.Unmarshal(asMap["representation"], &out.Representation); err != nil {
			return err
		}

	}
	if len(asMap["format"]) > 0 {
		if err := go1.Unmarshal(asMap["format"], &out.Format); err != nil {
			return err
		}

	}
	if len(asMap["document"]) > 0 {
		if err := go1.Unmarshal(asMap["document"], &out.Document); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceDefinitionStructureRepresentation struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type           *CodeableConcept `bson:",omitempty" json:"type,omitempty"`           // The kind of structural representation (e.g. full, partial).
	Representation *string          `bson:",omitempty" json:"representation,omitempty"` // The structural representation as a text string in a standard format.
	Format         *CodeableConcept `bson:",omitempty" json:"format,omitempty"`         // The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF. The logical content type rather than the physical file format of a document.
	Document       *Reference       `bson:",omitempty" json:"document,omitempty"`       // An attached file with the structural representation e.g. a molecular structure graphic of the substance, a JCAMP or AnIML file.
}

func (out *SubstanceDefinitionName) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["translation"]) > 0 {
		if err := go1.Unmarshal(asMap["translation"], &out.Translation); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["official"]) > 0 {
		if err := go1.Unmarshal(asMap["official"], &out.Official); err != nil {
			return err
		}

	}
	if len(asMap["source"]) > 0 {
		if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["domain"]) > 0 {
		if err := go1.Unmarshal(asMap["domain"], &out.Domain); err != nil {
			return err
		}

	}
	if len(asMap["synonym"]) > 0 {
		if err := go1.Unmarshal(asMap["synonym"], &out.Synonym); err != nil {
			return err
		}

	}
	if len(asMap["preferred"]) > 0 {
		if err := go1.Unmarshal(asMap["preferred"], &out.Preferred); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceDefinitionName struct {
	Translation       interface{}
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name         *string                          `binding:"required" bson:",omitempty" json:"name,omitempty"` // The actual name.
	Status       *CodeableConcept                 `bson:",omitempty" json:"status,omitempty"`                  // The status of the name, for example 'current', 'proposed'.
	Language     []*CodeableConcept               `bson:",omitempty" json:"language,omitempty"`                // Human language that the name is written in.
	Jurisdiction []*CodeableConcept               `bson:",omitempty" json:"jurisdiction,omitempty"`            // The jurisdiction where this name applies.
	Official     *SubstanceDefinitionNameOfficial `binding:"omitempty" bson:",omitempty"`
	Source       []*Reference                     `bson:",omitempty" json:"source,omitempty"`    // Supporting literature.
	Id           *string                          `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension    []*Extension                     `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Type         *CodeableConcept                 `bson:",omitempty" json:"type,omitempty"`      // Name type, for example 'systematic',  'scientific, 'brand'.
	Domain       []*CodeableConcept               `bson:",omitempty" json:"domain,omitempty"`    // The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive.
	Synonym      interface{}
	Preferred    *bool `bson:",omitempty" json:"preferred,omitempty"` // If this is the preferred name for this substance.
}

func (out *SubstanceDefinitionNameOfficial) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["authority"]) > 0 {
		if err := go1.Unmarshal(asMap["authority"], &out.Authority); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceDefinitionNameOfficial struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Authority *CodeableConcept `bson:",omitempty" json:"authority,omitempty"` // Which authority uses this official name.
	Status    *CodeableConcept `bson:",omitempty" json:"status,omitempty"`    // The status of the official name, for example 'draft', 'active', 'retired'.
	Date      *DateTime        `bson:",omitempty" json:"date,omitempty"`      // Date of the official name change.
}

func (out *SubstanceDefinitionMoiety) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["role"]) > 0 {
		if err := go1.Unmarshal(asMap["role"], &out.Role); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["molecularFormula"]) > 0 {
		if err := go1.Unmarshal(asMap["molecularFormula"], &out.MolecularFormula); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["amountQuantity"], &out.AmountQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["amountString"], &out.AmountString); err == nil {
	} else {

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["stereochemistry"]) > 0 {
		if err := go1.Unmarshal(asMap["stereochemistry"], &out.Stereochemistry); err != nil {
			return err
		}

	}
	if len(asMap["opticalActivity"]) > 0 {
		if err := go1.Unmarshal(asMap["opticalActivity"], &out.OpticalActivity); err != nil {
			return err
		}

	}
	if len(asMap["measurementType"]) > 0 {
		if err := go1.Unmarshal(asMap["measurementType"], &out.MeasurementType); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceDefinitionMoiety struct {
	Role             *CodeableConcept `bson:",omitempty" json:"role,omitempty"`             // Role that the moiety is playing.
	Identifier       *Identifier      `bson:",omitempty" json:"identifier,omitempty"`       // Identifier by which this moiety substance is known.
	MolecularFormula *string          `bson:",omitempty" json:"molecularFormula,omitempty"` // Molecular formula for this moiety of this substance, typically using the Hill system.
	SubstanceDefinitionMoietyAmountx
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name            *string          `bson:",omitempty" json:"name,omitempty"`            // Textual name for this moiety substance.
	Stereochemistry *CodeableConcept `bson:",omitempty" json:"stereochemistry,omitempty"` // Stereochemistry type.
	OpticalActivity *CodeableConcept `bson:",omitempty" json:"opticalActivity,omitempty"` // Optical activity type.
	MeasurementType *CodeableConcept `bson:",omitempty" json:"measurementType,omitempty"` // The measurement type of the quantitative value. In capturing the actual relative amounts of substances or molecular fragments it may be necessary to indicate whether the amount refers to, for example, a mole ratio or weight ratio.
	Id              *string          `bson:"_id,omitempty" json:"id,omitempty"`           // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}
type SubstanceDefinitionMoietyAmountx struct {
	AmountQuantity Quantity `bson:",omitempty" json:"amountQuantity,omitempty"`
	AmountString   string   `bson:",omitempty" json:"amountString,omitempty"`
}

func (out *SubstanceDefinitionRelationship) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["isDefining"]) > 0 {
		if err := go1.Unmarshal(asMap["isDefining"], &out.IsDefining); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["amountQuantity"], &out.AmountQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["amountRatio"], &out.AmountRatio); err == nil {
	} else if err := go1.Unmarshal(asMap["amountString"], &out.AmountString); err == nil {
	} else {

	}
	if len(asMap["ratioHighLimitAmount"]) > 0 {
		if err := go1.Unmarshal(asMap["ratioHighLimitAmount"], &out.RatioHighLimitAmount); err != nil {
			return err
		}

	}
	if len(asMap["comparator"]) > 0 {
		if err := go1.Unmarshal(asMap["comparator"], &out.Comparator); err != nil {
			return err
		}

	}
	if len(asMap["source"]) > 0 {
		if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["substanceDefinitionReference"], &out.SubstanceDefinitionReference); err == nil {
	} else if err := go1.Unmarshal(asMap["substanceDefinitionCodeableConcept"], &out.SubstanceDefinitionCodeableConcept); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	return nil
}

type SubstanceDefinitionRelationship struct {
	Id         *string      `bson:"_id,omitempty" json:"id,omitempty"`      // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension  []*Extension `bson:",omitempty" json:"extension,omitempty"`  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	IsDefining *bool        `bson:",omitempty" json:"isDefining,omitempty"` // For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships.
	SubstanceDefinitionRelationshipAmountx
	RatioHighLimitAmount *Ratio           `bson:",omitempty" json:"ratioHighLimitAmount,omitempty"` // For use when the numeric has an uncertain range.
	Comparator           *CodeableConcept `bson:",omitempty" json:"comparator,omitempty"`           // An operator for the amount, for example "average", "approximately", "less than".
	Source               []*Reference     `bson:",omitempty" json:"source,omitempty"`               // Supporting literature.
	ModifierExtension    []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`    /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	SubstanceDefinitionRelationshipSubstanceDefinitionx
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // For example "salt to parent", "active moiety", "starting material", "polymorph", "impurity of".
}
type SubstanceDefinitionRelationshipAmountx struct {
	AmountQuantity Quantity `bson:",omitempty" json:"amountQuantity,omitempty"`
	AmountRatio    Ratio    `bson:",omitempty" json:"amountRatio,omitempty"`
	AmountString   string   `bson:",omitempty" json:"amountString,omitempty"`
}
type SubstanceDefinitionRelationshipSubstanceDefinitionx struct {
	SubstanceDefinitionReference       Reference       `bson:",omitempty" json:"substanceDefinitionReference,omitempty"`
	SubstanceDefinitionCodeableConcept CodeableConcept `bson:",omitempty" json:"substanceDefinitionCodeableConcept,omitempty"`
}

func (out *SubstanceDefinitionCharacterization) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["technique"]) > 0 {
		if err := go1.Unmarshal(asMap["technique"], &out.Technique); err != nil {
			return err
		}

	}
	if len(asMap["form"]) > 0 {
		if err := go1.Unmarshal(asMap["form"], &out.Form); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["file"]) > 0 {
		if err := go1.Unmarshal(asMap["file"], &out.File); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceDefinitionCharacterization struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Technique   *CodeableConcept `bson:",omitempty" json:"technique,omitempty"`   // The method used to elucidate the characterization of the drug substance. Example: HPLC.
	Form        *CodeableConcept `bson:",omitempty" json:"form,omitempty"`        // Describes the nature of the chemical entity and explains, for instance, whether this is a base or a salt form.
	Description *string          `bson:",omitempty" json:"description,omitempty"` // The description or justification in support of the interpretation of the data file.
	File        []*Attachment    `bson:",omitempty" json:"file,omitempty"`        // The data produced by the analytical instrument or a pictorial representation of that data. Examples: a JCAMP, JDX, or ADX file, or a chromatogram or spectrum analysis.
}

func (out *SubstanceNucleicAcid) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"SubstanceNucleicAcid\"" {
		return fmt.Errorf("resourceType is not %s", "SubstanceNucleicAcid")
	}
	if len(asMap["sequenceType"]) > 0 {
		if err := go1.Unmarshal(asMap["sequenceType"], &out.SequenceType); err != nil {
			return err
		}

	}
	if len(asMap["oligoNucleotideType"]) > 0 {
		if err := go1.Unmarshal(asMap["oligoNucleotideType"], &out.OligoNucleotideType); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["subunit"]) > 0 {
		if err := go1.Unmarshal(asMap["subunit"], &out.Subunit); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["numberOfSubunits"]) > 0 {
		if err := go1.Unmarshal(asMap["numberOfSubunits"], &out.NumberOfSubunits); err != nil {
			return err
		}

	}
	if len(asMap["areaOfHybridisation"]) > 0 {
		if err := go1.Unmarshal(asMap["areaOfHybridisation"], &out.AreaOfHybridisation); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceNucleicAcid struct {
	SequenceType        *CodeableConcept    `bson:",omitempty" json:"sequenceType,omitempty"`        // The type of the sequence shall be specified based on a controlled vocabulary.
	OligoNucleotideType *CodeableConcept    `bson:",omitempty" json:"oligoNucleotideType,omitempty"` // (TBC).
	Id                  *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`               // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ImplicitRules       *string             `bson:",omitempty" json:"implicitRules,omitempty"`       // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language            *string             `bson:",omitempty" json:"language,omitempty"`            // The base language in which the resource is written.
	Extension           []*Extension        `bson:",omitempty" json:"extension,omitempty"`           // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension   []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"`   /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Subunit             *SubstanceNucleicAcidSubunit `binding:"omitempty" bson:",omitempty"`
	Meta                *Meta                        `bson:",omitempty" json:"meta,omitempty"`                // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Text                *Narrative                   `bson:",omitempty" json:"text,omitempty"`                // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained           []*Resource                  `bson:",omitempty" json:"contained,omitempty"`           // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	NumberOfSubunits    *int                         `bson:",omitempty" json:"numberOfSubunits,omitempty"`    // The number of linear sequences of nucleotides linked through phosphodiester bonds shall be described. Subunits would be strands of nucleic acids that are tightly associated typically through Watson-Crick base pairing. NOTE: If not specified in the reference source, the assumption is that there is 1 subunit.
	AreaOfHybridisation *string                      `bson:",omitempty" json:"areaOfHybridisation,omitempty"` // The area of hybridisation shall be described if applicable for double stranded RNA or DNA. The number associated with the subunit followed by the number associated to the residue shall be specified in increasing order. The underscore “” shall be used as separator as follows: “Subunitnumber Residue”.
	ResourceType        string                       `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *SubstanceNucleicAcidSubunit) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["linkage"]) > 0 {
		if err := go1.Unmarshal(asMap["linkage"], &out.Linkage); err != nil {
			return err
		}

	}
	if len(asMap["sugar"]) > 0 {
		if err := go1.Unmarshal(asMap["sugar"], &out.Sugar); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["subunit"]) > 0 {
		if err := go1.Unmarshal(asMap["subunit"], &out.Subunit); err != nil {
			return err
		}

	}
	if len(asMap["sequence"]) > 0 {
		if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
			return err
		}

	}
	if len(asMap["threePrime"]) > 0 {
		if err := go1.Unmarshal(asMap["threePrime"], &out.ThreePrime); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["length"]) > 0 {
		if err := go1.Unmarshal(asMap["length"], &out.Length); err != nil {
			return err
		}

	}
	if len(asMap["sequenceAttachment"]) > 0 {
		if err := go1.Unmarshal(asMap["sequenceAttachment"], &out.SequenceAttachment); err != nil {
			return err
		}

	}
	if len(asMap["fivePrime"]) > 0 {
		if err := go1.Unmarshal(asMap["fivePrime"], &out.FivePrime); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceNucleicAcidSubunit struct {
	Linkage           *SubstanceNucleicAcidSubunitLinkage `binding:"omitempty" bson:",omitempty"`
	Sugar             *SubstanceNucleicAcidSubunitSugar   `binding:"omitempty" bson:",omitempty"`
	Id                *string                             `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                        `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Subunit           *int                                `bson:",omitempty" json:"subunit,omitempty"`           // Index of linear sequences of nucleic acids in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts.
	Sequence          *string                             `bson:",omitempty" json:"sequence,omitempty"`          // Actual nucleotide sequence notation from 5' to 3' end using standard single letter codes. In addition to the base sequence, sugar and type of phosphate or non-phosphate linkage should also be captured.
	ThreePrime        *CodeableConcept                    `bson:",omitempty" json:"threePrime,omitempty"`        // The nucleotide present at the 3’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the last position in the sequence. A separate representation would be redundant.
	ModifierExtension []*Extension                        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Length             *int             `bson:",omitempty" json:"length,omitempty"`             // The length of the sequence shall be captured.
	SequenceAttachment *Attachment      `bson:",omitempty" json:"sequenceAttachment,omitempty"` // (TBC).
	FivePrime          *CodeableConcept `bson:",omitempty" json:"fivePrime,omitempty"`          // The nucleotide present at the 5’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the first position in the sequence. A separate representation would be redundant.
}

func (out *SubstanceNucleicAcidSubunitLinkage) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["residueSite"]) > 0 {
		if err := go1.Unmarshal(asMap["residueSite"], &out.ResidueSite); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["connectivity"]) > 0 {
		if err := go1.Unmarshal(asMap["connectivity"], &out.Connectivity); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceNucleicAcidSubunitLinkage struct {
	Identifier        *Identifier  `bson:",omitempty" json:"identifier,omitempty"`        // Each linkage will be registered as a fragment and have an ID.
	Name              *string      `bson:",omitempty" json:"name,omitempty"`              // Each linkage will be registered as a fragment and have at least one name. A single name shall be assigned to each linkage.
	ResidueSite       *string      `bson:",omitempty" json:"residueSite,omitempty"`       // Residues shall be captured as described in 5.3.6.8.3.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Connectivity *string `bson:",omitempty" json:"connectivity,omitempty"` // The entity that links the sugar residues together should also be captured for nearly all naturally occurring nucleic acid the linkage is a phosphate group. For many synthetic oligonucleotides phosphorothioate linkages are often seen. Linkage connectivity is assumed to be 3’-5’. If the linkage is either 3’-3’ or 5’-5’ this should be specified.
}

func (out *SubstanceNucleicAcidSubunitSugar) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["residueSite"]) > 0 {
		if err := go1.Unmarshal(asMap["residueSite"], &out.ResidueSite); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceNucleicAcidSubunitSugar struct {
	ResidueSite       *string      `bson:",omitempty" json:"residueSite,omitempty"`       // The residues that contain a given sugar will be captured. The order of given residues will be captured in the 5‘-3‘direction consistent with the base sequences listed above.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier *Identifier `bson:",omitempty" json:"identifier,omitempty"` // The Substance ID of the sugar or sugar-like component that make up the nucleotide.
	Name       *string     `bson:",omitempty" json:"name,omitempty"`       // The name of the sugar or sugar-like component that make up the nucleotide.
}

func (out *SubstancePolymer) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"SubstancePolymer\"" {
		return fmt.Errorf("resourceType is not %s", "SubstancePolymer")
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["geometry"]) > 0 {
		if err := go1.Unmarshal(asMap["geometry"], &out.Geometry); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["class"]) > 0 {
		if err := go1.Unmarshal(asMap["class"], &out.Class); err != nil {
			return err
		}

	}
	if len(asMap["repeat"]) > 0 {
		if err := go1.Unmarshal(asMap["repeat"], &out.Repeat); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["copolymerConnectivity"]) > 0 {
		if err := go1.Unmarshal(asMap["copolymerConnectivity"], &out.CopolymerConnectivity); err != nil {
			return err
		}

	}
	if len(asMap["modification"]) > 0 {
		if err := go1.Unmarshal(asMap["modification"], &out.Modification); err != nil {
			return err
		}

	}
	if len(asMap["monomerSet"]) > 0 {
		if err := go1.Unmarshal(asMap["monomerSet"], &out.MonomerSet); err != nil {
			return err
		}

	}
	return nil
}

type SubstancePolymer struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Geometry              *CodeableConcept            `bson:",omitempty" json:"geometry,omitempty"`      // Polymer geometry, e.g. linear, branched, cross-linked, network or dendritic.
	Meta                  *Meta                       `bson:",omitempty" json:"meta,omitempty"`          // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules         *string                     `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language              *string                     `bson:",omitempty" json:"language,omitempty"`      // The base language in which the resource is written.
	Text                  *Narrative                  `bson:",omitempty" json:"text,omitempty"`          // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained             []*Resource                 `bson:",omitempty" json:"contained,omitempty"`     // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Class                 *CodeableConcept            `bson:",omitempty" json:"class,omitempty"`         // Overall type of the polymer.
	Repeat                *SubstancePolymerRepeat     `binding:"omitempty" bson:",omitempty"`
	Id                    *primitive.ObjectID         `bson:"_id,omitempty" json:"id,omitempty"`                 // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Identifier            *Identifier                 `bson:",omitempty" json:"identifier,omitempty"`            // A business idenfier for this polymer, but typically this is handled by a SubstanceDefinition identifier.
	CopolymerConnectivity []*CodeableConcept          `bson:",omitempty" json:"copolymerConnectivity,omitempty"` // Descrtibes the copolymer sequence type (polymer connectivity).
	Modification          *string                     `bson:",omitempty" json:"modification,omitempty"`          // Todo - this is intended to connect to a repeating full modification structure, also used by Protein and Nucleic Acid . String is just a placeholder.
	MonomerSet            *SubstancePolymerMonomerSet `binding:"omitempty" bson:",omitempty"`
	ResourceType          string                      `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *SubstancePolymerRepeat) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["averageMolecularFormula"]) > 0 {
		if err := go1.Unmarshal(asMap["averageMolecularFormula"], &out.AverageMolecularFormula); err != nil {
			return err
		}

	}
	if len(asMap["repeatUnitAmountType"]) > 0 {
		if err := go1.Unmarshal(asMap["repeatUnitAmountType"], &out.RepeatUnitAmountType); err != nil {
			return err
		}

	}
	if len(asMap["repeatUnit"]) > 0 {
		if err := go1.Unmarshal(asMap["repeatUnit"], &out.RepeatUnit); err != nil {
			return err
		}

	}
	return nil
}

type SubstancePolymerRepeat struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	AverageMolecularFormula *string                           `bson:",omitempty" json:"averageMolecularFormula,omitempty"` // A representation of an (average) molecular formula from a polymer.
	RepeatUnitAmountType    *CodeableConcept                  `bson:",omitempty" json:"repeatUnitAmountType,omitempty"`    // How the quantitative amount of Structural Repeat Units is captured (e.g. Exact, Numeric, Average).
	RepeatUnit              *SubstancePolymerRepeatRepeatUnit `binding:"omitempty" bson:",omitempty"`
}

func (out *SubstancePolymerRepeatRepeatUnit) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["unit"]) > 0 {
		if err := go1.Unmarshal(asMap["unit"], &out.Unit); err != nil {
			return err
		}

	}
	if len(asMap["orientation"]) > 0 {
		if err := go1.Unmarshal(asMap["orientation"], &out.Orientation); err != nil {
			return err
		}

	}
	if len(asMap["amount"]) > 0 {
		if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
			return err
		}

	}
	if len(asMap["degreeOfPolymerisation"]) > 0 {
		if err := go1.Unmarshal(asMap["degreeOfPolymerisation"], &out.DegreeOfPolymerisation); err != nil {
			return err
		}

	}
	if len(asMap["structuralRepresentation"]) > 0 {
		if err := go1.Unmarshal(asMap["structuralRepresentation"], &out.StructuralRepresentation); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type SubstancePolymerRepeatRepeatUnit struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Unit                     *string                                                   `bson:",omitempty" json:"unit,omitempty"`        // Structural repeat units are essential elements for defining polymers.
	Orientation              *CodeableConcept                                          `bson:",omitempty" json:"orientation,omitempty"` // The orientation of the polymerisation, e.g. head-tail, head-head, random.
	Amount                   *int                                                      `bson:",omitempty" json:"amount,omitempty"`      // Number of repeats of this unit.
	DegreeOfPolymerisation   *SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation   `binding:"omitempty" bson:",omitempty"`
	StructuralRepresentation *SubstancePolymerRepeatRepeatUnitStructuralRepresentation `binding:"omitempty" bson:",omitempty"`
	Id                       *string                                                   `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension                []*Extension                                              `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["average"]) > 0 {
		if err := go1.Unmarshal(asMap["average"], &out.Average); err != nil {
			return err
		}

	}
	if len(asMap["low"]) > 0 {
		if err := go1.Unmarshal(asMap["low"], &out.Low); err != nil {
			return err
		}

	}
	if len(asMap["high"]) > 0 {
		if err := go1.Unmarshal(asMap["high"], &out.High); err != nil {
			return err
		}

	}
	return nil
}

type SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type    *CodeableConcept `bson:",omitempty" json:"type,omitempty"`    // The type of the degree of polymerisation shall be described, e.g. SRU/Polymer Ratio.
	Average *int             `bson:",omitempty" json:"average,omitempty"` // An average amount of polymerisation.
	Low     *int             `bson:",omitempty" json:"low,omitempty"`     // A low expected limit of the amount.
	High    *int             `bson:",omitempty" json:"high,omitempty"`    // A high expected limit of the amount.
}

func (out *SubstancePolymerRepeatRepeatUnitStructuralRepresentation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["representation"]) > 0 {
		if err := go1.Unmarshal(asMap["representation"], &out.Representation); err != nil {
			return err
		}

	}
	if len(asMap["format"]) > 0 {
		if err := go1.Unmarshal(asMap["format"], &out.Format); err != nil {
			return err
		}

	}
	if len(asMap["attachment"]) > 0 {
		if err := go1.Unmarshal(asMap["attachment"], &out.Attachment); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type SubstancePolymerRepeatRepeatUnitStructuralRepresentation struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type           *CodeableConcept `bson:",omitempty" json:"type,omitempty"`           // The type of structure (e.g. Full, Partial, Representative).
	Representation *string          `bson:",omitempty" json:"representation,omitempty"` // The structural representation as text string in a standard format e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF.
	Format         *CodeableConcept `bson:",omitempty" json:"format,omitempty"`         // The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF.
	Attachment     *Attachment      `bson:",omitempty" json:"attachment,omitempty"`     // An attached file with the structural representation.
	Id             *string          `bson:"_id,omitempty" json:"id,omitempty"`          // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension      []*Extension     `bson:",omitempty" json:"extension,omitempty"`      // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *SubstancePolymerMonomerSet) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["startingMaterial"]) > 0 {
		if err := go1.Unmarshal(asMap["startingMaterial"], &out.StartingMaterial); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["ratioType"]) > 0 {
		if err := go1.Unmarshal(asMap["ratioType"], &out.RatioType); err != nil {
			return err
		}

	}
	return nil
}

type SubstancePolymerMonomerSet struct {
	StartingMaterial  *SubstancePolymerMonomerSetStartingMaterial `binding:"omitempty" bson:",omitempty"`
	Id                *string                                     `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                                `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                                `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	RatioType *CodeableConcept `bson:",omitempty" json:"ratioType,omitempty"` // Captures the type of ratio to the entire polymer, e.g. Monomer/Polymer ratio, SRU/Polymer Ratio.
}

func (out *SubstancePolymerMonomerSetStartingMaterial) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["isDefining"]) > 0 {
		if err := go1.Unmarshal(asMap["isDefining"], &out.IsDefining); err != nil {
			return err
		}

	}
	if len(asMap["amount"]) > 0 {
		if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	return nil
}

type SubstancePolymerMonomerSetStartingMaterial struct {
	Category          *CodeableConcept `bson:",omitempty" json:"category,omitempty"`          // Substance high level category, e.g. chemical substance.
	IsDefining        *bool            `bson:",omitempty" json:"isDefining,omitempty"`        // Used to specify whether the attribute described is a defining element for the unique identification of the polymer.
	Amount            *Quantity        `bson:",omitempty" json:"amount,omitempty"`            // A percentage.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code *CodeableConcept `bson:",omitempty" json:"code,omitempty"` // The type of substance for this starting material.
}

func (out *SubstanceProtein) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"SubstanceProtein\"" {
		return fmt.Errorf("resourceType is not %s", "SubstanceProtein")
	}
	if len(asMap["disulfideLinkage"]) > 0 {
		if err := go1.Unmarshal(asMap["disulfideLinkage"], &out.DisulfideLinkage); err != nil {
			return err
		}

	}
	if len(asMap["subunit"]) > 0 {
		if err := go1.Unmarshal(asMap["subunit"], &out.Subunit); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["sequenceType"]) > 0 {
		if err := go1.Unmarshal(asMap["sequenceType"], &out.SequenceType); err != nil {
			return err
		}

	}
	if len(asMap["numberOfSubunits"]) > 0 {
		if err := go1.Unmarshal(asMap["numberOfSubunits"], &out.NumberOfSubunits); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceProtein struct {
	DisulfideLinkage  []*string                `bson:",omitempty" json:"disulfideLinkage,omitempty"` // The disulphide bond between two cysteine residues either on the same subunit or on two different subunits shall be described. The position of the disulfide bonds in the SubstanceProtein shall be listed in increasing order of subunit number and position within subunit followed by the abbreviation of the amino acids involved. The disulfide linkage positions shall actually contain the amino acid Cysteine at the respective positions.
	Subunit           *SubstanceProteinSubunit `binding:"omitempty" bson:",omitempty"`
	Id                *primitive.ObjectID      `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ImplicitRules     *string                  `bson:",omitempty" json:"implicitRules,omitempty"`     // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Extension         []*Extension             `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension             `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	SequenceType     *CodeableConcept `bson:",omitempty" json:"sequenceType,omitempty"`     // The SubstanceProtein descriptive elements will only be used when a complete or partial amino acid sequence is available or derivable from a nucleic acid sequence.
	NumberOfSubunits *int             `bson:",omitempty" json:"numberOfSubunits,omitempty"` // Number of linear sequences of amino acids linked through peptide bonds. The number of subunits constituting the SubstanceProtein shall be described. It is possible that the number of subunits can be variable.
	Meta             *Meta            `bson:",omitempty" json:"meta,omitempty"`             // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language         *string          `bson:",omitempty" json:"language,omitempty"`         // The base language in which the resource is written.
	Text             *Narrative       `bson:",omitempty" json:"text,omitempty"`             // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained        []*Resource      `bson:",omitempty" json:"contained,omitempty"`        // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ResourceType     string           `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *SubstanceProteinSubunit) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["cTerminalModification"]) > 0 {
		if err := go1.Unmarshal(asMap["cTerminalModification"], &out.CTerminalModification); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["subunit"]) > 0 {
		if err := go1.Unmarshal(asMap["subunit"], &out.Subunit); err != nil {
			return err
		}

	}
	if len(asMap["sequence"]) > 0 {
		if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
			return err
		}

	}
	if len(asMap["nTerminalModification"]) > 0 {
		if err := go1.Unmarshal(asMap["nTerminalModification"], &out.NTerminalModification); err != nil {
			return err
		}

	}
	if len(asMap["cTerminalModificationId"]) > 0 {
		if err := go1.Unmarshal(asMap["cTerminalModificationId"], &out.CTerminalModificationId); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["length"]) > 0 {
		if err := go1.Unmarshal(asMap["length"], &out.Length); err != nil {
			return err
		}

	}
	if len(asMap["sequenceAttachment"]) > 0 {
		if err := go1.Unmarshal(asMap["sequenceAttachment"], &out.SequenceAttachment); err != nil {
			return err
		}

	}
	if len(asMap["nTerminalModificationId"]) > 0 {
		if err := go1.Unmarshal(asMap["nTerminalModificationId"], &out.NTerminalModificationId); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceProteinSubunit struct {
	CTerminalModification   *string      `bson:",omitempty" json:"cTerminalModification,omitempty"`   // The modification at the C-terminal shall be specified.
	Id                      *string      `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Subunit                 *int         `bson:",omitempty" json:"subunit,omitempty"`                 // Index of primary sequences of amino acids linked through peptide bonds in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts.
	Sequence                *string      `bson:",omitempty" json:"sequence,omitempty"`                // The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence.
	NTerminalModification   *string      `bson:",omitempty" json:"nTerminalModification,omitempty"`   // The name of the fragment modified at the N-terminal of the SubstanceProtein shall be specified.
	CTerminalModificationId *Identifier  `bson:",omitempty" json:"cTerminalModificationId,omitempty"` // Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID.
	Extension               []*Extension `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension       []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`       /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Length                  *int        `bson:",omitempty" json:"length,omitempty"`                  // Length of linear sequences of amino acids contained in the subunit.
	SequenceAttachment      *Attachment `bson:",omitempty" json:"sequenceAttachment,omitempty"`      // The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence.
	NTerminalModificationId *Identifier `bson:",omitempty" json:"nTerminalModificationId,omitempty"` // Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID.
}

func (out *SubstanceReferenceInformation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"SubstanceReferenceInformation\"" {
		return fmt.Errorf("resourceType is not %s", "SubstanceReferenceInformation")
	}
	if len(asMap["comment"]) > 0 {
		if err := go1.Unmarshal(asMap["comment"], &out.Comment); err != nil {
			return err
		}

	}
	if len(asMap["gene"]) > 0 {
		if err := go1.Unmarshal(asMap["gene"], &out.Gene); err != nil {
			return err
		}

	}
	if len(asMap["target"]) > 0 {
		if err := go1.Unmarshal(asMap["target"], &out.Target); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["geneElement"]) > 0 {
		if err := go1.Unmarshal(asMap["geneElement"], &out.GeneElement); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceReferenceInformation struct {
	Comment           *string                              `bson:",omitempty" json:"comment,omitempty"` // Todo.
	Gene              *SubstanceReferenceInformationGene   `binding:"omitempty" bson:",omitempty"`
	Target            *SubstanceReferenceInformationTarget `binding:"omitempty" bson:",omitempty"`
	Id                *primitive.ObjectID                  `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta              *Meta                                `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language          *string                              `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	ModifierExtension []*Extension                         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	GeneElement   *SubstanceReferenceInformationGeneElement `binding:"omitempty" bson:",omitempty"`
	ImplicitRules *string                                   `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text          *Narrative                                `bson:",omitempty" json:"text,omitempty"`          // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained     []*Resource                               `bson:",omitempty" json:"contained,omitempty"`     // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension     []*Extension                              `bson:",omitempty" json:"extension,omitempty"`     // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ResourceType  string                                    `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *SubstanceReferenceInformationGene) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["geneSequenceOrigin"]) > 0 {
		if err := go1.Unmarshal(asMap["geneSequenceOrigin"], &out.GeneSequenceOrigin); err != nil {
			return err
		}

	}
	if len(asMap["gene"]) > 0 {
		if err := go1.Unmarshal(asMap["gene"], &out.Gene); err != nil {
			return err
		}

	}
	if len(asMap["source"]) > 0 {
		if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceReferenceInformationGene struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	GeneSequenceOrigin *CodeableConcept `bson:",omitempty" json:"geneSequenceOrigin,omitempty"` // Todo.
	Gene               *CodeableConcept `bson:",omitempty" json:"gene,omitempty"`               // Todo.
	Source             []*Reference     `bson:",omitempty" json:"source,omitempty"`             // Todo.
}

func (out *SubstanceReferenceInformationTarget) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["organism"]) > 0 {
		if err := go1.Unmarshal(asMap["organism"], &out.Organism); err != nil {
			return err
		}

	}
	if len(asMap["organismType"]) > 0 {
		if err := go1.Unmarshal(asMap["organismType"], &out.OrganismType); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["target"]) > 0 {
		if err := go1.Unmarshal(asMap["target"], &out.Target); err != nil {
			return err
		}

	}
	if len(asMap["source"]) > 0 {
		if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["interaction"]) > 0 {
		if err := go1.Unmarshal(asMap["interaction"], &out.Interaction); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["amountQuantity"], &out.AmountQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["amountRange"], &out.AmountRange); err == nil {
	} else if err := go1.Unmarshal(asMap["amountString"], &out.AmountString); err == nil {
	} else {

	}
	if len(asMap["amountType"]) > 0 {
		if err := go1.Unmarshal(asMap["amountType"], &out.AmountType); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceReferenceInformationTarget struct {
	Organism          *CodeableConcept `bson:",omitempty" json:"organism,omitempty"`          // Todo.
	OrganismType      *CodeableConcept `bson:",omitempty" json:"organismType,omitempty"`      // Todo.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Target      *Identifier      `bson:",omitempty" json:"target,omitempty"`      // Todo.
	Source      []*Reference     `bson:",omitempty" json:"source,omitempty"`      // Todo.
	Type        *CodeableConcept `bson:",omitempty" json:"type,omitempty"`        // Todo.
	Interaction *CodeableConcept `bson:",omitempty" json:"interaction,omitempty"` // Todo.
	SubstanceReferenceInformationTargetAmountx
	AmountType *CodeableConcept `bson:",omitempty" json:"amountType,omitempty"` // Todo.
}
type SubstanceReferenceInformationTargetAmountx struct {
	AmountQuantity Quantity `bson:",omitempty" json:"amountQuantity,omitempty"`
	AmountRange    Range    `bson:",omitempty" json:"amountRange,omitempty"`
	AmountString   string   `bson:",omitempty" json:"amountString,omitempty"`
}

func (out *SubstanceReferenceInformationGeneElement) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["element"]) > 0 {
		if err := go1.Unmarshal(asMap["element"], &out.Element); err != nil {
			return err
		}

	}
	if len(asMap["source"]) > 0 {
		if err := go1.Unmarshal(asMap["source"], &out.Source); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceReferenceInformationGeneElement struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type    *CodeableConcept `bson:",omitempty" json:"type,omitempty"`    // Todo.
	Element *Identifier      `bson:",omitempty" json:"element,omitempty"` // Todo.
	Source  []*Reference     `bson:",omitempty" json:"source,omitempty"`  // Todo.
}

func (out *SubstanceSourceMaterial) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"SubstanceSourceMaterial\"" {
		return fmt.Errorf("resourceType is not %s", "SubstanceSourceMaterial")
	}
	if len(asMap["fractionDescription"]) > 0 {
		if err := go1.Unmarshal(asMap["fractionDescription"], &out.FractionDescription); err != nil {
			return err
		}

	}
	if len(asMap["organism"]) > 0 {
		if err := go1.Unmarshal(asMap["organism"], &out.Organism); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["organismName"]) > 0 {
		if err := go1.Unmarshal(asMap["organismName"], &out.OrganismName); err != nil {
			return err
		}

	}
	if len(asMap["parentSubstanceName"]) > 0 {
		if err := go1.Unmarshal(asMap["parentSubstanceName"], &out.ParentSubstanceName); err != nil {
			return err
		}

	}
	if len(asMap["geographicalLocation"]) > 0 {
		if err := go1.Unmarshal(asMap["geographicalLocation"], &out.GeographicalLocation); err != nil {
			return err
		}

	}
	if len(asMap["developmentStage"]) > 0 {
		if err := go1.Unmarshal(asMap["developmentStage"], &out.DevelopmentStage); err != nil {
			return err
		}

	}
	if len(asMap["partDescription"]) > 0 {
		if err := go1.Unmarshal(asMap["partDescription"], &out.PartDescription); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["sourceMaterialClass"]) > 0 {
		if err := go1.Unmarshal(asMap["sourceMaterialClass"], &out.SourceMaterialClass); err != nil {
			return err
		}

	}
	if len(asMap["sourceMaterialType"]) > 0 {
		if err := go1.Unmarshal(asMap["sourceMaterialType"], &out.SourceMaterialType); err != nil {
			return err
		}

	}
	if len(asMap["sourceMaterialState"]) > 0 {
		if err := go1.Unmarshal(asMap["sourceMaterialState"], &out.SourceMaterialState); err != nil {
			return err
		}

	}
	if len(asMap["parentSubstanceId"]) > 0 {
		if err := go1.Unmarshal(asMap["parentSubstanceId"], &out.ParentSubstanceId); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["organismId"]) > 0 {
		if err := go1.Unmarshal(asMap["organismId"], &out.OrganismId); err != nil {
			return err
		}

	}
	if len(asMap["countryOfOrigin"]) > 0 {
		if err := go1.Unmarshal(asMap["countryOfOrigin"], &out.CountryOfOrigin); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceSourceMaterial struct {
	FractionDescription  *SubstanceSourceMaterialFractionDescription `binding:"omitempty" bson:",omitempty"`
	Organism             *SubstanceSourceMaterialOrganism            `binding:"omitempty" bson:",omitempty"`
	Language             *string                                     `bson:",omitempty" json:"language,omitempty"`             // The base language in which the resource is written.
	Text                 *Narrative                                  `bson:",omitempty" json:"text,omitempty"`                 // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	OrganismName         *string                                     `bson:",omitempty" json:"organismName,omitempty"`         // The organism accepted Scientific name shall be provided based on the organism taxonomy.
	ParentSubstanceName  []*string                                   `bson:",omitempty" json:"parentSubstanceName,omitempty"`  // The parent substance of the Herbal Drug, or Herbal preparation.
	GeographicalLocation []*string                                   `bson:",omitempty" json:"geographicalLocation,omitempty"` // The place/region where the plant is harvested or the places/regions where the animal source material has its habitat.
	DevelopmentStage     *CodeableConcept                            `bson:",omitempty" json:"developmentStage,omitempty"`     // Stage of life for animals, plants, insects and microorganisms. This information shall be provided only when the substance is significantly different in these stages (e.g. foetal bovine serum).
	PartDescription      *SubstanceSourceMaterialPartDescription     `binding:"omitempty" bson:",omitempty"`
	Id                   *primitive.ObjectID                         `bson:"_id,omitempty" json:"id,omitempty"`               // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Extension            []*Extension                                `bson:",omitempty" json:"extension,omitempty"`           // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Meta                 *Meta                                       `bson:",omitempty" json:"meta,omitempty"`                // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules        *string                                     `bson:",omitempty" json:"implicitRules,omitempty"`       // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	SourceMaterialClass  *CodeableConcept                            `bson:",omitempty" json:"sourceMaterialClass,omitempty"` // General high level classification of the source material specific to the origin of the material.
	SourceMaterialType   *CodeableConcept                            `bson:",omitempty" json:"sourceMaterialType,omitempty"`  // The type of the source material shall be specified based on a controlled vocabulary. For vaccines, this subclause refers to the class of infectious agent.
	SourceMaterialState  *CodeableConcept                            `bson:",omitempty" json:"sourceMaterialState,omitempty"` // The state of the source material when extracted.
	ParentSubstanceId    []*Identifier                               `bson:",omitempty" json:"parentSubstanceId,omitempty"`   // The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant).
	Contained            []*Resource                                 `bson:",omitempty" json:"contained,omitempty"`           // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension    []*Extension                                `bson:",omitempty" json:"modifierExtension,omitempty"`   /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	OrganismId      *Identifier        `bson:",omitempty" json:"organismId,omitempty"`      // The unique identifier associated with the source material parent organism shall be specified.
	CountryOfOrigin []*CodeableConcept `bson:",omitempty" json:"countryOfOrigin,omitempty"` // The country where the plant material is harvested or the countries where the plasma is sourced from as laid down in accordance with the Plasma Master File. For “Plasma-derived substances” the attribute country of origin provides information about the countries used for the manufacturing of the Cryopoor plama or Crioprecipitate.
	ResourceType    string             `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *SubstanceSourceMaterialFractionDescription) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["fraction"]) > 0 {
		if err := go1.Unmarshal(asMap["fraction"], &out.Fraction); err != nil {
			return err
		}

	}
	if len(asMap["materialType"]) > 0 {
		if err := go1.Unmarshal(asMap["materialType"], &out.MaterialType); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceSourceMaterialFractionDescription struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Fraction     *string          `bson:",omitempty" json:"fraction,omitempty"`     // This element is capturing information about the fraction of a plant part, or human plasma for fractionation.
	MaterialType *CodeableConcept `bson:",omitempty" json:"materialType,omitempty"` // The specific type of the material constituting the component. For Herbal preparations the particulars of the extracts (liquid/dry) is described in Specified Substance Group 1.
}

func (out *SubstanceSourceMaterialOrganism) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["hybrid"]) > 0 {
		if err := go1.Unmarshal(asMap["hybrid"], &out.Hybrid); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["species"]) > 0 {
		if err := go1.Unmarshal(asMap["species"], &out.Species); err != nil {
			return err
		}

	}
	if len(asMap["intraspecificDescription"]) > 0 {
		if err := go1.Unmarshal(asMap["intraspecificDescription"], &out.IntraspecificDescription); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["family"]) > 0 {
		if err := go1.Unmarshal(asMap["family"], &out.Family); err != nil {
			return err
		}

	}
	if len(asMap["genus"]) > 0 {
		if err := go1.Unmarshal(asMap["genus"], &out.Genus); err != nil {
			return err
		}

	}
	if len(asMap["intraspecificType"]) > 0 {
		if err := go1.Unmarshal(asMap["intraspecificType"], &out.IntraspecificType); err != nil {
			return err
		}

	}
	if len(asMap["organismGeneral"]) > 0 {
		if err := go1.Unmarshal(asMap["organismGeneral"], &out.OrganismGeneral); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceSourceMaterialOrganism struct {
	Hybrid            *SubstanceSourceMaterialOrganismHybrid `binding:"omitempty" bson:",omitempty"`
	Extension         []*Extension                           `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                           `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Species                  *CodeableConcept                                `bson:",omitempty" json:"species,omitempty"`                  // The species of an organism shall be specified; refers to the Latin epithet of the species of the plant/animal; it is present in names for species and infraspecies.
	IntraspecificDescription *string                                         `bson:",omitempty" json:"intraspecificDescription,omitempty"` // The intraspecific description of an organism shall be specified based on a controlled vocabulary. For Influenza Vaccine, the intraspecific description shall contain the syntax of the antigen in line with the WHO convention.
	Author                   *SubstanceSourceMaterialOrganismAuthor          `binding:"omitempty" bson:",omitempty"`
	Id                       *string                                         `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Family                   *CodeableConcept                                `bson:",omitempty" json:"family,omitempty"`            // The family of an organism shall be specified.
	Genus                    *CodeableConcept                                `bson:",omitempty" json:"genus,omitempty"`             // The genus of an organism shall be specified; refers to the Latin epithet of the genus element of the plant/animal scientific name; it is present in names for genera, species and infraspecies.
	IntraspecificType        *CodeableConcept                                `bson:",omitempty" json:"intraspecificType,omitempty"` // The Intraspecific type of an organism shall be specified.
	OrganismGeneral          *SubstanceSourceMaterialOrganismOrganismGeneral `binding:"omitempty" bson:",omitempty"`
}

func (out *SubstanceSourceMaterialOrganismHybrid) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["hybridType"]) > 0 {
		if err := go1.Unmarshal(asMap["hybridType"], &out.HybridType); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["maternalOrganismId"]) > 0 {
		if err := go1.Unmarshal(asMap["maternalOrganismId"], &out.MaternalOrganismId); err != nil {
			return err
		}

	}
	if len(asMap["maternalOrganismName"]) > 0 {
		if err := go1.Unmarshal(asMap["maternalOrganismName"], &out.MaternalOrganismName); err != nil {
			return err
		}

	}
	if len(asMap["paternalOrganismId"]) > 0 {
		if err := go1.Unmarshal(asMap["paternalOrganismId"], &out.PaternalOrganismId); err != nil {
			return err
		}

	}
	if len(asMap["paternalOrganismName"]) > 0 {
		if err := go1.Unmarshal(asMap["paternalOrganismName"], &out.PaternalOrganismName); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceSourceMaterialOrganismHybrid struct {
	HybridType        *CodeableConcept `bson:",omitempty" json:"hybridType,omitempty"`        // The hybrid type of an organism shall be specified.
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	MaternalOrganismId   *string `bson:",omitempty" json:"maternalOrganismId,omitempty"`   // The identifier of the maternal species constituting the hybrid organism shall be specified based on a controlled vocabulary. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.
	MaternalOrganismName *string `bson:",omitempty" json:"maternalOrganismName,omitempty"` // The name of the maternal species constituting the hybrid organism shall be specified. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.
	PaternalOrganismId   *string `bson:",omitempty" json:"paternalOrganismId,omitempty"`   // The identifier of the paternal species constituting the hybrid organism shall be specified based on a controlled vocabulary.
	PaternalOrganismName *string `bson:",omitempty" json:"paternalOrganismName,omitempty"` // The name of the paternal species constituting the hybrid organism shall be specified.
}

func (out *SubstanceSourceMaterialOrganismAuthor) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["authorType"]) > 0 {
		if err := go1.Unmarshal(asMap["authorType"], &out.AuthorType); err != nil {
			return err
		}

	}
	if len(asMap["authorDescription"]) > 0 {
		if err := go1.Unmarshal(asMap["authorDescription"], &out.AuthorDescription); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceSourceMaterialOrganismAuthor struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	AuthorType        *CodeableConcept `bson:",omitempty" json:"authorType,omitempty"`        // The type of author of an organism species shall be specified. The parenthetical author of an organism species refers to the first author who published the plant/animal name (of any rank). The primary author of an organism species refers to the first author(s), who validly published the plant/animal name.
	AuthorDescription *string          `bson:",omitempty" json:"authorDescription,omitempty"` // The author of an organism species shall be specified. The author year of an organism shall also be specified when applicable; refers to the year in which the first author(s) published the infraspecific plant/animal name (of any rank).
}

func (out *SubstanceSourceMaterialOrganismOrganismGeneral) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["kingdom"]) > 0 {
		if err := go1.Unmarshal(asMap["kingdom"], &out.Kingdom); err != nil {
			return err
		}

	}
	if len(asMap["phylum"]) > 0 {
		if err := go1.Unmarshal(asMap["phylum"], &out.Phylum); err != nil {
			return err
		}

	}
	if len(asMap["class"]) > 0 {
		if err := go1.Unmarshal(asMap["class"], &out.Class); err != nil {
			return err
		}

	}
	if len(asMap["order"]) > 0 {
		if err := go1.Unmarshal(asMap["order"], &out.Order); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceSourceMaterialOrganismOrganismGeneral struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Kingdom *CodeableConcept `bson:",omitempty" json:"kingdom,omitempty"` // The kingdom of an organism shall be specified.
	Phylum  *CodeableConcept `bson:",omitempty" json:"phylum,omitempty"`  // The phylum of an organism shall be specified.
	Class   *CodeableConcept `bson:",omitempty" json:"class,omitempty"`   // The class of an organism shall be specified.
	Order   *CodeableConcept `bson:",omitempty" json:"order,omitempty"`   // The order of an organism shall be specified,.
}

func (out *SubstanceSourceMaterialPartDescription) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["part"]) > 0 {
		if err := go1.Unmarshal(asMap["part"], &out.Part); err != nil {
			return err
		}

	}
	if len(asMap["partLocation"]) > 0 {
		if err := go1.Unmarshal(asMap["partLocation"], &out.PartLocation); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type SubstanceSourceMaterialPartDescription struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Part         *CodeableConcept `bson:",omitempty" json:"part,omitempty"`         // Entity of anatomical origin of source material within an organism.
	PartLocation *CodeableConcept `bson:",omitempty" json:"partLocation,omitempty"` // The detailed anatomic location when the part can be extracted from different anatomical locations of the organism. Multiple alternative locations may apply.
	Id           *string          `bson:"_id,omitempty" json:"id,omitempty"`        // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *SupplyDelivery) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"SupplyDelivery\"" {
		return fmt.Errorf("resourceType is not %s", "SupplyDelivery")
	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["occurrenceDateTime"], &out.OccurrenceDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrencePeriod"], &out.OccurrencePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrenceTiming"], &out.OccurrenceTiming); err == nil {
	} else {

	}
	if len(asMap["supplier"]) > 0 {
		if err := go1.Unmarshal(asMap["supplier"], &out.Supplier); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["patient"]) > 0 {
		if err := go1.Unmarshal(asMap["patient"], &out.Patient); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["suppliedItem"]) > 0 {
		if err := go1.Unmarshal(asMap["suppliedItem"], &out.SuppliedItem); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["destination"]) > 0 {
		if err := go1.Unmarshal(asMap["destination"], &out.Destination); err != nil {
			return err
		}

	}
	if len(asMap["receiver"]) > 0 {
		if err := go1.Unmarshal(asMap["receiver"], &out.Receiver); err != nil {
			return err
		}

	}
	return nil
}

type SupplyDelivery struct {
	Language          *string             `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	BasedOn           []*Reference        `bson:",omitempty" json:"basedOn,omitempty"`           // A plan, proposal or order that is fulfilled in whole or in part by this event.
	Status            *string             `bson:",omitempty" json:"status,omitempty"`            // A code specifying the state of the dispense event.
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	PartOf []*Reference `bson:",omitempty" json:"partOf,omitempty"` // A larger event of which this particular event is a component or step.
	SupplyDeliveryOccurrencex
	Supplier      *Reference                  `bson:",omitempty" json:"supplier,omitempty"`  // The individual or organization responsible for supplying the delivery.
	Extension     []*Extension                `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Patient       *Reference                  `bson:",omitempty" json:"patient,omitempty"`   // A link to a resource representing the person whom the delivered item is for.
	Type          *CodeableConcept            `bson:",omitempty" json:"type,omitempty"`      // Indicates the type of supply being provided.  Examples include: Medication, Device, Biologically Derived Product.
	SuppliedItem  *SupplyDeliverySuppliedItem `binding:"omitempty" bson:",omitempty"`
	Meta          *Meta                       `bson:",omitempty" json:"meta,omitempty"`          // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ImplicitRules *string                     `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text          *Narrative                  `bson:",omitempty" json:"text,omitempty"`          // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained     []*Resource                 `bson:",omitempty" json:"contained,omitempty"`     // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Identifier    []*Identifier               `bson:",omitempty" json:"identifier,omitempty"`    // Identifier for the supply delivery event that is used to identify it across multiple disparate systems.
	Destination   *Reference                  `bson:",omitempty" json:"destination,omitempty"`   // Identification of the facility/location where the delivery was shipped to.
	Receiver      []*Reference                `bson:",omitempty" json:"receiver,omitempty"`      // Identifies the individual or organization that received the delivery.
	ResourceType  string                      `binding:"omitempty" bson:"-" json:"resourceType"`
}
type SupplyDeliveryOccurrencex struct {
	OccurrenceDateTime DateTime `bson:",omitempty" json:"occurrenceDateTime,omitempty"`
	OccurrencePeriod   Period   `bson:",omitempty" json:"occurrencePeriod,omitempty"`
	OccurrenceTiming   Timing   `bson:",omitempty" json:"occurrenceTiming,omitempty"`
}

func (out *SupplyDeliverySuppliedItem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["quantity"]) > 0 {
		if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["itemCodeableConcept"], &out.ItemCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["itemReference"], &out.ItemReference); err == nil {
	} else {

	}
	return nil
}

type SupplyDeliverySuppliedItem struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Quantity *Quantity `bson:",omitempty" json:"quantity,omitempty"` // The amount of the item that has been supplied.  Unit of measure may be included.
	SupplyDeliverySuppliedItemItemx
}
type SupplyDeliverySuppliedItemItemx struct {
	ItemCodeableConcept CodeableConcept `bson:",omitempty" json:"itemCodeableConcept,omitempty"`
	ItemReference       Reference       `bson:",omitempty" json:"itemReference,omitempty"`
}

func (out *SupplyRequest) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"SupplyRequest\"" {
		return fmt.Errorf("resourceType is not %s", "SupplyRequest")
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["supplier"]) > 0 {
		if err := go1.Unmarshal(asMap["supplier"], &out.Supplier); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	if len(asMap["deliverFor"]) > 0 {
		if err := go1.Unmarshal(asMap["deliverFor"], &out.DeliverFor); err != nil {
			return err
		}

	}
	if len(asMap["deliverFrom"]) > 0 {
		if err := go1.Unmarshal(asMap["deliverFrom"], &out.DeliverFrom); err != nil {
			return err
		}

	}
	if len(asMap["deliverTo"]) > 0 {
		if err := go1.Unmarshal(asMap["deliverTo"], &out.DeliverTo); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["occurrenceDateTime"], &out.OccurrenceDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrencePeriod"], &out.OccurrencePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["occurrenceTiming"], &out.OccurrenceTiming); err == nil {
	} else {

	}
	if len(asMap["authoredOn"]) > 0 {
		if err := go1.Unmarshal(asMap["authoredOn"], &out.AuthoredOn); err != nil {
			return err
		}

	}
	if len(asMap["requester"]) > 0 {
		if err := go1.Unmarshal(asMap["requester"], &out.Requester); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["item"], &out.Item); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["quantity"], &out.Quantity); err != nil {
		return err
	}

	if len(asMap["parameter"]) > 0 {
		if err := go1.Unmarshal(asMap["parameter"], &out.Parameter); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	return nil
}

type SupplyRequest struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Status        *string              `bson:",omitempty" json:"status,omitempty"`        // Status of the supply request.
	BasedOn       []*Reference         `bson:",omitempty" json:"basedOn,omitempty"`       // Plan/proposal/order fulfilled by this request.
	Supplier      []*Reference         `bson:",omitempty" json:"supplier,omitempty"`      // Who is intended to fulfill the request.
	Reason        []*CodeableReference `bson:",omitempty" json:"reason,omitempty"`        // The reason why the supply item was requested.
	Id            *primitive.ObjectID  `bson:"_id,omitempty" json:"id,omitempty"`         // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ImplicitRules *string              `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language      *string              `bson:",omitempty" json:"language,omitempty"`      // The base language in which the resource is written.
	Priority      *string              `bson:",omitempty" json:"priority,omitempty"`      // Indicates how quickly this SupplyRequest should be addressed with respect to other requests.
	DeliverFor    *Reference           `bson:",omitempty" json:"deliverFor,omitempty"`    // The patient to whom the supply will be given or for whom they will be used.
	DeliverFrom   *Reference           `bson:",omitempty" json:"deliverFrom,omitempty"`   // Where the supply is expected to come from.
	DeliverTo     *Reference           `bson:",omitempty" json:"deliverTo,omitempty"`     // Where the supply is destined to go.
	Meta          *Meta                `bson:",omitempty" json:"meta,omitempty"`          // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Identifier    []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`    // Business identifiers assigned to this SupplyRequest by the author and/or other systems. These identifiers remain constant as the resource is updated and propagates from server to server.
	SupplyRequestOccurrencex
	AuthoredOn   *DateTime               `bson:",omitempty" json:"authoredOn,omitempty"`                  // When the request was made.
	Requester    *Reference              `bson:",omitempty" json:"requester,omitempty"`                   // The device, practitioner, etc. who initiated the request.
	Contained    []*Resource             `bson:",omitempty" json:"contained,omitempty"`                   // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Category     *CodeableConcept        `bson:",omitempty" json:"category,omitempty"`                    // Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
	Item         *CodeableReference      `binding:"required" bson:",omitempty" json:"item,omitempty"`     // The item that is requested to be supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
	Quantity     *Quantity               `binding:"required" bson:",omitempty" json:"quantity,omitempty"` // The amount that is being ordered of the indicated item.
	Parameter    *SupplyRequestParameter `binding:"omitempty" bson:",omitempty"`
	Text         *Narrative              `bson:",omitempty" json:"text,omitempty"` // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ResourceType string                  `binding:"omitempty" bson:"-" json:"resourceType"`
}
type SupplyRequestOccurrencex struct {
	OccurrenceDateTime DateTime `bson:",omitempty" json:"occurrenceDateTime,omitempty"`
	OccurrencePeriod   Period   `bson:",omitempty" json:"occurrencePeriod,omitempty"`
	OccurrenceTiming   Timing   `bson:",omitempty" json:"occurrenceTiming,omitempty"`
}

func (out *SupplyRequestParameter) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	return nil
}

type SupplyRequestParameter struct {
	SupplyRequestParameterValuex
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code *CodeableConcept `bson:",omitempty" json:"code,omitempty"` // A code or string that identifies the device detail being asserted.
}
type SupplyRequestParameterValuex struct {
	ValueCodeableConcept CodeableConcept `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueQuantity        Quantity        `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueRange           Range           `bson:",omitempty" json:"valueRange,omitempty"`
	ValueBoolean         bool            `bson:",omitempty" json:"valueBoolean,omitempty"`
}

func (out *Task) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Task\"" {
		return fmt.Errorf("resourceType is not %s", "Task")
	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["groupIdentifier"]) > 0 {
		if err := go1.Unmarshal(asMap["groupIdentifier"], &out.GroupIdentifier); err != nil {
			return err
		}

	}
	if len(asMap["doNotPerform"]) > 0 {
		if err := go1.Unmarshal(asMap["doNotPerform"], &out.DoNotPerform); err != nil {
			return err
		}

	}
	if len(asMap["requester"]) > 0 {
		if err := go1.Unmarshal(asMap["requester"], &out.Requester); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["restriction"]) > 0 {
		if err := go1.Unmarshal(asMap["restriction"], &out.Restriction); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["statusReason"]) > 0 {
		if err := go1.Unmarshal(asMap["statusReason"], &out.StatusReason); err != nil {
			return err
		}

	}
	if len(asMap["executionPeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["executionPeriod"], &out.ExecutionPeriod); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if len(asMap["input"]) > 0 {
		if err := go1.Unmarshal(asMap["input"], &out.Input); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesCanonical"], &out.InstantiatesCanonical); err != nil {
			return err
		}

	}
	if len(asMap["insurance"]) > 0 {
		if err := go1.Unmarshal(asMap["insurance"], &out.Insurance); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["requestedPeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["requestedPeriod"], &out.RequestedPeriod); err != nil {
			return err
		}

	}
	if len(asMap["owner"]) > 0 {
		if err := go1.Unmarshal(asMap["owner"], &out.Owner); err != nil {
			return err
		}

	}
	if len(asMap["output"]) > 0 {
		if err := go1.Unmarshal(asMap["output"], &out.Output); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesUri"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesUri"], &out.InstantiatesUri); err != nil {
			return err
		}

	}
	if len(asMap["businessStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["businessStatus"], &out.BusinessStatus); err != nil {
			return err
		}

	}
	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	if len(asMap["focus"]) > 0 {
		if err := go1.Unmarshal(asMap["focus"], &out.Focus); err != nil {
			return err
		}

	}
	if len(asMap["requestedPerformer"]) > 0 {
		if err := go1.Unmarshal(asMap["requestedPerformer"], &out.RequestedPerformer); err != nil {
			return err
		}

	}
	if len(asMap["performer"]) > 0 {
		if err := go1.Unmarshal(asMap["performer"], &out.Performer); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["for"]) > 0 {
		if err := go1.Unmarshal(asMap["for"], &out.For); err != nil {
			return err
		}

	}
	if len(asMap["authoredOn"]) > 0 {
		if err := go1.Unmarshal(asMap["authoredOn"], &out.AuthoredOn); err != nil {
			return err
		}

	}
	if len(asMap["lastModified"]) > 0 {
		if err := go1.Unmarshal(asMap["lastModified"], &out.LastModified); err != nil {
			return err
		}

	}
	if len(asMap["relevantHistory"]) > 0 {
		if err := go1.Unmarshal(asMap["relevantHistory"], &out.RelevantHistory); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["intent"], &out.Intent); err != nil {
		return err
	}

	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	return nil
}

type Task struct {
	ImplicitRules         *string              `bson:",omitempty" json:"implicitRules,omitempty"`   // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Code                  *CodeableConcept     `bson:",omitempty" json:"code,omitempty"`            // A name or code (or both) briefly describing what the task involves.
	Location              *Reference           `bson:",omitempty" json:"location,omitempty"`        // Principal physical location where this task is performed.
	Extension             []*Extension         `bson:",omitempty" json:"extension,omitempty"`       // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	GroupIdentifier       *Identifier          `bson:",omitempty" json:"groupIdentifier,omitempty"` // A shared identifier common to multiple independent Task and Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.
	DoNotPerform          *bool                `bson:",omitempty" json:"doNotPerform,omitempty"`    // If true indicates that the Task is asking for the specified action to *not* occur.
	Requester             *Reference           `bson:",omitempty" json:"requester,omitempty"`       // The creator of the task.
	Note                  []*Annotation        `bson:",omitempty" json:"note,omitempty"`            // Free-text information captured about the task as it progresses.
	Restriction           *TaskRestriction     `binding:"omitempty" bson:",omitempty"`
	Meta                  *Meta                `bson:",omitempty" json:"meta,omitempty"`                      // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	PartOf                []*Reference         `bson:",omitempty" json:"partOf,omitempty"`                    // Task that this particular task is part of.
	Status                *string              `binding:"required" bson:",omitempty" json:"status,omitempty"` // The current status of the task.
	StatusReason          *CodeableReference   `bson:",omitempty" json:"statusReason,omitempty"`              // An explanation as to why this task is held, failed, was refused, etc.
	ExecutionPeriod       *Period              `bson:",omitempty" json:"executionPeriod,omitempty"`           // Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end).
	Reason                []*CodeableReference `bson:",omitempty" json:"reason,omitempty"`                    // A description, code, or reference indicating why this task needs to be performed.
	Input                 *TaskInput           `binding:"omitempty" bson:",omitempty"`
	InstantiatesCanonical *string              `bson:",omitempty" json:"instantiatesCanonical,omitempty"` // The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
	Insurance             []*Reference         `bson:",omitempty" json:"insurance,omitempty"`             // Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Task.
	Text                  *Narrative           `bson:",omitempty" json:"text,omitempty"`                  // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Identifier            []*Identifier        `bson:",omitempty" json:"identifier,omitempty"`            // The business identifier for this task.
	BasedOn               []*Reference         `bson:",omitempty" json:"basedOn,omitempty"`               // BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a "request" resource such as a ServiceRequest, MedicationRequest, CarePlan, etc. which is distinct from the "request" resource the task is seeking to fulfill.  This latter resource is referenced by focus.  For example, based on a CarePlan (= basedOn), a task is created to fulfill a ServiceRequest ( = focus ) to collect a specimen from a patient.
	RequestedPeriod       *Period              `bson:",omitempty" json:"requestedPeriod,omitempty"`       // Indicates the start and/or end of the period of time when completion of the task is desired to take place.
	Owner                 *Reference           `bson:",omitempty" json:"owner,omitempty"`                 // Party responsible for managing task execution.
	Output                *TaskOutput          `binding:"omitempty" bson:",omitempty"`
	InstantiatesUri       *string              `bson:",omitempty" json:"instantiatesUri,omitempty"`    // The URL pointing to an *externally* maintained  protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
	BusinessStatus        *CodeableConcept     `bson:",omitempty" json:"businessStatus,omitempty"`     // Contains business-specific nuances of the business state.
	Priority              *string              `bson:",omitempty" json:"priority,omitempty"`           // Indicates how quickly the Task should be addressed with respect to other requests.
	Focus                 *Reference           `bson:",omitempty" json:"focus,omitempty"`              // The request being fulfilled or the resource being manipulated (changed, suspended, etc.) by this task.
	RequestedPerformer    []*CodeableReference `bson:",omitempty" json:"requestedPerformer,omitempty"` // The kind of participant or specific participant that should perform the task.
	Performer             *TaskPerformer       `binding:"omitempty" bson:",omitempty"`
	Id                    *primitive.ObjectID  `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	For                   *Reference           `bson:",omitempty" json:"for,omitempty"`               // The entity who benefits from the performance of the service specified in the task (e.g., the patient).
	AuthoredOn            *DateTime            `bson:",omitempty" json:"authoredOn,omitempty"`        // The date and time this task was created.
	LastModified          *DateTime            `bson:",omitempty" json:"lastModified,omitempty"`      // The date and time of last modification to this task.
	RelevantHistory       []*Reference         `bson:",omitempty" json:"relevantHistory,omitempty"`   // Links to Provenance records for past versions of this Task that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the task.
	Language              *string              `bson:",omitempty" json:"language,omitempty"`          // The base language in which the resource is written.
	Contained             []*Resource          `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension     []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Intent       *string    `binding:"required" bson:",omitempty" json:"intent,omitempty"` // Indicates the "level" of actionability associated with the Task, i.e. i+R[9]Cs this a proposed task, a planned task, an actionable task, etc.
	Description  *string    `bson:",omitempty" json:"description,omitempty"`               // A free-text description of what is to be performed.
	Encounter    *Reference `bson:",omitempty" json:"encounter,omitempty"`                 // The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created.
	ResourceType string     `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *TaskRestriction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["repetitions"]) > 0 {
		if err := go1.Unmarshal(asMap["repetitions"], &out.Repetitions); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["recipient"]) > 0 {
		if err := go1.Unmarshal(asMap["recipient"], &out.Recipient); err != nil {
			return err
		}

	}
	return nil
}

type TaskRestriction struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Repetitions *int         `bson:",omitempty" json:"repetitions,omitempty"` // Indicates the number of times the requested action should occur.
	Period      *Period      `bson:",omitempty" json:"period,omitempty"`      // The time-period for which fulfillment is sought. This must fall within the overall time period authorized in the referenced request.  E.g. ServiceRequest.occurance[x].
	Recipient   []*Reference `bson:",omitempty" json:"recipient,omitempty"`   // For requests that are targeted to more than one potential recipient/target, to identify who is fulfillment is sought for.
}

func (out *TaskInput) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueBase64Binary"], &out.ValueBase64Binary); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCanonical"], &out.ValueCanonical); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCode"], &out.ValueCode); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDate"], &out.ValueDate); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDateTime"], &out.ValueDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDecimal"], &out.ValueDecimal); err == nil {
	} else if err := go1.Unmarshal(asMap["valueId"], &out.ValueId); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInstant"], &out.ValueInstant); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger64"], &out.ValueInteger64); err == nil {
	} else if err := go1.Unmarshal(asMap["valueMarkdown"], &out.ValueMarkdown); err == nil {
	} else if err := go1.Unmarshal(asMap["valueOid"], &out.ValueOid); err == nil {
	} else if err := go1.Unmarshal(asMap["valuePositiveInt"], &out.ValuePositiveInt); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTime"], &out.ValueTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUnsignedInt"], &out.ValueUnsignedInt); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUri"], &out.ValueUri); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUrl"], &out.ValueUrl); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUuid"], &out.ValueUuid); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAddress"], &out.ValueAddress); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAge"], &out.ValueAge); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAnnotation"], &out.ValueAnnotation); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCodeableReference"], &out.ValueCodeableReference); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCoding"], &out.ValueCoding); err == nil {
	} else if err := go1.Unmarshal(asMap["valueContactPoint"], &out.ValueContactPoint); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCount"], &out.ValueCount); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDistance"], &out.ValueDistance); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDuration"], &out.ValueDuration); err == nil {
	} else if err := go1.Unmarshal(asMap["valueHumanName"], &out.ValueHumanName); err == nil {
	} else if err := go1.Unmarshal(asMap["valueIdentifier"], &out.ValueIdentifier); err == nil {
	} else if err := go1.Unmarshal(asMap["valueMoney"], &out.ValueMoney); err == nil {
	} else if err := go1.Unmarshal(asMap["valuePeriod"], &out.ValuePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRatio"], &out.ValueRatio); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRatioRange"], &out.ValueRatioRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueReference"], &out.ValueReference); err == nil {
	} else if err := go1.Unmarshal(asMap["valueSampledData"], &out.ValueSampledData); err == nil {
	} else if err := go1.Unmarshal(asMap["valueSignature"], &out.ValueSignature); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTiming"], &out.ValueTiming); err == nil {
	} else if err := go1.Unmarshal(asMap["valueContactDetail"], &out.ValueContactDetail); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDataRequirement"], &out.ValueDataRequirement); err == nil {
	} else if err := go1.Unmarshal(asMap["valueExpression"], &out.ValueExpression); err == nil {
	} else if err := go1.Unmarshal(asMap["valueParameterDefinition"], &out.ValueParameterDefinition); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRelatedArtifact"], &out.ValueRelatedArtifact); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTriggerDefinition"], &out.ValueTriggerDefinition); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUsageContext"], &out.ValueUsageContext); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAvailability"], &out.ValueAvailability); err == nil {
	} else if err := go1.Unmarshal(asMap["valueExtendedContactDetail"], &out.ValueExtendedContactDetail); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDosage"], &out.ValueDosage); err == nil {
	} else if err := go1.Unmarshal(asMap["valueMeta"], &out.ValueMeta); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type TaskInput struct {
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // A code or description indicating how the input is intended to be used as part of the task execution.
	TaskInputValuex
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}
type TaskInputValuex struct {
	ValueBase64Binary          Base64Binary          `bson:",omitempty" json:"valueBase64Binary,omitempty"`
	ValueBoolean               bool                  `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueCanonical             string                `bson:",omitempty" json:"valueCanonical,omitempty"`
	ValueCode                  string                `bson:",omitempty" json:"valueCode,omitempty"`
	ValueDate                  Date                  `bson:",omitempty" json:"valueDate,omitempty"`
	ValueDateTime              DateTime              `bson:",omitempty" json:"valueDateTime,omitempty"`
	ValueDecimal               float64               `bson:",omitempty" json:"valueDecimal,omitempty"`
	ValueId                    *primitive.ObjectID   `bson:",omitempty" json:"valueId,omitempty"`
	ValueInstant               time.Time             `bson:",omitempty" json:"valueInstant,omitempty"`
	ValueInteger               int                   `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueInteger64             int64                 `bson:",omitempty" json:"valueInteger64,omitempty"`
	ValueMarkdown              string                `bson:",omitempty" json:"valueMarkdown,omitempty"`
	ValueOid                   string                `bson:",omitempty" json:"valueOid,omitempty"`
	ValuePositiveInt           int                   `bson:",omitempty" json:"valuePositiveInt,omitempty"`
	ValueString                string                `bson:",omitempty" json:"valueString,omitempty"`
	ValueTime                  Time                  `bson:",omitempty" json:"valueTime,omitempty"`
	ValueUnsignedInt           int                   `bson:",omitempty" json:"valueUnsignedInt,omitempty"`
	ValueUri                   string                `bson:",omitempty" json:"valueUri,omitempty"`
	ValueUrl                   url.URL               `bson:",omitempty" json:"valueUrl,omitempty"`
	ValueUuid                  uuid.UUID             `bson:",omitempty" json:"valueUuid,omitempty"`
	ValueAddress               Address               `bson:",omitempty" json:"valueAddress,omitempty"`
	ValueAge                   Age                   `bson:",omitempty" json:"valueAge,omitempty"`
	ValueAnnotation            Annotation            `bson:",omitempty" json:"valueAnnotation,omitempty"`
	ValueAttachment            Attachment            `bson:",omitempty" json:"valueAttachment,omitempty"`
	ValueCodeableConcept       CodeableConcept       `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueCodeableReference     CodeableReference     `bson:",omitempty" json:"valueCodeableReference,omitempty"`
	ValueCoding                Coding                `bson:",omitempty" json:"valueCoding,omitempty"`
	ValueContactPoint          ContactPoint          `bson:",omitempty" json:"valueContactPoint,omitempty"`
	ValueCount                 Count                 `bson:",omitempty" json:"valueCount,omitempty"`
	ValueDistance              Distance              `bson:",omitempty" json:"valueDistance,omitempty"`
	ValueDuration              Duration              `bson:",omitempty" json:"valueDuration,omitempty"`
	ValueHumanName             HumanName             `bson:",omitempty" json:"valueHumanName,omitempty"`
	ValueIdentifier            Identifier            `bson:",omitempty" json:"valueIdentifier,omitempty"`
	ValueMoney                 Money                 `bson:",omitempty" json:"valueMoney,omitempty"`
	ValuePeriod                Period                `bson:",omitempty" json:"valuePeriod,omitempty"`
	ValueQuantity              Quantity              `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueRange                 Range                 `bson:",omitempty" json:"valueRange,omitempty"`
	ValueRatio                 Ratio                 `bson:",omitempty" json:"valueRatio,omitempty"`
	ValueRatioRange            RatioRange            `bson:",omitempty" json:"valueRatioRange,omitempty"`
	ValueReference             Reference             `bson:",omitempty" json:"valueReference,omitempty"`
	ValueSampledData           SampledData           `bson:",omitempty" json:"valueSampledData,omitempty"`
	ValueSignature             Signature             `bson:",omitempty" json:"valueSignature,omitempty"`
	ValueTiming                Timing                `bson:",omitempty" json:"valueTiming,omitempty"`
	ValueContactDetail         ContactDetail         `bson:",omitempty" json:"valueContactDetail,omitempty"`
	ValueDataRequirement       DataRequirement       `bson:",omitempty" json:"valueDataRequirement,omitempty"`
	ValueExpression            Expression            `bson:",omitempty" json:"valueExpression,omitempty"`
	ValueParameterDefinition   ParameterDefinition   `bson:",omitempty" json:"valueParameterDefinition,omitempty"`
	ValueRelatedArtifact       RelatedArtifact       `bson:",omitempty" json:"valueRelatedArtifact,omitempty"`
	ValueTriggerDefinition     TriggerDefinition     `bson:",omitempty" json:"valueTriggerDefinition,omitempty"`
	ValueUsageContext          UsageContext          `bson:",omitempty" json:"valueUsageContext,omitempty"`
	ValueAvailability          Availability          `bson:",omitempty" json:"valueAvailability,omitempty"`
	ValueExtendedContactDetail ExtendedContactDetail `bson:",omitempty" json:"valueExtendedContactDetail,omitempty"`
	ValueDosage                Dosage                `bson:",omitempty" json:"valueDosage,omitempty"`
	ValueMeta                  Meta                  `bson:",omitempty" json:"valueMeta,omitempty"`
}

func (out *TaskOutput) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueBase64Binary"], &out.ValueBase64Binary); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCanonical"], &out.ValueCanonical); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCode"], &out.ValueCode); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDate"], &out.ValueDate); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDateTime"], &out.ValueDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDecimal"], &out.ValueDecimal); err == nil {
	} else if err := go1.Unmarshal(asMap["valueId"], &out.ValueId); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInstant"], &out.ValueInstant); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger64"], &out.ValueInteger64); err == nil {
	} else if err := go1.Unmarshal(asMap["valueMarkdown"], &out.ValueMarkdown); err == nil {
	} else if err := go1.Unmarshal(asMap["valueOid"], &out.ValueOid); err == nil {
	} else if err := go1.Unmarshal(asMap["valuePositiveInt"], &out.ValuePositiveInt); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTime"], &out.ValueTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUnsignedInt"], &out.ValueUnsignedInt); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUri"], &out.ValueUri); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUrl"], &out.ValueUrl); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUuid"], &out.ValueUuid); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAddress"], &out.ValueAddress); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAge"], &out.ValueAge); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAnnotation"], &out.ValueAnnotation); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCodeableReference"], &out.ValueCodeableReference); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCoding"], &out.ValueCoding); err == nil {
	} else if err := go1.Unmarshal(asMap["valueContactPoint"], &out.ValueContactPoint); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCount"], &out.ValueCount); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDistance"], &out.ValueDistance); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDuration"], &out.ValueDuration); err == nil {
	} else if err := go1.Unmarshal(asMap["valueHumanName"], &out.ValueHumanName); err == nil {
	} else if err := go1.Unmarshal(asMap["valueIdentifier"], &out.ValueIdentifier); err == nil {
	} else if err := go1.Unmarshal(asMap["valueMoney"], &out.ValueMoney); err == nil {
	} else if err := go1.Unmarshal(asMap["valuePeriod"], &out.ValuePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRatio"], &out.ValueRatio); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRatioRange"], &out.ValueRatioRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueReference"], &out.ValueReference); err == nil {
	} else if err := go1.Unmarshal(asMap["valueSampledData"], &out.ValueSampledData); err == nil {
	} else if err := go1.Unmarshal(asMap["valueSignature"], &out.ValueSignature); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTiming"], &out.ValueTiming); err == nil {
	} else if err := go1.Unmarshal(asMap["valueContactDetail"], &out.ValueContactDetail); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDataRequirement"], &out.ValueDataRequirement); err == nil {
	} else if err := go1.Unmarshal(asMap["valueExpression"], &out.ValueExpression); err == nil {
	} else if err := go1.Unmarshal(asMap["valueParameterDefinition"], &out.ValueParameterDefinition); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRelatedArtifact"], &out.ValueRelatedArtifact); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTriggerDefinition"], &out.ValueTriggerDefinition); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUsageContext"], &out.ValueUsageContext); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAvailability"], &out.ValueAvailability); err == nil {
	} else if err := go1.Unmarshal(asMap["valueExtendedContactDetail"], &out.ValueExtendedContactDetail); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDosage"], &out.ValueDosage); err == nil {
	} else if err := go1.Unmarshal(asMap["valueMeta"], &out.ValueMeta); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type TaskOutput struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // The name of the Output parameter.
	TaskOutputValuex
	Id *string `bson:"_id,omitempty" json:"id,omitempty"` // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}
type TaskOutputValuex struct {
	ValueBase64Binary          Base64Binary          `bson:",omitempty" json:"valueBase64Binary,omitempty"`
	ValueBoolean               bool                  `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueCanonical             string                `bson:",omitempty" json:"valueCanonical,omitempty"`
	ValueCode                  string                `bson:",omitempty" json:"valueCode,omitempty"`
	ValueDate                  Date                  `bson:",omitempty" json:"valueDate,omitempty"`
	ValueDateTime              DateTime              `bson:",omitempty" json:"valueDateTime,omitempty"`
	ValueDecimal               float64               `bson:",omitempty" json:"valueDecimal,omitempty"`
	ValueId                    *primitive.ObjectID   `bson:",omitempty" json:"valueId,omitempty"`
	ValueInstant               time.Time             `bson:",omitempty" json:"valueInstant,omitempty"`
	ValueInteger               int                   `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueInteger64             int64                 `bson:",omitempty" json:"valueInteger64,omitempty"`
	ValueMarkdown              string                `bson:",omitempty" json:"valueMarkdown,omitempty"`
	ValueOid                   string                `bson:",omitempty" json:"valueOid,omitempty"`
	ValuePositiveInt           int                   `bson:",omitempty" json:"valuePositiveInt,omitempty"`
	ValueString                string                `bson:",omitempty" json:"valueString,omitempty"`
	ValueTime                  Time                  `bson:",omitempty" json:"valueTime,omitempty"`
	ValueUnsignedInt           int                   `bson:",omitempty" json:"valueUnsignedInt,omitempty"`
	ValueUri                   string                `bson:",omitempty" json:"valueUri,omitempty"`
	ValueUrl                   url.URL               `bson:",omitempty" json:"valueUrl,omitempty"`
	ValueUuid                  uuid.UUID             `bson:",omitempty" json:"valueUuid,omitempty"`
	ValueAddress               Address               `bson:",omitempty" json:"valueAddress,omitempty"`
	ValueAge                   Age                   `bson:",omitempty" json:"valueAge,omitempty"`
	ValueAnnotation            Annotation            `bson:",omitempty" json:"valueAnnotation,omitempty"`
	ValueAttachment            Attachment            `bson:",omitempty" json:"valueAttachment,omitempty"`
	ValueCodeableConcept       CodeableConcept       `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueCodeableReference     CodeableReference     `bson:",omitempty" json:"valueCodeableReference,omitempty"`
	ValueCoding                Coding                `bson:",omitempty" json:"valueCoding,omitempty"`
	ValueContactPoint          ContactPoint          `bson:",omitempty" json:"valueContactPoint,omitempty"`
	ValueCount                 Count                 `bson:",omitempty" json:"valueCount,omitempty"`
	ValueDistance              Distance              `bson:",omitempty" json:"valueDistance,omitempty"`
	ValueDuration              Duration              `bson:",omitempty" json:"valueDuration,omitempty"`
	ValueHumanName             HumanName             `bson:",omitempty" json:"valueHumanName,omitempty"`
	ValueIdentifier            Identifier            `bson:",omitempty" json:"valueIdentifier,omitempty"`
	ValueMoney                 Money                 `bson:",omitempty" json:"valueMoney,omitempty"`
	ValuePeriod                Period                `bson:",omitempty" json:"valuePeriod,omitempty"`
	ValueQuantity              Quantity              `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueRange                 Range                 `bson:",omitempty" json:"valueRange,omitempty"`
	ValueRatio                 Ratio                 `bson:",omitempty" json:"valueRatio,omitempty"`
	ValueRatioRange            RatioRange            `bson:",omitempty" json:"valueRatioRange,omitempty"`
	ValueReference             Reference             `bson:",omitempty" json:"valueReference,omitempty"`
	ValueSampledData           SampledData           `bson:",omitempty" json:"valueSampledData,omitempty"`
	ValueSignature             Signature             `bson:",omitempty" json:"valueSignature,omitempty"`
	ValueTiming                Timing                `bson:",omitempty" json:"valueTiming,omitempty"`
	ValueContactDetail         ContactDetail         `bson:",omitempty" json:"valueContactDetail,omitempty"`
	ValueDataRequirement       DataRequirement       `bson:",omitempty" json:"valueDataRequirement,omitempty"`
	ValueExpression            Expression            `bson:",omitempty" json:"valueExpression,omitempty"`
	ValueParameterDefinition   ParameterDefinition   `bson:",omitempty" json:"valueParameterDefinition,omitempty"`
	ValueRelatedArtifact       RelatedArtifact       `bson:",omitempty" json:"valueRelatedArtifact,omitempty"`
	ValueTriggerDefinition     TriggerDefinition     `bson:",omitempty" json:"valueTriggerDefinition,omitempty"`
	ValueUsageContext          UsageContext          `bson:",omitempty" json:"valueUsageContext,omitempty"`
	ValueAvailability          Availability          `bson:",omitempty" json:"valueAvailability,omitempty"`
	ValueExtendedContactDetail ExtendedContactDetail `bson:",omitempty" json:"valueExtendedContactDetail,omitempty"`
	ValueDosage                Dosage                `bson:",omitempty" json:"valueDosage,omitempty"`
	ValueMeta                  Meta                  `bson:",omitempty" json:"valueMeta,omitempty"`
}

func (out *TaskPerformer) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["function"]) > 0 {
		if err := go1.Unmarshal(asMap["function"], &out.Function); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["actor"], &out.Actor); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type TaskPerformer struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Function  *CodeableConcept `bson:",omitempty" json:"function,omitempty"`                 // A code or description of the performer of the task.
	Actor     *Reference       `binding:"required" bson:",omitempty" json:"actor,omitempty"` // The actor or entity who performed the task.
	Id        *string          `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension     `bson:",omitempty" json:"extension,omitempty"`                // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *TerminologyCapabilities) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"TerminologyCapabilities\"" {
		return fmt.Errorf("resourceType is not %s", "TerminologyCapabilities")
	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["codeSearch"]) > 0 {
		if err := go1.Unmarshal(asMap["codeSearch"], &out.CodeSearch); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["kind"], &out.Kind); err != nil {
		return err
	}

	if len(asMap["expansion"]) > 0 {
		if err := go1.Unmarshal(asMap["expansion"], &out.Expansion); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["lockedDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lockedDate"], &out.LockedDate); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["codeSystem"]) > 0 {
		if err := go1.Unmarshal(asMap["codeSystem"], &out.CodeSystem); err != nil {
			return err
		}

	}
	if len(asMap["closure"]) > 0 {
		if err := go1.Unmarshal(asMap["closure"], &out.Closure); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["translation"]) > 0 {
		if err := go1.Unmarshal(asMap["translation"], &out.Translation); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
		return err
	}

	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["software"]) > 0 {
		if err := go1.Unmarshal(asMap["software"], &out.Software); err != nil {
			return err
		}

	}
	if len(asMap["implementation"]) > 0 {
		if err := go1.Unmarshal(asMap["implementation"], &out.Implementation); err != nil {
			return err
		}

	}
	if len(asMap["validateCode"]) > 0 {
		if err := go1.Unmarshal(asMap["validateCode"], &out.ValidateCode); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	return nil
}

type TerminologyCapabilities struct {
	Meta       *Meta         `bson:",omitempty" json:"meta,omitempty"`       // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Extension  []*Extension  `bson:",omitempty" json:"extension,omitempty"`  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Identifier []*Identifier `bson:",omitempty" json:"identifier,omitempty"` // A formal identifier that is used to identify this terminology capabilities when it is represented in other formats, or referenced in a specification, model, design or an instance.
	TerminologyCapabilitiesVersionAlgorithmx
	Contact           []*ContactDetail `bson:",omitempty" json:"contact,omitempty"`           // Contact details to assist a user in finding and communicating with the publisher.
	CodeSearch        *string          `bson:",omitempty" json:"codeSearch,omitempty"`        // The degree to which the server supports the code search parameter on ValueSet, if it is supported.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Kind           *string                                `binding:"required" bson:",omitempty" json:"kind,omitempty"` // The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).
	Expansion      *TerminologyCapabilitiesExpansion      `binding:"omitempty" bson:",omitempty"`
	Language       *string                                `bson:",omitempty" json:"language,omitempty"`       // The base language in which the resource is written.
	UseContext     []*UsageContext                        `bson:",omitempty" json:"useContext,omitempty"`     // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate terminology capabilities instances.
	Jurisdiction   []*CodeableConcept                     `bson:",omitempty" json:"jurisdiction,omitempty"`   // A legal or geographic region in which the terminology capabilities is intended to be used.
	Purpose        *string                                `bson:",omitempty" json:"purpose,omitempty"`        // Explanation of why this terminology capabilities is needed and why it has been designed as it has.
	CopyrightLabel *string                                `bson:",omitempty" json:"copyrightLabel,omitempty"` // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	LockedDate     *bool                                  `bson:",omitempty" json:"lockedDate,omitempty"`     // Whether the server supports lockedDate.
	Version        *string                                `bson:",omitempty" json:"version,omitempty"`        // The identifier that is used to identify this version of the terminology capabilities when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the terminology capabilities author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	CodeSystem     *TerminologyCapabilitiesCodeSystem     `binding:"omitempty" bson:",omitempty"`
	Closure        *TerminologyCapabilitiesClosure        `binding:"omitempty" bson:",omitempty"`
	Id             *primitive.ObjectID                    `bson:"_id,omitempty" json:"id,omitempty"`         // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ImplicitRules  *string                                `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Text           *Narrative                             `bson:",omitempty" json:"text,omitempty"`          // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Url            *string                                `bson:",omitempty" json:"url,omitempty"`           // An absolute URI that is used to identify this terminology capabilities when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this terminology capabilities is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the terminology capabilities is stored on different servers.
	Publisher      *string                                `bson:",omitempty" json:"publisher,omitempty"`     // The name of the organization or individual responsible for the release and ongoing maintenance of the terminology capabilities.
	Translation    *TerminologyCapabilitiesTranslation    `binding:"omitempty" bson:",omitempty"`
	Contained      []*Resource                            `bson:",omitempty" json:"contained,omitempty"`               // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Date           *DateTime                              `binding:"required" bson:",omitempty" json:"date,omitempty"` // The date  (and optionally time) when the terminology capabilities was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the terminology capabilities changes.
	Description    *string                                `bson:",omitempty" json:"description,omitempty"`             // A free text natural language description of the terminology capabilities from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
	Software       *TerminologyCapabilitiesSoftware       `binding:"omitempty" bson:",omitempty"`
	Implementation *TerminologyCapabilitiesImplementation `binding:"omitempty" bson:",omitempty"`
	ValidateCode   *TerminologyCapabilitiesValidateCode   `binding:"omitempty" bson:",omitempty"`
	Name           *string                                `bson:",omitempty" json:"name,omitempty"`                      // A natural language name identifying the terminology capabilities. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Title          *string                                `bson:",omitempty" json:"title,omitempty"`                     // A short, descriptive, user-friendly title for the terminology capabilities.
	Status         *string                                `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this terminology capabilities. Enables tracking the life-cycle of the content.
	Experimental   *bool                                  `bson:",omitempty" json:"experimental,omitempty"`              // A Boolean value to indicate that this terminology capabilities is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Copyright      *string                                `bson:",omitempty" json:"copyright,omitempty"`                 // A copyright statement relating to the terminology capabilities and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the terminology capabilities.
	ResourceType   string                                 `binding:"omitempty" bson:"-" json:"resourceType"`
}
type TerminologyCapabilitiesVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *TerminologyCapabilitiesExpansion) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["textFilter"]) > 0 {
		if err := go1.Unmarshal(asMap["textFilter"], &out.TextFilter); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["hierarchical"]) > 0 {
		if err := go1.Unmarshal(asMap["hierarchical"], &out.Hierarchical); err != nil {
			return err
		}

	}
	if len(asMap["paging"]) > 0 {
		if err := go1.Unmarshal(asMap["paging"], &out.Paging); err != nil {
			return err
		}

	}
	if len(asMap["incomplete"]) > 0 {
		if err := go1.Unmarshal(asMap["incomplete"], &out.Incomplete); err != nil {
			return err
		}

	}
	if len(asMap["parameter"]) > 0 {
		if err := go1.Unmarshal(asMap["parameter"], &out.Parameter); err != nil {
			return err
		}

	}
	return nil
}

type TerminologyCapabilitiesExpansion struct {
	TextFilter        *string      `bson:",omitempty" json:"textFilter,omitempty"`        // Documentation about text searching works.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Hierarchical *bool                                      `bson:",omitempty" json:"hierarchical,omitempty"` // Whether the server can return nested value sets.
	Paging       *bool                                      `bson:",omitempty" json:"paging,omitempty"`       // Whether the server supports paging on expansion.
	Incomplete   *bool                                      `bson:",omitempty" json:"incomplete,omitempty"`   // True if requests for incomplete expansions are allowed.
	Parameter    *TerminologyCapabilitiesExpansionParameter `binding:"omitempty" bson:",omitempty"`
}

func (out *TerminologyCapabilitiesExpansionParameter) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if len(asMap["documentation"]) > 0 {
		if err := go1.Unmarshal(asMap["documentation"], &out.Documentation); err != nil {
			return err
		}

	}
	return nil
}

type TerminologyCapabilitiesExpansionParameter struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name          *string `binding:"required" bson:",omitempty" json:"name,omitempty"` // Name of the supported expansion parameter.
	Documentation *string `bson:",omitempty" json:"documentation,omitempty"`           // Description of support for parameter.
}

func (out *TerminologyCapabilitiesCodeSystem) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["uri"]) > 0 {
		if err := go1.Unmarshal(asMap["uri"], &out.Uri); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["content"], &out.Content); err != nil {
		return err
	}

	if len(asMap["subsumption"]) > 0 {
		if err := go1.Unmarshal(asMap["subsumption"], &out.Subsumption); err != nil {
			return err
		}

	}
	return nil
}

type TerminologyCapabilitiesCodeSystem struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Uri         *string                                   `bson:",omitempty" json:"uri,omitempty"` // Canonical identifier for the code system, represented as a URI.
	Version     *TerminologyCapabilitiesCodeSystemVersion `binding:"omitempty" bson:",omitempty"`
	Content     *string                                   `binding:"required" bson:",omitempty" json:"content,omitempty"` // The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.
	Subsumption *bool                                     `bson:",omitempty" json:"subsumption,omitempty"`                // True if subsumption is supported for this version of the code system.
}

func (out *TerminologyCapabilitiesCodeSystemVersion) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["isDefault"]) > 0 {
		if err := go1.Unmarshal(asMap["isDefault"], &out.IsDefault); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["compositional"]) > 0 {
		if err := go1.Unmarshal(asMap["compositional"], &out.Compositional); err != nil {
			return err
		}

	}
	if len(asMap["filter"]) > 0 {
		if err := go1.Unmarshal(asMap["filter"], &out.Filter); err != nil {
			return err
		}

	}
	if len(asMap["property"]) > 0 {
		if err := go1.Unmarshal(asMap["property"], &out.Property); err != nil {
			return err
		}

	}
	return nil
}

type TerminologyCapabilitiesCodeSystemVersion struct {
	Language          []*string    `bson:",omitempty" json:"language,omitempty"`          // Language Displays supported.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Code              *string      `bson:",omitempty" json:"code,omitempty"`              // For version-less code systems, there should be a single version with no identifier.
	IsDefault         *bool        `bson:",omitempty" json:"isDefault,omitempty"`         // If this is the default version for this code system.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Compositional *bool                                           `bson:",omitempty" json:"compositional,omitempty"` // If the compositional grammar defined by the code system is supported.
	Filter        *TerminologyCapabilitiesCodeSystemVersionFilter `binding:"omitempty" bson:",omitempty"`
	Property      []*string                                       `bson:",omitempty" json:"property,omitempty"` // Properties supported for $lookup.
}

func (out *TerminologyCapabilitiesCodeSystemVersionFilter) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["op"], &out.Op); err != nil {
		return err
	}

	return nil
}

type TerminologyCapabilitiesCodeSystemVersionFilter struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code *string   `binding:"required" bson:",omitempty" json:"code,omitempty"` // Code of the property supported.
	Op   []*string `binding:"required" bson:",omitempty" json:"op,omitempty"`   // Operations supported for the property.
}

func (out *TerminologyCapabilitiesClosure) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["translation"]) > 0 {
		if err := go1.Unmarshal(asMap["translation"], &out.Translation); err != nil {
			return err
		}

	}
	return nil
}

type TerminologyCapabilitiesClosure struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Translation *bool `bson:",omitempty" json:"translation,omitempty"` // If cross-system closure is supported.
}

func (out *TerminologyCapabilitiesTranslation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["needsMap"], &out.NeedsMap); err != nil {
		return err
	}

	return nil
}

type TerminologyCapabilitiesTranslation struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	NeedsMap *bool `binding:"required" bson:",omitempty" json:"needsMap,omitempty"` // Whether the client must identify the map.
}

func (out *TerminologyCapabilitiesSoftware) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type TerminologyCapabilitiesSoftware struct {
	Name              *string      `binding:"required" bson:",omitempty" json:"name,omitempty"` // Name the software is known by.
	Version           *string      `bson:",omitempty" json:"version,omitempty"`                 // The version identifier for the software covered by this statement.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`       /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *TerminologyCapabilitiesImplementation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
		return err
	}

	return nil
}

type TerminologyCapabilitiesImplementation struct {
	Url               *url.URL     `bson:",omitempty" json:"url,omitempty"`               // An absolute base URL for the implementation.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Description *string `binding:"required" bson:",omitempty" json:"description,omitempty"` // Information about the specific installation that this terminology capability statement relates to.
}

func (out *TerminologyCapabilitiesValidateCode) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["translations"], &out.Translations); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type TerminologyCapabilitiesValidateCode struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Translations *bool   `binding:"required" bson:",omitempty" json:"translations,omitempty"` // Whether translations are validated.
	Id           *string `bson:"_id,omitempty" json:"id,omitempty"`                           // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *TestPlan) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"TestPlan\"" {
		return fmt.Errorf("resourceType is not %s", "TestPlan")
	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["dependency"]) > 0 {
		if err := go1.Unmarshal(asMap["dependency"], &out.Dependency); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["scope"]) > 0 {
		if err := go1.Unmarshal(asMap["scope"], &out.Scope); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["testTools"]) > 0 {
		if err := go1.Unmarshal(asMap["testTools"], &out.TestTools); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["exitCriteria"]) > 0 {
		if err := go1.Unmarshal(asMap["exitCriteria"], &out.ExitCriteria); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["category"]) > 0 {
		if err := go1.Unmarshal(asMap["category"], &out.Category); err != nil {
			return err
		}

	}
	if len(asMap["testCase"]) > 0 {
		if err := go1.Unmarshal(asMap["testCase"], &out.TestCase); err != nil {
			return err
		}

	}
	return nil
}

type TestPlan struct {
	Status         *string             `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this test plan. Enables tracking the life-cycle of the content.
	CopyrightLabel *string             `bson:",omitempty" json:"copyrightLabel,omitempty"`            // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Id             *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ImplicitRules  *string             `bson:",omitempty" json:"implicitRules,omitempty"`             // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language       *string             `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Jurisdiction   []*CodeableConcept  `bson:",omitempty" json:"jurisdiction,omitempty"`              // A legal or geographic region in which the test plan is intended to be used.
	Dependency     *TestPlanDependency `binding:"omitempty" bson:",omitempty"`
	Url            *string             `bson:",omitempty" json:"url,omitempty"`        // An absolute URI that is used to identify this test plan when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this test plan is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the test plan is stored on different servers.
	Identifier     []*Identifier       `bson:",omitempty" json:"identifier,omitempty"` // A formal identifier that is used to identify this test plan when it is represented in other formats, or referenced in a specification, model, design or an instance.
	TestPlanVersionAlgorithmx
	Experimental      *bool        `bson:",omitempty" json:"experimental,omitempty"`      // A Boolean value to indicate that this test plan is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Purpose           *string      `bson:",omitempty" json:"purpose,omitempty"`           // Explanation of why this test plan is needed and why it has been designed as it has.
	Copyright         *string      `bson:",omitempty" json:"copyright,omitempty"`         // A copyright statement relating to the test plan and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the test plan. The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.
	Scope             []*Reference `bson:",omitempty" json:"scope,omitempty"`             // What is being tested with this Test Plan - a conformance resource, or narrative criteria, or an external reference...
	Publisher         *string      `bson:",omitempty" json:"publisher,omitempty"`         // The name of the organization or individual responsible for the release and ongoing maintenance of the test plan.
	Description       *string      `bson:",omitempty" json:"description,omitempty"`       // A free text natural language description of the test plan from a consumer's perspective.
	Contained         []*Resource  `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	TestTools         *string      `bson:",omitempty" json:"testTools,omitempty"`         // A description of test tools to be used in the test plan.
	Meta              *Meta        `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Name              *string      `bson:",omitempty" json:"name,omitempty"`              // A natural language name identifying the test plan. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Version      *string            `bson:",omitempty" json:"version,omitempty"`      // The identifier that is used to identify this version of the test plan when it is referenced in a specification, model, design or instance.  This is an arbitrary value managed by the test plan author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Date         *DateTime          `bson:",omitempty" json:"date,omitempty"`         // The date (and optionally time) when the test plan was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the test plan changes.
	ExitCriteria *string            `bson:",omitempty" json:"exitCriteria,omitempty"` // The threshold or criteria for the test plan to be considered successfully executed - narrative.
	Text         *Narrative         `bson:",omitempty" json:"text,omitempty"`         // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension    []*Extension       `bson:",omitempty" json:"extension,omitempty"`    // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Title        *string            `bson:",omitempty" json:"title,omitempty"`        // A short, descriptive, user-friendly title for the test plan.
	Contact      []*ContactDetail   `bson:",omitempty" json:"contact,omitempty"`      // Contact details to assist a user in finding and communicating with the publisher.
	UseContext   []*UsageContext    `bson:",omitempty" json:"useContext,omitempty"`   // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate test plan instances.
	Category     []*CodeableConcept `bson:",omitempty" json:"category,omitempty"`     // The category of the Test Plan - can be acceptance, unit, performance, etc.
	TestCase     *TestPlanTestCase  `binding:"omitempty" bson:",omitempty"`
	ResourceType string             `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *TestPlanDependency) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["predecessor"]) > 0 {
		if err := go1.Unmarshal(asMap["predecessor"], &out.Predecessor); err != nil {
			return err
		}

	}
	return nil
}

type TestPlanDependency struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Description *string    `bson:",omitempty" json:"description,omitempty"` // A textual description of the criterium - what is needed for the dependency to be considered met.
	Predecessor *Reference `bson:",omitempty" json:"predecessor,omitempty"` // Predecessor test plans - those that are expected to be successfully performed as a dependency for the execution of this test plan.
}
type TestPlanVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *TestPlanTestCase) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["testRun"]) > 0 {
		if err := go1.Unmarshal(asMap["testRun"], &out.TestRun); err != nil {
			return err
		}

	}
	if len(asMap["testData"]) > 0 {
		if err := go1.Unmarshal(asMap["testData"], &out.TestData); err != nil {
			return err
		}

	}
	if len(asMap["assertion"]) > 0 {
		if err := go1.Unmarshal(asMap["assertion"], &out.Assertion); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["sequence"]) > 0 {
		if err := go1.Unmarshal(asMap["sequence"], &out.Sequence); err != nil {
			return err
		}

	}
	if len(asMap["scope"]) > 0 {
		if err := go1.Unmarshal(asMap["scope"], &out.Scope); err != nil {
			return err
		}

	}
	if len(asMap["dependency"]) > 0 {
		if err := go1.Unmarshal(asMap["dependency"], &out.Dependency); err != nil {
			return err
		}

	}
	return nil
}

type TestPlanTestCase struct {
	Id                *string                    `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension               `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	TestRun           *TestPlanTestCaseTestRun   `binding:"omitempty" bson:",omitempty"`
	TestData          *TestPlanTestCaseTestData  `binding:"omitempty" bson:",omitempty"`
	Assertion         *TestPlanTestCaseAssertion `binding:"omitempty" bson:",omitempty"`
	ModifierExtension []*Extension               `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Sequence   *int                        `bson:",omitempty" json:"sequence,omitempty"` // Sequence of test case - an ordinal number that indicates the order for the present test case in the test plan.
	Scope      []*Reference                `bson:",omitempty" json:"scope,omitempty"`    // The scope or artifact covered by the case, when the individual test case is associated with a testable artifact.
	Dependency *TestPlanTestCaseDependency `binding:"omitempty" bson:",omitempty"`
}

func (out *TestPlanTestCaseTestRun) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["narrative"]) > 0 {
		if err := go1.Unmarshal(asMap["narrative"], &out.Narrative); err != nil {
			return err
		}

	}
	if len(asMap["script"]) > 0 {
		if err := go1.Unmarshal(asMap["script"], &out.Script); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type TestPlanTestCaseTestRun struct {
	Narrative         *string                        `bson:",omitempty" json:"narrative,omitempty"` // The narrative description of the tests.
	Script            *TestPlanTestCaseTestRunScript `binding:"omitempty" bson:",omitempty"`
	Id                *string                        `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                   `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                   `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *TestPlanTestCaseTestRunScript) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sourceString"], &out.SourceString); err == nil {
	} else if err := go1.Unmarshal(asMap["sourceReference"], &out.SourceReference); err == nil {
	} else {

	}
	return nil
}

type TestPlanTestCaseTestRunScript struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Language *CodeableConcept `bson:",omitempty" json:"language,omitempty"` // The language for the test cases e.g. 'gherkin', 'testscript'.
	TestPlanTestCaseTestRunScriptSourcex
}
type TestPlanTestCaseTestRunScriptSourcex struct {
	SourceString    string    `bson:",omitempty" json:"sourceString,omitempty"`
	SourceReference Reference `bson:",omitempty" json:"sourceReference,omitempty"`
}

func (out *TestPlanTestCaseTestData) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if len(asMap["content"]) > 0 {
		if err := go1.Unmarshal(asMap["content"], &out.Content); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["sourceString"], &out.SourceString); err == nil {
	} else if err := go1.Unmarshal(asMap["sourceReference"], &out.SourceReference); err == nil {
	} else {

	}
	return nil
}

type TestPlanTestCaseTestData struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type    *Coding    `binding:"required" bson:",omitempty" json:"type,omitempty"` // The type of test data description, e.g. 'synthea'.
	Content *Reference `bson:",omitempty" json:"content,omitempty"`                 // The actual test resources when they exist.
	TestPlanTestCaseTestDataSourcex
}
type TestPlanTestCaseTestDataSourcex struct {
	SourceString    string    `bson:",omitempty" json:"sourceString,omitempty"`
	SourceReference Reference `bson:",omitempty" json:"sourceReference,omitempty"`
}

func (out *TestPlanTestCaseAssertion) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["result"]) > 0 {
		if err := go1.Unmarshal(asMap["result"], &out.Result); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["object"]) > 0 {
		if err := go1.Unmarshal(asMap["object"], &out.Object); err != nil {
			return err
		}

	}
	return nil
}

type TestPlanTestCaseAssertion struct {
	Result            []*CodeableReference `bson:",omitempty" json:"result,omitempty"`            // The test assertion - the expected outcome from the test case execution.
	Id                *string              `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension         `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension         `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type   []*CodeableConcept   `bson:",omitempty" json:"type,omitempty"`   // The test assertion type - this can be used to group assertions as 'required' or 'optional', or can be used for other classification of the assertion.
	Object []*CodeableReference `bson:",omitempty" json:"object,omitempty"` // The focus or object of the assertion i.e. a resource.
}

func (out *TestPlanTestCaseDependency) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["predecessor"]) > 0 {
		if err := go1.Unmarshal(asMap["predecessor"], &out.Predecessor); err != nil {
			return err
		}

	}
	return nil
}

type TestPlanTestCaseDependency struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Description *string    `bson:",omitempty" json:"description,omitempty"` // Description of the criteria.
	Predecessor *Reference `bson:",omitempty" json:"predecessor,omitempty"` // Link to predecessor test plans.
}

func (out *TestReport) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"TestReport\"" {
		return fmt.Errorf("resourceType is not %s", "TestReport")
	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["test"]) > 0 {
		if err := go1.Unmarshal(asMap["test"], &out.Test); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["participant"]) > 0 {
		if err := go1.Unmarshal(asMap["participant"], &out.Participant); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["tester"]) > 0 {
		if err := go1.Unmarshal(asMap["tester"], &out.Tester); err != nil {
			return err
		}

	}
	if len(asMap["issued"]) > 0 {
		if err := go1.Unmarshal(asMap["issued"], &out.Issued); err != nil {
			return err
		}

	}
	if len(asMap["setup"]) > 0 {
		if err := go1.Unmarshal(asMap["setup"], &out.Setup); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["testScript"], &out.TestScript); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["result"], &out.Result); err != nil {
		return err
	}

	if len(asMap["score"]) > 0 {
		if err := go1.Unmarshal(asMap["score"], &out.Score); err != nil {
			return err
		}

	}
	if len(asMap["teardown"]) > 0 {
		if err := go1.Unmarshal(asMap["teardown"], &out.Teardown); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type TestReport struct {
	Contained         []*Resource  `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Test          *TestReportTest        `binding:"omitempty" bson:",omitempty"`
	Meta          *Meta                  `bson:",omitempty" json:"meta,omitempty"` // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Participant   *TestReportParticipant `binding:"omitempty" bson:",omitempty"`
	Text          *Narrative             `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Extension     []*Extension           `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Name          *string                `bson:",omitempty" json:"name,omitempty"`                      // A free text natural language name identifying the executed TestReport.
	Status        *string                `binding:"required" bson:",omitempty" json:"status,omitempty"` // The current state of this test report.
	Tester        *string                `bson:",omitempty" json:"tester,omitempty"`                    // Name of the tester producing this report (Organization or individual).
	Issued        *DateTime              `bson:",omitempty" json:"issued,omitempty"`                    // When the TestScript was executed and this TestReport was generated.
	Setup         *TestReportSetup       `binding:"omitempty" bson:",omitempty"`
	Language      *string                `bson:",omitempty" json:"language,omitempty"`                      // The base language in which the resource is written.
	ImplicitRules *string                `bson:",omitempty" json:"implicitRules,omitempty"`                 // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Identifier    *Identifier            `bson:",omitempty" json:"identifier,omitempty"`                    // Identifier for the TestReport assigned for external purposes outside the context of FHIR.
	TestScript    *string                `binding:"required" bson:",omitempty" json:"testScript,omitempty"` // Ideally this is an absolute URL that is used to identify the version-specific TestScript that was executed, matching the `TestScript.url`.
	Result        *string                `binding:"required" bson:",omitempty" json:"result,omitempty"`     // The overall result from the execution of the TestScript.
	Score         *float64               `bson:",omitempty" json:"score,omitempty"`                         // The final score (percentage of tests passed) resulting from the execution of the TestScript.
	Teardown      *TestReportTeardown    `binding:"omitempty" bson:",omitempty"`
	Id            *primitive.ObjectID    `bson:"_id,omitempty" json:"id,omitempty"` // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ResourceType  string                 `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *TestReportTest) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["action"], &out.Action); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	return nil
}

type TestReportTest struct {
	Action            *TestReportTestAction `binding:"omitempty" bson:",omitempty"`
	Id                *string               `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension          `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension          `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name        *string `bson:",omitempty" json:"name,omitempty"`        // The name of this test used for tracking/logging purposes by test engines.
	Description *string `bson:",omitempty" json:"description,omitempty"` // A short description of the test used by test engines for tracking and reporting purposes.
}

func (out *TestReportTestAction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["operation"]) > 0 {
		if err := go1.Unmarshal(asMap["operation"], &out.Operation); err != nil {
			return err
		}

	}
	if len(asMap["assert"]) > 0 {
		if err := go1.Unmarshal(asMap["assert"], &out.Assert); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type TestReportTestAction struct {
	Operation         interface{}
	Assert            interface{}
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *TestReportParticipant) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["uri"], &out.Uri); err != nil {
		return err
	}

	if len(asMap["display"]) > 0 {
		if err := go1.Unmarshal(asMap["display"], &out.Display); err != nil {
			return err
		}

	}
	return nil
}

type TestReportParticipant struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type    *string `binding:"required" bson:",omitempty" json:"type,omitempty"` // The type of participant.
	Uri     *string `binding:"required" bson:",omitempty" json:"uri,omitempty"`  // The uri of the participant. An absolute URL is preferred.
	Display *string `bson:",omitempty" json:"display,omitempty"`                 // The display name of the participant.
}

func (out *TestReportSetup) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["action"], &out.Action); err != nil {
		return err
	}

	return nil
}

type TestReportSetup struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Action *TestReportSetupAction `binding:"omitempty" bson:",omitempty"`
}

func (out *TestReportSetupAction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["operation"]) > 0 {
		if err := go1.Unmarshal(asMap["operation"], &out.Operation); err != nil {
			return err
		}

	}
	if len(asMap["assert"]) > 0 {
		if err := go1.Unmarshal(asMap["assert"], &out.Assert); err != nil {
			return err
		}

	}
	return nil
}

type TestReportSetupAction struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Operation *TestReportSetupActionOperation `binding:"omitempty" bson:",omitempty"`
	Assert    *TestReportSetupActionAssert    `binding:"omitempty" bson:",omitempty"`
}

func (out *TestReportSetupActionOperation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["detail"]) > 0 {
		if err := go1.Unmarshal(asMap["detail"], &out.Detail); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["result"], &out.Result); err != nil {
		return err
	}

	if len(asMap["message"]) > 0 {
		if err := go1.Unmarshal(asMap["message"], &out.Message); err != nil {
			return err
		}

	}
	return nil
}

type TestReportSetupActionOperation struct {
	Detail            *string      `bson:",omitempty" json:"detail,omitempty"`            // A link to further details on the result.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Result  *string `binding:"required" bson:",omitempty" json:"result,omitempty"` // The result of this operation.
	Message *string `bson:",omitempty" json:"message,omitempty"`                   // An explanatory message associated with the result.
}

func (out *TestReportSetupActionAssert) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["result"], &out.Result); err != nil {
		return err
	}

	if len(asMap["message"]) > 0 {
		if err := go1.Unmarshal(asMap["message"], &out.Message); err != nil {
			return err
		}

	}
	if len(asMap["detail"]) > 0 {
		if err := go1.Unmarshal(asMap["detail"], &out.Detail); err != nil {
			return err
		}

	}
	if len(asMap["requirement"]) > 0 {
		if err := go1.Unmarshal(asMap["requirement"], &out.Requirement); err != nil {
			return err
		}

	}
	return nil
}

type TestReportSetupActionAssert struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Result      *string                                 `binding:"required" bson:",omitempty" json:"result,omitempty"` // The result of this assertion.
	Message     *string                                 `bson:",omitempty" json:"message,omitempty"`                   // An explanatory message associated with the result.
	Detail      *string                                 `bson:",omitempty" json:"detail,omitempty"`                    // A link to further details on the result.
	Requirement *TestReportSetupActionAssertRequirement `binding:"omitempty" bson:",omitempty"`
}

func (out *TestReportSetupActionAssertRequirement) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["linkUri"], &out.LinkUri); err == nil {
	} else if err := go1.Unmarshal(asMap["linkCanonical"], &out.LinkCanonical); err == nil {
	} else {

	}
	return nil
}

type TestReportSetupActionAssertRequirement struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	TestReportSetupActionAssertRequirementLinkx
}
type TestReportSetupActionAssertRequirementLinkx struct {
	LinkUri       string `bson:",omitempty" json:"linkUri,omitempty"`
	LinkCanonical string `bson:",omitempty" json:"linkCanonical,omitempty"`
}

func (out *TestReportTeardown) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["action"], &out.Action); err != nil {
		return err
	}

	return nil
}

type TestReportTeardown struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Action *TestReportTeardownAction `binding:"omitempty" bson:",omitempty"`
}

func (out *TestReportTeardownAction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["operation"], &out.Operation); err != nil {
		return err
	}

	return nil
}

type TestReportTeardownAction struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Operation interface{}
}

func (out *TestScript) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"TestScript\"" {
		return fmt.Errorf("resourceType is not %s", "TestScript")
	}
	if len(asMap["origin"]) > 0 {
		if err := go1.Unmarshal(asMap["origin"], &out.Origin); err != nil {
			return err
		}

	}
	if len(asMap["setup"]) > 0 {
		if err := go1.Unmarshal(asMap["setup"], &out.Setup); err != nil {
			return err
		}

	}
	if len(asMap["test"]) > 0 {
		if err := go1.Unmarshal(asMap["test"], &out.Test); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["metadata"]) > 0 {
		if err := go1.Unmarshal(asMap["metadata"], &out.Metadata); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["scope"]) > 0 {
		if err := go1.Unmarshal(asMap["scope"], &out.Scope); err != nil {
			return err
		}

	}
	if len(asMap["teardown"]) > 0 {
		if err := go1.Unmarshal(asMap["teardown"], &out.Teardown); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["variable"]) > 0 {
		if err := go1.Unmarshal(asMap["variable"], &out.Variable); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["destination"]) > 0 {
		if err := go1.Unmarshal(asMap["destination"], &out.Destination); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	if len(asMap["fixture"]) > 0 {
		if err := go1.Unmarshal(asMap["fixture"], &out.Fixture); err != nil {
			return err
		}

	}
	if len(asMap["profile"]) > 0 {
		if err := go1.Unmarshal(asMap["profile"], &out.Profile); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	return nil
}

type TestScript struct {
	Origin *TestScriptOrigin `binding:"omitempty" bson:",omitempty"`
	Setup  *TestScriptSetup  `binding:"omitempty" bson:",omitempty"`
	Test   *TestScriptTest   `binding:"omitempty" bson:",omitempty"`
	TestScriptVersionAlgorithmx
	Status            *string             `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this test script. Enables tracking the life-cycle of the content.
	Title             *string             `bson:",omitempty" json:"title,omitempty"`                     // A short, descriptive, user-friendly title for the test script.
	CopyrightLabel    *string             `bson:",omitempty" json:"copyrightLabel,omitempty"`            // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	Metadata          *TestScriptMetadata `binding:"omitempty" bson:",omitempty"`
	ImplicitRules     *string             `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Contained         []*Resource         `bson:",omitempty" json:"contained,omitempty"`     // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	UseContext        []*UsageContext     `bson:",omitempty" json:"useContext,omitempty"`    // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate test script instances.
	Scope             *TestScriptScope    `binding:"omitempty" bson:",omitempty"`
	Teardown          *TestScriptTeardown `binding:"omitempty" bson:",omitempty"`
	Meta              *Meta               `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name         *string                `binding:"required" bson:",omitempty" json:"name,omitempty"` // A natural language name identifying the test script. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Description  *string                `bson:",omitempty" json:"description,omitempty"`             // A free text natural language description of the test script from a consumer's perspective.
	Copyright    *string                `bson:",omitempty" json:"copyright,omitempty"`               // A copyright statement relating to the test script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the test script.
	Extension    []*Extension           `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Version      *string                `bson:",omitempty" json:"version,omitempty"`                 // The identifier that is used to identify this version of the test script when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the test script author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Identifier   []*Identifier          `bson:",omitempty" json:"identifier,omitempty"`              // A formal identifier that is used to identify this test script when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Experimental *bool                  `bson:",omitempty" json:"experimental,omitempty"`            // A Boolean value to indicate that this test script is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Contact      []*ContactDetail       `bson:",omitempty" json:"contact,omitempty"`                 // Contact details to assist a user in finding and communicating with the publisher.
	Variable     *TestScriptVariable    `binding:"omitempty" bson:",omitempty"`
	Language     *string                `bson:",omitempty" json:"language,omitempty"` // The base language in which the resource is written.
	Text         *Narrative             `bson:",omitempty" json:"text,omitempty"`     // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Destination  *TestScriptDestination `binding:"omitempty" bson:",omitempty"`
	Id           *primitive.ObjectID    `bson:"_id,omitempty" json:"id,omitempty"`        // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Date         *DateTime              `bson:",omitempty" json:"date,omitempty"`         // The date (and optionally time) when the test script was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the test script changes.
	Jurisdiction []*CodeableConcept     `bson:",omitempty" json:"jurisdiction,omitempty"` // A legal or geographic region in which the test script is intended to be used.
	Purpose      *string                `bson:",omitempty" json:"purpose,omitempty"`      // Explanation of why this test script is needed and why it has been designed as it has.
	Fixture      *TestScriptFixture     `binding:"omitempty" bson:",omitempty"`
	Profile      []*string              `bson:",omitempty" json:"profile,omitempty"`   // Reference to the profile to be used for validation.
	Url          *string                `bson:",omitempty" json:"url,omitempty"`       // An absolute URI that is used to identify this test script when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this test script is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the test script is stored on different servers.
	Publisher    *string                `bson:",omitempty" json:"publisher,omitempty"` // The name of the organization or individual responsible for the release and ongoing maintenance of the test script.
	ResourceType string                 `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *TestScriptOrigin) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["index"], &out.Index); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["profile"], &out.Profile); err != nil {
		return err
	}

	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type TestScriptOrigin struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Index     *int         `binding:"required" bson:",omitempty" json:"index,omitempty"`   // Abstract name given to an origin server in this test script.  The name is provided as a number starting at 1.
	Profile   *Coding      `binding:"required" bson:",omitempty" json:"profile,omitempty"` // The type of origin profile the test system supports.
	Url       *url.URL     `bson:",omitempty" json:"url,omitempty"`                        // The explicit url path of the origin server used in this test script.
	Id        *string      `bson:"_id,omitempty" json:"id,omitempty"`                      // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"`                  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *TestScriptSetup) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["action"], &out.Action); err != nil {
		return err
	}

	return nil
}

type TestScriptSetup struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Action *TestScriptSetupAction `binding:"omitempty" bson:",omitempty"`
}

func (out *TestScriptSetupAction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["operation"]) > 0 {
		if err := go1.Unmarshal(asMap["operation"], &out.Operation); err != nil {
			return err
		}

	}
	if len(asMap["assert"]) > 0 {
		if err := go1.Unmarshal(asMap["assert"], &out.Assert); err != nil {
			return err
		}

	}
	return nil
}

type TestScriptSetupAction struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Operation *TestScriptSetupActionOperation `binding:"omitempty" bson:",omitempty"`
	Assert    *TestScriptSetupActionAssert    `binding:"omitempty" bson:",omitempty"`
}

func (out *TestScriptSetupActionOperation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["resource"]) > 0 {
		if err := go1.Unmarshal(asMap["resource"], &out.Resource); err != nil {
			return err
		}

	}
	if len(asMap["destination"]) > 0 {
		if err := go1.Unmarshal(asMap["destination"], &out.Destination); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["encodeRequestUrl"], &out.EncodeRequestUrl); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["method"]) > 0 {
		if err := go1.Unmarshal(asMap["method"], &out.Method); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["targetId"]) > 0 {
		if err := go1.Unmarshal(asMap["targetId"], &out.TargetId); err != nil {
			return err
		}

	}
	if len(asMap["label"]) > 0 {
		if err := go1.Unmarshal(asMap["label"], &out.Label); err != nil {
			return err
		}

	}
	if len(asMap["contentType"]) > 0 {
		if err := go1.Unmarshal(asMap["contentType"], &out.ContentType); err != nil {
			return err
		}

	}
	if len(asMap["origin"]) > 0 {
		if err := go1.Unmarshal(asMap["origin"], &out.Origin); err != nil {
			return err
		}

	}
	if len(asMap["requestHeader"]) > 0 {
		if err := go1.Unmarshal(asMap["requestHeader"], &out.RequestHeader); err != nil {
			return err
		}

	}
	if len(asMap["responseId"]) > 0 {
		if err := go1.Unmarshal(asMap["responseId"], &out.ResponseId); err != nil {
			return err
		}

	}
	if len(asMap["sourceId"]) > 0 {
		if err := go1.Unmarshal(asMap["sourceId"], &out.SourceId); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["accept"]) > 0 {
		if err := go1.Unmarshal(asMap["accept"], &out.Accept); err != nil {
			return err
		}

	}
	if len(asMap["params"]) > 0 {
		if err := go1.Unmarshal(asMap["params"], &out.Params); err != nil {
			return err
		}

	}
	if len(asMap["requestId"]) > 0 {
		if err := go1.Unmarshal(asMap["requestId"], &out.RequestId); err != nil {
			return err
		}

	}
	return nil
}

type TestScriptSetupActionOperation struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Resource         *string                                      `bson:",omitempty" json:"resource,omitempty"`                            // The type of the FHIR resource. See the [resource list](resourcelist.html). Data type of uri is needed when non-HL7 artifacts are identified.
	Destination      *int                                         `bson:",omitempty" json:"destination,omitempty"`                         // The server where the request message is destined for.  Must be one of the server numbers listed in TestScript.destination section.
	EncodeRequestUrl *bool                                        `binding:"required" bson:",omitempty" json:"encodeRequestUrl,omitempty"` // Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.
	Id               *string                                      `bson:"_id,omitempty" json:"id,omitempty"`                               // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Method           *string                                      `bson:",omitempty" json:"method,omitempty"`                              // The HTTP method the test engine MUST use for this operation regardless of any other operation details.
	Url              *string                                      `bson:",omitempty" json:"url,omitempty"`                                 // Complete request URL.
	TargetId         **primitive.ObjectID                         `bson:",omitempty" json:"targetId,omitempty"`                            // Id of fixture used for extracting the [id],  [type], and [vid] for GET requests.
	Label            *string                                      `bson:",omitempty" json:"label,omitempty"`                               // The label would be used for tracking/logging purposes by test engines.
	ContentType      *string                                      `bson:",omitempty" json:"contentType,omitempty"`                         // The mime-type to use for RESTful operation in the 'Content-Type' header.
	Origin           *int                                         `bson:",omitempty" json:"origin,omitempty"`                              // The server where the request message originates from.  Must be one of the server numbers listed in TestScript.origin section.
	RequestHeader    *TestScriptSetupActionOperationRequestHeader `binding:"omitempty" bson:",omitempty"`
	ResponseId       **primitive.ObjectID                         `bson:",omitempty" json:"responseId,omitempty"`  // The fixture id (maybe new) to map to the response.
	SourceId         **primitive.ObjectID                         `bson:",omitempty" json:"sourceId,omitempty"`    // The id of the fixture used as the body of a PUT or POST request.
	Extension        []*Extension                                 `bson:",omitempty" json:"extension,omitempty"`   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Type             *Coding                                      `bson:",omitempty" json:"type,omitempty"`        // Server interaction or operation type.
	Description      *string                                      `bson:",omitempty" json:"description,omitempty"` // The description would be used by test engines for tracking and reporting purposes.
	Accept           *string                                      `bson:",omitempty" json:"accept,omitempty"`      // The mime-type to use for RESTful operation in the 'Accept' header.
	Params           *string                                      `bson:",omitempty" json:"params,omitempty"`      // Path plus parameters after [type].  Used to set parts of the request URL explicitly.
	RequestId        **primitive.ObjectID                         `bson:",omitempty" json:"requestId,omitempty"`   // The fixture id (maybe new) to map to the request.
}

func (out *TestScriptSetupActionOperationRequestHeader) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["field"], &out.Field); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
		return err
	}

	return nil
}

type TestScriptSetupActionOperationRequestHeader struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Field *string `binding:"required" bson:",omitempty" json:"field,omitempty"` // The HTTP header field e.g. "Accept".
	Value *string `binding:"required" bson:",omitempty" json:"value,omitempty"` // The value of the header e.g. "application/fhir+xml".
}

func (out *TestScriptSetupActionAssert) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["path"]) > 0 {
		if err := go1.Unmarshal(asMap["path"], &out.Path); err != nil {
			return err
		}

	}
	if len(asMap["requestMethod"]) > 0 {
		if err := go1.Unmarshal(asMap["requestMethod"], &out.RequestMethod); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["stopTestOnFail"], &out.StopTestOnFail); err != nil {
		return err
	}

	if len(asMap["sourceId"]) > 0 {
		if err := go1.Unmarshal(asMap["sourceId"], &out.SourceId); err != nil {
			return err
		}

	}
	if len(asMap["validateProfileId"]) > 0 {
		if err := go1.Unmarshal(asMap["validateProfileId"], &out.ValidateProfileId); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["direction"]) > 0 {
		if err := go1.Unmarshal(asMap["direction"], &out.Direction); err != nil {
			return err
		}

	}
	if len(asMap["contentType"]) > 0 {
		if err := go1.Unmarshal(asMap["contentType"], &out.ContentType); err != nil {
			return err
		}

	}
	if len(asMap["defaultManualCompletion"]) > 0 {
		if err := go1.Unmarshal(asMap["defaultManualCompletion"], &out.DefaultManualCompletion); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["expression"]) > 0 {
		if err := go1.Unmarshal(asMap["expression"], &out.Expression); err != nil {
			return err
		}

	}
	if len(asMap["operator"]) > 0 {
		if err := go1.Unmarshal(asMap["operator"], &out.Operator); err != nil {
			return err
		}

	}
	if len(asMap["navigationLinks"]) > 0 {
		if err := go1.Unmarshal(asMap["navigationLinks"], &out.NavigationLinks); err != nil {
			return err
		}

	}
	if len(asMap["resource"]) > 0 {
		if err := go1.Unmarshal(asMap["resource"], &out.Resource); err != nil {
			return err
		}

	}
	if len(asMap["responseCode"]) > 0 {
		if err := go1.Unmarshal(asMap["responseCode"], &out.ResponseCode); err != nil {
			return err
		}

	}
	if len(asMap["compareToSourceExpression"]) > 0 {
		if err := go1.Unmarshal(asMap["compareToSourceExpression"], &out.CompareToSourceExpression); err != nil {
			return err
		}

	}
	if len(asMap["compareToSourcePath"]) > 0 {
		if err := go1.Unmarshal(asMap["compareToSourcePath"], &out.CompareToSourcePath); err != nil {
			return err
		}

	}
	if len(asMap["requestURL"]) > 0 {
		if err := go1.Unmarshal(asMap["requestURL"], &out.RequestURL); err != nil {
			return err
		}

	}
	if len(asMap["response"]) > 0 {
		if err := go1.Unmarshal(asMap["response"], &out.Response); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["warningOnly"], &out.WarningOnly); err != nil {
		return err
	}

	if len(asMap["requirement"]) > 0 {
		if err := go1.Unmarshal(asMap["requirement"], &out.Requirement); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["label"]) > 0 {
		if err := go1.Unmarshal(asMap["label"], &out.Label); err != nil {
			return err
		}

	}
	if len(asMap["headerField"]) > 0 {
		if err := go1.Unmarshal(asMap["headerField"], &out.HeaderField); err != nil {
			return err
		}

	}
	if len(asMap["minimumId"]) > 0 {
		if err := go1.Unmarshal(asMap["minimumId"], &out.MinimumId); err != nil {
			return err
		}

	}
	if len(asMap["value"]) > 0 {
		if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
			return err
		}

	}
	if len(asMap["compareToSourceId"]) > 0 {
		if err := go1.Unmarshal(asMap["compareToSourceId"], &out.CompareToSourceId); err != nil {
			return err
		}

	}
	return nil
}

type TestScriptSetupActionAssert struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Path                      *string                                 `bson:",omitempty" json:"path,omitempty"`                              // The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.
	RequestMethod             *string                                 `bson:",omitempty" json:"requestMethod,omitempty"`                     // The request method or HTTP operation code to compare against that used by the client system under test.
	StopTestOnFail            *bool                                   `binding:"required" bson:",omitempty" json:"stopTestOnFail,omitempty"` // Whether or not the current test execution will stop on failure for this assert.
	SourceId                  **primitive.ObjectID                    `bson:",omitempty" json:"sourceId,omitempty"`                          // Fixture to evaluate the XPath/JSONPath expression or the headerField  against.
	ValidateProfileId         **primitive.ObjectID                    `bson:",omitempty" json:"validateProfileId,omitempty"`                 // The ID of the Profile to validate against.
	Extension                 []*Extension                            `bson:",omitempty" json:"extension,omitempty"`                         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Direction                 *string                                 `bson:",omitempty" json:"direction,omitempty"`                         // The direction to use for the assertion.
	ContentType               *string                                 `bson:",omitempty" json:"contentType,omitempty"`                       // The mime-type contents to compare against the request or response message 'Content-Type' header.
	DefaultManualCompletion   *string                                 `bson:",omitempty" json:"defaultManualCompletion,omitempty"`           // The default manual completion outcome applied to this assertion.
	Description               *string                                 `bson:",omitempty" json:"description,omitempty"`                       // The description would be used by test engines for tracking and reporting purposes.
	Expression                *string                                 `bson:",omitempty" json:"expression,omitempty"`                        // The FHIRPath expression to be evaluated against the request or response message contents - HTTP headers and payload.
	Operator                  *string                                 `bson:",omitempty" json:"operator,omitempty"`                          // The operator type defines the conditional behavior of the assert.
	NavigationLinks           *bool                                   `bson:",omitempty" json:"navigationLinks,omitempty"`                   // Whether or not the test execution performs validation on the bundle navigation links.
	Resource                  *string                                 `bson:",omitempty" json:"resource,omitempty"`                          // The type of the resource.  See the [resource list](resourcelist.html).
	ResponseCode              *string                                 `bson:",omitempty" json:"responseCode,omitempty"`                      // The value of the HTTP response code to be tested.
	CompareToSourceExpression *string                                 `bson:",omitempty" json:"compareToSourceExpression,omitempty"`         // The FHIRPath expression for a specific value to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
	CompareToSourcePath       *string                                 `bson:",omitempty" json:"compareToSourcePath,omitempty"`               // XPath or JSONPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
	RequestURL                *string                                 `bson:",omitempty" json:"requestURL,omitempty"`                        // The value to use in a comparison against the request URL path string.
	Response                  *string                                 `bson:",omitempty" json:"response,omitempty"`                          // continue | switchingProtocols | okay | created | accepted | nonAuthoritativeInformation | noContent | resetContent | partialContent | multipleChoices | movedPermanently | found | seeOther | notModified | useProxy | temporaryRedirect | permanentRedirect | badRequest | unauthorized | paymentRequired | forbidden | notFound | methodNotAllowed | notAcceptable | proxyAuthenticationRequired | requestTimeout | conflict | gone | lengthRequired | preconditionFailed | contentTooLarge | uriTooLong | unsupportedMediaType | rangeNotSatisfiable | expectationFailed | misdirectedRequest | unprocessableContent | upgradeRequired | internalServerError | notImplemented | badGateway | serviceUnavailable | gatewayTimeout | httpVersionNotSupported.
	WarningOnly               *bool                                   `binding:"required" bson:",omitempty" json:"warningOnly,omitempty"`    // Whether or not the test execution will produce a warning only on error for this assert.
	Requirement               *TestScriptSetupActionAssertRequirement `binding:"omitempty" bson:",omitempty"`
	Id                        *string                                 `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Label                     *string                                 `bson:",omitempty" json:"label,omitempty"`             // The label would be used for tracking/logging purposes by test engines.
	HeaderField               *string                                 `bson:",omitempty" json:"headerField,omitempty"`       // The HTTP header field name e.g. 'Location'.
	MinimumId                 *string                                 `bson:",omitempty" json:"minimumId,omitempty"`         // The ID of a fixture. Asserts that the response contains at a minimum the fixture specified by minimumId.
	Value                     *string                                 `bson:",omitempty" json:"value,omitempty"`             // The value to compare to.
	CompareToSourceId         *string                                 `bson:",omitempty" json:"compareToSourceId,omitempty"` // Id of the source fixture used as the contents to be evaluated by either the "source/expression" or "sourceId/path" definition.
}

func (out *TestScriptSetupActionAssertRequirement) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["linkUri"], &out.LinkUri); err == nil {
	} else if err := go1.Unmarshal(asMap["linkCanonical"], &out.LinkCanonical); err == nil {
	} else {

	}
	return nil
}

type TestScriptSetupActionAssertRequirement struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	TestScriptSetupActionAssertRequirementLinkx
}
type TestScriptSetupActionAssertRequirementLinkx struct {
	LinkUri       string `bson:",omitempty" json:"linkUri,omitempty"`
	LinkCanonical string `bson:",omitempty" json:"linkCanonical,omitempty"`
}

func (out *TestScriptTest) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["action"], &out.Action); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type TestScriptTest struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name        *string               `bson:",omitempty" json:"name,omitempty"`        // The name of this test used for tracking/logging purposes by test engines.
	Description *string               `bson:",omitempty" json:"description,omitempty"` // A short description of the test used by test engines for tracking and reporting purposes.
	Action      *TestScriptTestAction `binding:"omitempty" bson:",omitempty"`
	Id          *string               `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension   []*Extension          `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *TestScriptTestAction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["assert"]) > 0 {
		if err := go1.Unmarshal(asMap["assert"], &out.Assert); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["operation"]) > 0 {
		if err := go1.Unmarshal(asMap["operation"], &out.Operation); err != nil {
			return err
		}

	}
	return nil
}

type TestScriptTestAction struct {
	Assert            interface{}
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Operation interface{}
}
type TestScriptVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *TestScriptMetadata) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["link"]) > 0 {
		if err := go1.Unmarshal(asMap["link"], &out.Link); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["capability"], &out.Capability); err != nil {
		return err
	}

	return nil
}

type TestScriptMetadata struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Link       *TestScriptMetadataLink       `binding:"omitempty" bson:",omitempty"`
	Capability *TestScriptMetadataCapability `binding:"omitempty" bson:",omitempty"`
}

func (out *TestScriptMetadataLink) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
		return err
	}

	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type TestScriptMetadataLink struct {
	Url               *string      `binding:"required" bson:",omitempty" json:"url,omitempty"` // URL to a particular requirement or feature within the FHIR specification.
	Description       *string      `bson:",omitempty" json:"description,omitempty"`            // Short description of the link.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`              // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`      /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *TestScriptMetadataCapability) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["link"]) > 0 {
		if err := go1.Unmarshal(asMap["link"], &out.Link); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["validated"], &out.Validated); err != nil {
		return err
	}

	if len(asMap["origin"]) > 0 {
		if err := go1.Unmarshal(asMap["origin"], &out.Origin); err != nil {
			return err
		}

	}
	if len(asMap["destination"]) > 0 {
		if err := go1.Unmarshal(asMap["destination"], &out.Destination); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["capabilities"], &out.Capabilities); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["required"], &out.Required); err != nil {
		return err
	}

	return nil
}

type TestScriptMetadataCapability struct {
	Description       *string      `bson:",omitempty" json:"description,omitempty"`                     // Description of the capabilities that this test script is requiring the server to support.
	Link              []*string    `bson:",omitempty" json:"link,omitempty"`                            // Links to the FHIR specification that describes this interaction and the resources involved in more detail.
	Validated         *bool        `binding:"required" bson:",omitempty" json:"validated,omitempty"`    // Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.
	Origin            []*int       `bson:",omitempty" json:"origin,omitempty"`                          // Which origin server these requirements apply to.
	Destination       *int         `bson:",omitempty" json:"destination,omitempty"`                     // Which server these requirements apply to.
	Capabilities      *string      `binding:"required" bson:",omitempty" json:"capabilities,omitempty"` // Minimum capabilities required of server for test script to execute successfully.   If server does not meet at a minimum the referenced capability statement, then all tests in this script are skipped.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                           // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                       // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`               /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Required *bool `binding:"required" bson:",omitempty" json:"required,omitempty"` // Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.
}

func (out *TestScriptScope) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["artifact"], &out.Artifact); err != nil {
		return err
	}

	if len(asMap["conformance"]) > 0 {
		if err := go1.Unmarshal(asMap["conformance"], &out.Conformance); err != nil {
			return err
		}

	}
	if len(asMap["phase"]) > 0 {
		if err := go1.Unmarshal(asMap["phase"], &out.Phase); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type TestScriptScope struct {
	Artifact          *string          `binding:"required" bson:",omitempty" json:"artifact,omitempty"` // The specific conformance artifact being tested. The canonical reference can be version-specific.
	Conformance       *CodeableConcept `bson:",omitempty" json:"conformance,omitempty"`                 // The expectation of whether the test must pass for the system to be considered conformant with the artifact: required - all tests are expected to pass, optional - all test are expected to pass but non-pass status may be allowed, strict - all tests are expected to pass and warnings are treated as a failure.
	Phase             *CodeableConcept `bson:",omitempty" json:"phase,omitempty"`                       // The phase of testing for this artifact: unit - development / implementation phase, integration - internal system to system phase, production - live system to system phase (Note, this may involve pii/phi data).
	Id                *string          `bson:"_id,omitempty" json:"id,omitempty"`                       // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension     `bson:",omitempty" json:"extension,omitempty"`                   // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`           /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *TestScriptTeardown) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["action"], &out.Action); err != nil {
		return err
	}

	return nil
}

type TestScriptTeardown struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Action *TestScriptTeardownAction `binding:"omitempty" bson:",omitempty"`
}

func (out *TestScriptTeardownAction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["operation"], &out.Operation); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type TestScriptTeardownAction struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Operation interface{}
	Id        *string      `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *TestScriptVariable) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["defaultValue"]) > 0 {
		if err := go1.Unmarshal(asMap["defaultValue"], &out.DefaultValue); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["expression"]) > 0 {
		if err := go1.Unmarshal(asMap["expression"], &out.Expression); err != nil {
			return err
		}

	}
	if len(asMap["path"]) > 0 {
		if err := go1.Unmarshal(asMap["path"], &out.Path); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	if len(asMap["headerField"]) > 0 {
		if err := go1.Unmarshal(asMap["headerField"], &out.HeaderField); err != nil {
			return err
		}

	}
	if len(asMap["hint"]) > 0 {
		if err := go1.Unmarshal(asMap["hint"], &out.Hint); err != nil {
			return err
		}

	}
	if len(asMap["sourceId"]) > 0 {
		if err := go1.Unmarshal(asMap["sourceId"], &out.SourceId); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type TestScriptVariable struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	DefaultValue *string              `bson:",omitempty" json:"defaultValue,omitempty"`            // A default, hard-coded, or user-defined value for this variable.
	Description  *string              `bson:",omitempty" json:"description,omitempty"`             // A free text natural language description of the variable and its purpose.
	Expression   *string              `bson:",omitempty" json:"expression,omitempty"`              // The FHIRPath expression for a specific value to evaluate against the fixture body. When variables are defined, only one of either expression, headerField or path must be specified.
	Path         *string              `bson:",omitempty" json:"path,omitempty"`                    // XPath or JSONPath to evaluate against the fixture body.  When variables are defined, only one of either expression, headerField or path must be specified.
	Id           *string              `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Name         *string              `binding:"required" bson:",omitempty" json:"name,omitempty"` // Descriptive name for this variable.
	HeaderField  *string              `bson:",omitempty" json:"headerField,omitempty"`             // Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.
	Hint         *string              `bson:",omitempty" json:"hint,omitempty"`                    // Displayable text string with hint help information to the user when entering a default value.
	SourceId     **primitive.ObjectID `bson:",omitempty" json:"sourceId,omitempty"`                // Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.
	Extension    []*Extension         `bson:",omitempty" json:"extension,omitempty"`               // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *TestScriptDestination) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["index"], &out.Index); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["profile"], &out.Profile); err != nil {
		return err
	}

	return nil
}

type TestScriptDestination struct {
	Url               *url.URL     `bson:",omitempty" json:"url,omitempty"`               // The explicit url path of the destination server used in this test script.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Index   *int    `binding:"required" bson:",omitempty" json:"index,omitempty"`   // Abstract name given to a destination server in this test script.  The name is provided as a number starting at 1.
	Profile *Coding `binding:"required" bson:",omitempty" json:"profile,omitempty"` // The type of destination profile the test system supports.
}

func (out *TestScriptFixture) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["autocreate"], &out.Autocreate); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["autodelete"], &out.Autodelete); err != nil {
		return err
	}

	if len(asMap["resource"]) > 0 {
		if err := go1.Unmarshal(asMap["resource"], &out.Resource); err != nil {
			return err
		}

	}
	return nil
}

type TestScriptFixture struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Autocreate *bool      `binding:"required" bson:",omitempty" json:"autocreate,omitempty"` // Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.
	Autodelete *bool      `binding:"required" bson:",omitempty" json:"autodelete,omitempty"` // Whether or not to implicitly delete the fixture during teardown. If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.
	Resource   *Reference `bson:",omitempty" json:"resource,omitempty"`                      // Reference to the resource (containing the contents of the resource needed for operations). This is allowed to be a Parameters resource.
}

func (out *Transport) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"Transport\"" {
		return fmt.Errorf("resourceType is not %s", "Transport")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["intent"], &out.Intent); err != nil {
		return err
	}

	if len(asMap["relevantHistory"]) > 0 {
		if err := go1.Unmarshal(asMap["relevantHistory"], &out.RelevantHistory); err != nil {
			return err
		}

	}
	if len(asMap["groupIdentifier"]) > 0 {
		if err := go1.Unmarshal(asMap["groupIdentifier"], &out.GroupIdentifier); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["requester"]) > 0 {
		if err := go1.Unmarshal(asMap["requester"], &out.Requester); err != nil {
			return err
		}

	}
	if len(asMap["performerType"]) > 0 {
		if err := go1.Unmarshal(asMap["performerType"], &out.PerformerType); err != nil {
			return err
		}

	}
	if len(asMap["reason"]) > 0 {
		if err := go1.Unmarshal(asMap["reason"], &out.Reason); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["currentLocation"], &out.CurrentLocation); err != nil {
		return err
	}

	if len(asMap["instantiatesCanonical"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesCanonical"], &out.InstantiatesCanonical); err != nil {
			return err
		}

	}
	if len(asMap["instantiatesUri"]) > 0 {
		if err := go1.Unmarshal(asMap["instantiatesUri"], &out.InstantiatesUri); err != nil {
			return err
		}

	}
	if len(asMap["status"]) > 0 {
		if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if len(asMap["authoredOn"]) > 0 {
		if err := go1.Unmarshal(asMap["authoredOn"], &out.AuthoredOn); err != nil {
			return err
		}

	}
	if len(asMap["location"]) > 0 {
		if err := go1.Unmarshal(asMap["location"], &out.Location); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["basedOn"]) > 0 {
		if err := go1.Unmarshal(asMap["basedOn"], &out.BasedOn); err != nil {
			return err
		}

	}
	if len(asMap["statusReason"]) > 0 {
		if err := go1.Unmarshal(asMap["statusReason"], &out.StatusReason); err != nil {
			return err
		}

	}
	if len(asMap["lastModified"]) > 0 {
		if err := go1.Unmarshal(asMap["lastModified"], &out.LastModified); err != nil {
			return err
		}

	}
	if len(asMap["history"]) > 0 {
		if err := go1.Unmarshal(asMap["history"], &out.History); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["restriction"]) > 0 {
		if err := go1.Unmarshal(asMap["restriction"], &out.Restriction); err != nil {
			return err
		}

	}
	if len(asMap["output"]) > 0 {
		if err := go1.Unmarshal(asMap["output"], &out.Output); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["partOf"]) > 0 {
		if err := go1.Unmarshal(asMap["partOf"], &out.PartOf); err != nil {
			return err
		}

	}
	if len(asMap["for"]) > 0 {
		if err := go1.Unmarshal(asMap["for"], &out.For); err != nil {
			return err
		}

	}
	if len(asMap["insurance"]) > 0 {
		if err := go1.Unmarshal(asMap["insurance"], &out.Insurance); err != nil {
			return err
		}

	}
	if len(asMap["input"]) > 0 {
		if err := go1.Unmarshal(asMap["input"], &out.Input); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["priority"]) > 0 {
		if err := go1.Unmarshal(asMap["priority"], &out.Priority); err != nil {
			return err
		}

	}
	if len(asMap["focus"]) > 0 {
		if err := go1.Unmarshal(asMap["focus"], &out.Focus); err != nil {
			return err
		}

	}
	if len(asMap["completionTime"]) > 0 {
		if err := go1.Unmarshal(asMap["completionTime"], &out.CompletionTime); err != nil {
			return err
		}

	}
	if len(asMap["owner"]) > 0 {
		if err := go1.Unmarshal(asMap["owner"], &out.Owner); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["requestedLocation"], &out.RequestedLocation); err != nil {
		return err
	}

	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	return nil
}

type Transport struct {
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Intent                *string               `binding:"required" bson:",omitempty" json:"intent,omitempty"`          // Indicates the "level" of actionability associated with the Transport, i.e. i+R[9]Cs this a proposed transport, a planned transport, an actionable transport, etc.
	RelevantHistory       []*Reference          `bson:",omitempty" json:"relevantHistory,omitempty"`                    // Links to Provenance records for past versions of this Transport that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the transport.
	GroupIdentifier       *Identifier           `bson:",omitempty" json:"groupIdentifier,omitempty"`                    // A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.
	Description           *string               `bson:",omitempty" json:"description,omitempty"`                        // A free-text description of what is to be performed.
	Requester             *Reference            `bson:",omitempty" json:"requester,omitempty"`                          // The creator of the transport.
	PerformerType         []*CodeableConcept    `bson:",omitempty" json:"performerType,omitempty"`                      // The kind of participant that should perform the transport.
	Reason                *CodeableReference    `bson:",omitempty" json:"reason,omitempty"`                             // A resource reference indicating why this transport needs to be performed.
	CurrentLocation       *Reference            `binding:"required" bson:",omitempty" json:"currentLocation,omitempty"` // The current location for the entity to be transported.
	InstantiatesCanonical *string               `bson:",omitempty" json:"instantiatesCanonical,omitempty"`              // The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Transport.
	InstantiatesUri       *string               `bson:",omitempty" json:"instantiatesUri,omitempty"`                    // The URL pointing to an *externally* maintained  protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Transport.
	Status                *string               `bson:",omitempty" json:"status,omitempty"`                             // A code specifying the state of the transport event.
	Code                  *CodeableConcept      `bson:",omitempty" json:"code,omitempty"`                               // A name or code (or both) briefly describing what the transport involves.
	Encounter             *Reference            `bson:",omitempty" json:"encounter,omitempty"`                          // The healthcare event  (e.g. a patient and healthcare provider interaction) during which this transport was created.
	AuthoredOn            *DateTime             `bson:",omitempty" json:"authoredOn,omitempty"`                         // The date and time this transport was created.
	Location              *Reference            `bson:",omitempty" json:"location,omitempty"`                           // Principal physical location where this transport is performed.
	Text                  *Narrative            `bson:",omitempty" json:"text,omitempty"`                               // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	BasedOn               []*Reference          `bson:",omitempty" json:"basedOn,omitempty"`                            // BasedOn refers to a higher-level authorization that triggered the creation of the transport.  It references a "request" resource such as a ServiceRequest or Transport, which is distinct from the "request" resource the Transport is seeking to fulfill.  This latter resource is referenced by FocusOn.  For example, based on a ServiceRequest (= BasedOn), a transport is created to fulfill a procedureRequest ( = FocusOn ) to transport a specimen to the lab.
	StatusReason          *CodeableConcept      `bson:",omitempty" json:"statusReason,omitempty"`                       // An explanation as to why this transport is held, failed, was refused, etc.
	LastModified          *DateTime             `bson:",omitempty" json:"lastModified,omitempty"`                       // The date and time of last modification to this transport.
	History               *Reference            `bson:",omitempty" json:"history,omitempty"`                            // The transport event prior to this one.
	Meta                  *Meta                 `bson:",omitempty" json:"meta,omitempty"`                               // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Extension             []*Extension          `bson:",omitempty" json:"extension,omitempty"`                          // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Restriction           *TransportRestriction `binding:"omitempty" bson:",omitempty"`
	Output                *TransportOutput      `binding:"omitempty" bson:",omitempty"`
	Identifier            []*Identifier         `bson:",omitempty" json:"identifier,omitempty"` // Identifier for the transport event that is used to identify it across multiple disparate systems.
	PartOf                []*Reference          `bson:",omitempty" json:"partOf,omitempty"`     // A larger event of which this particular event is a component or step.
	For                   *Reference            `bson:",omitempty" json:"for,omitempty"`        // The entity who benefits from the performance of the service specified in the transport (e.g., the patient).
	Insurance             []*Reference          `bson:",omitempty" json:"insurance,omitempty"`  // Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Transport.
	Input                 *TransportInput       `binding:"omitempty" bson:",omitempty"`
	Contained             []*Resource           `bson:",omitempty" json:"contained,omitempty"`                            // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Priority              *string               `bson:",omitempty" json:"priority,omitempty"`                             // Indicates how quickly the Transport should be addressed with respect to other requests.
	Focus                 *Reference            `bson:",omitempty" json:"focus,omitempty"`                                // The request being actioned or the resource being manipulated by this transport.
	CompletionTime        *DateTime             `bson:",omitempty" json:"completionTime,omitempty"`                       // Identifies the completion time of the event (the occurrence).
	Owner                 *Reference            `bson:",omitempty" json:"owner,omitempty"`                                // Individual organization or Device currently responsible for transport execution.
	RequestedLocation     *Reference            `binding:"required" bson:",omitempty" json:"requestedLocation,omitempty"` // The desired or final location for the transport.
	ImplicitRules         *string               `bson:",omitempty" json:"implicitRules,omitempty"`                        // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language              *string               `bson:",omitempty" json:"language,omitempty"`                             // The base language in which the resource is written.
	Note                  []*Annotation         `bson:",omitempty" json:"note,omitempty"`                                 // Free-text information captured about the transport as it progresses.
	ResourceType          string                `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *TransportRestriction) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["repetitions"]) > 0 {
		if err := go1.Unmarshal(asMap["repetitions"], &out.Repetitions); err != nil {
			return err
		}

	}
	if len(asMap["period"]) > 0 {
		if err := go1.Unmarshal(asMap["period"], &out.Period); err != nil {
			return err
		}

	}
	if len(asMap["recipient"]) > 0 {
		if err := go1.Unmarshal(asMap["recipient"], &out.Recipient); err != nil {
			return err
		}

	}
	return nil
}

type TransportRestriction struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Repetitions *int         `bson:",omitempty" json:"repetitions,omitempty"` // Indicates the number of times the requested action should occur.
	Period      *Period      `bson:",omitempty" json:"period,omitempty"`      // Over what time-period is fulfillment sought.
	Recipient   []*Reference `bson:",omitempty" json:"recipient,omitempty"`   // For requests that are targeted to more than one potential recipient/target, to identify who is fulfillment is sought for.
}

func (out *TransportOutput) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["valueBase64Binary"], &out.ValueBase64Binary); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCanonical"], &out.ValueCanonical); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCode"], &out.ValueCode); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDate"], &out.ValueDate); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDateTime"], &out.ValueDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDecimal"], &out.ValueDecimal); err == nil {
	} else if err := go1.Unmarshal(asMap["valueId"], &out.ValueId); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInstant"], &out.ValueInstant); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger64"], &out.ValueInteger64); err == nil {
	} else if err := go1.Unmarshal(asMap["valueMarkdown"], &out.ValueMarkdown); err == nil {
	} else if err := go1.Unmarshal(asMap["valueOid"], &out.ValueOid); err == nil {
	} else if err := go1.Unmarshal(asMap["valuePositiveInt"], &out.ValuePositiveInt); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTime"], &out.ValueTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUnsignedInt"], &out.ValueUnsignedInt); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUri"], &out.ValueUri); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUrl"], &out.ValueUrl); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUuid"], &out.ValueUuid); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAddress"], &out.ValueAddress); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAge"], &out.ValueAge); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAnnotation"], &out.ValueAnnotation); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCodeableReference"], &out.ValueCodeableReference); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCoding"], &out.ValueCoding); err == nil {
	} else if err := go1.Unmarshal(asMap["valueContactPoint"], &out.ValueContactPoint); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCount"], &out.ValueCount); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDistance"], &out.ValueDistance); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDuration"], &out.ValueDuration); err == nil {
	} else if err := go1.Unmarshal(asMap["valueHumanName"], &out.ValueHumanName); err == nil {
	} else if err := go1.Unmarshal(asMap["valueIdentifier"], &out.ValueIdentifier); err == nil {
	} else if err := go1.Unmarshal(asMap["valueMoney"], &out.ValueMoney); err == nil {
	} else if err := go1.Unmarshal(asMap["valuePeriod"], &out.ValuePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRatio"], &out.ValueRatio); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRatioRange"], &out.ValueRatioRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueReference"], &out.ValueReference); err == nil {
	} else if err := go1.Unmarshal(asMap["valueSampledData"], &out.ValueSampledData); err == nil {
	} else if err := go1.Unmarshal(asMap["valueSignature"], &out.ValueSignature); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTiming"], &out.ValueTiming); err == nil {
	} else if err := go1.Unmarshal(asMap["valueContactDetail"], &out.ValueContactDetail); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDataRequirement"], &out.ValueDataRequirement); err == nil {
	} else if err := go1.Unmarshal(asMap["valueExpression"], &out.ValueExpression); err == nil {
	} else if err := go1.Unmarshal(asMap["valueParameterDefinition"], &out.ValueParameterDefinition); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRelatedArtifact"], &out.ValueRelatedArtifact); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTriggerDefinition"], &out.ValueTriggerDefinition); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUsageContext"], &out.ValueUsageContext); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAvailability"], &out.ValueAvailability); err == nil {
	} else if err := go1.Unmarshal(asMap["valueExtendedContactDetail"], &out.ValueExtendedContactDetail); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDosage"], &out.ValueDosage); err == nil {
	} else if err := go1.Unmarshal(asMap["valueMeta"], &out.ValueMeta); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	return nil
}

type TransportOutput struct {
	TransportOutputValuex
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // The name of the Output parameter.
}
type TransportOutputValuex struct {
	ValueBase64Binary          Base64Binary          `bson:",omitempty" json:"valueBase64Binary,omitempty"`
	ValueBoolean               bool                  `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueCanonical             string                `bson:",omitempty" json:"valueCanonical,omitempty"`
	ValueCode                  string                `bson:",omitempty" json:"valueCode,omitempty"`
	ValueDate                  Date                  `bson:",omitempty" json:"valueDate,omitempty"`
	ValueDateTime              DateTime              `bson:",omitempty" json:"valueDateTime,omitempty"`
	ValueDecimal               float64               `bson:",omitempty" json:"valueDecimal,omitempty"`
	ValueId                    *primitive.ObjectID   `bson:",omitempty" json:"valueId,omitempty"`
	ValueInstant               time.Time             `bson:",omitempty" json:"valueInstant,omitempty"`
	ValueInteger               int                   `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueInteger64             int64                 `bson:",omitempty" json:"valueInteger64,omitempty"`
	ValueMarkdown              string                `bson:",omitempty" json:"valueMarkdown,omitempty"`
	ValueOid                   string                `bson:",omitempty" json:"valueOid,omitempty"`
	ValuePositiveInt           int                   `bson:",omitempty" json:"valuePositiveInt,omitempty"`
	ValueString                string                `bson:",omitempty" json:"valueString,omitempty"`
	ValueTime                  Time                  `bson:",omitempty" json:"valueTime,omitempty"`
	ValueUnsignedInt           int                   `bson:",omitempty" json:"valueUnsignedInt,omitempty"`
	ValueUri                   string                `bson:",omitempty" json:"valueUri,omitempty"`
	ValueUrl                   url.URL               `bson:",omitempty" json:"valueUrl,omitempty"`
	ValueUuid                  uuid.UUID             `bson:",omitempty" json:"valueUuid,omitempty"`
	ValueAddress               Address               `bson:",omitempty" json:"valueAddress,omitempty"`
	ValueAge                   Age                   `bson:",omitempty" json:"valueAge,omitempty"`
	ValueAnnotation            Annotation            `bson:",omitempty" json:"valueAnnotation,omitempty"`
	ValueAttachment            Attachment            `bson:",omitempty" json:"valueAttachment,omitempty"`
	ValueCodeableConcept       CodeableConcept       `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueCodeableReference     CodeableReference     `bson:",omitempty" json:"valueCodeableReference,omitempty"`
	ValueCoding                Coding                `bson:",omitempty" json:"valueCoding,omitempty"`
	ValueContactPoint          ContactPoint          `bson:",omitempty" json:"valueContactPoint,omitempty"`
	ValueCount                 Count                 `bson:",omitempty" json:"valueCount,omitempty"`
	ValueDistance              Distance              `bson:",omitempty" json:"valueDistance,omitempty"`
	ValueDuration              Duration              `bson:",omitempty" json:"valueDuration,omitempty"`
	ValueHumanName             HumanName             `bson:",omitempty" json:"valueHumanName,omitempty"`
	ValueIdentifier            Identifier            `bson:",omitempty" json:"valueIdentifier,omitempty"`
	ValueMoney                 Money                 `bson:",omitempty" json:"valueMoney,omitempty"`
	ValuePeriod                Period                `bson:",omitempty" json:"valuePeriod,omitempty"`
	ValueQuantity              Quantity              `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueRange                 Range                 `bson:",omitempty" json:"valueRange,omitempty"`
	ValueRatio                 Ratio                 `bson:",omitempty" json:"valueRatio,omitempty"`
	ValueRatioRange            RatioRange            `bson:",omitempty" json:"valueRatioRange,omitempty"`
	ValueReference             Reference             `bson:",omitempty" json:"valueReference,omitempty"`
	ValueSampledData           SampledData           `bson:",omitempty" json:"valueSampledData,omitempty"`
	ValueSignature             Signature             `bson:",omitempty" json:"valueSignature,omitempty"`
	ValueTiming                Timing                `bson:",omitempty" json:"valueTiming,omitempty"`
	ValueContactDetail         ContactDetail         `bson:",omitempty" json:"valueContactDetail,omitempty"`
	ValueDataRequirement       DataRequirement       `bson:",omitempty" json:"valueDataRequirement,omitempty"`
	ValueExpression            Expression            `bson:",omitempty" json:"valueExpression,omitempty"`
	ValueParameterDefinition   ParameterDefinition   `bson:",omitempty" json:"valueParameterDefinition,omitempty"`
	ValueRelatedArtifact       RelatedArtifact       `bson:",omitempty" json:"valueRelatedArtifact,omitempty"`
	ValueTriggerDefinition     TriggerDefinition     `bson:",omitempty" json:"valueTriggerDefinition,omitempty"`
	ValueUsageContext          UsageContext          `bson:",omitempty" json:"valueUsageContext,omitempty"`
	ValueAvailability          Availability          `bson:",omitempty" json:"valueAvailability,omitempty"`
	ValueExtendedContactDetail ExtendedContactDetail `bson:",omitempty" json:"valueExtendedContactDetail,omitempty"`
	ValueDosage                Dosage                `bson:",omitempty" json:"valueDosage,omitempty"`
	ValueMeta                  Meta                  `bson:",omitempty" json:"valueMeta,omitempty"`
}

func (out *TransportInput) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueBase64Binary"], &out.ValueBase64Binary); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCanonical"], &out.ValueCanonical); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCode"], &out.ValueCode); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDate"], &out.ValueDate); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDateTime"], &out.ValueDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDecimal"], &out.ValueDecimal); err == nil {
	} else if err := go1.Unmarshal(asMap["valueId"], &out.ValueId); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInstant"], &out.ValueInstant); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger64"], &out.ValueInteger64); err == nil {
	} else if err := go1.Unmarshal(asMap["valueMarkdown"], &out.ValueMarkdown); err == nil {
	} else if err := go1.Unmarshal(asMap["valueOid"], &out.ValueOid); err == nil {
	} else if err := go1.Unmarshal(asMap["valuePositiveInt"], &out.ValuePositiveInt); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTime"], &out.ValueTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUnsignedInt"], &out.ValueUnsignedInt); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUri"], &out.ValueUri); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUrl"], &out.ValueUrl); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUuid"], &out.ValueUuid); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAddress"], &out.ValueAddress); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAge"], &out.ValueAge); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAnnotation"], &out.ValueAnnotation); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAttachment"], &out.ValueAttachment); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCodeableConcept"], &out.ValueCodeableConcept); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCodeableReference"], &out.ValueCodeableReference); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCoding"], &out.ValueCoding); err == nil {
	} else if err := go1.Unmarshal(asMap["valueContactPoint"], &out.ValueContactPoint); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCount"], &out.ValueCount); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDistance"], &out.ValueDistance); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDuration"], &out.ValueDuration); err == nil {
	} else if err := go1.Unmarshal(asMap["valueHumanName"], &out.ValueHumanName); err == nil {
	} else if err := go1.Unmarshal(asMap["valueIdentifier"], &out.ValueIdentifier); err == nil {
	} else if err := go1.Unmarshal(asMap["valueMoney"], &out.ValueMoney); err == nil {
	} else if err := go1.Unmarshal(asMap["valuePeriod"], &out.ValuePeriod); err == nil {
	} else if err := go1.Unmarshal(asMap["valueQuantity"], &out.ValueQuantity); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRange"], &out.ValueRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRatio"], &out.ValueRatio); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRatioRange"], &out.ValueRatioRange); err == nil {
	} else if err := go1.Unmarshal(asMap["valueReference"], &out.ValueReference); err == nil {
	} else if err := go1.Unmarshal(asMap["valueSampledData"], &out.ValueSampledData); err == nil {
	} else if err := go1.Unmarshal(asMap["valueSignature"], &out.ValueSignature); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTiming"], &out.ValueTiming); err == nil {
	} else if err := go1.Unmarshal(asMap["valueContactDetail"], &out.ValueContactDetail); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDataRequirement"], &out.ValueDataRequirement); err == nil {
	} else if err := go1.Unmarshal(asMap["valueExpression"], &out.ValueExpression); err == nil {
	} else if err := go1.Unmarshal(asMap["valueParameterDefinition"], &out.ValueParameterDefinition); err == nil {
	} else if err := go1.Unmarshal(asMap["valueRelatedArtifact"], &out.ValueRelatedArtifact); err == nil {
	} else if err := go1.Unmarshal(asMap["valueTriggerDefinition"], &out.ValueTriggerDefinition); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUsageContext"], &out.ValueUsageContext); err == nil {
	} else if err := go1.Unmarshal(asMap["valueAvailability"], &out.ValueAvailability); err == nil {
	} else if err := go1.Unmarshal(asMap["valueExtendedContactDetail"], &out.ValueExtendedContactDetail); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDosage"], &out.ValueDosage); err == nil {
	} else if err := go1.Unmarshal(asMap["valueMeta"], &out.ValueMeta); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type TransportInput struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Type *CodeableConcept `binding:"required" bson:",omitempty" json:"type,omitempty"` // A code or description indicating how the input is intended to be used as part of the transport execution.
	TransportInputValuex
	Id        *string      `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}
type TransportInputValuex struct {
	ValueBase64Binary          Base64Binary          `bson:",omitempty" json:"valueBase64Binary,omitempty"`
	ValueBoolean               bool                  `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueCanonical             string                `bson:",omitempty" json:"valueCanonical,omitempty"`
	ValueCode                  string                `bson:",omitempty" json:"valueCode,omitempty"`
	ValueDate                  Date                  `bson:",omitempty" json:"valueDate,omitempty"`
	ValueDateTime              DateTime              `bson:",omitempty" json:"valueDateTime,omitempty"`
	ValueDecimal               float64               `bson:",omitempty" json:"valueDecimal,omitempty"`
	ValueId                    *primitive.ObjectID   `bson:",omitempty" json:"valueId,omitempty"`
	ValueInstant               time.Time             `bson:",omitempty" json:"valueInstant,omitempty"`
	ValueInteger               int                   `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueInteger64             int64                 `bson:",omitempty" json:"valueInteger64,omitempty"`
	ValueMarkdown              string                `bson:",omitempty" json:"valueMarkdown,omitempty"`
	ValueOid                   string                `bson:",omitempty" json:"valueOid,omitempty"`
	ValuePositiveInt           int                   `bson:",omitempty" json:"valuePositiveInt,omitempty"`
	ValueString                string                `bson:",omitempty" json:"valueString,omitempty"`
	ValueTime                  Time                  `bson:",omitempty" json:"valueTime,omitempty"`
	ValueUnsignedInt           int                   `bson:",omitempty" json:"valueUnsignedInt,omitempty"`
	ValueUri                   string                `bson:",omitempty" json:"valueUri,omitempty"`
	ValueUrl                   url.URL               `bson:",omitempty" json:"valueUrl,omitempty"`
	ValueUuid                  uuid.UUID             `bson:",omitempty" json:"valueUuid,omitempty"`
	ValueAddress               Address               `bson:",omitempty" json:"valueAddress,omitempty"`
	ValueAge                   Age                   `bson:",omitempty" json:"valueAge,omitempty"`
	ValueAnnotation            Annotation            `bson:",omitempty" json:"valueAnnotation,omitempty"`
	ValueAttachment            Attachment            `bson:",omitempty" json:"valueAttachment,omitempty"`
	ValueCodeableConcept       CodeableConcept       `bson:",omitempty" json:"valueCodeableConcept,omitempty"`
	ValueCodeableReference     CodeableReference     `bson:",omitempty" json:"valueCodeableReference,omitempty"`
	ValueCoding                Coding                `bson:",omitempty" json:"valueCoding,omitempty"`
	ValueContactPoint          ContactPoint          `bson:",omitempty" json:"valueContactPoint,omitempty"`
	ValueCount                 Count                 `bson:",omitempty" json:"valueCount,omitempty"`
	ValueDistance              Distance              `bson:",omitempty" json:"valueDistance,omitempty"`
	ValueDuration              Duration              `bson:",omitempty" json:"valueDuration,omitempty"`
	ValueHumanName             HumanName             `bson:",omitempty" json:"valueHumanName,omitempty"`
	ValueIdentifier            Identifier            `bson:",omitempty" json:"valueIdentifier,omitempty"`
	ValueMoney                 Money                 `bson:",omitempty" json:"valueMoney,omitempty"`
	ValuePeriod                Period                `bson:",omitempty" json:"valuePeriod,omitempty"`
	ValueQuantity              Quantity              `bson:",omitempty" json:"valueQuantity,omitempty"`
	ValueRange                 Range                 `bson:",omitempty" json:"valueRange,omitempty"`
	ValueRatio                 Ratio                 `bson:",omitempty" json:"valueRatio,omitempty"`
	ValueRatioRange            RatioRange            `bson:",omitempty" json:"valueRatioRange,omitempty"`
	ValueReference             Reference             `bson:",omitempty" json:"valueReference,omitempty"`
	ValueSampledData           SampledData           `bson:",omitempty" json:"valueSampledData,omitempty"`
	ValueSignature             Signature             `bson:",omitempty" json:"valueSignature,omitempty"`
	ValueTiming                Timing                `bson:",omitempty" json:"valueTiming,omitempty"`
	ValueContactDetail         ContactDetail         `bson:",omitempty" json:"valueContactDetail,omitempty"`
	ValueDataRequirement       DataRequirement       `bson:",omitempty" json:"valueDataRequirement,omitempty"`
	ValueExpression            Expression            `bson:",omitempty" json:"valueExpression,omitempty"`
	ValueParameterDefinition   ParameterDefinition   `bson:",omitempty" json:"valueParameterDefinition,omitempty"`
	ValueRelatedArtifact       RelatedArtifact       `bson:",omitempty" json:"valueRelatedArtifact,omitempty"`
	ValueTriggerDefinition     TriggerDefinition     `bson:",omitempty" json:"valueTriggerDefinition,omitempty"`
	ValueUsageContext          UsageContext          `bson:",omitempty" json:"valueUsageContext,omitempty"`
	ValueAvailability          Availability          `bson:",omitempty" json:"valueAvailability,omitempty"`
	ValueExtendedContactDetail ExtendedContactDetail `bson:",omitempty" json:"valueExtendedContactDetail,omitempty"`
	ValueDosage                Dosage                `bson:",omitempty" json:"valueDosage,omitempty"`
	ValueMeta                  Meta                  `bson:",omitempty" json:"valueMeta,omitempty"`
}

func (out *ValueSet) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"ValueSet\"" {
		return fmt.Errorf("resourceType is not %s", "ValueSet")
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["url"]) > 0 {
		if err := go1.Unmarshal(asMap["url"], &out.Url); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["jurisdiction"]) > 0 {
		if err := go1.Unmarshal(asMap["jurisdiction"], &out.Jurisdiction); err != nil {
			return err
		}

	}
	if len(asMap["lastReviewDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lastReviewDate"], &out.LastReviewDate); err != nil {
			return err
		}

	}
	if len(asMap["topic"]) > 0 {
		if err := go1.Unmarshal(asMap["topic"], &out.Topic); err != nil {
			return err
		}

	}
	if len(asMap["relatedArtifact"]) > 0 {
		if err := go1.Unmarshal(asMap["relatedArtifact"], &out.RelatedArtifact); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["versionAlgorithmString"], &out.VersionAlgorithmString); err == nil {
	} else if err := go1.Unmarshal(asMap["versionAlgorithmCoding"], &out.VersionAlgorithmCoding); err == nil {
	} else {

	}
	if len(asMap["experimental"]) > 0 {
		if err := go1.Unmarshal(asMap["experimental"], &out.Experimental); err != nil {
			return err
		}

	}
	if len(asMap["compose"]) > 0 {
		if err := go1.Unmarshal(asMap["compose"], &out.Compose); err != nil {
			return err
		}

	}
	if len(asMap["description"]) > 0 {
		if err := go1.Unmarshal(asMap["description"], &out.Description); err != nil {
			return err
		}

	}
	if len(asMap["endorser"]) > 0 {
		if err := go1.Unmarshal(asMap["endorser"], &out.Endorser); err != nil {
			return err
		}

	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["publisher"]) > 0 {
		if err := go1.Unmarshal(asMap["publisher"], &out.Publisher); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["editor"]) > 0 {
		if err := go1.Unmarshal(asMap["editor"], &out.Editor); err != nil {
			return err
		}

	}
	if len(asMap["reviewer"]) > 0 {
		if err := go1.Unmarshal(asMap["reviewer"], &out.Reviewer); err != nil {
			return err
		}

	}
	if len(asMap["scope"]) > 0 {
		if err := go1.Unmarshal(asMap["scope"], &out.Scope); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["name"]) > 0 {
		if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
			return err
		}

	}
	if len(asMap["copyrightLabel"]) > 0 {
		if err := go1.Unmarshal(asMap["copyrightLabel"], &out.CopyrightLabel); err != nil {
			return err
		}

	}
	if len(asMap["approvalDate"]) > 0 {
		if err := go1.Unmarshal(asMap["approvalDate"], &out.ApprovalDate); err != nil {
			return err
		}

	}
	if len(asMap["effectivePeriod"]) > 0 {
		if err := go1.Unmarshal(asMap["effectivePeriod"], &out.EffectivePeriod); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["useContext"]) > 0 {
		if err := go1.Unmarshal(asMap["useContext"], &out.UseContext); err != nil {
			return err
		}

	}
	if len(asMap["author"]) > 0 {
		if err := go1.Unmarshal(asMap["author"], &out.Author); err != nil {
			return err
		}

	}
	if len(asMap["expansion"]) > 0 {
		if err := go1.Unmarshal(asMap["expansion"], &out.Expansion); err != nil {
			return err
		}

	}
	if len(asMap["title"]) > 0 {
		if err := go1.Unmarshal(asMap["title"], &out.Title); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["contact"]) > 0 {
		if err := go1.Unmarshal(asMap["contact"], &out.Contact); err != nil {
			return err
		}

	}
	if len(asMap["immutable"]) > 0 {
		if err := go1.Unmarshal(asMap["immutable"], &out.Immutable); err != nil {
			return err
		}

	}
	if len(asMap["purpose"]) > 0 {
		if err := go1.Unmarshal(asMap["purpose"], &out.Purpose); err != nil {
			return err
		}

	}
	return nil
}

type ValueSet struct {
	Id                *primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"`             // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ModifierExtension []*Extension        `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Url             *string            `bson:",omitempty" json:"url,omitempty"`             // An absolute URI that is used to identify this value set when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this value set is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the value set is stored on different servers.
	Date            *DateTime          `bson:",omitempty" json:"date,omitempty"`            // The date (and optionally time) when the value set metadata or content logical definition (.compose) was created or revised.
	Jurisdiction    []*CodeableConcept `bson:",omitempty" json:"jurisdiction,omitempty"`    // A legal or geographic region in which the value set is intended to be used.
	LastReviewDate  *Date              `bson:",omitempty" json:"lastReviewDate,omitempty"`  // The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
	Topic           []*CodeableConcept `bson:",omitempty" json:"topic,omitempty"`           // Descriptions related to the content of the ValueSet. Topics provide a high-level categorization as well as keywords for the ValueSet that can be useful for filtering and searching.
	RelatedArtifact []*RelatedArtifact `bson:",omitempty" json:"relatedArtifact,omitempty"` // Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts.
	ValueSetVersionAlgorithmx
	Experimental    *bool              `bson:",omitempty" json:"experimental,omitempty"` // A Boolean value to indicate that this value set is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Compose         *ValueSetCompose   `binding:"omitempty" bson:",omitempty"`
	Description     *string            `bson:",omitempty" json:"description,omitempty"`   // A free text natural language description of the value set from a consumer's perspective. The textual description specifies the span of meanings for concepts to be included within the Value Set Expansion, and also may specify the intended use and limitations of the Value Set.
	Endorser        []*ContactDetail   `bson:",omitempty" json:"endorser,omitempty"`      // An individual or organization asserted by the publisher to be responsible for officially endorsing the ValueSet for use in some setting.
	ImplicitRules   *string            `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Language        *string            `bson:",omitempty" json:"language,omitempty"`      // The base language in which the resource is written.
	Contained       []*Resource        `bson:",omitempty" json:"contained,omitempty"`     // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Publisher       *string            `bson:",omitempty" json:"publisher,omitempty"`     // The name of the organization or individual responsible for the release and ongoing maintenance of the value set.
	Copyright       *string            `bson:",omitempty" json:"copyright,omitempty"`     // A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.
	Editor          []*ContactDetail   `bson:",omitempty" json:"editor,omitempty"`        // An individual or organization primarily responsible for internal coherence of the ValueSet.
	Reviewer        []*ContactDetail   `bson:",omitempty" json:"reviewer,omitempty"`      // An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the ValueSet.
	Scope           *ValueSetScope     `binding:"omitempty" bson:",omitempty"`
	Meta            *Meta              `bson:",omitempty" json:"meta,omitempty"`            // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Extension       []*Extension       `bson:",omitempty" json:"extension,omitempty"`       // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Version         *string            `bson:",omitempty" json:"version,omitempty"`         // The identifier that is used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the value set author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Name            *string            `bson:",omitempty" json:"name,omitempty"`            // A natural language name identifying the value set. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	CopyrightLabel  *string            `bson:",omitempty" json:"copyrightLabel,omitempty"`  // A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
	ApprovalDate    *Date              `bson:",omitempty" json:"approvalDate,omitempty"`    // The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
	EffectivePeriod *Period            `bson:",omitempty" json:"effectivePeriod,omitempty"` // The period during which the ValueSet content was or is planned to be in active use.
	Identifier      []*Identifier      `bson:",omitempty" json:"identifier,omitempty"`      // A formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.
	UseContext      []*UsageContext    `bson:",omitempty" json:"useContext,omitempty"`      // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate value set instances.
	Author          []*ContactDetail   `bson:",omitempty" json:"author,omitempty"`          // An individiual or organization primarily involved in the creation and maintenance of the ValueSet.
	Expansion       *ValueSetExpansion `binding:"omitempty" bson:",omitempty"`
	Title           *string            `bson:",omitempty" json:"title,omitempty"`                     // A short, descriptive, user-friendly title for the value set.
	Text            *Narrative         `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Status          *string            `binding:"required" bson:",omitempty" json:"status,omitempty"` // The status of this value set. Enables tracking the life-cycle of the content. The status of the value set applies to the value set definition (ValueSet.compose) and the associated ValueSet metadata. Expansions do not have a state.
	Contact         []*ContactDetail   `bson:",omitempty" json:"contact,omitempty"`                   // Contact details to assist a user in finding and communicating with the publisher.
	Immutable       *bool              `bson:",omitempty" json:"immutable,omitempty"`                 // If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change.
	Purpose         *string            `bson:",omitempty" json:"purpose,omitempty"`                   // Explanation of why this value set is needed and why it has been designed as it has.
	ResourceType    string             `binding:"omitempty" bson:"-" json:"resourceType"`
}
type ValueSetVersionAlgorithmx struct {
	VersionAlgorithmString string `bson:",omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding Coding `bson:",omitempty" json:"versionAlgorithmCoding,omitempty"`
}

func (out *ValueSetCompose) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["lockedDate"]) > 0 {
		if err := go1.Unmarshal(asMap["lockedDate"], &out.LockedDate); err != nil {
			return err
		}

	}
	if len(asMap["inactive"]) > 0 {
		if err := go1.Unmarshal(asMap["inactive"], &out.Inactive); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["include"], &out.Include); err != nil {
		return err
	}

	if len(asMap["exclude"]) > 0 {
		if err := go1.Unmarshal(asMap["exclude"], &out.Exclude); err != nil {
			return err
		}

	}
	if len(asMap["property"]) > 0 {
		if err := go1.Unmarshal(asMap["property"], &out.Property); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type ValueSetCompose struct {
	LockedDate        *Date                   `bson:",omitempty" json:"lockedDate,omitempty"` // The Locked Date is  the effective date that is used to determine the version of all referenced Code Systems and Value Set Definitions included in the compose that are not already tied to a specific version.
	Inactive          *bool                   `bson:",omitempty" json:"inactive,omitempty"`   // Whether inactive codes - codes that are not approved for current use - are in the value set. If inactive = true, inactive codes are to be included in the expansion, if inactive = false, the inactive codes will not be included in the expansion. If absent, the behavior is determined by the implementation, or by the applicable $expand parameters (but generally, inactive codes would be expected to be included).
	Include           *ValueSetComposeInclude `binding:"omitempty" bson:",omitempty"`
	Exclude           interface{}
	Property          []*string    `bson:",omitempty" json:"property,omitempty"`          // A property to return in the expansion, if the client doesn't ask for any particular properties. May be either a code from the code system definition (convenient) or a the formal URI that refers to the property. The special value '*' means all properties known to the server.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *ValueSetComposeInclude) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["concept"]) > 0 {
		if err := go1.Unmarshal(asMap["concept"], &out.Concept); err != nil {
			return err
		}

	}
	if len(asMap["filter"]) > 0 {
		if err := go1.Unmarshal(asMap["filter"], &out.Filter); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	if len(asMap["copyright"]) > 0 {
		if err := go1.Unmarshal(asMap["copyright"], &out.Copyright); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["system"]) > 0 {
		if err := go1.Unmarshal(asMap["system"], &out.System); err != nil {
			return err
		}

	}
	if len(asMap["valueSet"]) > 0 {
		if err := go1.Unmarshal(asMap["valueSet"], &out.ValueSet); err != nil {
			return err
		}

	}
	return nil
}

type ValueSetComposeInclude struct {
	Concept           *ValueSetComposeIncludeConcept `binding:"omitempty" bson:",omitempty"`
	Filter            *ValueSetComposeIncludeFilter  `binding:"omitempty" bson:",omitempty"`
	Id                *string                        `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                   `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Version           *string                        `bson:",omitempty" json:"version,omitempty"`           // The version of the code system that the codes are selected from, or the special version '*' for all versions.
	Copyright         *string                        `bson:",omitempty" json:"copyright,omitempty"`         // A copyright statement for the specific code system asserted by the containing ValueSet.compose.include element's system value (if the associated ValueSet.compose.include.version element is not present); or the code system and version combination (if the associated ValueSet.compose.include.version element is present).
	ModifierExtension []*Extension                   `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	System   *string   `bson:",omitempty" json:"system,omitempty"`   // An absolute URI which is the code system from which the selected codes come from.
	ValueSet []*string `bson:",omitempty" json:"valueSet,omitempty"` // Selects the concepts found in this value set (based on its value set definition). This is an absolute URI that is a reference to ValueSet.url.  If multiple value sets are specified this includes the intersection of the contents of all of the referenced value sets.
}

func (out *ValueSetComposeIncludeConcept) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["display"]) > 0 {
		if err := go1.Unmarshal(asMap["display"], &out.Display); err != nil {
			return err
		}

	}
	if len(asMap["designation"]) > 0 {
		if err := go1.Unmarshal(asMap["designation"], &out.Designation); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	return nil
}

type ValueSetComposeIncludeConcept struct {
	Display           *string                                   `bson:",omitempty" json:"display,omitempty"` // The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system.
	Designation       *ValueSetComposeIncludeConceptDesignation `binding:"omitempty" bson:",omitempty"`
	Id                *string                                   `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension                              `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                              `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code *string `binding:"required" bson:",omitempty" json:"code,omitempty"` // Specifies a code for the concept to be included or excluded.
}

func (out *ValueSetComposeIncludeConceptDesignation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["use"]) > 0 {
		if err := go1.Unmarshal(asMap["use"], &out.Use); err != nil {
			return err
		}

	}
	if len(asMap["additionalUse"]) > 0 {
		if err := go1.Unmarshal(asMap["additionalUse"], &out.AdditionalUse); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	return nil
}

type ValueSetComposeIncludeConceptDesignation struct {
	Use               *Coding      `bson:",omitempty" json:"use,omitempty"`                      // A code that represents types of uses of designations.
	AdditionalUse     []*Coding    `bson:",omitempty" json:"additionalUse,omitempty"`            // Additional codes that detail how this designation would be used, if there is more than one use.
	Value             *string      `binding:"required" bson:",omitempty" json:"value,omitempty"` // The text value for this designation.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`                    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`                // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`        /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Language *string `bson:",omitempty" json:"language,omitempty"` // The language this designation is defined for.
}

func (out *ValueSetComposeIncludeFilter) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["property"], &out.Property); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["op"], &out.Op); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["value"], &out.Value); err != nil {
		return err
	}

	return nil
}

type ValueSetComposeIncludeFilter struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Property *string `binding:"required" bson:",omitempty" json:"property,omitempty"` // A code that identifies a property or a filter defined in the code system.
	Op       *string `binding:"required" bson:",omitempty" json:"op,omitempty"`       // The kind of operation to perform as a part of the filter criteria.
	Value    *string `binding:"required" bson:",omitempty" json:"value,omitempty"`    // The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value  (if the filter represents a property defined in CodeSystem) or of the system filter value (if the filter represents a filter defined in CodeSystem) when the operation is 'regex', or one of the values (true and false), when the operation is 'exists'.
}

func (out *ValueSetScope) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["inclusionCriteria"]) > 0 {
		if err := go1.Unmarshal(asMap["inclusionCriteria"], &out.InclusionCriteria); err != nil {
			return err
		}

	}
	if len(asMap["exclusionCriteria"]) > 0 {
		if err := go1.Unmarshal(asMap["exclusionCriteria"], &out.ExclusionCriteria); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type ValueSetScope struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	InclusionCriteria *string      `bson:",omitempty" json:"inclusionCriteria,omitempty"` // Criteria describing which concepts or codes should be included and why.
	ExclusionCriteria *string      `bson:",omitempty" json:"exclusionCriteria,omitempty"` // Criteria describing which concepts or codes should be excluded and why.
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *ValueSetExpansion) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["contains"]) > 0 {
		if err := go1.Unmarshal(asMap["contains"], &out.Contains); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if len(asMap["next"]) > 0 {
		if err := go1.Unmarshal(asMap["next"], &out.Next); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["timestamp"], &out.Timestamp); err != nil {
		return err
	}

	if len(asMap["parameter"]) > 0 {
		if err := go1.Unmarshal(asMap["parameter"], &out.Parameter); err != nil {
			return err
		}

	}
	if len(asMap["property"]) > 0 {
		if err := go1.Unmarshal(asMap["property"], &out.Property); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["total"]) > 0 {
		if err := go1.Unmarshal(asMap["total"], &out.Total); err != nil {
			return err
		}

	}
	if len(asMap["offset"]) > 0 {
		if err := go1.Unmarshal(asMap["offset"], &out.Offset); err != nil {
			return err
		}

	}
	return nil
}

type ValueSetExpansion struct {
	Contains          *ValueSetExpansionContains `binding:"omitempty" bson:",omitempty"`
	ModifierExtension []*Extension               `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Identifier *string                     `bson:",omitempty" json:"identifier,omitempty"`                   // An identifier that uniquely identifies this expansion of the valueset, based on a unique combination of the provided parameters, the system default parameters, and the underlying system code system versions etc. Systems may re-use the same identifier as long as those factors remain the same, and the expansion is the same, but are not required to do so. This is a business identifier.
	Next       *string                     `bson:",omitempty" json:"next,omitempty"`                         // As per paging Search results, the next URLs are opaque to the client, have no dictated structure, and only the server understands them.
	Timestamp  *DateTime                   `binding:"required" bson:",omitempty" json:"timestamp,omitempty"` // The time at which the expansion was produced by the expanding system.
	Parameter  *ValueSetExpansionParameter `binding:"omitempty" bson:",omitempty"`
	Property   *ValueSetExpansionProperty  `binding:"omitempty" bson:",omitempty"`
	Id         *string                     `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension  []*Extension                `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Total      *int                        `bson:",omitempty" json:"total,omitempty"`     // The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter.
	Offset     *int                        `bson:",omitempty" json:"offset,omitempty"`    // If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL NOT be present.
}

func (out *ValueSetExpansionContains) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["abstract"]) > 0 {
		if err := go1.Unmarshal(asMap["abstract"], &out.Abstract); err != nil {
			return err
		}

	}
	if len(asMap["inactive"]) > 0 {
		if err := go1.Unmarshal(asMap["inactive"], &out.Inactive); err != nil {
			return err
		}

	}
	if len(asMap["display"]) > 0 {
		if err := go1.Unmarshal(asMap["display"], &out.Display); err != nil {
			return err
		}

	}
	if len(asMap["designation"]) > 0 {
		if err := go1.Unmarshal(asMap["designation"], &out.Designation); err != nil {
			return err
		}

	}
	if len(asMap["contains"]) > 0 {
		if err := go1.Unmarshal(asMap["contains"], &out.Contains); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["code"]) > 0 {
		if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
			return err
		}

	}
	if len(asMap["property"]) > 0 {
		if err := go1.Unmarshal(asMap["property"], &out.Property); err != nil {
			return err
		}

	}
	if len(asMap["system"]) > 0 {
		if err := go1.Unmarshal(asMap["system"], &out.System); err != nil {
			return err
		}

	}
	if len(asMap["version"]) > 0 {
		if err := go1.Unmarshal(asMap["version"], &out.Version); err != nil {
			return err
		}

	}
	return nil
}

type ValueSetExpansionContains struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Abstract    *bool   `bson:",omitempty" json:"abstract,omitempty"` // If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value.
	Inactive    *bool   `bson:",omitempty" json:"inactive,omitempty"` // If the concept is inactive in the code system that defines it. Inactive codes are those that are no longer to be used, but are maintained by the code system for understanding legacy data. It might not be known or specified whether a concept is inactive (and it may depend on the context of use).
	Display     *string `bson:",omitempty" json:"display,omitempty"`  // The recommended display for this item in the expansion.
	Designation interface{}
	Contains    interface{}
	Id          *string                            `bson:"_id,omitempty" json:"id,omitempty"`     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension   []*Extension                       `bson:",omitempty" json:"extension,omitempty"` // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Code        *string                            `bson:",omitempty" json:"code,omitempty"`      // The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.
	Property    *ValueSetExpansionContainsProperty `binding:"omitempty" bson:",omitempty"`
	System      *string                            `bson:",omitempty" json:"system,omitempty"`  // An absolute URI which is the code system in which the code for this item in the expansion is defined.
	Version     *string                            `bson:",omitempty" json:"version,omitempty"` // The version of the code system from this code was taken. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
}

func (out *ValueSetExpansionContainsProperty) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueCode"], &out.ValueCode); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCoding"], &out.ValueCoding); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDateTime"], &out.ValueDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDecimal"], &out.ValueDecimal); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	if len(asMap["subProperty"]) > 0 {
		if err := go1.Unmarshal(asMap["subProperty"], &out.SubProperty); err != nil {
			return err
		}

	}
	return nil
}

type ValueSetExpansionContainsProperty struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code *string `binding:"required" bson:",omitempty" json:"code,omitempty"` // A code that is a reference to ValueSet.expansion.property.code.
	ValueSetExpansionContainsPropertyValuex
	SubProperty *ValueSetExpansionContainsPropertySubProperty `binding:"omitempty" bson:",omitempty"`
}
type ValueSetExpansionContainsPropertyValuex struct {
	ValueCode     string   `bson:",omitempty" json:"valueCode,omitempty"`
	ValueCoding   Coding   `bson:",omitempty" json:"valueCoding,omitempty"`
	ValueString   string   `bson:",omitempty" json:"valueString,omitempty"`
	ValueInteger  int      `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueBoolean  bool     `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueDateTime DateTime `bson:",omitempty" json:"valueDateTime,omitempty"`
	ValueDecimal  float64  `bson:",omitempty" json:"valueDecimal,omitempty"`
}

func (out *ValueSetExpansionContainsPropertySubProperty) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["valueCode"], &out.ValueCode); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCoding"], &out.ValueCoding); err == nil {
	} else if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDateTime"], &out.ValueDateTime); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDecimal"], &out.ValueDecimal); err == nil {
	} else {
		return fmt.Errorf("could not unmarshal %s into any of the possible types", "value[x]")
	}
	return nil
}

type ValueSetExpansionContainsPropertySubProperty struct {
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code *string `binding:"required" bson:",omitempty" json:"code,omitempty"` // A code that is a reference to ValueSet.expansion.property.code.
	ValueSetExpansionContainsPropertySubPropertyValuex
}
type ValueSetExpansionContainsPropertySubPropertyValuex struct {
	ValueCode     string   `bson:",omitempty" json:"valueCode,omitempty"`
	ValueCoding   Coding   `bson:",omitempty" json:"valueCoding,omitempty"`
	ValueString   string   `bson:",omitempty" json:"valueString,omitempty"`
	ValueInteger  int      `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueBoolean  bool     `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueDateTime DateTime `bson:",omitempty" json:"valueDateTime,omitempty"`
	ValueDecimal  float64  `bson:",omitempty" json:"valueDecimal,omitempty"`
}

func (out *ValueSetExpansionParameter) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["valueString"], &out.ValueString); err == nil {
	} else if err := go1.Unmarshal(asMap["valueBoolean"], &out.ValueBoolean); err == nil {
	} else if err := go1.Unmarshal(asMap["valueInteger"], &out.ValueInteger); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDecimal"], &out.ValueDecimal); err == nil {
	} else if err := go1.Unmarshal(asMap["valueUri"], &out.ValueUri); err == nil {
	} else if err := go1.Unmarshal(asMap["valueCode"], &out.ValueCode); err == nil {
	} else if err := go1.Unmarshal(asMap["valueDateTime"], &out.ValueDateTime); err == nil {
	} else {

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["name"], &out.Name); err != nil {
		return err
	}

	return nil
}

type ValueSetExpansionParameter struct {
	ValueSetExpansionParameterValuex
	Id                *string      `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Name *string `binding:"required" bson:",omitempty" json:"name,omitempty"` // Name of the input parameter to the $expand operation; may be a server-assigned name for additional default or other server-supplied parameters used to control the expansion process.
}
type ValueSetExpansionParameterValuex struct {
	ValueString   string   `bson:",omitempty" json:"valueString,omitempty"`
	ValueBoolean  bool     `bson:",omitempty" json:"valueBoolean,omitempty"`
	ValueInteger  int      `bson:",omitempty" json:"valueInteger,omitempty"`
	ValueDecimal  float64  `bson:",omitempty" json:"valueDecimal,omitempty"`
	ValueUri      string   `bson:",omitempty" json:"valueUri,omitempty"`
	ValueCode     string   `bson:",omitempty" json:"valueCode,omitempty"`
	ValueDateTime DateTime `bson:",omitempty" json:"valueDateTime,omitempty"`
}

func (out *ValueSetExpansionProperty) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["code"], &out.Code); err != nil {
		return err
	}

	if len(asMap["uri"]) > 0 {
		if err := go1.Unmarshal(asMap["uri"], &out.Uri); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	return nil
}

type ValueSetExpansionProperty struct {
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Code *string `binding:"required" bson:",omitempty" json:"code,omitempty"` // A code that is used to identify the property. The code is used in ValueSet.expansion.contains.property.code.
	Uri  *string `bson:",omitempty" json:"uri,omitempty"`                     // Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.
	Id   *string `bson:"_id,omitempty" json:"id,omitempty"`                   // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
}

func (out *VerificationResult) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"VerificationResult\"" {
		return fmt.Errorf("resourceType is not %s", "VerificationResult")
	}
	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["nextScheduled"]) > 0 {
		if err := go1.Unmarshal(asMap["nextScheduled"], &out.NextScheduled); err != nil {
			return err
		}

	}
	if len(asMap["primarySource"]) > 0 {
		if err := go1.Unmarshal(asMap["primarySource"], &out.PrimarySource); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["need"]) > 0 {
		if err := go1.Unmarshal(asMap["need"], &out.Need); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if len(asMap["validationType"]) > 0 {
		if err := go1.Unmarshal(asMap["validationType"], &out.ValidationType); err != nil {
			return err
		}

	}
	if len(asMap["validationProcess"]) > 0 {
		if err := go1.Unmarshal(asMap["validationProcess"], &out.ValidationProcess); err != nil {
			return err
		}

	}
	if len(asMap["failureAction"]) > 0 {
		if err := go1.Unmarshal(asMap["failureAction"], &out.FailureAction); err != nil {
			return err
		}

	}
	if len(asMap["attestation"]) > 0 {
		if err := go1.Unmarshal(asMap["attestation"], &out.Attestation); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["target"]) > 0 {
		if err := go1.Unmarshal(asMap["target"], &out.Target); err != nil {
			return err
		}

	}
	if len(asMap["frequency"]) > 0 {
		if err := go1.Unmarshal(asMap["frequency"], &out.Frequency); err != nil {
			return err
		}

	}
	if len(asMap["validator"]) > 0 {
		if err := go1.Unmarshal(asMap["validator"], &out.Validator); err != nil {
			return err
		}

	}
	if len(asMap["targetLocation"]) > 0 {
		if err := go1.Unmarshal(asMap["targetLocation"], &out.TargetLocation); err != nil {
			return err
		}

	}
	if len(asMap["statusDate"]) > 0 {
		if err := go1.Unmarshal(asMap["statusDate"], &out.StatusDate); err != nil {
			return err
		}

	}
	if len(asMap["lastPerformed"]) > 0 {
		if err := go1.Unmarshal(asMap["lastPerformed"], &out.LastPerformed); err != nil {
			return err
		}

	}
	return nil
}

type VerificationResult struct {
	ImplicitRules     *string                          `bson:",omitempty" json:"implicitRules,omitempty"` // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Extension         []*Extension                     `bson:",omitempty" json:"extension,omitempty"`     // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	NextScheduled     *Date                            `bson:",omitempty" json:"nextScheduled,omitempty"` // The date when target is next validated, if appropriate.
	PrimarySource     *VerificationResultPrimarySource `binding:"omitempty" bson:",omitempty"`
	Id                *primitive.ObjectID              `bson:"_id,omitempty" json:"id,omitempty"`                     // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Language          *string                          `bson:",omitempty" json:"language,omitempty"`                  // The base language in which the resource is written.
	Text              *Narrative                       `bson:",omitempty" json:"text,omitempty"`                      // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Contained         []*Resource                      `bson:",omitempty" json:"contained,omitempty"`                 // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Need              *CodeableConcept                 `bson:",omitempty" json:"need,omitempty"`                      // The frequency with which the target must be validated (none; initial; periodic).
	Status            *string                          `binding:"required" bson:",omitempty" json:"status,omitempty"` // The validation status of the target (attested; validated; in process; requires revalidation; validation failed; revalidation failed).
	ValidationType    *CodeableConcept                 `bson:",omitempty" json:"validationType,omitempty"`            // What the target is validated against (nothing; primary source; multiple sources).
	ValidationProcess []*CodeableConcept               `bson:",omitempty" json:"validationProcess,omitempty"`         // The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context).
	FailureAction     *CodeableConcept                 `bson:",omitempty" json:"failureAction,omitempty"`             // The result if validation fails (fatal; warning; record only; none).
	Attestation       *VerificationResultAttestation   `binding:"omitempty" bson:",omitempty"`
	Meta              *Meta                            `bson:",omitempty" json:"meta,omitempty"`              // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	ModifierExtension []*Extension                     `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Target         []*Reference                 `bson:",omitempty" json:"target,omitempty"`    // A resource that was validated.
	Frequency      *Timing                      `bson:",omitempty" json:"frequency,omitempty"` // Frequency of revalidation.
	Validator      *VerificationResultValidator `binding:"omitempty" bson:",omitempty"`
	TargetLocation []*string                    `bson:",omitempty" json:"targetLocation,omitempty"` // The fhirpath location(s) within the resource that was validated.
	StatusDate     *DateTime                    `bson:",omitempty" json:"statusDate,omitempty"`     // When the validation status was updated.
	LastPerformed  *DateTime                    `bson:",omitempty" json:"lastPerformed,omitempty"`  // The date/time validation was last completed (including failed validations).
	ResourceType   string                       `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *VerificationResultPrimarySource) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["type"]) > 0 {
		if err := go1.Unmarshal(asMap["type"], &out.Type); err != nil {
			return err
		}

	}
	if len(asMap["communicationMethod"]) > 0 {
		if err := go1.Unmarshal(asMap["communicationMethod"], &out.CommunicationMethod); err != nil {
			return err
		}

	}
	if len(asMap["validationStatus"]) > 0 {
		if err := go1.Unmarshal(asMap["validationStatus"], &out.ValidationStatus); err != nil {
			return err
		}

	}
	if len(asMap["validationDate"]) > 0 {
		if err := go1.Unmarshal(asMap["validationDate"], &out.ValidationDate); err != nil {
			return err
		}

	}
	if len(asMap["canPushUpdates"]) > 0 {
		if err := go1.Unmarshal(asMap["canPushUpdates"], &out.CanPushUpdates); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["who"]) > 0 {
		if err := go1.Unmarshal(asMap["who"], &out.Who); err != nil {
			return err
		}

	}
	if len(asMap["pushTypeAvailable"]) > 0 {
		if err := go1.Unmarshal(asMap["pushTypeAvailable"], &out.PushTypeAvailable); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type VerificationResultPrimarySource struct {
	Type                []*CodeableConcept `bson:",omitempty" json:"type,omitempty"`                // Type of primary source (License Board; Primary Education; Continuing Education; Postal Service; Relationship owner; Registration Authority; legal source; issuing source; authoritative source).
	CommunicationMethod []*CodeableConcept `bson:",omitempty" json:"communicationMethod,omitempty"` // Method for communicating with the primary source (manual; API; Push).
	ValidationStatus    *CodeableConcept   `bson:",omitempty" json:"validationStatus,omitempty"`    // Status of the validation of the target against the primary source (successful; failed; unknown).
	ValidationDate      *DateTime          `bson:",omitempty" json:"validationDate,omitempty"`      // When the target was validated against the primary source.
	CanPushUpdates      *CodeableConcept   `bson:",omitempty" json:"canPushUpdates,omitempty"`      // Ability of the primary source to push updates/alerts (yes; no; undetermined).
	ModifierExtension   []*Extension       `bson:",omitempty" json:"modifierExtension,omitempty"`   /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Who               *Reference         `bson:",omitempty" json:"who,omitempty"`               // Reference to the primary source.
	PushTypeAvailable []*CodeableConcept `bson:",omitempty" json:"pushTypeAvailable,omitempty"` // Type of alerts/updates the primary source can send (specific requested changes; any changes; as defined by source).
	Id                *string            `bson:"_id,omitempty" json:"id,omitempty"`             // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension         []*Extension       `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}

func (out *VerificationResultAttestation) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["communicationMethod"]) > 0 {
		if err := go1.Unmarshal(asMap["communicationMethod"], &out.CommunicationMethod); err != nil {
			return err
		}

	}
	if len(asMap["date"]) > 0 {
		if err := go1.Unmarshal(asMap["date"], &out.Date); err != nil {
			return err
		}

	}
	if len(asMap["sourceIdentityCertificate"]) > 0 {
		if err := go1.Unmarshal(asMap["sourceIdentityCertificate"], &out.SourceIdentityCertificate); err != nil {
			return err
		}

	}
	if len(asMap["sourceSignature"]) > 0 {
		if err := go1.Unmarshal(asMap["sourceSignature"], &out.SourceSignature); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["who"]) > 0 {
		if err := go1.Unmarshal(asMap["who"], &out.Who); err != nil {
			return err
		}

	}
	if len(asMap["onBehalfOf"]) > 0 {
		if err := go1.Unmarshal(asMap["onBehalfOf"], &out.OnBehalfOf); err != nil {
			return err
		}

	}
	if len(asMap["proxyIdentityCertificate"]) > 0 {
		if err := go1.Unmarshal(asMap["proxyIdentityCertificate"], &out.ProxyIdentityCertificate); err != nil {
			return err
		}

	}
	if len(asMap["proxySignature"]) > 0 {
		if err := go1.Unmarshal(asMap["proxySignature"], &out.ProxySignature); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type VerificationResultAttestation struct {
	Extension                 []*Extension     `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	CommunicationMethod       *CodeableConcept `bson:",omitempty" json:"communicationMethod,omitempty"`       // The method by which attested information was submitted/retrieved (manual; API; Push).
	Date                      *Date            `bson:",omitempty" json:"date,omitempty"`                      // The date the information was attested to.
	SourceIdentityCertificate *string          `bson:",omitempty" json:"sourceIdentityCertificate,omitempty"` // A digital identity certificate associated with the attestation source.
	SourceSignature           *Signature       `bson:",omitempty" json:"sourceSignature,omitempty"`           // Signed assertion by the attestation source that they have attested to the information.
	Id                        *string          `bson:"_id,omitempty" json:"id,omitempty"`                     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Who                       *Reference       `bson:",omitempty" json:"who,omitempty"`                       // The individual or organization attesting to information.
	OnBehalfOf                *Reference       `bson:",omitempty" json:"onBehalfOf,omitempty"`                // When the who is asserting on behalf of another (organization or individual).
	ProxyIdentityCertificate  *string          `bson:",omitempty" json:"proxyIdentityCertificate,omitempty"`  // A digital identity certificate associated with the proxy entity submitting attested information on behalf of the attestation source.
	ProxySignature            *Signature       `bson:",omitempty" json:"proxySignature,omitempty"`            // Signed assertion by the proxy entity indicating that they have the right to submit attested information on behalf of the attestation source.
	ModifierExtension         []*Extension     `bson:",omitempty" json:"modifierExtension,omitempty"`         /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *VerificationResultValidator) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if err := go1.Unmarshal(asMap["organization"], &out.Organization); err != nil {
		return err
	}

	if len(asMap["identityCertificate"]) > 0 {
		if err := go1.Unmarshal(asMap["identityCertificate"], &out.IdentityCertificate); err != nil {
			return err
		}

	}
	if len(asMap["attestationSignature"]) > 0 {
		if err := go1.Unmarshal(asMap["attestationSignature"], &out.AttestationSignature); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	return nil
}

type VerificationResultValidator struct {
	Organization         *Reference   `binding:"required" bson:",omitempty" json:"organization,omitempty"` // Reference to the organization validating information.
	IdentityCertificate  *string      `bson:",omitempty" json:"identityCertificate,omitempty"`             // A digital identity certificate associated with the validator.
	AttestationSignature *Signature   `bson:",omitempty" json:"attestationSignature,omitempty"`            // Signed assertion by the validator that they have validated the information.
	Id                   *string      `bson:"_id,omitempty" json:"id,omitempty"`                           // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension            []*Extension `bson:",omitempty" json:"extension,omitempty"`                       // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension    []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"`               /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
}

func (out *VisionPrescription) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if resource, ok := asMap["resourceType"]; ok && string(resource) != "\"VisionPrescription\"" {
		return fmt.Errorf("resourceType is not %s", "VisionPrescription")
	}
	if len(asMap["contained"]) > 0 {
		if err := go1.Unmarshal(asMap["contained"], &out.Contained); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if len(asMap["encounter"]) > 0 {
		if err := go1.Unmarshal(asMap["encounter"], &out.Encounter); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["prescriber"], &out.Prescriber); err != nil {
		return err
	}

	if len(asMap["implicitRules"]) > 0 {
		if err := go1.Unmarshal(asMap["implicitRules"], &out.ImplicitRules); err != nil {
			return err
		}

	}
	if len(asMap["identifier"]) > 0 {
		if err := go1.Unmarshal(asMap["identifier"], &out.Identifier); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["status"], &out.Status); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["created"], &out.Created); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["dateWritten"], &out.DateWritten); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["lensSpecification"], &out.LensSpecification); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["patient"], &out.Patient); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["meta"]) > 0 {
		if err := go1.Unmarshal(asMap["meta"], &out.Meta); err != nil {
			return err
		}

	}
	if len(asMap["language"]) > 0 {
		if err := go1.Unmarshal(asMap["language"], &out.Language); err != nil {
			return err
		}

	}
	if len(asMap["text"]) > 0 {
		if err := go1.Unmarshal(asMap["text"], &out.Text); err != nil {
			return err
		}

	}
	return nil
}

type VisionPrescription struct {
	Contained         []*Resource  `bson:",omitempty" json:"contained,omitempty"`         // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
	Extension         []*Extension `bson:",omitempty" json:"extension,omitempty"`         // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Encounter         *Reference                           `bson:",omitempty" json:"encounter,omitempty"`                      // A reference to a resource that identifies the particular occurrence of contact between patient and health care provider during which the prescription was issued.
	Prescriber        *Reference                           `binding:"required" bson:",omitempty" json:"prescriber,omitempty"`  // The healthcare professional responsible for authorizing the prescription.
	ImplicitRules     *string                              `bson:",omitempty" json:"implicitRules,omitempty"`                  // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	Identifier        []*Identifier                        `bson:",omitempty" json:"identifier,omitempty"`                     // A unique identifier assigned to this vision prescription.
	Status            *string                              `binding:"required" bson:",omitempty" json:"status,omitempty"`      // The status of the resource instance.
	Created           *DateTime                            `binding:"required" bson:",omitempty" json:"created,omitempty"`     // The date this resource was created.
	DateWritten       *DateTime                            `binding:"required" bson:",omitempty" json:"dateWritten,omitempty"` // The date (and perhaps time) when the prescription was written.
	LensSpecification *VisionPrescriptionLensSpecification `binding:"omitempty" bson:",omitempty"`
	Patient           *Reference                           `binding:"required" bson:",omitempty" json:"patient,omitempty"` // A resource reference to the person to whom the vision prescription applies.
	Id                *primitive.ObjectID                  `bson:"_id,omitempty" json:"id,omitempty"`                      // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Meta              *Meta                                `bson:",omitempty" json:"meta,omitempty"`                       // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Language          *string                              `bson:",omitempty" json:"language,omitempty"`                   // The base language in which the resource is written.
	Text              *Narrative                           `bson:",omitempty" json:"text,omitempty"`                       // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	ResourceType      string                               `binding:"omitempty" bson:"-" json:"resourceType"`
}

func (out *VisionPrescriptionLensSpecification) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["add"]) > 0 {
		if err := go1.Unmarshal(asMap["add"], &out.Add); err != nil {
			return err
		}

	}
	if len(asMap["color"]) > 0 {
		if err := go1.Unmarshal(asMap["color"], &out.Color); err != nil {
			return err
		}

	}
	if len(asMap["brand"]) > 0 {
		if err := go1.Unmarshal(asMap["brand"], &out.Brand); err != nil {
			return err
		}

	}
	if len(asMap["note"]) > 0 {
		if err := go1.Unmarshal(asMap["note"], &out.Note); err != nil {
			return err
		}

	}
	if len(asMap["prism"]) > 0 {
		if err := go1.Unmarshal(asMap["prism"], &out.Prism); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["eye"], &out.Eye); err != nil {
		return err
	}

	if len(asMap["cylinder"]) > 0 {
		if err := go1.Unmarshal(asMap["cylinder"], &out.Cylinder); err != nil {
			return err
		}

	}
	if len(asMap["axis"]) > 0 {
		if err := go1.Unmarshal(asMap["axis"], &out.Axis); err != nil {
			return err
		}

	}
	if len(asMap["power"]) > 0 {
		if err := go1.Unmarshal(asMap["power"], &out.Power); err != nil {
			return err
		}

	}
	if len(asMap["duration"]) > 0 {
		if err := go1.Unmarshal(asMap["duration"], &out.Duration); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["product"], &out.Product); err != nil {
		return err
	}

	if len(asMap["sphere"]) > 0 {
		if err := go1.Unmarshal(asMap["sphere"], &out.Sphere); err != nil {
			return err
		}

	}
	if len(asMap["backCurve"]) > 0 {
		if err := go1.Unmarshal(asMap["backCurve"], &out.BackCurve); err != nil {
			return err
		}

	}
	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["diameter"]) > 0 {
		if err := go1.Unmarshal(asMap["diameter"], &out.Diameter); err != nil {
			return err
		}

	}
	return nil
}

type VisionPrescriptionLensSpecification struct {
	Add               *float64                                  `bson:",omitempty" json:"add,omitempty"`   // Power adjustment for multifocal lenses measured in dioptres (0.25 units).
	Color             *string                                   `bson:",omitempty" json:"color,omitempty"` // Special color or pattern.
	Brand             *string                                   `bson:",omitempty" json:"brand,omitempty"` // Brand recommendations or restrictions.
	Note              []*Annotation                             `bson:",omitempty" json:"note,omitempty"`  // Notes for special requirements such as coatings and lens materials.
	Prism             *VisionPrescriptionLensSpecificationPrism `binding:"omitempty" bson:",omitempty"`
	Eye               *string                                   `binding:"required" bson:",omitempty" json:"eye,omitempty"` // The eye for which the lens specification applies.
	Cylinder          *float64                                  `bson:",omitempty" json:"cylinder,omitempty"`               // Power adjustment for astigmatism measured in dioptres (0.25 units).
	Axis              *int                                      `bson:",omitempty" json:"axis,omitempty"`                   // Adjustment for astigmatism measured in integer degrees.
	Power             *float64                                  `bson:",omitempty" json:"power,omitempty"`                  // Contact lens power measured in dioptres (0.25 units).
	Duration          *Quantity                                 `bson:",omitempty" json:"duration,omitempty"`               // The recommended maximum wear period for the lens.
	Extension         []*Extension                              `bson:",omitempty" json:"extension,omitempty"`              // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	ModifierExtension []*Extension                              `bson:",omitempty" json:"modifierExtension,omitempty"`      /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Product   *CodeableConcept `binding:"required" bson:",omitempty" json:"product,omitempty"` // Identifies the type of vision correction product which is required for the patient.
	Sphere    *float64         `bson:",omitempty" json:"sphere,omitempty"`                     // Lens power measured in dioptres (0.25 units).
	BackCurve *float64         `bson:",omitempty" json:"backCurve,omitempty"`                  // Back curvature measured in millimetres.
	Id        *string          `bson:"_id,omitempty" json:"id,omitempty"`                      // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Diameter  *float64         `bson:",omitempty" json:"diameter,omitempty"`                   // Contact lens diameter measured in millimetres.
}

func (out *VisionPrescriptionLensSpecificationPrism) UnmarshalJSON(data []byte) error {
	var asMap map[string]go1.RawMessage
	if err := go1.Unmarshal(data, &asMap); err != nil {
		return err
	}
	if len(asMap["modifierExtension"]) > 0 {
		if err := go1.Unmarshal(asMap["modifierExtension"], &out.ModifierExtension); err != nil {
			return err
		}

	}
	if err := go1.Unmarshal(asMap["amount"], &out.Amount); err != nil {
		return err
	}

	if err := go1.Unmarshal(asMap["base"], &out.Base); err != nil {
		return err
	}

	if len(asMap["id"]) > 0 {
		if err := go1.Unmarshal(asMap["id"], &out.Id); err != nil {
			return err
		}

	}
	if len(asMap["extension"]) > 0 {
		if err := go1.Unmarshal(asMap["extension"], &out.Extension); err != nil {
			return err
		}

	}
	return nil
}

type VisionPrescriptionLensSpecificationPrism struct {
	ModifierExtension []*Extension `bson:",omitempty" json:"modifierExtension,omitempty"` /*
	May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

	Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	*/
	Amount    *float64     `binding:"required" bson:",omitempty" json:"amount,omitempty"` // Amount of prism to compensate for eye alignment in fractional units.
	Base      *string      `binding:"required" bson:",omitempty" json:"base,omitempty"`   // The relative base, or reference lens edge, for the prism.
	Id        *string      `bson:"_id,omitempty" json:"id,omitempty"`                     // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Extension []*Extension `bson:",omitempty" json:"extension,omitempty"`                 // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
}
