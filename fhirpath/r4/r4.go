package r4

import interpreter "github.com/gofhir/fhirpath/interpreter"

var elementTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Element"), baseTypeSpec)
var backboneElementTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "BackboneElement"), elementTypeSpec)
var base64BinaryTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "base64Binary"), primitiveTypeTypeSpec)
var booleanTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "boolean"), primitiveTypeTypeSpec)
var canonicalTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "canonical"), uriTypeSpec)
var codeTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "code"), stringTypeSpec)
var dateTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "date"), primitiveTypeTypeSpec)
var dateTimeTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "dateTime"), primitiveTypeTypeSpec)
var decimalTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "decimal"), primitiveTypeTypeSpec)
var idTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "id"), stringTypeSpec)
var instantTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "instant"), primitiveTypeTypeSpec)
var integerTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "integer"), primitiveTypeTypeSpec)
var integer64TypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "integer64"), primitiveTypeTypeSpec)
var markdownTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "markdown"), stringTypeSpec)
var oidTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "oid"), uriTypeSpec)
var positiveIntTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "positiveInt"), integerTypeSpec)
var stringTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "string"), primitiveTypeTypeSpec)
var timeTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "time"), primitiveTypeTypeSpec)
var unsignedIntTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "unsignedInt"), integerTypeSpec)
var uriTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "uri"), primitiveTypeTypeSpec)
var urlTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "url"), uriTypeSpec)
var uuidTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "uuid"), uriTypeSpec)
var xhtmlTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "xhtml"), elementTypeSpec)
var addressTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Address"), dataTypeTypeSpec)
var ageTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Age"), quantityTypeSpec)
var annotationTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Annotation"), dataTypeTypeSpec)
var attachmentTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Attachment"), dataTypeTypeSpec)
var availabilityTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Availability"), dataTypeTypeSpec)
var backboneTypeTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "BackboneType"), dataTypeTypeSpec)
var baseTypeSpec = interpreter.NewTypeSpec(interpreter.NewFQTypeName("FHIR", "Base"))
var codeableConceptTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "CodeableConcept"), dataTypeTypeSpec)
var codeableReferenceTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "CodeableReference"), dataTypeTypeSpec)
var codingTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Coding"), dataTypeTypeSpec)
var contactDetailTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ContactDetail"), dataTypeTypeSpec)
var contactPointTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ContactPoint"), dataTypeTypeSpec)
var contributorTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Contributor"), dataTypeTypeSpec)
var countTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Count"), quantityTypeSpec)
var dataRequirementTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "DataRequirement"), dataTypeTypeSpec)
var dataTypeTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "DataType"), elementTypeSpec)
var distanceTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Distance"), quantityTypeSpec)
var dosageTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Dosage"), backboneTypeTypeSpec)
var durationTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Duration"), quantityTypeSpec)
var elementDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ElementDefinition"), backboneTypeTypeSpec)
var expressionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Expression"), dataTypeTypeSpec)
var extendedContactDetailTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ExtendedContactDetail"), dataTypeTypeSpec)
var extensionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Extension"), dataTypeTypeSpec)
var humanNameTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "HumanName"), dataTypeTypeSpec)
var identifierTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Identifier"), dataTypeTypeSpec)
var marketingStatusTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "MarketingStatus"), backboneTypeTypeSpec)
var metaTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Meta"), dataTypeTypeSpec)
var monetaryComponentTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "MonetaryComponent"), dataTypeTypeSpec)
var moneyTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Money"), dataTypeTypeSpec)
var narrativeTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Narrative"), dataTypeTypeSpec)
var parameterDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ParameterDefinition"), dataTypeTypeSpec)
var periodTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Period"), dataTypeTypeSpec)
var primitiveTypeTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "PrimitiveType"), dataTypeTypeSpec)
var productShelfLifeTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ProductShelfLife"), backboneTypeTypeSpec)
var quantityTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Quantity"), dataTypeTypeSpec)
var rangeTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Range"), dataTypeTypeSpec)
var ratioTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Ratio"), dataTypeTypeSpec)
var ratioRangeTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "RatioRange"), dataTypeTypeSpec)
var referenceTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Reference"), dataTypeTypeSpec)
var relatedArtifactTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "RelatedArtifact"), dataTypeTypeSpec)
var sampledDataTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "SampledData"), dataTypeTypeSpec)
var signatureTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Signature"), dataTypeTypeSpec)
var timingTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Timing"), backboneTypeTypeSpec)
var triggerDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "TriggerDefinition"), dataTypeTypeSpec)
var usageContextTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "UsageContext"), dataTypeTypeSpec)
var virtualServiceDetailTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "VirtualServiceDetail"), dataTypeTypeSpec)
var moneyQuantityTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Quantity"), quantityTypeSpec)
var simpleQuantityTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Quantity"), quantityTypeSpec)
var resourceTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Resource"), baseTypeSpec)
var accountTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Account"), domainResourceTypeSpec)
var activityDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ActivityDefinition"), domainResourceTypeSpec)
var actorDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ActorDefinition"), domainResourceTypeSpec)
var administrableProductDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "AdministrableProductDefinition"), domainResourceTypeSpec)
var adverseEventTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "AdverseEvent"), domainResourceTypeSpec)
var allergyIntoleranceTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "AllergyIntolerance"), domainResourceTypeSpec)
var appointmentTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Appointment"), domainResourceTypeSpec)
var appointmentResponseTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "AppointmentResponse"), domainResourceTypeSpec)
var artifactAssessmentTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ArtifactAssessment"), domainResourceTypeSpec)
var auditEventTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "AuditEvent"), domainResourceTypeSpec)
var basicTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Basic"), domainResourceTypeSpec)
var binaryTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Binary"), resourceTypeSpec)
var biologicallyDerivedProductTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "BiologicallyDerivedProduct"), domainResourceTypeSpec)
var biologicallyDerivedProductDispenseTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "BiologicallyDerivedProductDispense"), domainResourceTypeSpec)
var bodyStructureTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "BodyStructure"), domainResourceTypeSpec)
var bundleTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Bundle"), resourceTypeSpec)
var canonicalResourceTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "CanonicalResource"), domainResourceTypeSpec)
var capabilityStatementTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "CapabilityStatement"), domainResourceTypeSpec)
var carePlanTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "CarePlan"), domainResourceTypeSpec)
var careTeamTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "CareTeam"), domainResourceTypeSpec)
var chargeItemTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ChargeItem"), domainResourceTypeSpec)
var chargeItemDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ChargeItemDefinition"), domainResourceTypeSpec)
var citationTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Citation"), domainResourceTypeSpec)
var claimTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Claim"), domainResourceTypeSpec)
var claimResponseTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ClaimResponse"), domainResourceTypeSpec)
var clinicalImpressionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ClinicalImpression"), domainResourceTypeSpec)
var clinicalUseDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ClinicalUseDefinition"), domainResourceTypeSpec)
var codeSystemTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "CodeSystem"), domainResourceTypeSpec)
var communicationTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Communication"), domainResourceTypeSpec)
var communicationRequestTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "CommunicationRequest"), domainResourceTypeSpec)
var compartmentDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "CompartmentDefinition"), domainResourceTypeSpec)
var compositionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Composition"), domainResourceTypeSpec)
var conceptMapTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ConceptMap"), domainResourceTypeSpec)
var conditionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Condition"), domainResourceTypeSpec)
var conditionDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ConditionDefinition"), domainResourceTypeSpec)
var consentTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Consent"), domainResourceTypeSpec)
var contractTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Contract"), domainResourceTypeSpec)
var coverageTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Coverage"), domainResourceTypeSpec)
var coverageEligibilityRequestTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "CoverageEligibilityRequest"), domainResourceTypeSpec)
var coverageEligibilityResponseTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "CoverageEligibilityResponse"), domainResourceTypeSpec)
var detectedIssueTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "DetectedIssue"), domainResourceTypeSpec)
var deviceTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Device"), domainResourceTypeSpec)
var deviceAssociationTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "DeviceAssociation"), domainResourceTypeSpec)
var deviceDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "DeviceDefinition"), domainResourceTypeSpec)
var deviceDispenseTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "DeviceDispense"), domainResourceTypeSpec)
var deviceMetricTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "DeviceMetric"), domainResourceTypeSpec)
var deviceRequestTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "DeviceRequest"), domainResourceTypeSpec)
var deviceUsageTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "DeviceUsage"), domainResourceTypeSpec)
var diagnosticReportTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "DiagnosticReport"), domainResourceTypeSpec)
var documentReferenceTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "DocumentReference"), domainResourceTypeSpec)
var domainResourceTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "DomainResource"), resourceTypeSpec)
var encounterTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Encounter"), domainResourceTypeSpec)
var encounterHistoryTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "EncounterHistory"), domainResourceTypeSpec)
var endpointTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Endpoint"), domainResourceTypeSpec)
var enrollmentRequestTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "EnrollmentRequest"), domainResourceTypeSpec)
var enrollmentResponseTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "EnrollmentResponse"), domainResourceTypeSpec)
var episodeOfCareTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "EpisodeOfCare"), domainResourceTypeSpec)
var eventDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "EventDefinition"), domainResourceTypeSpec)
var evidenceTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Evidence"), domainResourceTypeSpec)
var evidenceReportTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "EvidenceReport"), domainResourceTypeSpec)
var evidenceVariableTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "EvidenceVariable"), domainResourceTypeSpec)
var exampleScenarioTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ExampleScenario"), domainResourceTypeSpec)
var explanationOfBenefitTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ExplanationOfBenefit"), domainResourceTypeSpec)
var familyMemberHistoryTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "FamilyMemberHistory"), domainResourceTypeSpec)
var flagTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Flag"), domainResourceTypeSpec)
var formularyItemTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "FormularyItem"), domainResourceTypeSpec)
var genomicStudyTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "GenomicStudy"), domainResourceTypeSpec)
var goalTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Goal"), domainResourceTypeSpec)
var graphDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "GraphDefinition"), domainResourceTypeSpec)
var groupTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Group"), domainResourceTypeSpec)
var guidanceResponseTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "GuidanceResponse"), domainResourceTypeSpec)
var healthcareServiceTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "HealthcareService"), domainResourceTypeSpec)
var imagingSelectionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ImagingSelection"), domainResourceTypeSpec)
var imagingStudyTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ImagingStudy"), domainResourceTypeSpec)
var immunizationTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Immunization"), domainResourceTypeSpec)
var immunizationEvaluationTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ImmunizationEvaluation"), domainResourceTypeSpec)
var immunizationRecommendationTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ImmunizationRecommendation"), domainResourceTypeSpec)
var implementationGuideTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ImplementationGuide"), domainResourceTypeSpec)
var ingredientTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Ingredient"), domainResourceTypeSpec)
var insurancePlanTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "InsurancePlan"), domainResourceTypeSpec)
var inventoryItemTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "InventoryItem"), domainResourceTypeSpec)
var inventoryReportTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "InventoryReport"), domainResourceTypeSpec)
var invoiceTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Invoice"), domainResourceTypeSpec)
var libraryTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Library"), domainResourceTypeSpec)
var linkageTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Linkage"), domainResourceTypeSpec)
var listTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "List"), domainResourceTypeSpec)
var locationTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Location"), domainResourceTypeSpec)
var manufacturedItemDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ManufacturedItemDefinition"), domainResourceTypeSpec)
var measureTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Measure"), domainResourceTypeSpec)
var measureReportTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "MeasureReport"), domainResourceTypeSpec)
var medicationTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Medication"), domainResourceTypeSpec)
var medicationAdministrationTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "MedicationAdministration"), domainResourceTypeSpec)
var medicationDispenseTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "MedicationDispense"), domainResourceTypeSpec)
var medicationKnowledgeTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "MedicationKnowledge"), domainResourceTypeSpec)
var medicationRequestTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "MedicationRequest"), domainResourceTypeSpec)
var medicationStatementTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "MedicationStatement"), domainResourceTypeSpec)
var medicinalProductDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "MedicinalProductDefinition"), domainResourceTypeSpec)
var messageDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "MessageDefinition"), domainResourceTypeSpec)
var messageHeaderTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "MessageHeader"), domainResourceTypeSpec)
var metadataResourceTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "MetadataResource"), domainResourceTypeSpec)
var molecularSequenceTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "MolecularSequence"), domainResourceTypeSpec)
var namingSystemTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "NamingSystem"), domainResourceTypeSpec)
var nutritionIntakeTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "NutritionIntake"), domainResourceTypeSpec)
var nutritionOrderTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "NutritionOrder"), domainResourceTypeSpec)
var nutritionProductTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "NutritionProduct"), domainResourceTypeSpec)
var observationTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Observation"), domainResourceTypeSpec)
var observationDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ObservationDefinition"), domainResourceTypeSpec)
var operationDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "OperationDefinition"), domainResourceTypeSpec)
var operationOutcomeTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "OperationOutcome"), domainResourceTypeSpec)
var organizationTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Organization"), domainResourceTypeSpec)
var organizationAffiliationTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "OrganizationAffiliation"), domainResourceTypeSpec)
var packagedProductDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "PackagedProductDefinition"), domainResourceTypeSpec)
var parametersTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Parameters"), resourceTypeSpec)
var patientTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Patient"), domainResourceTypeSpec)
var paymentNoticeTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "PaymentNotice"), domainResourceTypeSpec)
var paymentReconciliationTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "PaymentReconciliation"), domainResourceTypeSpec)
var permissionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Permission"), domainResourceTypeSpec)
var personTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Person"), domainResourceTypeSpec)
var planDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "PlanDefinition"), domainResourceTypeSpec)
var practitionerTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Practitioner"), domainResourceTypeSpec)
var practitionerRoleTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "PractitionerRole"), domainResourceTypeSpec)
var procedureTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Procedure"), domainResourceTypeSpec)
var provenanceTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Provenance"), domainResourceTypeSpec)
var questionnaireTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Questionnaire"), domainResourceTypeSpec)
var questionnaireResponseTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "QuestionnaireResponse"), domainResourceTypeSpec)
var regulatedAuthorizationTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "RegulatedAuthorization"), domainResourceTypeSpec)
var relatedPersonTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "RelatedPerson"), domainResourceTypeSpec)
var requestOrchestrationTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "RequestOrchestration"), domainResourceTypeSpec)
var requirementsTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Requirements"), domainResourceTypeSpec)
var researchStudyTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ResearchStudy"), domainResourceTypeSpec)
var researchSubjectTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ResearchSubject"), domainResourceTypeSpec)
var riskAssessmentTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "RiskAssessment"), domainResourceTypeSpec)
var scheduleTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Schedule"), domainResourceTypeSpec)
var searchParameterTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "SearchParameter"), domainResourceTypeSpec)
var serviceRequestTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ServiceRequest"), domainResourceTypeSpec)
var slotTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Slot"), domainResourceTypeSpec)
var specimenTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Specimen"), domainResourceTypeSpec)
var specimenDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "SpecimenDefinition"), domainResourceTypeSpec)
var structureDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "StructureDefinition"), domainResourceTypeSpec)
var structureMapTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "StructureMap"), domainResourceTypeSpec)
var subscriptionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Subscription"), domainResourceTypeSpec)
var subscriptionStatusTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "SubscriptionStatus"), domainResourceTypeSpec)
var subscriptionTopicTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "SubscriptionTopic"), domainResourceTypeSpec)
var substanceTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Substance"), domainResourceTypeSpec)
var substanceDefinitionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "SubstanceDefinition"), domainResourceTypeSpec)
var substanceNucleicAcidTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "SubstanceNucleicAcid"), domainResourceTypeSpec)
var substancePolymerTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "SubstancePolymer"), domainResourceTypeSpec)
var substanceProteinTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "SubstanceProtein"), domainResourceTypeSpec)
var substanceReferenceInformationTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "SubstanceReferenceInformation"), domainResourceTypeSpec)
var substanceSourceMaterialTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "SubstanceSourceMaterial"), domainResourceTypeSpec)
var supplyDeliveryTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "SupplyDelivery"), domainResourceTypeSpec)
var supplyRequestTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "SupplyRequest"), domainResourceTypeSpec)
var taskTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Task"), domainResourceTypeSpec)
var terminologyCapabilitiesTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "TerminologyCapabilities"), domainResourceTypeSpec)
var testPlanTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "TestPlan"), domainResourceTypeSpec)
var testReportTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "TestReport"), domainResourceTypeSpec)
var testScriptTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "TestScript"), domainResourceTypeSpec)
var transportTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "Transport"), domainResourceTypeSpec)
var valueSetTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "ValueSet"), domainResourceTypeSpec)
var verificationResultTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "VerificationResult"), domainResourceTypeSpec)
var visionPrescriptionTypeSpec = interpreter.NewTypeSpecWithBase(interpreter.NewFQTypeName("FHIR", "VisionPrescription"), domainResourceTypeSpec)

type R4Model struct{}

func (a *R4Model) AsType(node interface{}, name interpreter.FQTypeNameAccessor) (interface{}, error) {
	panic("TODO AsType")
}
func (a *R4Model) TypeSpec(node interface{}) interpreter.TypeSpecAccessor {
	panic("TODO TypeSpec")
}
func (a *R4Model) Equal(node interface{}, other interface{}) bool {
	panic("TODO Equal")
}
func (a *R4Model) Equivalent(node interface{}, other interface{}) bool {
	panic("TODO Equivalent")
}
func (a *R4Model) Children(node interface{}) (interpreter.ColAccessor, error) {
	panic("TODO Children")
}

var typeAliases = map[string][]string{"Invoice.lineItem.serviced": []string{"Date", "Period"}, "ServiceRequest.occurrence": []string{"DateTime", "Period", "Timing"}, "TestPlan.versionAlgorithm": []string{"String", "Coding"}, "ArtifactAssessment.artifact": []string{"Reference", "Canonical", "Uri"}, "BiologicallyDerivedProduct.collection.collected": []string{"DateTime", "Period"}, "Contract.rule.content": []string{"Attachment", "Reference"}, "EventDefinition.subject": []string{"CodeableConcept", "Reference"}, "EvidenceVariable.category.value": []string{"CodeableConcept", "Quantity", "Range"}, "Ingredient.substance.strength.concentration": []string{"Ratio", "RatioRange", "CodeableConcept", "Quantity"}, "SpecimenDefinition.typeTested.container.minimumVolume": []string{"Quantity", "String"}, "CodeSystem.concept.property.value": []string{"Code", "Coding", "String", "Integer", "Boolean", "DateTime", "Decimal"}, "Contract.friendly.content": []string{"Attachment", "Reference"}, "ExplanationOfBenefit.procedure.procedure": []string{"CodeableConcept", "Reference"}, "AdverseEvent.mitigatingAction.item": []string{"Reference", "CodeableConcept"}, "ExampleScenario.instance.structureProfile": []string{"Canonical", "Uri"}, "ArtifactAssessment.citeAs": []string{"Reference", "Markdown"}, "EvidenceVariable.versionAlgorithm": []string{"String", "Coding"}, "BiologicallyDerivedProduct.property.value": []string{"Boolean", "Integer", "CodeableConcept", "Period", "Quantity", "Range", "Ratio", "String", "Attachment"}, "Claim.supportingInfo.timing": []string{"Date", "Period"}, "EvidenceReport.citeAs": []string{"Reference", "Markdown"}, "Goal.target.detail": []string{"Quantity", "Range", "CodeableConcept", "String", "Boolean", "Integer", "Ratio"}, "NutritionIntake.occurrence": []string{"DateTime", "Period"}, "FamilyMemberHistory.born": []string{"Period", "Date", "String"}, "MeasureReport.group.measureScore": []string{"Quantity", "DateTime", "CodeableConcept", "Period", "Range", "Duration"}, "PlanDefinition.action.definition": []string{"Canonical", "Uri"}, "Procedure.occurrence": []string{"DateTime", "Period", "String", "Age", "Range", "Timing"}, "Claim.item.location": []string{"CodeableConcept", "Address", "Reference"}, "AuditEvent.occurred": []string{"Period", "DateTime"}, "CommunicationRequest.payload.content": []string{"Attachment", "Reference", "CodeableConcept"}, "RequestOrchestration.action.definition": []string{"Canonical", "Uri"}, "Observation.instantiates": []string{"Canonical", "Reference"}, "SubstanceDefinition.property.value": []string{"CodeableConcept", "Quantity", "Date", "Boolean", "Attachment"}, "Provenance.occurred": []string{"Period", "DateTime"}, "QuestionnaireResponse.item.answer.value": []string{"Boolean", "Decimal", "Integer", "Date", "DateTime", "Time", "String", "Uri", "Attachment", "Coding", "Quantity", "Reference"}, "RiskAssessment.occurrence": []string{"DateTime", "Period"}, "DataRequirement.valueFilter.value": []string{"DateTime", "Period", "Duration"}, "ActivityDefinition.product": []string{"Reference", "CodeableConcept"}, "AllergyIntolerance.onset": []string{"DateTime", "Age", "Period", "Range", "String"}, "ExplanationOfBenefit.benefitBalance.financial.used": []string{"UnsignedInt", "Money"}, "Procedure.reported": []string{"Boolean", "Reference"}, "RiskAssessment.prediction.when": []string{"Period", "Range"}, "SearchParameter.versionAlgorithm": []string{"String", "Coding"}, "SubstanceDefinition.relationship.amount": []string{"Quantity", "Ratio", "String"}, "AdverseEvent.contributingFactor.item": []string{"Reference", "CodeableConcept"}, "PaymentReconciliation.allocation.targetItem": []string{"String", "Identifier", "PositiveInt"}, "Person.deceased": []string{"Boolean", "DateTime"}, "SubscriptionTopic.versionAlgorithm": []string{"String", "Coding"}, "Group.characteristic.value": []string{"CodeableConcept", "Boolean", "Quantity", "Range", "Reference"}, "Library.versionAlgorithm": []string{"String", "Coding"}, "MetadataResource.versionAlgorithm": []string{"String", "Coding"}, "ElementDefinition.defaultValue": []string{"Base64Binary", "Boolean", "Canonical", "Code", "Date", "DateTime", "Decimal", "Id", "Instant", "Integer", "Integer64", "Markdown", "Oid", "PositiveInt", "String", "Time", "UnsignedInt", "Uri", "Url", "Uuid", "Address", "Age", "Annotation", "Attachment", "CodeableConcept", "CodeableReference", "Coding", "ContactPoint", "Count", "Distance", "Duration", "HumanName", "Identifier", "Money", "Period", "Quantity", "Range", "Ratio", "RatioRange", "Reference", "SampledData", "Signature", "Timing", "ContactDetail", "DataRequirement", "Expression", "ParameterDefinition", "RelatedArtifact", "TriggerDefinition", "UsageContext", "Availability", "ExtendedContactDetail", "Dosage", "Meta"}, "Condition.onset": []string{"DateTime", "Age", "Period", "Range", "String"}, "CoverageEligibilityRequest.serviced": []string{"Date", "Period"}, "Device.property.value": []string{"Quantity", "CodeableConcept", "String", "Boolean", "Integer", "Range", "Attachment"}, "FamilyMemberHistory.procedure.performed": []string{"Age", "Range", "Period", "String", "DateTime"}, "Transport.output.value": []string{"Base64Binary", "Boolean", "Canonical", "Code", "Date", "DateTime", "Decimal", "Id", "Instant", "Integer", "Integer64", "Markdown", "Oid", "PositiveInt", "String", "Time", "UnsignedInt", "Uri", "Url", "Uuid", "Address", "Age", "Annotation", "Attachment", "CodeableConcept", "CodeableReference", "Coding", "ContactPoint", "Count", "Distance", "Duration", "HumanName", "Identifier", "Money", "Period", "Quantity", "Range", "Ratio", "RatioRange", "Reference", "SampledData", "Signature", "Timing", "ContactDetail", "DataRequirement", "Expression", "ParameterDefinition", "RelatedArtifact", "TriggerDefinition", "UsageContext", "Availability", "ExtendedContactDetail", "Dosage", "Meta"}, "EvidenceVariable.characteristic.definitionByTypeAndValue.value": []string{"CodeableConcept", "Boolean", "Quantity", "Range", "Reference", "Id"}, "MessageHeader.event": []string{"Coding", "Canonical"}, "Observation.value": []string{"Quantity", "CodeableConcept", "String", "Boolean", "Integer", "Range", "Ratio", "SampledData", "Time", "DateTime", "Period", "Attachment", "Reference"}, "PlanDefinition.asNeeded": []string{"Boolean", "CodeableConcept"}, "ServiceRequest.patientInstruction.instruction": []string{"Markdown", "Reference"}, "ServiceRequest.asNeeded": []string{"Boolean", "CodeableConcept"}, "ElementDefinition.minValue": []string{"Date", "DateTime", "Instant", "Time", "Decimal", "Integer", "Integer64", "PositiveInt", "UnsignedInt", "Quantity"}, "ClinicalUseDefinition.interaction.interactant.item": []string{"Reference", "CodeableConcept"}, "CoverageEligibilityResponse.insurance.item.benefit.allowed": []string{"UnsignedInt", "String", "Money"}, "ExplanationOfBenefit.supportingInfo.timing": []string{"Date", "Period"}, "Ingredient.substance.strength.referenceStrength.strength": []string{"Ratio", "RatioRange", "Quantity"}, "Requirements.versionAlgorithm": []string{"String", "Coding"}, "ConceptMap.group.element.target.property.value": []string{"Coding", "String", "Integer", "Boolean", "DateTime", "Decimal", "Code"}, "DiagnosticReport.effective": []string{"DateTime", "Period"}, "Evidence.citeAs": []string{"Reference", "Markdown"}, "Observation.component.value": []string{"Quantity", "CodeableConcept", "String", "Boolean", "Integer", "Range", "Ratio", "SampledData", "Time", "DateTime", "Period", "Attachment", "Reference"}, "PlanDefinition.action.subject": []string{"CodeableConcept", "Reference", "Canonical"}, "Goal.target.due": []string{"Date", "Duration"}, "StructureMap.group.rule.target.parameter.value": []string{"Id", "String", "Boolean", "Integer", "Decimal", "Date", "Time", "DateTime"}, "ActivityDefinition.asNeeded": []string{"Boolean", "CodeableConcept"}, "ActorDefinition.versionAlgorithm": []string{"String", "Coding"}, "AdverseEvent.supportingInfo.item": []string{"Reference", "CodeableConcept"}, "DetectedIssue.identified": []string{"DateTime", "Period"}, "EventDefinition.versionAlgorithm": []string{"String", "Coding"}, "DeviceRequest.parameter.value": []string{"CodeableConcept", "Quantity", "Range", "Boolean"}, "FamilyMemberHistory.deceased": []string{"Boolean", "Age", "Range", "Date", "String"}, "ServiceRequest.orderDetail.parameter.value": []string{"Quantity", "Ratio", "Range", "Boolean", "CodeableConcept", "String", "Period"}, "StructureDefinition.versionAlgorithm": []string{"String", "Coding"}, "ActivityDefinition.subject": []string{"CodeableConcept", "Reference", "Canonical"}, "Claim.item.serviced": []string{"Date", "Period"}, "CommunicationRequest.occurrence": []string{"DateTime", "Period"}, "Measure.group.subject": []string{"CodeableConcept", "Reference"}, "NutritionIntake.reported": []string{"Boolean", "Reference"}, "Condition.abatement": []string{"DateTime", "Age", "Period", "Range", "String"}, "Coverage.costToBeneficiary.value": []string{"Quantity", "Money"}, "GuidanceResponse.module": []string{"Uri", "Canonical", "CodeableConcept"}, "StructureMap.versionAlgorithm": []string{"String", "Coding"}, "Dosage.doseAndRate.dose": []string{"Range", "Quantity"}, "CoverageEligibilityResponse.event.when": []string{"DateTime", "Period"}, "FamilyMemberHistory.age": []string{"Age", "Range", "String"}, "Parameters.parameter.value": []string{"Base64Binary", "Boolean", "Canonical", "Code", "Date", "DateTime", "Decimal", "Id", "Instant", "Integer", "Integer64", "Markdown", "Oid", "PositiveInt", "String", "Time", "UnsignedInt", "Uri", "Url", "Uuid", "Address", "Age", "Annotation", "Attachment", "CodeableConcept", "CodeableReference", "Coding", "ContactPoint", "Count", "Distance", "Duration", "HumanName", "Identifier", "Money", "Period", "Quantity", "Range", "Ratio", "RatioRange", "Reference", "SampledData", "Signature", "Timing", "ContactDetail", "DataRequirement", "Expression", "ParameterDefinition", "RelatedArtifact", "TriggerDefinition", "UsageContext", "Availability", "ExtendedContactDetail", "Dosage", "Meta"}, "DataRequirement.dateFilter.value": []string{"DateTime", "Period", "Duration"}, "CompartmentDefinition.versionAlgorithm": []string{"String", "Coding"}, "PlanDefinition.goal.target.detail": []string{"Quantity", "Range", "CodeableConcept", "String", "Boolean", "Integer", "Ratio"}, "SupplyDelivery.suppliedItem.item": []string{"CodeableConcept", "Reference"}, "ProductShelfLife.period": []string{"Duration", "String"}, "MessageDefinition.versionAlgorithm": []string{"String", "Coding"}, "SpecimenDefinition.subject": []string{"CodeableConcept", "Reference"}, "TerminologyCapabilities.versionAlgorithm": []string{"String", "Coding"}, "Questionnaire.item.answerOption.value": []string{"Integer", "Date", "Time", "String", "Coding", "Reference"}, "Specimen.collection.fastingStatus": []string{"CodeableConcept", "Duration"}, "Task.output.value": []string{"Base64Binary", "Boolean", "Canonical", "Code", "Date", "DateTime", "Decimal", "Id", "Instant", "Integer", "Integer64", "Markdown", "Oid", "PositiveInt", "String", "Time", "UnsignedInt", "Uri", "Url", "Uuid", "Address", "Age", "Annotation", "Attachment", "CodeableConcept", "CodeableReference", "Coding", "ContactPoint", "Count", "Distance", "Duration", "HumanName", "Identifier", "Money", "Period", "Quantity", "Range", "Ratio", "RatioRange", "Reference", "SampledData", "Signature", "Timing", "ContactDetail", "DataRequirement", "Expression", "ParameterDefinition", "RelatedArtifact", "TriggerDefinition", "UsageContext", "Availability", "ExtendedContactDetail", "Dosage", "Meta"}, "ClaimResponse.addItem.location": []string{"CodeableConcept", "Address", "Reference"}, "ConceptMap.versionAlgorithm": []string{"String", "Coding"}, "Contract.legallyBinding": []string{"Attachment", "Reference"}, "ImplementationGuide.versionAlgorithm": []string{"String", "Coding"}, "MedicationKnowledge.indicationGuideline.dosingGuideline.patientCharacteristic.value": []string{"CodeableConcept", "Quantity", "Range"}, "AdministrableProductDefinition.property.value": []string{"CodeableConcept", "Quantity", "Date", "Boolean", "Markdown", "Attachment", "Reference"}, "ClinicalUseDefinition.indication.duration": []string{"Range", "String"}, "CoverageEligibilityRequest.event.when": []string{"DateTime", "Period"}, "ValueSet.expansion.contains.property.subProperty.value": []string{"Code", "Coding", "String", "Integer", "Boolean", "DateTime", "Decimal"}, "VirtualServiceDetail.address": []string{"Url", "String", "ContactPoint", "ExtendedContactDetail"}, "ActivityDefinition.versionAlgorithm": []string{"String", "Coding"}, "ChargeItemDefinition.versionAlgorithm": []string{"String", "Coding"}, "Citation.versionAlgorithm": []string{"String", "Coding"}, "Task.input.value": []string{"Base64Binary", "Boolean", "Canonical", "Code", "Date", "DateTime", "Decimal", "Id", "Instant", "Integer", "Integer64", "Markdown", "Oid", "PositiveInt", "String", "Time", "UnsignedInt", "Uri", "Url", "Uuid", "Address", "Age", "Annotation", "Attachment", "CodeableConcept", "CodeableReference", "Coding", "ContactPoint", "Count", "Distance", "Duration", "HumanName", "Identifier", "Money", "Period", "Quantity", "Range", "Ratio", "RatioRange", "Reference", "SampledData", "Signature", "Timing", "ContactDetail", "DataRequirement", "Expression", "ParameterDefinition", "RelatedArtifact", "TriggerDefinition", "UsageContext", "Availability", "ExtendedContactDetail", "Dosage", "Meta"}, "SupplyDelivery.occurrence": []string{"DateTime", "Period", "Timing"}, "TestScript.setup.action.assert.requirement.link": []string{"Uri", "Canonical"}, "CoverageEligibilityResponse.serviced": []string{"Date", "Period"}, "Invoice.period": []string{"Date", "Period"}, "MedicationKnowledge.storageGuideline.environmentalSetting.value": []string{"Quantity", "Range", "CodeableConcept"}, "MedicationRequest.substitution.allowed": []string{"Boolean", "CodeableConcept"}, "Observation.effective": []string{"DateTime", "Period", "Timing", "Instant"}, "CapabilityStatement.versionAlgorithm": []string{"String", "Coding"}, "MedicationKnowledge.cost.cost": []string{"Money", "CodeableConcept"}, "PlanDefinition.action.relatedAction.offset": []string{"Duration", "Range"}, "Specimen.collection.collected": []string{"DateTime", "Period"}, "EvidenceReport.subject.characteristic.value": []string{"Reference", "CodeableConcept", "Boolean", "Quantity", "Range"}, "ExplanationOfBenefit.supportingInfo.value": []string{"Boolean", "String", "Quantity", "Attachment", "Reference", "Identifier"}, "ExplanationOfBenefit.benefitBalance.financial.allowed": []string{"UnsignedInt", "String", "Money"}, "PlanDefinition.subject": []string{"CodeableConcept", "Reference", "Canonical"}, "PlanDefinition.action.timing": []string{"Age", "Duration", "Range", "Timing"}, "Medication.ingredient.strength": []string{"Ratio", "CodeableConcept", "Quantity"}, "Dosage.doseAndRate.rate": []string{"Ratio", "Range", "Quantity"}, "Claim.procedure.procedure": []string{"CodeableConcept", "Reference"}, "Claim.accident.location": []string{"Address", "Reference"}, "DocumentReference.content.profile.value": []string{"Coding", "Uri", "Canonical"}, "EvidenceVariable.characteristic.duration": []string{"Quantity", "Range"}, "Transport.input.value": []string{"Base64Binary", "Boolean", "Canonical", "Code", "Date", "DateTime", "Decimal", "Id", "Instant", "Integer", "Integer64", "Markdown", "Oid", "PositiveInt", "String", "Time", "UnsignedInt", "Uri", "Url", "Uuid", "Address", "Age", "Annotation", "Attachment", "CodeableConcept", "CodeableReference", "Coding", "ContactPoint", "Count", "Distance", "Duration", "HumanName", "Identifier", "Money", "Period", "Quantity", "Range", "Ratio", "RatioRange", "Reference", "SampledData", "Signature", "Timing", "ContactDetail", "DataRequirement", "Expression", "ParameterDefinition", "RelatedArtifact", "TriggerDefinition", "UsageContext", "Availability", "ExtendedContactDetail", "Dosage", "Meta"}, "DataRequirement.subject": []string{"CodeableConcept", "Reference"}, "Contract.legal.content": []string{"Attachment", "Reference"}, "EvidenceVariable.characteristic.instances": []string{"Quantity", "Range"}, "NamingSystem.versionAlgorithm": []string{"String", "Coding"}, "RequestOrchestration.action.participant.actor": []string{"Canonical", "Reference"}, "ElementDefinition.fixed": []string{"Base64Binary", "Boolean", "Canonical", "Code", "Date", "DateTime", "Decimal", "Id", "Instant", "Integer", "Integer64", "Markdown", "Oid", "PositiveInt", "String", "Time", "UnsignedInt", "Uri", "Url", "Uuid", "Address", "Age", "Annotation", "Attachment", "CodeableConcept", "CodeableReference", "Coding", "ContactPoint", "Count", "Distance", "Duration", "HumanName", "Identifier", "Money", "Period", "Quantity", "Range", "Ratio", "RatioRange", "Reference", "SampledData", "Signature", "Timing", "ContactDetail", "DataRequirement", "Expression", "ParameterDefinition", "RelatedArtifact", "TriggerDefinition", "UsageContext", "Availability", "ExtendedContactDetail", "Dosage", "Meta"}, "ElementDefinition.example.value": []string{"Base64Binary", "Boolean", "Canonical", "Code", "Date", "DateTime", "Decimal", "Id", "Instant", "Integer", "Integer64", "Markdown", "Oid", "PositiveInt", "String", "Time", "UnsignedInt", "Uri", "Url", "Uuid", "Address", "Age", "Annotation", "Attachment", "CodeableConcept", "CodeableReference", "Coding", "ContactPoint", "Count", "Distance", "Duration", "HumanName", "Identifier", "Money", "Period", "Quantity", "Range", "Ratio", "RatioRange", "Reference", "SampledData", "Signature", "Timing", "ContactDetail", "DataRequirement", "Expression", "ParameterDefinition", "RelatedArtifact", "TriggerDefinition", "UsageContext", "Availability", "ExtendedContactDetail", "Dosage", "Meta"}, "Claim.supportingInfo.value": []string{"Boolean", "String", "Quantity", "Attachment", "Reference", "Identifier"}, "NutritionProduct.characteristic.value": []string{"CodeableConcept", "String", "Quantity", "Base64Binary", "Attachment", "Boolean"}, "PackagedProductDefinition.packaging.property.value": []string{"CodeableConcept", "Quantity", "Date", "Boolean", "Attachment"}, "SubstanceDefinition.relationship.substanceDefinition": []string{"Reference", "CodeableConcept"}, "Contract.term.asset.valuedItem.entity": []string{"CodeableConcept", "Reference"}, "DeviceUsage.timing": []string{"Timing", "Period", "DateTime"}, "ExplanationOfBenefit.event.when": []string{"DateTime", "Period"}, "GraphDefinition.versionAlgorithm": []string{"String", "Coding"}, "MeasureReport.group.stratifier.stratum.measureScore": []string{"Quantity", "DateTime", "CodeableConcept", "Period", "Range", "Duration"}, "Timing.repeat.bounds": []string{"Duration", "Range", "Period"}, "CanonicalResource.versionAlgorithm": []string{"String", "Coding"}, "ClaimResponse.addItem.serviced": []string{"Date", "Period"}, "DeviceDefinition.property.value": []string{"Quantity", "CodeableConcept", "String", "Boolean", "Integer", "Range", "Attachment"}, "ActivityDefinition.timing": []string{"Timing", "Age", "Range", "Duration"}, "AdverseEvent.preventiveAction.item": []string{"Reference", "CodeableConcept"}, "Evidence.versionAlgorithm": []string{"String", "Coding"}, "AdverseEvent.occurrence": []string{"DateTime", "Period", "Timing"}, "MessageHeader.source.endpoint": []string{"Url", "Reference"}, "RequestOrchestration.action.timing": []string{"DateTime", "Age", "Period", "Duration", "Range", "Timing"}, "TestPlan.testCase.testData.source": []string{"String", "Reference"}, "Annotation.author": []string{"Reference", "String"}, "ConditionDefinition.precondition.value": []string{"CodeableConcept", "Quantity"}, "MedicationKnowledge.medicineClassification.source": []string{"String", "Uri"}, "Contract.term.offer.answer.value": []string{"Boolean", "Decimal", "Integer", "Date", "DateTime", "Time", "String", "Uri", "Attachment", "Coding", "Quantity", "Reference"}, "GenomicStudy.analysis.input.generatedBy": []string{"Identifier", "Reference"}, "Extension.value": []string{"Base64Binary", "Boolean", "Canonical", "Code", "Date", "DateTime", "Decimal", "Id", "Instant", "Integer", "Integer64", "Markdown", "Oid", "PositiveInt", "String", "Time", "UnsignedInt", "Uri", "Url", "Uuid", "Address", "Age", "Annotation", "Attachment", "CodeableConcept", "CodeableReference", "Coding", "ContactPoint", "Count", "Distance", "Duration", "HumanName", "Identifier", "Money", "Period", "Quantity", "Range", "Ratio", "RatioRange", "Reference", "SampledData", "Signature", "Timing", "ContactDetail", "DataRequirement", "Expression", "ParameterDefinition", "RelatedArtifact", "TriggerDefinition", "UsageContext", "Availability", "ExtendedContactDetail", "Dosage", "Meta"}, "AdverseEvent.suspectEntity.instance": []string{"CodeableConcept", "Reference"}, "ConceptMap.targetScope": []string{"Uri", "Canonical"}, "ImplementationGuide.definition.page.source": []string{"Url", "String", "Markdown"}, "SpecimenDefinition.typeTested.container.additive.additive": []string{"CodeableConcept", "Reference"}, "AuditEvent.agent.network": []string{"Reference", "Uri", "String"}, "ManufacturedItemDefinition.property.value": []string{"CodeableConcept", "Quantity", "Date", "Boolean", "Markdown", "Attachment", "Reference"}, "ClinicalImpression.effective": []string{"DateTime", "Period"}, "Practitioner.deceased": []string{"Boolean", "DateTime"}, "SupplyRequest.parameter.value": []string{"CodeableConcept", "Quantity", "Range", "Boolean"}, "DeviceRequest.occurrence": []string{"DateTime", "Period", "Timing"}, "Immunization.occurrence": []string{"DateTime", "String"}, "Library.subject": []string{"CodeableConcept", "Reference"}, "Measure.versionAlgorithm": []string{"String", "Coding"}, "MedicationAdministration.dosage.rate": []string{"Ratio", "Quantity"}, "CoverageEligibilityRequest.item.diagnosis.diagnosis": []string{"CodeableConcept", "Reference"}, "RegulatedAuthorization.case.date": []string{"Period", "DateTime"}, "ElementDefinition.maxValue": []string{"Date", "DateTime", "Instant", "Time", "Decimal", "Integer", "Integer64", "PositiveInt", "UnsignedInt", "Quantity"}, "MedicationKnowledge.definitional.drugCharacteristic.value": []string{"CodeableConcept", "String", "Quantity", "Base64Binary", "Attachment"}, "MedicinalProductDefinition.characteristic.value": []string{"CodeableConcept", "Markdown", "Quantity", "Integer", "Date", "Boolean", "Attachment"}, "AuditEvent.entity.detail.value": []string{"Quantity", "CodeableConcept", "String", "Boolean", "Integer", "Range", "Ratio", "Time", "DateTime", "Period", "Base64Binary"}, "MeasureReport.group.stratifier.stratum.value": []string{"CodeableConcept", "Boolean", "Quantity", "Range", "Reference"}, "MedicationKnowledge.definitional.ingredient.strength": []string{"Ratio", "CodeableConcept", "Quantity"}, "ExplanationOfBenefit.addItem.serviced": []string{"Date", "Period"}, "TestReport.setup.action.assert.requirement.link": []string{"Uri", "Canonical"}, "ConceptMap.group.element.target.dependsOn.value": []string{"Code", "Coding", "String", "Boolean", "Quantity"}, "Contract.topic": []string{"CodeableConcept", "Reference"}, "ExplanationOfBenefit.diagnosis.diagnosis": []string{"CodeableConcept", "Reference"}, "ExplanationOfBenefit.accident.location": []string{"Address", "Reference"}, "ExplanationOfBenefit.item.serviced": []string{"Date", "Period"}, "Communication.payload.content": []string{"Attachment", "Reference", "CodeableConcept"}, "OperationDefinition.versionAlgorithm": []string{"String", "Coding"}, "Patient.deceased": []string{"Boolean", "DateTime"}, "TestScript.versionAlgorithm": []string{"String", "Coding"}, "ElementDefinition.pattern": []string{"Base64Binary", "Boolean", "Canonical", "Code", "Date", "DateTime", "Decimal", "Id", "Instant", "Integer", "Integer64", "Markdown", "Oid", "PositiveInt", "String", "Time", "UnsignedInt", "Uri", "Url", "Uuid", "Address", "Age", "Annotation", "Attachment", "CodeableConcept", "CodeableReference", "Coding", "ContactPoint", "Count", "Distance", "Duration", "HumanName", "Identifier", "Money", "Period", "Quantity", "Range", "Ratio", "RatioRange", "Reference", "SampledData", "Signature", "Timing", "ContactDetail", "DataRequirement", "Expression", "ParameterDefinition", "RelatedArtifact", "TriggerDefinition", "UsageContext", "Availability", "ExtendedContactDetail", "Dosage", "Meta"}, "ExplanationOfBenefit.addItem.location": []string{"CodeableConcept", "Address", "Reference"}, "Questionnaire.versionAlgorithm": []string{"String", "Coding"}, "MeasureReport.group.stratifier.stratum.component.value": []string{"CodeableConcept", "Boolean", "Quantity", "Range", "Reference"}, "MessageDefinition.event": []string{"Coding", "Uri"}, "Questionnaire.item.initial.value": []string{"Boolean", "Decimal", "Integer", "Date", "DateTime", "Time", "String", "Uri", "Attachment", "Coding", "Quantity", "Reference"}, "SupplyRequest.occurrence": []string{"DateTime", "Period", "Timing"}, "ConceptMap.sourceScope": []string{"Uri", "Canonical"}, "NutritionOrder.enteralFormula.administration.rate": []string{"Quantity", "Ratio"}, "RiskAssessment.prediction.probability": []string{"Decimal", "Range"}, "TestPlan.testCase.testRun.script.source": []string{"String", "Reference"}, "Goal.start": []string{"Date", "CodeableConcept"}, "Patient.multipleBirth": []string{"Boolean", "Integer"}, "Substance.ingredient.substance": []string{"CodeableConcept", "Reference"}, "SubstanceDefinition.moiety.amount": []string{"Quantity", "String"}, "ValueSet.versionAlgorithm": []string{"String", "Coding"}, "Contract.term.action.occurrence": []string{"DateTime", "Period", "Timing"}, "ObservationDefinition.versionAlgorithm": []string{"String", "Coding"}, "Claim.event.when": []string{"DateTime", "Period"}, "Contract.term.topic": []string{"CodeableConcept", "Reference"}, "ExampleScenario.versionAlgorithm": []string{"String", "Coding"}, "Specimen.processing.time": []string{"DateTime", "Period"}, "ChargeItem.occurrence": []string{"DateTime", "Period", "Timing"}, "Claim.diagnosis.diagnosis": []string{"CodeableConcept", "Reference"}, "CodeSystem.versionAlgorithm": []string{"String", "Coding"}, "MessageHeader.destination.endpoint": []string{"Url", "Reference"}, "Questionnaire.item.enableWhen.answer": []string{"Boolean", "Decimal", "Integer", "Date", "DateTime", "Time", "String", "Coding", "Quantity", "Reference"}, "CareTeam.participant.coverage": []string{"Period", "Timing"}, "UsageContext.value": []string{"CodeableConcept", "Quantity", "Range", "Reference"}, "EvidenceVariable.characteristic.timeFromEvent.event": []string{"CodeableConcept", "Reference", "DateTime", "Id"}, "Invoice.lineItem.chargeItem": []string{"Reference", "CodeableConcept"}, "RequestOrchestration.action.relatedAction.offset": []string{"Duration", "Range"}, "SubstanceReferenceInformation.target.amount": []string{"Quantity", "Range", "String"}, "ValueSet.expansion.parameter.value": []string{"String", "Boolean", "Integer", "Decimal", "Uri", "Code", "DateTime"}, "ExplanationOfBenefit.item.location": []string{"CodeableConcept", "Address", "Reference"}, "Ingredient.substance.strength.presentation": []string{"Ratio", "RatioRange", "CodeableConcept", "Quantity"}, "InventoryItem.characteristic.value": []string{"String", "Integer", "Decimal", "Boolean", "Url", "DateTime", "Quantity", "Range", "Ratio", "Annotation", "Address", "Duration", "CodeableConcept"}, "Measure.subject": []string{"CodeableConcept", "Reference"}, "MedicationAdministration.occurence": []string{"DateTime", "Period", "Timing"}, "TriggerDefinition.timing": []string{"Timing", "Reference", "Date", "DateTime"}, "ClaimResponse.event.when": []string{"DateTime", "Period"}, "PlanDefinition.versionAlgorithm": []string{"String", "Coding"}, "FamilyMemberHistory.condition.onset": []string{"Age", "Range", "Period", "String"}, "MedicationStatement.effective": []string{"DateTime", "Period", "Timing"}, "ValueSet.expansion.contains.property.value": []string{"Code", "Coding", "String", "Integer", "Boolean", "DateTime", "Decimal"}, "ConditionDefinition.versionAlgorithm": []string{"String", "Coding"}, "CoverageEligibilityResponse.insurance.item.benefit.used": []string{"UnsignedInt", "String", "Money"}, "MolecularSequence.relative.startingSequence.sequence": []string{"CodeableConcept", "String", "Reference"}, "ServiceRequest.quantity": []string{"Quantity", "Ratio", "Range"}, "SpecimenDefinition.versionAlgorithm": []string{"String", "Coding"}}
